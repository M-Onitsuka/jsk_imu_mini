// Generated by gencpp from file jsk_imu_mini_msgs/Imu.msg
// DO NOT EDIT!


#ifndef JSK_IMU_MINI_MSGS_MESSAGE_IMU_H
#define JSK_IMU_MINI_MSGS_MESSAGE_IMU_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Quaternion.h>

namespace jsk_imu_mini_msgs
{
template <class ContainerAllocator>
struct Imu_
{
  typedef Imu_<ContainerAllocator> Type;

  Imu_()
    : stamp()
    , acc_data()
    , gyro_data()
    , mag_data()
    , angles()
    , quaternion()  {
      acc_data.assign(0.0);

      gyro_data.assign(0.0);

      mag_data.assign(0.0);

      angles.assign(0.0);
  }
  Imu_(const ContainerAllocator& _alloc)
    : stamp()
    , acc_data()
    , gyro_data()
    , mag_data()
    , angles()
    , quaternion(_alloc)  {
  (void)_alloc;
      acc_data.assign(0.0);

      gyro_data.assign(0.0);

      mag_data.assign(0.0);

      angles.assign(0.0);
  }



   typedef ros::Time _stamp_type;
  _stamp_type stamp;

   typedef boost::array<float, 3>  _acc_data_type;
  _acc_data_type acc_data;

   typedef boost::array<float, 3>  _gyro_data_type;
  _gyro_data_type gyro_data;

   typedef boost::array<float, 3>  _mag_data_type;
  _mag_data_type mag_data;

   typedef boost::array<float, 3>  _angles_type;
  _angles_type angles;

   typedef  ::geometry_msgs::Quaternion_<ContainerAllocator>  _quaternion_type;
  _quaternion_type quaternion;





  typedef boost::shared_ptr< ::jsk_imu_mini_msgs::Imu_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::jsk_imu_mini_msgs::Imu_<ContainerAllocator> const> ConstPtr;

}; // struct Imu_

typedef ::jsk_imu_mini_msgs::Imu_<std::allocator<void> > Imu;

typedef boost::shared_ptr< ::jsk_imu_mini_msgs::Imu > ImuPtr;
typedef boost::shared_ptr< ::jsk_imu_mini_msgs::Imu const> ImuConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::jsk_imu_mini_msgs::Imu_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::jsk_imu_mini_msgs::Imu_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace jsk_imu_mini_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'jsk_imu_mini_msgs': ['/home/m-onitsuka/catkin_ws/src/jsk-ros-pkg/misc/jsk_imu_mini/jsk_imu_mini_msgs/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::jsk_imu_mini_msgs::Imu_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::jsk_imu_mini_msgs::Imu_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::jsk_imu_mini_msgs::Imu_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::jsk_imu_mini_msgs::Imu_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::jsk_imu_mini_msgs::Imu_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::jsk_imu_mini_msgs::Imu_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::jsk_imu_mini_msgs::Imu_<ContainerAllocator> >
{
  static const char* value()
  {
    return "aa689a416868cb9d76db0c6fd3fe0d4d";
  }

  static const char* value(const ::jsk_imu_mini_msgs::Imu_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xaa689a416868cb9dULL;
  static const uint64_t static_value2 = 0x76db0c6fd3fe0d4dULL;
};

template<class ContainerAllocator>
struct DataType< ::jsk_imu_mini_msgs::Imu_<ContainerAllocator> >
{
  static const char* value()
  {
    return "jsk_imu_mini_msgs/Imu";
  }

  static const char* value(const ::jsk_imu_mini_msgs::Imu_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::jsk_imu_mini_msgs::Imu_<ContainerAllocator> >
{
  static const char* value()
  {
    return "time stamp\n\
float32[3] acc_data\n\
float32[3] gyro_data\n\
float32[3] mag_data\n\
float32[3] angles\n\
geometry_msgs/Quaternion quaternion\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
";
  }

  static const char* value(const ::jsk_imu_mini_msgs::Imu_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::jsk_imu_mini_msgs::Imu_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.stamp);
      stream.next(m.acc_data);
      stream.next(m.gyro_data);
      stream.next(m.mag_data);
      stream.next(m.angles);
      stream.next(m.quaternion);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Imu_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::jsk_imu_mini_msgs::Imu_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::jsk_imu_mini_msgs::Imu_<ContainerAllocator>& v)
  {
    s << indent << "stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.stamp);
    s << indent << "acc_data[]" << std::endl;
    for (size_t i = 0; i < v.acc_data.size(); ++i)
    {
      s << indent << "  acc_data[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.acc_data[i]);
    }
    s << indent << "gyro_data[]" << std::endl;
    for (size_t i = 0; i < v.gyro_data.size(); ++i)
    {
      s << indent << "  gyro_data[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.gyro_data[i]);
    }
    s << indent << "mag_data[]" << std::endl;
    for (size_t i = 0; i < v.mag_data.size(); ++i)
    {
      s << indent << "  mag_data[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.mag_data[i]);
    }
    s << indent << "angles[]" << std::endl;
    for (size_t i = 0; i < v.angles.size(); ++i)
    {
      s << indent << "  angles[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.angles[i]);
    }
    s << indent << "quaternion: ";
    s << std::endl;
    Printer< ::geometry_msgs::Quaternion_<ContainerAllocator> >::stream(s, indent + "  ", v.quaternion);
  }
};

} // namespace message_operations
} // namespace ros

#endif // JSK_IMU_MINI_MSGS_MESSAGE_IMU_H
