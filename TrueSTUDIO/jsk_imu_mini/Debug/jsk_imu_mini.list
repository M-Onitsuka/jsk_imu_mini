
jsk_imu_mini.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000087f4  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d00  080089bc  080089bc  000189bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000108  080096bc  080096bc  000196bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000388  080097c4  080097c4  000197c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .init_array   00000008  08009b4c  08009b4c  00019b4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  08009b54  08009b54  00019b54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         00000518  20000000  08009b58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          0000394c  20000518  0800a070  00020518  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20003e64  0800a070  00023e64  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020518  2**0
                  CONTENTS, READONLY
 11 .debug_line   0000a11b  00000000  00000000  00020548  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_info   00035d80  00000000  00000000  0002a663  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000571a  00000000  00000000  000603e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001030  00000000  00000000  00065b00  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001848  00000000  00000000  00066b30  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    000092ae  00000000  00000000  00068378  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    0000fccb  00000000  00000000  00071626  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      000000fa  00000000  00000000  000812f1  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000464c  00000000  00000000  000813ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .stab         0000003c  00000000  00000000  00085a38  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stabstr      00000076  00000000  00000000  00085a74  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000518 	.word	0x20000518
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080089a4 	.word	0x080089a4

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	2000051c 	.word	0x2000051c
 8000204:	080089a4 	.word	0x080089a4

08000208 <strcmp>:
 8000208:	f810 2b01 	ldrb.w	r2, [r0], #1
 800020c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000210:	2a01      	cmp	r2, #1
 8000212:	bf28      	it	cs
 8000214:	429a      	cmpcs	r2, r3
 8000216:	d0f7      	beq.n	8000208 <strcmp>
 8000218:	1ad0      	subs	r0, r2, r3
 800021a:	4770      	bx	lr

0800021c <strlen>:
 800021c:	4603      	mov	r3, r0
 800021e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000222:	2a00      	cmp	r2, #0
 8000224:	d1fb      	bne.n	800021e <strlen+0x2>
 8000226:	1a18      	subs	r0, r3, r0
 8000228:	3801      	subs	r0, #1
 800022a:	4770      	bx	lr

0800022c <__aeabi_uldivmod>:
 800022c:	b953      	cbnz	r3, 8000244 <__aeabi_uldivmod+0x18>
 800022e:	b94a      	cbnz	r2, 8000244 <__aeabi_uldivmod+0x18>
 8000230:	2900      	cmp	r1, #0
 8000232:	bf08      	it	eq
 8000234:	2800      	cmpeq	r0, #0
 8000236:	bf1c      	itt	ne
 8000238:	f04f 31ff 	movne.w	r1, #4294967295
 800023c:	f04f 30ff 	movne.w	r0, #4294967295
 8000240:	f001 b8f6 	b.w	8001430 <__aeabi_idiv0>
 8000244:	f1ad 0c08 	sub.w	ip, sp, #8
 8000248:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800024c:	f000 f806 	bl	800025c <__udivmoddi4>
 8000250:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000254:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000258:	b004      	add	sp, #16
 800025a:	4770      	bx	lr

0800025c <__udivmoddi4>:
 800025c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000260:	468c      	mov	ip, r1
 8000262:	460d      	mov	r5, r1
 8000264:	4604      	mov	r4, r0
 8000266:	9e08      	ldr	r6, [sp, #32]
 8000268:	2b00      	cmp	r3, #0
 800026a:	d151      	bne.n	8000310 <__udivmoddi4+0xb4>
 800026c:	428a      	cmp	r2, r1
 800026e:	4617      	mov	r7, r2
 8000270:	d96d      	bls.n	800034e <__udivmoddi4+0xf2>
 8000272:	fab2 fe82 	clz	lr, r2
 8000276:	f1be 0f00 	cmp.w	lr, #0
 800027a:	d00b      	beq.n	8000294 <__udivmoddi4+0x38>
 800027c:	f1ce 0c20 	rsb	ip, lr, #32
 8000280:	fa01 f50e 	lsl.w	r5, r1, lr
 8000284:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000288:	fa02 f70e 	lsl.w	r7, r2, lr
 800028c:	ea4c 0c05 	orr.w	ip, ip, r5
 8000290:	fa00 f40e 	lsl.w	r4, r0, lr
 8000294:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000298:	0c25      	lsrs	r5, r4, #16
 800029a:	fbbc f8fa 	udiv	r8, ip, sl
 800029e:	fa1f f987 	uxth.w	r9, r7
 80002a2:	fb0a cc18 	mls	ip, sl, r8, ip
 80002a6:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80002aa:	fb08 f309 	mul.w	r3, r8, r9
 80002ae:	42ab      	cmp	r3, r5
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x6c>
 80002b2:	19ed      	adds	r5, r5, r7
 80002b4:	f108 32ff 	add.w	r2, r8, #4294967295
 80002b8:	f080 8123 	bcs.w	8000502 <__udivmoddi4+0x2a6>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	f240 8120 	bls.w	8000502 <__udivmoddi4+0x2a6>
 80002c2:	f1a8 0802 	sub.w	r8, r8, #2
 80002c6:	443d      	add	r5, r7
 80002c8:	1aed      	subs	r5, r5, r3
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb5 f0fa 	udiv	r0, r5, sl
 80002d0:	fb0a 5510 	mls	r5, sl, r0, r5
 80002d4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002d8:	fb00 f909 	mul.w	r9, r0, r9
 80002dc:	45a1      	cmp	r9, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x98>
 80002e0:	19e4      	adds	r4, r4, r7
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e6:	f080 810a 	bcs.w	80004fe <__udivmoddi4+0x2a2>
 80002ea:	45a1      	cmp	r9, r4
 80002ec:	f240 8107 	bls.w	80004fe <__udivmoddi4+0x2a2>
 80002f0:	3802      	subs	r0, #2
 80002f2:	443c      	add	r4, r7
 80002f4:	eba4 0409 	sub.w	r4, r4, r9
 80002f8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002fc:	2100      	movs	r1, #0
 80002fe:	2e00      	cmp	r6, #0
 8000300:	d061      	beq.n	80003c6 <__udivmoddi4+0x16a>
 8000302:	fa24 f40e 	lsr.w	r4, r4, lr
 8000306:	2300      	movs	r3, #0
 8000308:	6034      	str	r4, [r6, #0]
 800030a:	6073      	str	r3, [r6, #4]
 800030c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000310:	428b      	cmp	r3, r1
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0xc8>
 8000314:	2e00      	cmp	r6, #0
 8000316:	d054      	beq.n	80003c2 <__udivmoddi4+0x166>
 8000318:	2100      	movs	r1, #0
 800031a:	e886 0021 	stmia.w	r6, {r0, r5}
 800031e:	4608      	mov	r0, r1
 8000320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000324:	fab3 f183 	clz	r1, r3
 8000328:	2900      	cmp	r1, #0
 800032a:	f040 808e 	bne.w	800044a <__udivmoddi4+0x1ee>
 800032e:	42ab      	cmp	r3, r5
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0xdc>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80fa 	bhi.w	800052c <__udivmoddi4+0x2d0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb65 0503 	sbc.w	r5, r5, r3
 800033e:	2001      	movs	r0, #1
 8000340:	46ac      	mov	ip, r5
 8000342:	2e00      	cmp	r6, #0
 8000344:	d03f      	beq.n	80003c6 <__udivmoddi4+0x16a>
 8000346:	e886 1010 	stmia.w	r6, {r4, ip}
 800034a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034e:	b912      	cbnz	r2, 8000356 <__udivmoddi4+0xfa>
 8000350:	2701      	movs	r7, #1
 8000352:	fbb7 f7f2 	udiv	r7, r7, r2
 8000356:	fab7 fe87 	clz	lr, r7
 800035a:	f1be 0f00 	cmp.w	lr, #0
 800035e:	d134      	bne.n	80003ca <__udivmoddi4+0x16e>
 8000360:	1beb      	subs	r3, r5, r7
 8000362:	0c3a      	lsrs	r2, r7, #16
 8000364:	fa1f fc87 	uxth.w	ip, r7
 8000368:	2101      	movs	r1, #1
 800036a:	fbb3 f8f2 	udiv	r8, r3, r2
 800036e:	0c25      	lsrs	r5, r4, #16
 8000370:	fb02 3318 	mls	r3, r2, r8, r3
 8000374:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000378:	fb0c f308 	mul.w	r3, ip, r8
 800037c:	42ab      	cmp	r3, r5
 800037e:	d907      	bls.n	8000390 <__udivmoddi4+0x134>
 8000380:	19ed      	adds	r5, r5, r7
 8000382:	f108 30ff 	add.w	r0, r8, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x132>
 8000388:	42ab      	cmp	r3, r5
 800038a:	f200 80d1 	bhi.w	8000530 <__udivmoddi4+0x2d4>
 800038e:	4680      	mov	r8, r0
 8000390:	1aed      	subs	r5, r5, r3
 8000392:	b2a3      	uxth	r3, r4
 8000394:	fbb5 f0f2 	udiv	r0, r5, r2
 8000398:	fb02 5510 	mls	r5, r2, r0, r5
 800039c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80003a0:	fb0c fc00 	mul.w	ip, ip, r0
 80003a4:	45a4      	cmp	ip, r4
 80003a6:	d907      	bls.n	80003b8 <__udivmoddi4+0x15c>
 80003a8:	19e4      	adds	r4, r4, r7
 80003aa:	f100 33ff 	add.w	r3, r0, #4294967295
 80003ae:	d202      	bcs.n	80003b6 <__udivmoddi4+0x15a>
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	f200 80b8 	bhi.w	8000526 <__udivmoddi4+0x2ca>
 80003b6:	4618      	mov	r0, r3
 80003b8:	eba4 040c 	sub.w	r4, r4, ip
 80003bc:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003c0:	e79d      	b.n	80002fe <__udivmoddi4+0xa2>
 80003c2:	4631      	mov	r1, r6
 80003c4:	4630      	mov	r0, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	f1ce 0420 	rsb	r4, lr, #32
 80003ce:	fa05 f30e 	lsl.w	r3, r5, lr
 80003d2:	fa07 f70e 	lsl.w	r7, r7, lr
 80003d6:	fa20 f804 	lsr.w	r8, r0, r4
 80003da:	0c3a      	lsrs	r2, r7, #16
 80003dc:	fa25 f404 	lsr.w	r4, r5, r4
 80003e0:	ea48 0803 	orr.w	r8, r8, r3
 80003e4:	fbb4 f1f2 	udiv	r1, r4, r2
 80003e8:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003ec:	fb02 4411 	mls	r4, r2, r1, r4
 80003f0:	fa1f fc87 	uxth.w	ip, r7
 80003f4:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003f8:	fb01 f30c 	mul.w	r3, r1, ip
 80003fc:	42ab      	cmp	r3, r5
 80003fe:	fa00 f40e 	lsl.w	r4, r0, lr
 8000402:	d909      	bls.n	8000418 <__udivmoddi4+0x1bc>
 8000404:	19ed      	adds	r5, r5, r7
 8000406:	f101 30ff 	add.w	r0, r1, #4294967295
 800040a:	f080 808a 	bcs.w	8000522 <__udivmoddi4+0x2c6>
 800040e:	42ab      	cmp	r3, r5
 8000410:	f240 8087 	bls.w	8000522 <__udivmoddi4+0x2c6>
 8000414:	3902      	subs	r1, #2
 8000416:	443d      	add	r5, r7
 8000418:	1aeb      	subs	r3, r5, r3
 800041a:	fa1f f588 	uxth.w	r5, r8
 800041e:	fbb3 f0f2 	udiv	r0, r3, r2
 8000422:	fb02 3310 	mls	r3, r2, r0, r3
 8000426:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800042a:	fb00 f30c 	mul.w	r3, r0, ip
 800042e:	42ab      	cmp	r3, r5
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x1e6>
 8000432:	19ed      	adds	r5, r5, r7
 8000434:	f100 38ff 	add.w	r8, r0, #4294967295
 8000438:	d26f      	bcs.n	800051a <__udivmoddi4+0x2be>
 800043a:	42ab      	cmp	r3, r5
 800043c:	d96d      	bls.n	800051a <__udivmoddi4+0x2be>
 800043e:	3802      	subs	r0, #2
 8000440:	443d      	add	r5, r7
 8000442:	1aeb      	subs	r3, r5, r3
 8000444:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000448:	e78f      	b.n	800036a <__udivmoddi4+0x10e>
 800044a:	f1c1 0720 	rsb	r7, r1, #32
 800044e:	fa22 f807 	lsr.w	r8, r2, r7
 8000452:	408b      	lsls	r3, r1
 8000454:	fa05 f401 	lsl.w	r4, r5, r1
 8000458:	ea48 0303 	orr.w	r3, r8, r3
 800045c:	fa20 fe07 	lsr.w	lr, r0, r7
 8000460:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000464:	40fd      	lsrs	r5, r7
 8000466:	ea4e 0e04 	orr.w	lr, lr, r4
 800046a:	fbb5 f9fc 	udiv	r9, r5, ip
 800046e:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000472:	fb0c 5519 	mls	r5, ip, r9, r5
 8000476:	fa1f f883 	uxth.w	r8, r3
 800047a:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800047e:	fb09 f408 	mul.w	r4, r9, r8
 8000482:	42ac      	cmp	r4, r5
 8000484:	fa02 f201 	lsl.w	r2, r2, r1
 8000488:	fa00 fa01 	lsl.w	sl, r0, r1
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x244>
 800048e:	18ed      	adds	r5, r5, r3
 8000490:	f109 30ff 	add.w	r0, r9, #4294967295
 8000494:	d243      	bcs.n	800051e <__udivmoddi4+0x2c2>
 8000496:	42ac      	cmp	r4, r5
 8000498:	d941      	bls.n	800051e <__udivmoddi4+0x2c2>
 800049a:	f1a9 0902 	sub.w	r9, r9, #2
 800049e:	441d      	add	r5, r3
 80004a0:	1b2d      	subs	r5, r5, r4
 80004a2:	fa1f fe8e 	uxth.w	lr, lr
 80004a6:	fbb5 f0fc 	udiv	r0, r5, ip
 80004aa:	fb0c 5510 	mls	r5, ip, r0, r5
 80004ae:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 80004b2:	fb00 f808 	mul.w	r8, r0, r8
 80004b6:	45a0      	cmp	r8, r4
 80004b8:	d907      	bls.n	80004ca <__udivmoddi4+0x26e>
 80004ba:	18e4      	adds	r4, r4, r3
 80004bc:	f100 35ff 	add.w	r5, r0, #4294967295
 80004c0:	d229      	bcs.n	8000516 <__udivmoddi4+0x2ba>
 80004c2:	45a0      	cmp	r8, r4
 80004c4:	d927      	bls.n	8000516 <__udivmoddi4+0x2ba>
 80004c6:	3802      	subs	r0, #2
 80004c8:	441c      	add	r4, r3
 80004ca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ce:	eba4 0408 	sub.w	r4, r4, r8
 80004d2:	fba0 8902 	umull	r8, r9, r0, r2
 80004d6:	454c      	cmp	r4, r9
 80004d8:	46c6      	mov	lr, r8
 80004da:	464d      	mov	r5, r9
 80004dc:	d315      	bcc.n	800050a <__udivmoddi4+0x2ae>
 80004de:	d012      	beq.n	8000506 <__udivmoddi4+0x2aa>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x29c>
 80004e2:	ebba 030e 	subs.w	r3, sl, lr
 80004e6:	eb64 0405 	sbc.w	r4, r4, r5
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40cb      	lsrs	r3, r1
 80004f0:	431f      	orrs	r7, r3
 80004f2:	40cc      	lsrs	r4, r1
 80004f4:	6037      	str	r7, [r6, #0]
 80004f6:	6074      	str	r4, [r6, #4]
 80004f8:	2100      	movs	r1, #0
 80004fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fe:	4618      	mov	r0, r3
 8000500:	e6f8      	b.n	80002f4 <__udivmoddi4+0x98>
 8000502:	4690      	mov	r8, r2
 8000504:	e6e0      	b.n	80002c8 <__udivmoddi4+0x6c>
 8000506:	45c2      	cmp	sl, r8
 8000508:	d2ea      	bcs.n	80004e0 <__udivmoddi4+0x284>
 800050a:	ebb8 0e02 	subs.w	lr, r8, r2
 800050e:	eb69 0503 	sbc.w	r5, r9, r3
 8000512:	3801      	subs	r0, #1
 8000514:	e7e4      	b.n	80004e0 <__udivmoddi4+0x284>
 8000516:	4628      	mov	r0, r5
 8000518:	e7d7      	b.n	80004ca <__udivmoddi4+0x26e>
 800051a:	4640      	mov	r0, r8
 800051c:	e791      	b.n	8000442 <__udivmoddi4+0x1e6>
 800051e:	4681      	mov	r9, r0
 8000520:	e7be      	b.n	80004a0 <__udivmoddi4+0x244>
 8000522:	4601      	mov	r1, r0
 8000524:	e778      	b.n	8000418 <__udivmoddi4+0x1bc>
 8000526:	3802      	subs	r0, #2
 8000528:	443c      	add	r4, r7
 800052a:	e745      	b.n	80003b8 <__udivmoddi4+0x15c>
 800052c:	4608      	mov	r0, r1
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xe6>
 8000530:	f1a8 0802 	sub.w	r8, r8, #2
 8000534:	443d      	add	r5, r7
 8000536:	e72b      	b.n	8000390 <__udivmoddi4+0x134>

08000538 <selfrel_offset31>:
 8000538:	6803      	ldr	r3, [r0, #0]
 800053a:	005a      	lsls	r2, r3, #1
 800053c:	bf4c      	ite	mi
 800053e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8000542:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 8000546:	4418      	add	r0, r3
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop

0800054c <search_EIT_table>:
 800054c:	b361      	cbz	r1, 80005a8 <search_EIT_table+0x5c>
 800054e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000552:	f101 3aff 	add.w	sl, r1, #4294967295
 8000556:	4690      	mov	r8, r2
 8000558:	4606      	mov	r6, r0
 800055a:	46d1      	mov	r9, sl
 800055c:	2700      	movs	r7, #0
 800055e:	eb07 0409 	add.w	r4, r7, r9
 8000562:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 8000566:	1064      	asrs	r4, r4, #1
 8000568:	00e5      	lsls	r5, r4, #3
 800056a:	1971      	adds	r1, r6, r5
 800056c:	4608      	mov	r0, r1
 800056e:	f7ff ffe3 	bl	8000538 <selfrel_offset31>
 8000572:	45a2      	cmp	sl, r4
 8000574:	4683      	mov	fp, r0
 8000576:	f105 0008 	add.w	r0, r5, #8
 800057a:	4430      	add	r0, r6
 800057c:	d009      	beq.n	8000592 <search_EIT_table+0x46>
 800057e:	f7ff ffdb 	bl	8000538 <selfrel_offset31>
 8000582:	45c3      	cmp	fp, r8
 8000584:	f100 30ff 	add.w	r0, r0, #4294967295
 8000588:	d805      	bhi.n	8000596 <search_EIT_table+0x4a>
 800058a:	4540      	cmp	r0, r8
 800058c:	d209      	bcs.n	80005a2 <search_EIT_table+0x56>
 800058e:	1c67      	adds	r7, r4, #1
 8000590:	e7e5      	b.n	800055e <search_EIT_table+0x12>
 8000592:	45c3      	cmp	fp, r8
 8000594:	d905      	bls.n	80005a2 <search_EIT_table+0x56>
 8000596:	42a7      	cmp	r7, r4
 8000598:	d002      	beq.n	80005a0 <search_EIT_table+0x54>
 800059a:	f104 39ff 	add.w	r9, r4, #4294967295
 800059e:	e7de      	b.n	800055e <search_EIT_table+0x12>
 80005a0:	2100      	movs	r1, #0
 80005a2:	4608      	mov	r0, r1
 80005a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80005a8:	4608      	mov	r0, r1
 80005aa:	4770      	bx	lr

080005ac <__gnu_unwind_get_pr_addr>:
 80005ac:	2801      	cmp	r0, #1
 80005ae:	d007      	beq.n	80005c0 <__gnu_unwind_get_pr_addr+0x14>
 80005b0:	2802      	cmp	r0, #2
 80005b2:	d007      	beq.n	80005c4 <__gnu_unwind_get_pr_addr+0x18>
 80005b4:	4b04      	ldr	r3, [pc, #16]	; (80005c8 <__gnu_unwind_get_pr_addr+0x1c>)
 80005b6:	2800      	cmp	r0, #0
 80005b8:	bf0c      	ite	eq
 80005ba:	4618      	moveq	r0, r3
 80005bc:	2000      	movne	r0, #0
 80005be:	4770      	bx	lr
 80005c0:	4802      	ldr	r0, [pc, #8]	; (80005cc <__gnu_unwind_get_pr_addr+0x20>)
 80005c2:	4770      	bx	lr
 80005c4:	4802      	ldr	r0, [pc, #8]	; (80005d0 <__gnu_unwind_get_pr_addr+0x24>)
 80005c6:	4770      	bx	lr
 80005c8:	08000cb1 	.word	0x08000cb1
 80005cc:	08000cb5 	.word	0x08000cb5
 80005d0:	08000cb9 	.word	0x08000cb9

080005d4 <get_eit_entry>:
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	4b24      	ldr	r3, [pc, #144]	; (8000668 <get_eit_entry+0x94>)
 80005d8:	b083      	sub	sp, #12
 80005da:	4604      	mov	r4, r0
 80005dc:	1e8d      	subs	r5, r1, #2
 80005de:	b37b      	cbz	r3, 8000640 <get_eit_entry+0x6c>
 80005e0:	a901      	add	r1, sp, #4
 80005e2:	4628      	mov	r0, r5
 80005e4:	f3af 8000 	nop.w
 80005e8:	b320      	cbz	r0, 8000634 <get_eit_entry+0x60>
 80005ea:	9901      	ldr	r1, [sp, #4]
 80005ec:	462a      	mov	r2, r5
 80005ee:	f7ff ffad 	bl	800054c <search_EIT_table>
 80005f2:	4601      	mov	r1, r0
 80005f4:	b1f0      	cbz	r0, 8000634 <get_eit_entry+0x60>
 80005f6:	f7ff ff9f 	bl	8000538 <selfrel_offset31>
 80005fa:	684b      	ldr	r3, [r1, #4]
 80005fc:	64a0      	str	r0, [r4, #72]	; 0x48
 80005fe:	2b01      	cmp	r3, #1
 8000600:	d012      	beq.n	8000628 <get_eit_entry+0x54>
 8000602:	2b00      	cmp	r3, #0
 8000604:	f101 0004 	add.w	r0, r1, #4
 8000608:	db20      	blt.n	800064c <get_eit_entry+0x78>
 800060a:	f7ff ff95 	bl	8000538 <selfrel_offset31>
 800060e:	2300      	movs	r3, #0
 8000610:	64e0      	str	r0, [r4, #76]	; 0x4c
 8000612:	6523      	str	r3, [r4, #80]	; 0x50
 8000614:	6803      	ldr	r3, [r0, #0]
 8000616:	2b00      	cmp	r3, #0
 8000618:	db1c      	blt.n	8000654 <get_eit_entry+0x80>
 800061a:	f7ff ff8d 	bl	8000538 <selfrel_offset31>
 800061e:	2300      	movs	r3, #0
 8000620:	6120      	str	r0, [r4, #16]
 8000622:	4618      	mov	r0, r3
 8000624:	b003      	add	sp, #12
 8000626:	bd30      	pop	{r4, r5, pc}
 8000628:	2300      	movs	r3, #0
 800062a:	6123      	str	r3, [r4, #16]
 800062c:	2305      	movs	r3, #5
 800062e:	4618      	mov	r0, r3
 8000630:	b003      	add	sp, #12
 8000632:	bd30      	pop	{r4, r5, pc}
 8000634:	2300      	movs	r3, #0
 8000636:	6123      	str	r3, [r4, #16]
 8000638:	2309      	movs	r3, #9
 800063a:	4618      	mov	r0, r3
 800063c:	b003      	add	sp, #12
 800063e:	bd30      	pop	{r4, r5, pc}
 8000640:	490a      	ldr	r1, [pc, #40]	; (800066c <get_eit_entry+0x98>)
 8000642:	480b      	ldr	r0, [pc, #44]	; (8000670 <get_eit_entry+0x9c>)
 8000644:	1a09      	subs	r1, r1, r0
 8000646:	10c9      	asrs	r1, r1, #3
 8000648:	9101      	str	r1, [sp, #4]
 800064a:	e7cf      	b.n	80005ec <get_eit_entry+0x18>
 800064c:	2301      	movs	r3, #1
 800064e:	64e0      	str	r0, [r4, #76]	; 0x4c
 8000650:	6523      	str	r3, [r4, #80]	; 0x50
 8000652:	e7df      	b.n	8000614 <get_eit_entry+0x40>
 8000654:	f3c3 6003 	ubfx	r0, r3, #24, #4
 8000658:	f7ff ffa8 	bl	80005ac <__gnu_unwind_get_pr_addr>
 800065c:	2800      	cmp	r0, #0
 800065e:	6120      	str	r0, [r4, #16]
 8000660:	bf14      	ite	ne
 8000662:	2300      	movne	r3, #0
 8000664:	2309      	moveq	r3, #9
 8000666:	e7dc      	b.n	8000622 <get_eit_entry+0x4e>
 8000668:	00000000 	.word	0x00000000
 800066c:	08009b4c 	.word	0x08009b4c
 8000670:	080097c4 	.word	0x080097c4

08000674 <restore_non_core_regs>:
 8000674:	6803      	ldr	r3, [r0, #0]
 8000676:	07da      	lsls	r2, r3, #31
 8000678:	b510      	push	{r4, lr}
 800067a:	4604      	mov	r4, r0
 800067c:	d406      	bmi.n	800068c <restore_non_core_regs+0x18>
 800067e:	079b      	lsls	r3, r3, #30
 8000680:	f100 0048 	add.w	r0, r0, #72	; 0x48
 8000684:	d509      	bpl.n	800069a <restore_non_core_regs+0x26>
 8000686:	f000 fc51 	bl	8000f2c <__gnu_Unwind_Restore_VFP_D>
 800068a:	6823      	ldr	r3, [r4, #0]
 800068c:	0759      	lsls	r1, r3, #29
 800068e:	d509      	bpl.n	80006a4 <restore_non_core_regs+0x30>
 8000690:	071a      	lsls	r2, r3, #28
 8000692:	d50e      	bpl.n	80006b2 <restore_non_core_regs+0x3e>
 8000694:	06db      	lsls	r3, r3, #27
 8000696:	d513      	bpl.n	80006c0 <restore_non_core_regs+0x4c>
 8000698:	bd10      	pop	{r4, pc}
 800069a:	f000 fc3f 	bl	8000f1c <__gnu_Unwind_Restore_VFP>
 800069e:	6823      	ldr	r3, [r4, #0]
 80006a0:	0759      	lsls	r1, r3, #29
 80006a2:	d4f5      	bmi.n	8000690 <restore_non_core_regs+0x1c>
 80006a4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80006a8:	f000 fc48 	bl	8000f3c <__gnu_Unwind_Restore_VFP_D_16_to_31>
 80006ac:	6823      	ldr	r3, [r4, #0]
 80006ae:	071a      	lsls	r2, r3, #28
 80006b0:	d4f0      	bmi.n	8000694 <restore_non_core_regs+0x20>
 80006b2:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 80006b6:	f000 fc49 	bl	8000f4c <__gnu_Unwind_Restore_WMMXD>
 80006ba:	6823      	ldr	r3, [r4, #0]
 80006bc:	06db      	lsls	r3, r3, #27
 80006be:	d4eb      	bmi.n	8000698 <restore_non_core_regs+0x24>
 80006c0:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 80006c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80006c8:	f000 bc84 	b.w	8000fd4 <__gnu_Unwind_Restore_WMMXC>

080006cc <_Unwind_decode_typeinfo_ptr.isra.0>:
 80006cc:	6803      	ldr	r3, [r0, #0]
 80006ce:	b103      	cbz	r3, 80006d2 <_Unwind_decode_typeinfo_ptr.isra.0+0x6>
 80006d0:	4403      	add	r3, r0
 80006d2:	4618      	mov	r0, r3
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop

080006d8 <__gnu_unwind_24bit.isra.1>:
 80006d8:	2009      	movs	r0, #9
 80006da:	4770      	bx	lr

080006dc <_Unwind_DebugHook>:
 80006dc:	4770      	bx	lr
 80006de:	bf00      	nop

080006e0 <unwind_phase2>:
 80006e0:	b570      	push	{r4, r5, r6, lr}
 80006e2:	4604      	mov	r4, r0
 80006e4:	460d      	mov	r5, r1
 80006e6:	e008      	b.n	80006fa <unwind_phase2+0x1a>
 80006e8:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80006ea:	6163      	str	r3, [r4, #20]
 80006ec:	462a      	mov	r2, r5
 80006ee:	6923      	ldr	r3, [r4, #16]
 80006f0:	4621      	mov	r1, r4
 80006f2:	2001      	movs	r0, #1
 80006f4:	4798      	blx	r3
 80006f6:	2808      	cmp	r0, #8
 80006f8:	d108      	bne.n	800070c <unwind_phase2+0x2c>
 80006fa:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80006fc:	4620      	mov	r0, r4
 80006fe:	f7ff ff69 	bl	80005d4 <get_eit_entry>
 8000702:	4606      	mov	r6, r0
 8000704:	2800      	cmp	r0, #0
 8000706:	d0ef      	beq.n	80006e8 <unwind_phase2+0x8>
 8000708:	f007 fb42 	bl	8007d90 <abort>
 800070c:	2807      	cmp	r0, #7
 800070e:	d1fb      	bne.n	8000708 <unwind_phase2+0x28>
 8000710:	4630      	mov	r0, r6
 8000712:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8000714:	f7ff ffe2 	bl	80006dc <_Unwind_DebugHook>
 8000718:	1d28      	adds	r0, r5, #4
 800071a:	f000 fbf3 	bl	8000f04 <__restore_core_regs>
 800071e:	bf00      	nop

08000720 <unwind_phase2_forced>:
 8000720:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000724:	1d0c      	adds	r4, r1, #4
 8000726:	4605      	mov	r5, r0
 8000728:	4692      	mov	sl, r2
 800072a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800072c:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 8000730:	ae03      	add	r6, sp, #12
 8000732:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000734:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000736:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000738:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800073a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800073c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000740:	ac02      	add	r4, sp, #8
 8000742:	f8d5 800c 	ldr.w	r8, [r5, #12]
 8000746:	f8d5 9018 	ldr.w	r9, [r5, #24]
 800074a:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 800074e:	2300      	movs	r3, #0
 8000750:	4628      	mov	r0, r5
 8000752:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8000754:	6023      	str	r3, [r4, #0]
 8000756:	f7ff ff3d 	bl	80005d4 <get_eit_entry>
 800075a:	f1ba 0f00 	cmp.w	sl, #0
 800075e:	4607      	mov	r7, r0
 8000760:	bf14      	ite	ne
 8000762:	260a      	movne	r6, #10
 8000764:	2609      	moveq	r6, #9
 8000766:	b17f      	cbz	r7, 8000788 <unwind_phase2_forced+0x68>
 8000768:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800076a:	f046 0110 	orr.w	r1, r6, #16
 800076e:	e88d 0210 	stmia.w	sp, {r4, r9}
 8000772:	462a      	mov	r2, r5
 8000774:	6463      	str	r3, [r4, #68]	; 0x44
 8000776:	2001      	movs	r0, #1
 8000778:	462b      	mov	r3, r5
 800077a:	47c0      	blx	r8
 800077c:	bb78      	cbnz	r0, 80007de <unwind_phase2_forced+0xbe>
 800077e:	4638      	mov	r0, r7
 8000780:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 8000784:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000788:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800078a:	616b      	str	r3, [r5, #20]
 800078c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000790:	4621      	mov	r1, r4
 8000792:	a87a      	add	r0, sp, #488	; 0x1e8
 8000794:	f007 fd4c 	bl	8008230 <memcpy>
 8000798:	692b      	ldr	r3, [r5, #16]
 800079a:	aa7a      	add	r2, sp, #488	; 0x1e8
 800079c:	4629      	mov	r1, r5
 800079e:	4630      	mov	r0, r6
 80007a0:	4798      	blx	r3
 80007a2:	9b88      	ldr	r3, [sp, #544]	; 0x220
 80007a4:	4682      	mov	sl, r0
 80007a6:	e88d 0210 	stmia.w	sp, {r4, r9}
 80007aa:	4631      	mov	r1, r6
 80007ac:	6463      	str	r3, [r4, #68]	; 0x44
 80007ae:	462a      	mov	r2, r5
 80007b0:	462b      	mov	r3, r5
 80007b2:	2001      	movs	r0, #1
 80007b4:	47c0      	blx	r8
 80007b6:	b990      	cbnz	r0, 80007de <unwind_phase2_forced+0xbe>
 80007b8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80007bc:	a97a      	add	r1, sp, #488	; 0x1e8
 80007be:	4620      	mov	r0, r4
 80007c0:	f007 fd36 	bl	8008230 <memcpy>
 80007c4:	f1ba 0f08 	cmp.w	sl, #8
 80007c8:	d106      	bne.n	80007d8 <unwind_phase2_forced+0xb8>
 80007ca:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80007cc:	4628      	mov	r0, r5
 80007ce:	f7ff ff01 	bl	80005d4 <get_eit_entry>
 80007d2:	2609      	movs	r6, #9
 80007d4:	4607      	mov	r7, r0
 80007d6:	e7c6      	b.n	8000766 <unwind_phase2_forced+0x46>
 80007d8:	f1ba 0f07 	cmp.w	sl, #7
 80007dc:	d005      	beq.n	80007ea <unwind_phase2_forced+0xca>
 80007de:	2709      	movs	r7, #9
 80007e0:	4638      	mov	r0, r7
 80007e2:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 80007e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ea:	4638      	mov	r0, r7
 80007ec:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80007ee:	f7ff ff75 	bl	80006dc <_Unwind_DebugHook>
 80007f2:	a803      	add	r0, sp, #12
 80007f4:	f000 fb86 	bl	8000f04 <__restore_core_regs>

080007f8 <_Unwind_GetCFA>:
 80007f8:	6c40      	ldr	r0, [r0, #68]	; 0x44
 80007fa:	4770      	bx	lr

080007fc <__gnu_Unwind_RaiseException>:
 80007fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007fe:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8000800:	640b      	str	r3, [r1, #64]	; 0x40
 8000802:	1d0e      	adds	r6, r1, #4
 8000804:	460f      	mov	r7, r1
 8000806:	4604      	mov	r4, r0
 8000808:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800080a:	b0f9      	sub	sp, #484	; 0x1e4
 800080c:	ad01      	add	r5, sp, #4
 800080e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000810:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000812:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000814:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000816:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000818:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800081c:	f04f 36ff 	mov.w	r6, #4294967295
 8000820:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000824:	9600      	str	r6, [sp, #0]
 8000826:	e006      	b.n	8000836 <__gnu_Unwind_RaiseException+0x3a>
 8000828:	6923      	ldr	r3, [r4, #16]
 800082a:	466a      	mov	r2, sp
 800082c:	4621      	mov	r1, r4
 800082e:	4798      	blx	r3
 8000830:	2808      	cmp	r0, #8
 8000832:	4605      	mov	r5, r0
 8000834:	d108      	bne.n	8000848 <__gnu_Unwind_RaiseException+0x4c>
 8000836:	9910      	ldr	r1, [sp, #64]	; 0x40
 8000838:	4620      	mov	r0, r4
 800083a:	f7ff fecb 	bl	80005d4 <get_eit_entry>
 800083e:	2800      	cmp	r0, #0
 8000840:	d0f2      	beq.n	8000828 <__gnu_Unwind_RaiseException+0x2c>
 8000842:	2009      	movs	r0, #9
 8000844:	b079      	add	sp, #484	; 0x1e4
 8000846:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000848:	4668      	mov	r0, sp
 800084a:	f7ff ff13 	bl	8000674 <restore_non_core_regs>
 800084e:	2d06      	cmp	r5, #6
 8000850:	d1f7      	bne.n	8000842 <__gnu_Unwind_RaiseException+0x46>
 8000852:	4639      	mov	r1, r7
 8000854:	4620      	mov	r0, r4
 8000856:	f7ff ff43 	bl	80006e0 <unwind_phase2>
 800085a:	bf00      	nop

0800085c <__gnu_Unwind_ForcedUnwind>:
 800085c:	b430      	push	{r4, r5}
 800085e:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8000860:	60c1      	str	r1, [r0, #12]
 8000862:	6182      	str	r2, [r0, #24]
 8000864:	4619      	mov	r1, r3
 8000866:	641d      	str	r5, [r3, #64]	; 0x40
 8000868:	2200      	movs	r2, #0
 800086a:	bc30      	pop	{r4, r5}
 800086c:	e758      	b.n	8000720 <unwind_phase2_forced>
 800086e:	bf00      	nop

08000870 <__gnu_Unwind_Resume>:
 8000870:	b570      	push	{r4, r5, r6, lr}
 8000872:	68c6      	ldr	r6, [r0, #12]
 8000874:	6943      	ldr	r3, [r0, #20]
 8000876:	640b      	str	r3, [r1, #64]	; 0x40
 8000878:	b126      	cbz	r6, 8000884 <__gnu_Unwind_Resume+0x14>
 800087a:	2201      	movs	r2, #1
 800087c:	f7ff ff50 	bl	8000720 <unwind_phase2_forced>
 8000880:	f007 fa86 	bl	8007d90 <abort>
 8000884:	6903      	ldr	r3, [r0, #16]
 8000886:	460a      	mov	r2, r1
 8000888:	4604      	mov	r4, r0
 800088a:	460d      	mov	r5, r1
 800088c:	4601      	mov	r1, r0
 800088e:	2002      	movs	r0, #2
 8000890:	4798      	blx	r3
 8000892:	2807      	cmp	r0, #7
 8000894:	d007      	beq.n	80008a6 <__gnu_Unwind_Resume+0x36>
 8000896:	2808      	cmp	r0, #8
 8000898:	d103      	bne.n	80008a2 <__gnu_Unwind_Resume+0x32>
 800089a:	4629      	mov	r1, r5
 800089c:	4620      	mov	r0, r4
 800089e:	f7ff ff1f 	bl	80006e0 <unwind_phase2>
 80008a2:	f007 fa75 	bl	8007d90 <abort>
 80008a6:	4630      	mov	r0, r6
 80008a8:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80008aa:	f7ff ff17 	bl	80006dc <_Unwind_DebugHook>
 80008ae:	1d28      	adds	r0, r5, #4
 80008b0:	f000 fb28 	bl	8000f04 <__restore_core_regs>

080008b4 <__gnu_Unwind_Resume_or_Rethrow>:
 80008b4:	68c2      	ldr	r2, [r0, #12]
 80008b6:	b11a      	cbz	r2, 80008c0 <__gnu_Unwind_Resume_or_Rethrow+0xc>
 80008b8:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 80008ba:	640a      	str	r2, [r1, #64]	; 0x40
 80008bc:	2200      	movs	r2, #0
 80008be:	e72f      	b.n	8000720 <unwind_phase2_forced>
 80008c0:	e79c      	b.n	80007fc <__gnu_Unwind_RaiseException>
 80008c2:	bf00      	nop

080008c4 <_Unwind_Complete>:
 80008c4:	4770      	bx	lr
 80008c6:	bf00      	nop

080008c8 <_Unwind_DeleteException>:
 80008c8:	6883      	ldr	r3, [r0, #8]
 80008ca:	b113      	cbz	r3, 80008d2 <_Unwind_DeleteException+0xa>
 80008cc:	4601      	mov	r1, r0
 80008ce:	2001      	movs	r0, #1
 80008d0:	4718      	bx	r3
 80008d2:	4770      	bx	lr

080008d4 <_Unwind_VRS_Get>:
 80008d4:	b500      	push	{lr}
 80008d6:	2904      	cmp	r1, #4
 80008d8:	d807      	bhi.n	80008ea <_Unwind_VRS_Get+0x16>
 80008da:	e8df f001 	tbb	[pc, r1]
 80008de:	0903      	.short	0x0903
 80008e0:	0906      	.short	0x0906
 80008e2:	09          	.byte	0x09
 80008e3:	00          	.byte	0x00
 80008e4:	b90b      	cbnz	r3, 80008ea <_Unwind_VRS_Get+0x16>
 80008e6:	2a0f      	cmp	r2, #15
 80008e8:	d905      	bls.n	80008f6 <_Unwind_VRS_Get+0x22>
 80008ea:	2002      	movs	r0, #2
 80008ec:	f85d fb04 	ldr.w	pc, [sp], #4
 80008f0:	2001      	movs	r0, #1
 80008f2:	f85d fb04 	ldr.w	pc, [sp], #4
 80008f6:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80008fa:	4618      	mov	r0, r3
 80008fc:	6853      	ldr	r3, [r2, #4]
 80008fe:	9a01      	ldr	r2, [sp, #4]
 8000900:	6013      	str	r3, [r2, #0]
 8000902:	f85d fb04 	ldr.w	pc, [sp], #4
 8000906:	bf00      	nop

08000908 <_Unwind_GetGR>:
 8000908:	b510      	push	{r4, lr}
 800090a:	b084      	sub	sp, #16
 800090c:	2300      	movs	r3, #0
 800090e:	ac03      	add	r4, sp, #12
 8000910:	460a      	mov	r2, r1
 8000912:	9400      	str	r4, [sp, #0]
 8000914:	4619      	mov	r1, r3
 8000916:	f7ff ffdd 	bl	80008d4 <_Unwind_VRS_Get>
 800091a:	9803      	ldr	r0, [sp, #12]
 800091c:	b004      	add	sp, #16
 800091e:	bd10      	pop	{r4, pc}

08000920 <_Unwind_VRS_Set>:
 8000920:	b500      	push	{lr}
 8000922:	2904      	cmp	r1, #4
 8000924:	d807      	bhi.n	8000936 <_Unwind_VRS_Set+0x16>
 8000926:	e8df f001 	tbb	[pc, r1]
 800092a:	0903      	.short	0x0903
 800092c:	0906      	.short	0x0906
 800092e:	09          	.byte	0x09
 800092f:	00          	.byte	0x00
 8000930:	b90b      	cbnz	r3, 8000936 <_Unwind_VRS_Set+0x16>
 8000932:	2a0f      	cmp	r2, #15
 8000934:	d905      	bls.n	8000942 <_Unwind_VRS_Set+0x22>
 8000936:	2002      	movs	r0, #2
 8000938:	f85d fb04 	ldr.w	pc, [sp], #4
 800093c:	2001      	movs	r0, #1
 800093e:	f85d fb04 	ldr.w	pc, [sp], #4
 8000942:	9901      	ldr	r1, [sp, #4]
 8000944:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8000948:	6809      	ldr	r1, [r1, #0]
 800094a:	6051      	str	r1, [r2, #4]
 800094c:	4618      	mov	r0, r3
 800094e:	f85d fb04 	ldr.w	pc, [sp], #4
 8000952:	bf00      	nop

08000954 <_Unwind_SetGR>:
 8000954:	b510      	push	{r4, lr}
 8000956:	b084      	sub	sp, #16
 8000958:	ac04      	add	r4, sp, #16
 800095a:	2300      	movs	r3, #0
 800095c:	f844 2d04 	str.w	r2, [r4, #-4]!
 8000960:	460a      	mov	r2, r1
 8000962:	9400      	str	r4, [sp, #0]
 8000964:	4619      	mov	r1, r3
 8000966:	f7ff ffdb 	bl	8000920 <_Unwind_VRS_Set>
 800096a:	b004      	add	sp, #16
 800096c:	bd10      	pop	{r4, pc}
 800096e:	bf00      	nop

08000970 <__gnu_Unwind_Backtrace>:
 8000970:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000972:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8000974:	6413      	str	r3, [r2, #64]	; 0x40
 8000976:	1d15      	adds	r5, r2, #4
 8000978:	4607      	mov	r7, r0
 800097a:	460e      	mov	r6, r1
 800097c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800097e:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 8000982:	ac17      	add	r4, sp, #92	; 0x5c
 8000984:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000986:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000988:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800098a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800098c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800098e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000992:	f04f 35ff 	mov.w	r5, #4294967295
 8000996:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800099a:	9516      	str	r5, [sp, #88]	; 0x58
 800099c:	e010      	b.n	80009c0 <__gnu_Unwind_Backtrace+0x50>
 800099e:	a816      	add	r0, sp, #88	; 0x58
 80009a0:	f7ff ffd8 	bl	8000954 <_Unwind_SetGR>
 80009a4:	4631      	mov	r1, r6
 80009a6:	a816      	add	r0, sp, #88	; 0x58
 80009a8:	47b8      	blx	r7
 80009aa:	aa16      	add	r2, sp, #88	; 0x58
 80009ac:	4669      	mov	r1, sp
 80009ae:	b978      	cbnz	r0, 80009d0 <__gnu_Unwind_Backtrace+0x60>
 80009b0:	9b04      	ldr	r3, [sp, #16]
 80009b2:	2008      	movs	r0, #8
 80009b4:	4798      	blx	r3
 80009b6:	2805      	cmp	r0, #5
 80009b8:	4604      	mov	r4, r0
 80009ba:	d00a      	beq.n	80009d2 <__gnu_Unwind_Backtrace+0x62>
 80009bc:	2809      	cmp	r0, #9
 80009be:	d007      	beq.n	80009d0 <__gnu_Unwind_Backtrace+0x60>
 80009c0:	9926      	ldr	r1, [sp, #152]	; 0x98
 80009c2:	4668      	mov	r0, sp
 80009c4:	f7ff fe06 	bl	80005d4 <get_eit_entry>
 80009c8:	466a      	mov	r2, sp
 80009ca:	210c      	movs	r1, #12
 80009cc:	2800      	cmp	r0, #0
 80009ce:	d0e6      	beq.n	800099e <__gnu_Unwind_Backtrace+0x2e>
 80009d0:	2409      	movs	r4, #9
 80009d2:	a816      	add	r0, sp, #88	; 0x58
 80009d4:	f7ff fe4e 	bl	8000674 <restore_non_core_regs>
 80009d8:	4620      	mov	r0, r4
 80009da:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 80009de:	bdf0      	pop	{r4, r5, r6, r7, pc}

080009e0 <__gnu_unwind_pr_common>:
 80009e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80009e4:	460d      	mov	r5, r1
 80009e6:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 80009e8:	b08b      	sub	sp, #44	; 0x2c
 80009ea:	1d0c      	adds	r4, r1, #4
 80009ec:	6809      	ldr	r1, [r1, #0]
 80009ee:	9107      	str	r1, [sp, #28]
 80009f0:	4691      	mov	r9, r2
 80009f2:	9408      	str	r4, [sp, #32]
 80009f4:	f000 0b03 	and.w	fp, r0, #3
 80009f8:	461e      	mov	r6, r3
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d160      	bne.n	8000ac0 <__gnu_unwind_pr_common+0xe0>
 80009fe:	0209      	lsls	r1, r1, #8
 8000a00:	2303      	movs	r3, #3
 8000a02:	9107      	str	r1, [sp, #28]
 8000a04:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
 8000a08:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8000a0c:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8000a0e:	f1bb 0f02 	cmp.w	fp, #2
 8000a12:	bf08      	it	eq
 8000a14:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 8000a16:	f013 0301 	ands.w	r3, r3, #1
 8000a1a:	d140      	bne.n	8000a9e <__gnu_unwind_pr_common+0xbe>
 8000a1c:	9301      	str	r3, [sp, #4]
 8000a1e:	f000 0308 	and.w	r3, r0, #8
 8000a22:	9303      	str	r3, [sp, #12]
 8000a24:	f8d4 8000 	ldr.w	r8, [r4]
 8000a28:	f1b8 0f00 	cmp.w	r8, #0
 8000a2c:	d039      	beq.n	8000aa2 <__gnu_unwind_pr_common+0xc2>
 8000a2e:	2e02      	cmp	r6, #2
 8000a30:	d043      	beq.n	8000aba <__gnu_unwind_pr_common+0xda>
 8000a32:	f8b4 8000 	ldrh.w	r8, [r4]
 8000a36:	8867      	ldrh	r7, [r4, #2]
 8000a38:	3404      	adds	r4, #4
 8000a3a:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8000a3c:	f027 0a01 	bic.w	sl, r7, #1
 8000a40:	210f      	movs	r1, #15
 8000a42:	4648      	mov	r0, r9
 8000a44:	449a      	add	sl, r3
 8000a46:	f7ff ff5f 	bl	8000908 <_Unwind_GetGR>
 8000a4a:	4582      	cmp	sl, r0
 8000a4c:	d833      	bhi.n	8000ab6 <__gnu_unwind_pr_common+0xd6>
 8000a4e:	f028 0301 	bic.w	r3, r8, #1
 8000a52:	449a      	add	sl, r3
 8000a54:	4550      	cmp	r0, sl
 8000a56:	bf2c      	ite	cs
 8000a58:	2000      	movcs	r0, #0
 8000a5a:	2001      	movcc	r0, #1
 8000a5c:	007f      	lsls	r7, r7, #1
 8000a5e:	f007 0702 	and.w	r7, r7, #2
 8000a62:	f008 0801 	and.w	r8, r8, #1
 8000a66:	ea47 0708 	orr.w	r7, r7, r8
 8000a6a:	2f01      	cmp	r7, #1
 8000a6c:	d03e      	beq.n	8000aec <__gnu_unwind_pr_common+0x10c>
 8000a6e:	d335      	bcc.n	8000adc <__gnu_unwind_pr_common+0xfc>
 8000a70:	2f02      	cmp	r7, #2
 8000a72:	d11c      	bne.n	8000aae <__gnu_unwind_pr_common+0xce>
 8000a74:	6823      	ldr	r3, [r4, #0]
 8000a76:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000a7a:	9202      	str	r2, [sp, #8]
 8000a7c:	f1bb 0f00 	cmp.w	fp, #0
 8000a80:	d176      	bne.n	8000b70 <__gnu_unwind_pr_common+0x190>
 8000a82:	b128      	cbz	r0, 8000a90 <__gnu_unwind_pr_common+0xb0>
 8000a84:	9903      	ldr	r1, [sp, #12]
 8000a86:	2900      	cmp	r1, #0
 8000a88:	d07e      	beq.n	8000b88 <__gnu_unwind_pr_common+0x1a8>
 8000a8a:	2a00      	cmp	r2, #0
 8000a8c:	f000 80a6 	beq.w	8000bdc <__gnu_unwind_pr_common+0x1fc>
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	db77      	blt.n	8000b84 <__gnu_unwind_pr_common+0x1a4>
 8000a94:	9b02      	ldr	r3, [sp, #8]
 8000a96:	3301      	adds	r3, #1
 8000a98:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8000a9c:	e7c2      	b.n	8000a24 <__gnu_unwind_pr_common+0x44>
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	9301      	str	r3, [sp, #4]
 8000aa2:	2e02      	cmp	r6, #2
 8000aa4:	dd3e      	ble.n	8000b24 <__gnu_unwind_pr_common+0x144>
 8000aa6:	f7ff fe17 	bl	80006d8 <__gnu_unwind_24bit.isra.1>
 8000aaa:	2800      	cmp	r0, #0
 8000aac:	d040      	beq.n	8000b30 <__gnu_unwind_pr_common+0x150>
 8000aae:	2009      	movs	r0, #9
 8000ab0:	b00b      	add	sp, #44	; 0x2c
 8000ab2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000ab6:	2000      	movs	r0, #0
 8000ab8:	e7d0      	b.n	8000a5c <__gnu_unwind_pr_common+0x7c>
 8000aba:	6867      	ldr	r7, [r4, #4]
 8000abc:	3408      	adds	r4, #8
 8000abe:	e7bc      	b.n	8000a3a <__gnu_unwind_pr_common+0x5a>
 8000ac0:	2b02      	cmp	r3, #2
 8000ac2:	dca3      	bgt.n	8000a0c <__gnu_unwind_pr_common+0x2c>
 8000ac4:	0c0b      	lsrs	r3, r1, #16
 8000ac6:	b2da      	uxtb	r2, r3
 8000ac8:	0409      	lsls	r1, r1, #16
 8000aca:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
 8000ace:	2302      	movs	r3, #2
 8000ad0:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 8000ad4:	9107      	str	r1, [sp, #28]
 8000ad6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8000ada:	e797      	b.n	8000a0c <__gnu_unwind_pr_common+0x2c>
 8000adc:	f1bb 0f00 	cmp.w	fp, #0
 8000ae0:	d002      	beq.n	8000ae8 <__gnu_unwind_pr_common+0x108>
 8000ae2:	2800      	cmp	r0, #0
 8000ae4:	f040 80bd 	bne.w	8000c62 <__gnu_unwind_pr_common+0x282>
 8000ae8:	3404      	adds	r4, #4
 8000aea:	e79b      	b.n	8000a24 <__gnu_unwind_pr_common+0x44>
 8000aec:	f1bb 0f00 	cmp.w	fp, #0
 8000af0:	d125      	bne.n	8000b3e <__gnu_unwind_pr_common+0x15e>
 8000af2:	b1a8      	cbz	r0, 8000b20 <__gnu_unwind_pr_common+0x140>
 8000af4:	e894 000c 	ldmia.w	r4, {r2, r3}
 8000af8:	1c99      	adds	r1, r3, #2
 8000afa:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 8000afe:	d0d6      	beq.n	8000aae <__gnu_unwind_pr_common+0xce>
 8000b00:	f105 0158 	add.w	r1, r5, #88	; 0x58
 8000b04:	3301      	adds	r3, #1
 8000b06:	9106      	str	r1, [sp, #24]
 8000b08:	f000 80a3 	beq.w	8000c52 <__gnu_unwind_pr_common+0x272>
 8000b0c:	1d20      	adds	r0, r4, #4
 8000b0e:	f7ff fddd 	bl	80006cc <_Unwind_decode_typeinfo_ptr.isra.0>
 8000b12:	ab06      	add	r3, sp, #24
 8000b14:	4601      	mov	r1, r0
 8000b16:	4628      	mov	r0, r5
 8000b18:	f005 fde4 	bl	80066e4 <__cxa_type_match>
 8000b1c:	2800      	cmp	r0, #0
 8000b1e:	d177      	bne.n	8000c10 <__gnu_unwind_pr_common+0x230>
 8000b20:	3408      	adds	r4, #8
 8000b22:	e77f      	b.n	8000a24 <__gnu_unwind_pr_common+0x44>
 8000b24:	a907      	add	r1, sp, #28
 8000b26:	4648      	mov	r0, r9
 8000b28:	f000 faee 	bl	8001108 <__gnu_unwind_execute>
 8000b2c:	2800      	cmp	r0, #0
 8000b2e:	d1be      	bne.n	8000aae <__gnu_unwind_pr_common+0xce>
 8000b30:	9b01      	ldr	r3, [sp, #4]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d15c      	bne.n	8000bf0 <__gnu_unwind_pr_common+0x210>
 8000b36:	2008      	movs	r0, #8
 8000b38:	b00b      	add	sp, #44	; 0x2c
 8000b3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000b3e:	210d      	movs	r1, #13
 8000b40:	4648      	mov	r0, r9
 8000b42:	6a2f      	ldr	r7, [r5, #32]
 8000b44:	f7ff fee0 	bl	8000908 <_Unwind_GetGR>
 8000b48:	4287      	cmp	r7, r0
 8000b4a:	d1e9      	bne.n	8000b20 <__gnu_unwind_pr_common+0x140>
 8000b4c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000b4e:	429c      	cmp	r4, r3
 8000b50:	d1e6      	bne.n	8000b20 <__gnu_unwind_pr_common+0x140>
 8000b52:	4620      	mov	r0, r4
 8000b54:	f7ff fcf0 	bl	8000538 <selfrel_offset31>
 8000b58:	210f      	movs	r1, #15
 8000b5a:	4602      	mov	r2, r0
 8000b5c:	4648      	mov	r0, r9
 8000b5e:	f7ff fef9 	bl	8000954 <_Unwind_SetGR>
 8000b62:	4648      	mov	r0, r9
 8000b64:	462a      	mov	r2, r5
 8000b66:	2100      	movs	r1, #0
 8000b68:	f7ff fef4 	bl	8000954 <_Unwind_SetGR>
 8000b6c:	2007      	movs	r0, #7
 8000b6e:	e79f      	b.n	8000ab0 <__gnu_unwind_pr_common+0xd0>
 8000b70:	210d      	movs	r1, #13
 8000b72:	4648      	mov	r0, r9
 8000b74:	6a2f      	ldr	r7, [r5, #32]
 8000b76:	f7ff fec7 	bl	8000908 <_Unwind_GetGR>
 8000b7a:	4287      	cmp	r7, r0
 8000b7c:	d058      	beq.n	8000c30 <__gnu_unwind_pr_common+0x250>
 8000b7e:	6823      	ldr	r3, [r4, #0]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	da87      	bge.n	8000a94 <__gnu_unwind_pr_common+0xb4>
 8000b84:	3404      	adds	r4, #4
 8000b86:	e785      	b.n	8000a94 <__gnu_unwind_pr_common+0xb4>
 8000b88:	9b02      	ldr	r3, [sp, #8]
 8000b8a:	b33b      	cbz	r3, 8000bdc <__gnu_unwind_pr_common+0x1fc>
 8000b8c:	f105 0358 	add.w	r3, r5, #88	; 0x58
 8000b90:	1d27      	adds	r7, r4, #4
 8000b92:	f8cd b010 	str.w	fp, [sp, #16]
 8000b96:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8000b9a:	f8dd a008 	ldr.w	sl, [sp, #8]
 8000b9e:	9605      	str	r6, [sp, #20]
 8000ba0:	46a3      	mov	fp, r4
 8000ba2:	461c      	mov	r4, r3
 8000ba4:	e002      	b.n	8000bac <__gnu_unwind_pr_common+0x1cc>
 8000ba6:	45b2      	cmp	sl, r6
 8000ba8:	46b0      	mov	r8, r6
 8000baa:	d016      	beq.n	8000bda <__gnu_unwind_pr_common+0x1fa>
 8000bac:	4638      	mov	r0, r7
 8000bae:	9406      	str	r4, [sp, #24]
 8000bb0:	f7ff fd8c 	bl	80006cc <_Unwind_decode_typeinfo_ptr.isra.0>
 8000bb4:	ab06      	add	r3, sp, #24
 8000bb6:	4601      	mov	r1, r0
 8000bb8:	2200      	movs	r2, #0
 8000bba:	4628      	mov	r0, r5
 8000bbc:	f005 fd92 	bl	80066e4 <__cxa_type_match>
 8000bc0:	f108 0601 	add.w	r6, r8, #1
 8000bc4:	3704      	adds	r7, #4
 8000bc6:	2800      	cmp	r0, #0
 8000bc8:	d0ed      	beq.n	8000ba6 <__gnu_unwind_pr_common+0x1c6>
 8000bca:	9b02      	ldr	r3, [sp, #8]
 8000bcc:	9e05      	ldr	r6, [sp, #20]
 8000bce:	4543      	cmp	r3, r8
 8000bd0:	465c      	mov	r4, fp
 8000bd2:	f8dd b010 	ldr.w	fp, [sp, #16]
 8000bd6:	d1d2      	bne.n	8000b7e <__gnu_unwind_pr_common+0x19e>
 8000bd8:	e000      	b.n	8000bdc <__gnu_unwind_pr_common+0x1fc>
 8000bda:	465c      	mov	r4, fp
 8000bdc:	4648      	mov	r0, r9
 8000bde:	210d      	movs	r1, #13
 8000be0:	f7ff fe92 	bl	8000908 <_Unwind_GetGR>
 8000be4:	9b06      	ldr	r3, [sp, #24]
 8000be6:	6228      	str	r0, [r5, #32]
 8000be8:	62ac      	str	r4, [r5, #40]	; 0x28
 8000bea:	626b      	str	r3, [r5, #36]	; 0x24
 8000bec:	2006      	movs	r0, #6
 8000bee:	e75f      	b.n	8000ab0 <__gnu_unwind_pr_common+0xd0>
 8000bf0:	210f      	movs	r1, #15
 8000bf2:	4648      	mov	r0, r9
 8000bf4:	f7ff fe88 	bl	8000908 <_Unwind_GetGR>
 8000bf8:	210e      	movs	r1, #14
 8000bfa:	4602      	mov	r2, r0
 8000bfc:	4648      	mov	r0, r9
 8000bfe:	f7ff fea9 	bl	8000954 <_Unwind_SetGR>
 8000c02:	4648      	mov	r0, r9
 8000c04:	4a29      	ldr	r2, [pc, #164]	; (8000cac <__gnu_unwind_pr_common+0x2cc>)
 8000c06:	210f      	movs	r1, #15
 8000c08:	f7ff fea4 	bl	8000954 <_Unwind_SetGR>
 8000c0c:	2007      	movs	r0, #7
 8000c0e:	e74f      	b.n	8000ab0 <__gnu_unwind_pr_common+0xd0>
 8000c10:	4607      	mov	r7, r0
 8000c12:	210d      	movs	r1, #13
 8000c14:	4648      	mov	r0, r9
 8000c16:	f7ff fe77 	bl	8000908 <_Unwind_GetGR>
 8000c1a:	2f02      	cmp	r7, #2
 8000c1c:	6228      	str	r0, [r5, #32]
 8000c1e:	d11d      	bne.n	8000c5c <__gnu_unwind_pr_common+0x27c>
 8000c20:	462b      	mov	r3, r5
 8000c22:	9a06      	ldr	r2, [sp, #24]
 8000c24:	f843 2f2c 	str.w	r2, [r3, #44]!
 8000c28:	626b      	str	r3, [r5, #36]	; 0x24
 8000c2a:	62ac      	str	r4, [r5, #40]	; 0x28
 8000c2c:	2006      	movs	r0, #6
 8000c2e:	e73f      	b.n	8000ab0 <__gnu_unwind_pr_common+0xd0>
 8000c30:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000c32:	429c      	cmp	r4, r3
 8000c34:	d1a3      	bne.n	8000b7e <__gnu_unwind_pr_common+0x19e>
 8000c36:	2204      	movs	r2, #4
 8000c38:	2700      	movs	r7, #0
 8000c3a:	18a3      	adds	r3, r4, r2
 8000c3c:	9902      	ldr	r1, [sp, #8]
 8000c3e:	62a9      	str	r1, [r5, #40]	; 0x28
 8000c40:	62ef      	str	r7, [r5, #44]	; 0x2c
 8000c42:	632a      	str	r2, [r5, #48]	; 0x30
 8000c44:	636b      	str	r3, [r5, #52]	; 0x34
 8000c46:	6823      	ldr	r3, [r4, #0]
 8000c48:	42bb      	cmp	r3, r7
 8000c4a:	db1d      	blt.n	8000c88 <__gnu_unwind_pr_common+0x2a8>
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	9301      	str	r3, [sp, #4]
 8000c50:	e720      	b.n	8000a94 <__gnu_unwind_pr_common+0xb4>
 8000c52:	4648      	mov	r0, r9
 8000c54:	210d      	movs	r1, #13
 8000c56:	f7ff fe57 	bl	8000908 <_Unwind_GetGR>
 8000c5a:	6228      	str	r0, [r5, #32]
 8000c5c:	9b06      	ldr	r3, [sp, #24]
 8000c5e:	626b      	str	r3, [r5, #36]	; 0x24
 8000c60:	e7e3      	b.n	8000c2a <__gnu_unwind_pr_common+0x24a>
 8000c62:	4620      	mov	r0, r4
 8000c64:	f7ff fc68 	bl	8000538 <selfrel_offset31>
 8000c68:	3404      	adds	r4, #4
 8000c6a:	4606      	mov	r6, r0
 8000c6c:	63ac      	str	r4, [r5, #56]	; 0x38
 8000c6e:	4628      	mov	r0, r5
 8000c70:	f005 fd96 	bl	80067a0 <__cxa_begin_cleanup>
 8000c74:	2800      	cmp	r0, #0
 8000c76:	f43f af1a 	beq.w	8000aae <__gnu_unwind_pr_common+0xce>
 8000c7a:	4648      	mov	r0, r9
 8000c7c:	4632      	mov	r2, r6
 8000c7e:	210f      	movs	r1, #15
 8000c80:	f7ff fe68 	bl	8000954 <_Unwind_SetGR>
 8000c84:	2007      	movs	r0, #7
 8000c86:	e713      	b.n	8000ab0 <__gnu_unwind_pr_common+0xd0>
 8000c88:	4608      	mov	r0, r1
 8000c8a:	3001      	adds	r0, #1
 8000c8c:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8000c90:	f7ff fc52 	bl	8000538 <selfrel_offset31>
 8000c94:	210f      	movs	r1, #15
 8000c96:	4602      	mov	r2, r0
 8000c98:	4648      	mov	r0, r9
 8000c9a:	f7ff fe5b 	bl	8000954 <_Unwind_SetGR>
 8000c9e:	4648      	mov	r0, r9
 8000ca0:	462a      	mov	r2, r5
 8000ca2:	4639      	mov	r1, r7
 8000ca4:	f7ff fe56 	bl	8000954 <_Unwind_SetGR>
 8000ca8:	2007      	movs	r0, #7
 8000caa:	e701      	b.n	8000ab0 <__gnu_unwind_pr_common+0xd0>
 8000cac:	08006eb5 	.word	0x08006eb5

08000cb0 <__aeabi_unwind_cpp_pr0>:
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	e695      	b.n	80009e0 <__gnu_unwind_pr_common>

08000cb4 <__aeabi_unwind_cpp_pr1>:
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	e693      	b.n	80009e0 <__gnu_unwind_pr_common>

08000cb8 <__aeabi_unwind_cpp_pr2>:
 8000cb8:	2302      	movs	r3, #2
 8000cba:	e691      	b.n	80009e0 <__gnu_unwind_pr_common>

08000cbc <_Unwind_VRS_Pop>:
 8000cbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	b0c5      	sub	sp, #276	; 0x114
 8000cc2:	2904      	cmp	r1, #4
 8000cc4:	d80d      	bhi.n	8000ce2 <_Unwind_VRS_Pop+0x26>
 8000cc6:	e8df f001 	tbb	[pc, r1]
 8000cca:	0353      	.short	0x0353
 8000ccc:	310c      	.short	0x310c
 8000cce:	0f          	.byte	0x0f
 8000ccf:	00          	.byte	0x00
 8000cd0:	2b01      	cmp	r3, #1
 8000cd2:	ea4f 4612 	mov.w	r6, r2, lsr #16
 8000cd6:	b295      	uxth	r5, r2
 8000cd8:	d162      	bne.n	8000da0 <_Unwind_VRS_Pop+0xe4>
 8000cda:	1972      	adds	r2, r6, r5
 8000cdc:	2a10      	cmp	r2, #16
 8000cde:	f240 809b 	bls.w	8000e18 <_Unwind_VRS_Pop+0x15c>
 8000ce2:	2002      	movs	r0, #2
 8000ce4:	b045      	add	sp, #276	; 0x114
 8000ce6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d1fa      	bne.n	8000ce2 <_Unwind_VRS_Pop+0x26>
 8000cec:	2a10      	cmp	r2, #16
 8000cee:	d8f8      	bhi.n	8000ce2 <_Unwind_VRS_Pop+0x26>
 8000cf0:	6823      	ldr	r3, [r4, #0]
 8000cf2:	06d8      	lsls	r0, r3, #27
 8000cf4:	f100 80c6 	bmi.w	8000e84 <_Unwind_VRS_Pop+0x1c8>
 8000cf8:	ae22      	add	r6, sp, #136	; 0x88
 8000cfa:	4630      	mov	r0, r6
 8000cfc:	9201      	str	r2, [sp, #4]
 8000cfe:	f000 f973 	bl	8000fe8 <__gnu_Unwind_Save_WMMXC>
 8000d02:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8000d04:	9a01      	ldr	r2, [sp, #4]
 8000d06:	2300      	movs	r3, #0
 8000d08:	2501      	movs	r5, #1
 8000d0a:	fa05 f103 	lsl.w	r1, r5, r3
 8000d0e:	4211      	tst	r1, r2
 8000d10:	d003      	beq.n	8000d1a <_Unwind_VRS_Pop+0x5e>
 8000d12:	6801      	ldr	r1, [r0, #0]
 8000d14:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
 8000d18:	3004      	adds	r0, #4
 8000d1a:	3301      	adds	r3, #1
 8000d1c:	2b04      	cmp	r3, #4
 8000d1e:	d1f4      	bne.n	8000d0a <_Unwind_VRS_Pop+0x4e>
 8000d20:	63a0      	str	r0, [r4, #56]	; 0x38
 8000d22:	4630      	mov	r0, r6
 8000d24:	f000 f956 	bl	8000fd4 <__gnu_Unwind_Restore_WMMXC>
 8000d28:	2000      	movs	r0, #0
 8000d2a:	e7db      	b.n	8000ce4 <_Unwind_VRS_Pop+0x28>
 8000d2c:	2b03      	cmp	r3, #3
 8000d2e:	d1d8      	bne.n	8000ce2 <_Unwind_VRS_Pop+0x26>
 8000d30:	0c15      	lsrs	r5, r2, #16
 8000d32:	b297      	uxth	r7, r2
 8000d34:	19eb      	adds	r3, r5, r7
 8000d36:	2b10      	cmp	r3, #16
 8000d38:	d8d3      	bhi.n	8000ce2 <_Unwind_VRS_Pop+0x26>
 8000d3a:	6823      	ldr	r3, [r4, #0]
 8000d3c:	071e      	lsls	r6, r3, #28
 8000d3e:	f100 80b5 	bmi.w	8000eac <_Unwind_VRS_Pop+0x1f0>
 8000d42:	ae22      	add	r6, sp, #136	; 0x88
 8000d44:	4630      	mov	r0, r6
 8000d46:	f000 f923 	bl	8000f90 <__gnu_Unwind_Save_WMMXD>
 8000d4a:	00ed      	lsls	r5, r5, #3
 8000d4c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000d4e:	b14f      	cbz	r7, 8000d64 <_Unwind_VRS_Pop+0xa8>
 8000d50:	3d04      	subs	r5, #4
 8000d52:	1971      	adds	r1, r6, r5
 8000d54:	eb03 00c7 	add.w	r0, r3, r7, lsl #3
 8000d58:	f853 2b04 	ldr.w	r2, [r3], #4
 8000d5c:	f841 2f04 	str.w	r2, [r1, #4]!
 8000d60:	4283      	cmp	r3, r0
 8000d62:	d1f9      	bne.n	8000d58 <_Unwind_VRS_Pop+0x9c>
 8000d64:	4630      	mov	r0, r6
 8000d66:	63a3      	str	r3, [r4, #56]	; 0x38
 8000d68:	f000 f8f0 	bl	8000f4c <__gnu_Unwind_Restore_WMMXD>
 8000d6c:	2000      	movs	r0, #0
 8000d6e:	e7b9      	b.n	8000ce4 <_Unwind_VRS_Pop+0x28>
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d1b6      	bne.n	8000ce2 <_Unwind_VRS_Pop+0x26>
 8000d74:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8000d76:	b297      	uxth	r7, r2
 8000d78:	1d20      	adds	r0, r4, #4
 8000d7a:	2601      	movs	r6, #1
 8000d7c:	fa06 f103 	lsl.w	r1, r6, r3
 8000d80:	4239      	tst	r1, r7
 8000d82:	f103 0301 	add.w	r3, r3, #1
 8000d86:	d002      	beq.n	8000d8e <_Unwind_VRS_Pop+0xd2>
 8000d88:	6829      	ldr	r1, [r5, #0]
 8000d8a:	6001      	str	r1, [r0, #0]
 8000d8c:	3504      	adds	r5, #4
 8000d8e:	2b10      	cmp	r3, #16
 8000d90:	f100 0004 	add.w	r0, r0, #4
 8000d94:	d1f2      	bne.n	8000d7c <_Unwind_VRS_Pop+0xc0>
 8000d96:	f412 5000 	ands.w	r0, r2, #8192	; 0x2000
 8000d9a:	d13b      	bne.n	8000e14 <_Unwind_VRS_Pop+0x158>
 8000d9c:	63a5      	str	r5, [r4, #56]	; 0x38
 8000d9e:	e7a1      	b.n	8000ce4 <_Unwind_VRS_Pop+0x28>
 8000da0:	2b05      	cmp	r3, #5
 8000da2:	d19e      	bne.n	8000ce2 <_Unwind_VRS_Pop+0x26>
 8000da4:	1977      	adds	r7, r6, r5
 8000da6:	2f20      	cmp	r7, #32
 8000da8:	d89b      	bhi.n	8000ce2 <_Unwind_VRS_Pop+0x26>
 8000daa:	2e0f      	cmp	r6, #15
 8000dac:	d966      	bls.n	8000e7c <_Unwind_VRS_Pop+0x1c0>
 8000dae:	462f      	mov	r7, r5
 8000db0:	2d00      	cmp	r5, #0
 8000db2:	d13a      	bne.n	8000e2a <_Unwind_VRS_Pop+0x16e>
 8000db4:	462a      	mov	r2, r5
 8000db6:	2700      	movs	r7, #0
 8000db8:	2a00      	cmp	r2, #0
 8000dba:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8000dbc:	dd72      	ble.n	8000ea4 <_Unwind_VRS_Pop+0x1e8>
 8000dbe:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 8000dc2:	4601      	mov	r1, r0
 8000dc4:	a844      	add	r0, sp, #272	; 0x110
 8000dc6:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
 8000dca:	388c      	subs	r0, #140	; 0x8c
 8000dcc:	f851 5b04 	ldr.w	r5, [r1], #4
 8000dd0:	f840 5f04 	str.w	r5, [r0, #4]!
 8000dd4:	4291      	cmp	r1, r2
 8000dd6:	d1f9      	bne.n	8000dcc <_Unwind_VRS_Pop+0x110>
 8000dd8:	4608      	mov	r0, r1
 8000dda:	b197      	cbz	r7, 8000e02 <_Unwind_VRS_Pop+0x146>
 8000ddc:	2e10      	cmp	r6, #16
 8000dde:	4632      	mov	r2, r6
 8000de0:	a944      	add	r1, sp, #272	; 0x110
 8000de2:	bf38      	it	cc
 8000de4:	2210      	movcc	r2, #16
 8000de6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8000dea:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
 8000dee:	0079      	lsls	r1, r7, #1
 8000df0:	3a04      	subs	r2, #4
 8000df2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8000df6:	f850 5b04 	ldr.w	r5, [r0], #4
 8000dfa:	f842 5f04 	str.w	r5, [r2, #4]!
 8000dfe:	4288      	cmp	r0, r1
 8000e00:	d1f9      	bne.n	8000df6 <_Unwind_VRS_Pop+0x13a>
 8000e02:	2b01      	cmp	r3, #1
 8000e04:	d048      	beq.n	8000e98 <_Unwind_VRS_Pop+0x1dc>
 8000e06:	2e0f      	cmp	r6, #15
 8000e08:	63a1      	str	r1, [r4, #56]	; 0x38
 8000e0a:	d933      	bls.n	8000e74 <_Unwind_VRS_Pop+0x1b8>
 8000e0c:	b117      	cbz	r7, 8000e14 <_Unwind_VRS_Pop+0x158>
 8000e0e:	a802      	add	r0, sp, #8
 8000e10:	f000 f894 	bl	8000f3c <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8000e14:	2000      	movs	r0, #0
 8000e16:	e765      	b.n	8000ce4 <_Unwind_VRS_Pop+0x28>
 8000e18:	2e0f      	cmp	r6, #15
 8000e1a:	f63f af62 	bhi.w	8000ce2 <_Unwind_VRS_Pop+0x26>
 8000e1e:	2700      	movs	r7, #0
 8000e20:	6822      	ldr	r2, [r4, #0]
 8000e22:	07d1      	lsls	r1, r2, #31
 8000e24:	d417      	bmi.n	8000e56 <_Unwind_VRS_Pop+0x19a>
 8000e26:	2f00      	cmp	r7, #0
 8000e28:	d060      	beq.n	8000eec <_Unwind_VRS_Pop+0x230>
 8000e2a:	6822      	ldr	r2, [r4, #0]
 8000e2c:	0751      	lsls	r1, r2, #29
 8000e2e:	d445      	bmi.n	8000ebc <_Unwind_VRS_Pop+0x200>
 8000e30:	2b01      	cmp	r3, #1
 8000e32:	d04d      	beq.n	8000ed0 <_Unwind_VRS_Pop+0x214>
 8000e34:	2e0f      	cmp	r6, #15
 8000e36:	d806      	bhi.n	8000e46 <_Unwind_VRS_Pop+0x18a>
 8000e38:	a822      	add	r0, sp, #136	; 0x88
 8000e3a:	9301      	str	r3, [sp, #4]
 8000e3c:	f000 f87a 	bl	8000f34 <__gnu_Unwind_Save_VFP_D>
 8000e40:	9b01      	ldr	r3, [sp, #4]
 8000e42:	2f00      	cmp	r7, #0
 8000e44:	d0b6      	beq.n	8000db4 <_Unwind_VRS_Pop+0xf8>
 8000e46:	a802      	add	r0, sp, #8
 8000e48:	9301      	str	r3, [sp, #4]
 8000e4a:	f000 f87b 	bl	8000f44 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000e4e:	9b01      	ldr	r3, [sp, #4]
 8000e50:	f1c6 0210 	rsb	r2, r6, #16
 8000e54:	e7b0      	b.n	8000db8 <_Unwind_VRS_Pop+0xfc>
 8000e56:	f022 0101 	bic.w	r1, r2, #1
 8000e5a:	2b05      	cmp	r3, #5
 8000e5c:	6021      	str	r1, [r4, #0]
 8000e5e:	9301      	str	r3, [sp, #4]
 8000e60:	4620      	mov	r0, r4
 8000e62:	d03b      	beq.n	8000edc <_Unwind_VRS_Pop+0x220>
 8000e64:	f022 0203 	bic.w	r2, r2, #3
 8000e68:	f840 2b48 	str.w	r2, [r0], #72
 8000e6c:	f000 f85a 	bl	8000f24 <__gnu_Unwind_Save_VFP>
 8000e70:	9b01      	ldr	r3, [sp, #4]
 8000e72:	e7d8      	b.n	8000e26 <_Unwind_VRS_Pop+0x16a>
 8000e74:	a822      	add	r0, sp, #136	; 0x88
 8000e76:	f000 f859 	bl	8000f2c <__gnu_Unwind_Restore_VFP_D>
 8000e7a:	e7c7      	b.n	8000e0c <_Unwind_VRS_Pop+0x150>
 8000e7c:	2f10      	cmp	r7, #16
 8000e7e:	d9ce      	bls.n	8000e1e <_Unwind_VRS_Pop+0x162>
 8000e80:	3f10      	subs	r7, #16
 8000e82:	e7cd      	b.n	8000e20 <_Unwind_VRS_Pop+0x164>
 8000e84:	f023 0310 	bic.w	r3, r3, #16
 8000e88:	6023      	str	r3, [r4, #0]
 8000e8a:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 8000e8e:	9201      	str	r2, [sp, #4]
 8000e90:	f000 f8aa 	bl	8000fe8 <__gnu_Unwind_Save_WMMXC>
 8000e94:	9a01      	ldr	r2, [sp, #4]
 8000e96:	e72f      	b.n	8000cf8 <_Unwind_VRS_Pop+0x3c>
 8000e98:	3104      	adds	r1, #4
 8000e9a:	63a1      	str	r1, [r4, #56]	; 0x38
 8000e9c:	a822      	add	r0, sp, #136	; 0x88
 8000e9e:	f000 f83d 	bl	8000f1c <__gnu_Unwind_Restore_VFP>
 8000ea2:	e7b7      	b.n	8000e14 <_Unwind_VRS_Pop+0x158>
 8000ea4:	2f00      	cmp	r7, #0
 8000ea6:	d199      	bne.n	8000ddc <_Unwind_VRS_Pop+0x120>
 8000ea8:	4601      	mov	r1, r0
 8000eaa:	e7aa      	b.n	8000e02 <_Unwind_VRS_Pop+0x146>
 8000eac:	f023 0308 	bic.w	r3, r3, #8
 8000eb0:	6023      	str	r3, [r4, #0]
 8000eb2:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 8000eb6:	f000 f86b 	bl	8000f90 <__gnu_Unwind_Save_WMMXD>
 8000eba:	e742      	b.n	8000d42 <_Unwind_VRS_Pop+0x86>
 8000ebc:	4620      	mov	r0, r4
 8000ebe:	f022 0204 	bic.w	r2, r2, #4
 8000ec2:	f840 2bd0 	str.w	r2, [r0], #208
 8000ec6:	9301      	str	r3, [sp, #4]
 8000ec8:	f000 f83c 	bl	8000f44 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000ecc:	9b01      	ldr	r3, [sp, #4]
 8000ece:	e7af      	b.n	8000e30 <_Unwind_VRS_Pop+0x174>
 8000ed0:	a822      	add	r0, sp, #136	; 0x88
 8000ed2:	9301      	str	r3, [sp, #4]
 8000ed4:	f000 f826 	bl	8000f24 <__gnu_Unwind_Save_VFP>
 8000ed8:	9b01      	ldr	r3, [sp, #4]
 8000eda:	e7b9      	b.n	8000e50 <_Unwind_VRS_Pop+0x194>
 8000edc:	f041 0102 	orr.w	r1, r1, #2
 8000ee0:	f840 1b48 	str.w	r1, [r0], #72
 8000ee4:	f000 f826 	bl	8000f34 <__gnu_Unwind_Save_VFP_D>
 8000ee8:	9b01      	ldr	r3, [sp, #4]
 8000eea:	e79c      	b.n	8000e26 <_Unwind_VRS_Pop+0x16a>
 8000eec:	2b01      	cmp	r3, #1
 8000eee:	d003      	beq.n	8000ef8 <_Unwind_VRS_Pop+0x23c>
 8000ef0:	2e0f      	cmp	r6, #15
 8000ef2:	f63f af5f 	bhi.w	8000db4 <_Unwind_VRS_Pop+0xf8>
 8000ef6:	e79f      	b.n	8000e38 <_Unwind_VRS_Pop+0x17c>
 8000ef8:	a822      	add	r0, sp, #136	; 0x88
 8000efa:	9301      	str	r3, [sp, #4]
 8000efc:	f000 f812 	bl	8000f24 <__gnu_Unwind_Save_VFP>
 8000f00:	9b01      	ldr	r3, [sp, #4]
 8000f02:	e757      	b.n	8000db4 <_Unwind_VRS_Pop+0xf8>

08000f04 <__restore_core_regs>:
 8000f04:	f100 0134 	add.w	r1, r0, #52	; 0x34
 8000f08:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 8000f0c:	469c      	mov	ip, r3
 8000f0e:	46a6      	mov	lr, r4
 8000f10:	f84c 5d04 	str.w	r5, [ip, #-4]!
 8000f14:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8000f18:	46e5      	mov	sp, ip
 8000f1a:	bd00      	pop	{pc}

08000f1c <__gnu_Unwind_Restore_VFP>:
 8000f1c:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop

08000f24 <__gnu_Unwind_Save_VFP>:
 8000f24:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop

08000f2c <__gnu_Unwind_Restore_VFP_D>:
 8000f2c:	ec90 0b20 	vldmia	r0, {d0-d15}
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop

08000f34 <__gnu_Unwind_Save_VFP_D>:
 8000f34:	ec80 0b20 	vstmia	r0, {d0-d15}
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop

08000f3c <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 8000f3c:	ecd0 0b20 	vldmia	r0, {d16-d31}
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop

08000f44 <__gnu_Unwind_Save_VFP_D_16_to_31>:
 8000f44:	ecc0 0b20 	vstmia	r0, {d16-d31}
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <__gnu_Unwind_Restore_WMMXD>:
 8000f4c:	ecf0 0102 	ldfe	f0, [r0], #8
 8000f50:	ecf0 1102 	ldfe	f1, [r0], #8
 8000f54:	ecf0 2102 	ldfe	f2, [r0], #8
 8000f58:	ecf0 3102 	ldfe	f3, [r0], #8
 8000f5c:	ecf0 4102 	ldfe	f4, [r0], #8
 8000f60:	ecf0 5102 	ldfe	f5, [r0], #8
 8000f64:	ecf0 6102 	ldfe	f6, [r0], #8
 8000f68:	ecf0 7102 	ldfe	f7, [r0], #8
 8000f6c:	ecf0 8102 	ldfp	f0, [r0], #8
 8000f70:	ecf0 9102 	ldfp	f1, [r0], #8
 8000f74:	ecf0 a102 	ldfp	f2, [r0], #8
 8000f78:	ecf0 b102 	ldfp	f3, [r0], #8
 8000f7c:	ecf0 c102 	ldfp	f4, [r0], #8
 8000f80:	ecf0 d102 	ldfp	f5, [r0], #8
 8000f84:	ecf0 e102 	ldfp	f6, [r0], #8
 8000f88:	ecf0 f102 	ldfp	f7, [r0], #8
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop

08000f90 <__gnu_Unwind_Save_WMMXD>:
 8000f90:	ece0 0102 	stfe	f0, [r0], #8
 8000f94:	ece0 1102 	stfe	f1, [r0], #8
 8000f98:	ece0 2102 	stfe	f2, [r0], #8
 8000f9c:	ece0 3102 	stfe	f3, [r0], #8
 8000fa0:	ece0 4102 	stfe	f4, [r0], #8
 8000fa4:	ece0 5102 	stfe	f5, [r0], #8
 8000fa8:	ece0 6102 	stfe	f6, [r0], #8
 8000fac:	ece0 7102 	stfe	f7, [r0], #8
 8000fb0:	ece0 8102 	stfp	f0, [r0], #8
 8000fb4:	ece0 9102 	stfp	f1, [r0], #8
 8000fb8:	ece0 a102 	stfp	f2, [r0], #8
 8000fbc:	ece0 b102 	stfp	f3, [r0], #8
 8000fc0:	ece0 c102 	stfp	f4, [r0], #8
 8000fc4:	ece0 d102 	stfp	f5, [r0], #8
 8000fc8:	ece0 e102 	stfp	f6, [r0], #8
 8000fcc:	ece0 f102 	stfp	f7, [r0], #8
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop

08000fd4 <__gnu_Unwind_Restore_WMMXC>:
 8000fd4:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 8000fd8:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 8000fdc:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 8000fe0:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop

08000fe8 <__gnu_Unwind_Save_WMMXC>:
 8000fe8:	fca0 8101 	stc2	1, cr8, [r0], #4
 8000fec:	fca0 9101 	stc2	1, cr9, [r0], #4
 8000ff0:	fca0 a101 	stc2	1, cr10, [r0], #4
 8000ff4:	fca0 b101 	stc2	1, cr11, [r0], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop

08000ffc <_Unwind_RaiseException>:
 8000ffc:	46ec      	mov	ip, sp
 8000ffe:	b500      	push	{lr}
 8001000:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001004:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001008:	f04f 0300 	mov.w	r3, #0
 800100c:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001010:	a901      	add	r1, sp, #4
 8001012:	f7ff fbf3 	bl	80007fc <__gnu_Unwind_RaiseException>
 8001016:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800101a:	b012      	add	sp, #72	; 0x48
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop

08001020 <_Unwind_Resume>:
 8001020:	46ec      	mov	ip, sp
 8001022:	b500      	push	{lr}
 8001024:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001028:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 800102c:	f04f 0300 	mov.w	r3, #0
 8001030:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001034:	a901      	add	r1, sp, #4
 8001036:	f7ff fc1b 	bl	8000870 <__gnu_Unwind_Resume>
 800103a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800103e:	b012      	add	sp, #72	; 0x48
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop

08001044 <_Unwind_Resume_or_Rethrow>:
 8001044:	46ec      	mov	ip, sp
 8001046:	b500      	push	{lr}
 8001048:	e92d 5000 	stmdb	sp!, {ip, lr}
 800104c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001050:	f04f 0300 	mov.w	r3, #0
 8001054:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001058:	a901      	add	r1, sp, #4
 800105a:	f7ff fc2b 	bl	80008b4 <__gnu_Unwind_Resume_or_Rethrow>
 800105e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001062:	b012      	add	sp, #72	; 0x48
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop

08001068 <_Unwind_ForcedUnwind>:
 8001068:	46ec      	mov	ip, sp
 800106a:	b500      	push	{lr}
 800106c:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001070:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001074:	f04f 0300 	mov.w	r3, #0
 8001078:	e92d 000c 	stmdb	sp!, {r2, r3}
 800107c:	ab01      	add	r3, sp, #4
 800107e:	f7ff fbed 	bl	800085c <__gnu_Unwind_ForcedUnwind>
 8001082:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001086:	b012      	add	sp, #72	; 0x48
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop

0800108c <_Unwind_Backtrace>:
 800108c:	46ec      	mov	ip, sp
 800108e:	b500      	push	{lr}
 8001090:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001094:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001098:	f04f 0300 	mov.w	r3, #0
 800109c:	e92d 000c 	stmdb	sp!, {r2, r3}
 80010a0:	aa01      	add	r2, sp, #4
 80010a2:	f7ff fc65 	bl	8000970 <__gnu_Unwind_Backtrace>
 80010a6:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80010aa:	b012      	add	sp, #72	; 0x48
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop

080010b0 <next_unwind_byte>:
 80010b0:	7a02      	ldrb	r2, [r0, #8]
 80010b2:	b91a      	cbnz	r2, 80010bc <next_unwind_byte+0xc>
 80010b4:	7a43      	ldrb	r3, [r0, #9]
 80010b6:	b943      	cbnz	r3, 80010ca <next_unwind_byte+0x1a>
 80010b8:	20b0      	movs	r0, #176	; 0xb0
 80010ba:	4770      	bx	lr
 80010bc:	6803      	ldr	r3, [r0, #0]
 80010be:	3a01      	subs	r2, #1
 80010c0:	7202      	strb	r2, [r0, #8]
 80010c2:	021a      	lsls	r2, r3, #8
 80010c4:	6002      	str	r2, [r0, #0]
 80010c6:	0e18      	lsrs	r0, r3, #24
 80010c8:	4770      	bx	lr
 80010ca:	6842      	ldr	r2, [r0, #4]
 80010cc:	3b01      	subs	r3, #1
 80010ce:	b410      	push	{r4}
 80010d0:	7243      	strb	r3, [r0, #9]
 80010d2:	6813      	ldr	r3, [r2, #0]
 80010d4:	2103      	movs	r1, #3
 80010d6:	1d14      	adds	r4, r2, #4
 80010d8:	7201      	strb	r1, [r0, #8]
 80010da:	021a      	lsls	r2, r3, #8
 80010dc:	6044      	str	r4, [r0, #4]
 80010de:	6002      	str	r2, [r0, #0]
 80010e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80010e4:	0e18      	lsrs	r0, r3, #24
 80010e6:	4770      	bx	lr

080010e8 <_Unwind_GetGR.constprop.0>:
 80010e8:	b500      	push	{lr}
 80010ea:	b085      	sub	sp, #20
 80010ec:	aa03      	add	r2, sp, #12
 80010ee:	2300      	movs	r3, #0
 80010f0:	9200      	str	r2, [sp, #0]
 80010f2:	4619      	mov	r1, r3
 80010f4:	220c      	movs	r2, #12
 80010f6:	f7ff fbed 	bl	80008d4 <_Unwind_VRS_Get>
 80010fa:	9803      	ldr	r0, [sp, #12]
 80010fc:	b005      	add	sp, #20
 80010fe:	f85d fb04 	ldr.w	pc, [sp], #4
 8001102:	bf00      	nop

08001104 <unwind_UCB_from_context>:
 8001104:	e7f0      	b.n	80010e8 <_Unwind_GetGR.constprop.0>
 8001106:	bf00      	nop

08001108 <__gnu_unwind_execute>:
 8001108:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800110c:	4606      	mov	r6, r0
 800110e:	b085      	sub	sp, #20
 8001110:	460f      	mov	r7, r1
 8001112:	f04f 0800 	mov.w	r8, #0
 8001116:	4638      	mov	r0, r7
 8001118:	f7ff ffca 	bl	80010b0 <next_unwind_byte>
 800111c:	28b0      	cmp	r0, #176	; 0xb0
 800111e:	4604      	mov	r4, r0
 8001120:	d023      	beq.n	800116a <__gnu_unwind_execute+0x62>
 8001122:	0605      	lsls	r5, r0, #24
 8001124:	d427      	bmi.n	8001176 <__gnu_unwind_execute+0x6e>
 8001126:	2300      	movs	r3, #0
 8001128:	f10d 090c 	add.w	r9, sp, #12
 800112c:	4619      	mov	r1, r3
 800112e:	0085      	lsls	r5, r0, #2
 8001130:	220d      	movs	r2, #13
 8001132:	f8cd 9000 	str.w	r9, [sp]
 8001136:	4630      	mov	r0, r6
 8001138:	f7ff fbcc 	bl	80008d4 <_Unwind_VRS_Get>
 800113c:	b2ed      	uxtb	r5, r5
 800113e:	9b03      	ldr	r3, [sp, #12]
 8001140:	f8cd 9000 	str.w	r9, [sp]
 8001144:	0660      	lsls	r0, r4, #25
 8001146:	f105 0504 	add.w	r5, r5, #4
 800114a:	bf4c      	ite	mi
 800114c:	1b5d      	submi	r5, r3, r5
 800114e:	18ed      	addpl	r5, r5, r3
 8001150:	2300      	movs	r3, #0
 8001152:	4619      	mov	r1, r3
 8001154:	220d      	movs	r2, #13
 8001156:	4630      	mov	r0, r6
 8001158:	9503      	str	r5, [sp, #12]
 800115a:	f7ff fbe1 	bl	8000920 <_Unwind_VRS_Set>
 800115e:	4638      	mov	r0, r7
 8001160:	f7ff ffa6 	bl	80010b0 <next_unwind_byte>
 8001164:	28b0      	cmp	r0, #176	; 0xb0
 8001166:	4604      	mov	r4, r0
 8001168:	d1db      	bne.n	8001122 <__gnu_unwind_execute+0x1a>
 800116a:	f1b8 0f00 	cmp.w	r8, #0
 800116e:	f000 8095 	beq.w	800129c <__gnu_unwind_execute+0x194>
 8001172:	2000      	movs	r0, #0
 8001174:	e01c      	b.n	80011b0 <__gnu_unwind_execute+0xa8>
 8001176:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 800117a:	2b80      	cmp	r3, #128	; 0x80
 800117c:	d05d      	beq.n	800123a <__gnu_unwind_execute+0x132>
 800117e:	2b90      	cmp	r3, #144	; 0x90
 8001180:	d019      	beq.n	80011b6 <__gnu_unwind_execute+0xae>
 8001182:	2ba0      	cmp	r3, #160	; 0xa0
 8001184:	d02c      	beq.n	80011e0 <__gnu_unwind_execute+0xd8>
 8001186:	2bb0      	cmp	r3, #176	; 0xb0
 8001188:	d03f      	beq.n	800120a <__gnu_unwind_execute+0x102>
 800118a:	2bc0      	cmp	r3, #192	; 0xc0
 800118c:	d06c      	beq.n	8001268 <__gnu_unwind_execute+0x160>
 800118e:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8001192:	2bd0      	cmp	r3, #208	; 0xd0
 8001194:	d10b      	bne.n	80011ae <__gnu_unwind_execute+0xa6>
 8001196:	f000 0207 	and.w	r2, r0, #7
 800119a:	3201      	adds	r2, #1
 800119c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80011a0:	2305      	movs	r3, #5
 80011a2:	2101      	movs	r1, #1
 80011a4:	4630      	mov	r0, r6
 80011a6:	f7ff fd89 	bl	8000cbc <_Unwind_VRS_Pop>
 80011aa:	2800      	cmp	r0, #0
 80011ac:	d0b3      	beq.n	8001116 <__gnu_unwind_execute+0xe>
 80011ae:	2009      	movs	r0, #9
 80011b0:	b005      	add	sp, #20
 80011b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80011b6:	f000 030d 	and.w	r3, r0, #13
 80011ba:	2b0d      	cmp	r3, #13
 80011bc:	d0f7      	beq.n	80011ae <__gnu_unwind_execute+0xa6>
 80011be:	ad03      	add	r5, sp, #12
 80011c0:	2300      	movs	r3, #0
 80011c2:	f000 020f 	and.w	r2, r0, #15
 80011c6:	4619      	mov	r1, r3
 80011c8:	9500      	str	r5, [sp, #0]
 80011ca:	4630      	mov	r0, r6
 80011cc:	f7ff fb82 	bl	80008d4 <_Unwind_VRS_Get>
 80011d0:	2300      	movs	r3, #0
 80011d2:	9500      	str	r5, [sp, #0]
 80011d4:	4619      	mov	r1, r3
 80011d6:	220d      	movs	r2, #13
 80011d8:	4630      	mov	r0, r6
 80011da:	f7ff fba1 	bl	8000920 <_Unwind_VRS_Set>
 80011de:	e79a      	b.n	8001116 <__gnu_unwind_execute+0xe>
 80011e0:	43c2      	mvns	r2, r0
 80011e2:	f002 0307 	and.w	r3, r2, #7
 80011e6:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 80011ea:	411a      	asrs	r2, r3
 80011ec:	0701      	lsls	r1, r0, #28
 80011ee:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 80011f2:	f04f 0300 	mov.w	r3, #0
 80011f6:	bf48      	it	mi
 80011f8:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 80011fc:	4619      	mov	r1, r3
 80011fe:	4630      	mov	r0, r6
 8001200:	f7ff fd5c 	bl	8000cbc <_Unwind_VRS_Pop>
 8001204:	2800      	cmp	r0, #0
 8001206:	d1d2      	bne.n	80011ae <__gnu_unwind_execute+0xa6>
 8001208:	e785      	b.n	8001116 <__gnu_unwind_execute+0xe>
 800120a:	28b1      	cmp	r0, #177	; 0xb1
 800120c:	d057      	beq.n	80012be <__gnu_unwind_execute+0x1b6>
 800120e:	28b2      	cmp	r0, #178	; 0xb2
 8001210:	d068      	beq.n	80012e4 <__gnu_unwind_execute+0x1dc>
 8001212:	28b3      	cmp	r0, #179	; 0xb3
 8001214:	f000 8095 	beq.w	8001342 <__gnu_unwind_execute+0x23a>
 8001218:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 800121c:	2bb4      	cmp	r3, #180	; 0xb4
 800121e:	d0c6      	beq.n	80011ae <__gnu_unwind_execute+0xa6>
 8001220:	f000 0207 	and.w	r2, r0, #7
 8001224:	3201      	adds	r2, #1
 8001226:	2301      	movs	r3, #1
 8001228:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800122c:	4619      	mov	r1, r3
 800122e:	4630      	mov	r0, r6
 8001230:	f7ff fd44 	bl	8000cbc <_Unwind_VRS_Pop>
 8001234:	2800      	cmp	r0, #0
 8001236:	d1ba      	bne.n	80011ae <__gnu_unwind_execute+0xa6>
 8001238:	e76d      	b.n	8001116 <__gnu_unwind_execute+0xe>
 800123a:	4638      	mov	r0, r7
 800123c:	f7ff ff38 	bl	80010b0 <next_unwind_byte>
 8001240:	0224      	lsls	r4, r4, #8
 8001242:	4304      	orrs	r4, r0
 8001244:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8001248:	d0b1      	beq.n	80011ae <__gnu_unwind_execute+0xa6>
 800124a:	0124      	lsls	r4, r4, #4
 800124c:	2300      	movs	r3, #0
 800124e:	b2a2      	uxth	r2, r4
 8001250:	4619      	mov	r1, r3
 8001252:	4630      	mov	r0, r6
 8001254:	f7ff fd32 	bl	8000cbc <_Unwind_VRS_Pop>
 8001258:	2800      	cmp	r0, #0
 800125a:	d1a8      	bne.n	80011ae <__gnu_unwind_execute+0xa6>
 800125c:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8001260:	bf18      	it	ne
 8001262:	f04f 0801 	movne.w	r8, #1
 8001266:	e756      	b.n	8001116 <__gnu_unwind_execute+0xe>
 8001268:	28c6      	cmp	r0, #198	; 0xc6
 800126a:	d07d      	beq.n	8001368 <__gnu_unwind_execute+0x260>
 800126c:	28c7      	cmp	r0, #199	; 0xc7
 800126e:	f000 8086 	beq.w	800137e <__gnu_unwind_execute+0x276>
 8001272:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8001276:	2bc0      	cmp	r3, #192	; 0xc0
 8001278:	f000 8094 	beq.w	80013a4 <__gnu_unwind_execute+0x29c>
 800127c:	28c8      	cmp	r0, #200	; 0xc8
 800127e:	f000 809f 	beq.w	80013c0 <__gnu_unwind_execute+0x2b8>
 8001282:	28c9      	cmp	r0, #201	; 0xc9
 8001284:	d193      	bne.n	80011ae <__gnu_unwind_execute+0xa6>
 8001286:	4638      	mov	r0, r7
 8001288:	f7ff ff12 	bl	80010b0 <next_unwind_byte>
 800128c:	0302      	lsls	r2, r0, #12
 800128e:	f000 000f 	and.w	r0, r0, #15
 8001292:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 8001296:	3001      	adds	r0, #1
 8001298:	4302      	orrs	r2, r0
 800129a:	e781      	b.n	80011a0 <__gnu_unwind_execute+0x98>
 800129c:	ac03      	add	r4, sp, #12
 800129e:	4643      	mov	r3, r8
 80012a0:	220e      	movs	r2, #14
 80012a2:	4641      	mov	r1, r8
 80012a4:	9400      	str	r4, [sp, #0]
 80012a6:	4630      	mov	r0, r6
 80012a8:	f7ff fb14 	bl	80008d4 <_Unwind_VRS_Get>
 80012ac:	9400      	str	r4, [sp, #0]
 80012ae:	4630      	mov	r0, r6
 80012b0:	4643      	mov	r3, r8
 80012b2:	220f      	movs	r2, #15
 80012b4:	4641      	mov	r1, r8
 80012b6:	f7ff fb33 	bl	8000920 <_Unwind_VRS_Set>
 80012ba:	4640      	mov	r0, r8
 80012bc:	e778      	b.n	80011b0 <__gnu_unwind_execute+0xa8>
 80012be:	4638      	mov	r0, r7
 80012c0:	f7ff fef6 	bl	80010b0 <next_unwind_byte>
 80012c4:	2800      	cmp	r0, #0
 80012c6:	f43f af72 	beq.w	80011ae <__gnu_unwind_execute+0xa6>
 80012ca:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 80012ce:	f47f af6e 	bne.w	80011ae <__gnu_unwind_execute+0xa6>
 80012d2:	4602      	mov	r2, r0
 80012d4:	4619      	mov	r1, r3
 80012d6:	4630      	mov	r0, r6
 80012d8:	f7ff fcf0 	bl	8000cbc <_Unwind_VRS_Pop>
 80012dc:	2800      	cmp	r0, #0
 80012de:	f47f af66 	bne.w	80011ae <__gnu_unwind_execute+0xa6>
 80012e2:	e718      	b.n	8001116 <__gnu_unwind_execute+0xe>
 80012e4:	2300      	movs	r3, #0
 80012e6:	f10d 090c 	add.w	r9, sp, #12
 80012ea:	220d      	movs	r2, #13
 80012ec:	4619      	mov	r1, r3
 80012ee:	f8cd 9000 	str.w	r9, [sp]
 80012f2:	4630      	mov	r0, r6
 80012f4:	f7ff faee 	bl	80008d4 <_Unwind_VRS_Get>
 80012f8:	4638      	mov	r0, r7
 80012fa:	f7ff fed9 	bl	80010b0 <next_unwind_byte>
 80012fe:	0602      	lsls	r2, r0, #24
 8001300:	f04f 0402 	mov.w	r4, #2
 8001304:	d50c      	bpl.n	8001320 <__gnu_unwind_execute+0x218>
 8001306:	9b03      	ldr	r3, [sp, #12]
 8001308:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800130c:	40a0      	lsls	r0, r4
 800130e:	4403      	add	r3, r0
 8001310:	4638      	mov	r0, r7
 8001312:	9303      	str	r3, [sp, #12]
 8001314:	f7ff fecc 	bl	80010b0 <next_unwind_byte>
 8001318:	0603      	lsls	r3, r0, #24
 800131a:	f104 0407 	add.w	r4, r4, #7
 800131e:	d4f2      	bmi.n	8001306 <__gnu_unwind_execute+0x1fe>
 8001320:	9b03      	ldr	r3, [sp, #12]
 8001322:	f8cd 9000 	str.w	r9, [sp]
 8001326:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 800132a:	40a2      	lsls	r2, r4
 800132c:	f503 7401 	add.w	r4, r3, #516	; 0x204
 8001330:	2300      	movs	r3, #0
 8001332:	4414      	add	r4, r2
 8001334:	4619      	mov	r1, r3
 8001336:	220d      	movs	r2, #13
 8001338:	4630      	mov	r0, r6
 800133a:	9403      	str	r4, [sp, #12]
 800133c:	f7ff faf0 	bl	8000920 <_Unwind_VRS_Set>
 8001340:	e6e9      	b.n	8001116 <__gnu_unwind_execute+0xe>
 8001342:	4638      	mov	r0, r7
 8001344:	f7ff feb4 	bl	80010b0 <next_unwind_byte>
 8001348:	0301      	lsls	r1, r0, #12
 800134a:	f000 000f 	and.w	r0, r0, #15
 800134e:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 8001352:	1c42      	adds	r2, r0, #1
 8001354:	2301      	movs	r3, #1
 8001356:	430a      	orrs	r2, r1
 8001358:	4630      	mov	r0, r6
 800135a:	4619      	mov	r1, r3
 800135c:	f7ff fcae 	bl	8000cbc <_Unwind_VRS_Pop>
 8001360:	2800      	cmp	r0, #0
 8001362:	f47f af24 	bne.w	80011ae <__gnu_unwind_execute+0xa6>
 8001366:	e6d6      	b.n	8001116 <__gnu_unwind_execute+0xe>
 8001368:	4638      	mov	r0, r7
 800136a:	f7ff fea1 	bl	80010b0 <next_unwind_byte>
 800136e:	0301      	lsls	r1, r0, #12
 8001370:	f000 000f 	and.w	r0, r0, #15
 8001374:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 8001378:	1c42      	adds	r2, r0, #1
 800137a:	2303      	movs	r3, #3
 800137c:	e7eb      	b.n	8001356 <__gnu_unwind_execute+0x24e>
 800137e:	4638      	mov	r0, r7
 8001380:	f7ff fe96 	bl	80010b0 <next_unwind_byte>
 8001384:	2800      	cmp	r0, #0
 8001386:	f43f af12 	beq.w	80011ae <__gnu_unwind_execute+0xa6>
 800138a:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 800138e:	f47f af0e 	bne.w	80011ae <__gnu_unwind_execute+0xa6>
 8001392:	4602      	mov	r2, r0
 8001394:	2104      	movs	r1, #4
 8001396:	4630      	mov	r0, r6
 8001398:	f7ff fc90 	bl	8000cbc <_Unwind_VRS_Pop>
 800139c:	2800      	cmp	r0, #0
 800139e:	f47f af06 	bne.w	80011ae <__gnu_unwind_execute+0xa6>
 80013a2:	e6b8      	b.n	8001116 <__gnu_unwind_execute+0xe>
 80013a4:	f000 020f 	and.w	r2, r0, #15
 80013a8:	3201      	adds	r2, #1
 80013aa:	2303      	movs	r3, #3
 80013ac:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 80013b0:	4619      	mov	r1, r3
 80013b2:	4630      	mov	r0, r6
 80013b4:	f7ff fc82 	bl	8000cbc <_Unwind_VRS_Pop>
 80013b8:	2800      	cmp	r0, #0
 80013ba:	f47f aef8 	bne.w	80011ae <__gnu_unwind_execute+0xa6>
 80013be:	e6aa      	b.n	8001116 <__gnu_unwind_execute+0xe>
 80013c0:	4638      	mov	r0, r7
 80013c2:	f7ff fe75 	bl	80010b0 <next_unwind_byte>
 80013c6:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 80013ca:	f000 030f 	and.w	r3, r0, #15
 80013ce:	3210      	adds	r2, #16
 80013d0:	3301      	adds	r3, #1
 80013d2:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 80013d6:	e6e3      	b.n	80011a0 <__gnu_unwind_execute+0x98>

080013d8 <__gnu_unwind_frame>:
 80013d8:	b510      	push	{r4, lr}
 80013da:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80013dc:	b084      	sub	sp, #16
 80013de:	685a      	ldr	r2, [r3, #4]
 80013e0:	2003      	movs	r0, #3
 80013e2:	f88d 000c 	strb.w	r0, [sp, #12]
 80013e6:	79dc      	ldrb	r4, [r3, #7]
 80013e8:	f88d 400d 	strb.w	r4, [sp, #13]
 80013ec:	0212      	lsls	r2, r2, #8
 80013ee:	3308      	adds	r3, #8
 80013f0:	4608      	mov	r0, r1
 80013f2:	a901      	add	r1, sp, #4
 80013f4:	9201      	str	r2, [sp, #4]
 80013f6:	9302      	str	r3, [sp, #8]
 80013f8:	f7ff fe86 	bl	8001108 <__gnu_unwind_execute>
 80013fc:	b004      	add	sp, #16
 80013fe:	bd10      	pop	{r4, pc}

08001400 <_Unwind_GetRegionStart>:
 8001400:	b508      	push	{r3, lr}
 8001402:	f7ff fe7f 	bl	8001104 <unwind_UCB_from_context>
 8001406:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8001408:	bd08      	pop	{r3, pc}
 800140a:	bf00      	nop

0800140c <_Unwind_GetLanguageSpecificData>:
 800140c:	b508      	push	{r3, lr}
 800140e:	f7ff fe79 	bl	8001104 <unwind_UCB_from_context>
 8001412:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8001414:	79c3      	ldrb	r3, [r0, #7]
 8001416:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800141a:	3008      	adds	r0, #8
 800141c:	bd08      	pop	{r3, pc}
 800141e:	bf00      	nop

08001420 <_Unwind_GetTextRelBase>:
 8001420:	b508      	push	{r3, lr}
 8001422:	f006 fcb5 	bl	8007d90 <abort>
 8001426:	bf00      	nop

08001428 <_Unwind_GetDataRelBase>:
 8001428:	b508      	push	{r3, lr}
 800142a:	f7ff fff9 	bl	8001420 <_Unwind_GetTextRelBase>
 800142e:	bf00      	nop

08001430 <__aeabi_idiv0>:
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop

08001434 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8001434:	f8df d034 	ldr.w	sp, [pc, #52]	; 800146c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8001438:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800143a:	e003      	b.n	8001444 <LoopCopyDataInit>

0800143c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800143c:	4b0c      	ldr	r3, [pc, #48]	; (8001470 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800143e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001440:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001442:	3104      	adds	r1, #4

08001444 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001444:	480b      	ldr	r0, [pc, #44]	; (8001474 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001446:	4b0c      	ldr	r3, [pc, #48]	; (8001478 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001448:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800144a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800144c:	d3f6      	bcc.n	800143c <CopyDataInit>
  ldr  r2, =_sbss
 800144e:	4a0b      	ldr	r2, [pc, #44]	; (800147c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001450:	e002      	b.n	8001458 <LoopFillZerobss>

08001452 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8001452:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001454:	f842 3b04 	str.w	r3, [r2], #4

08001458 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001458:	4b09      	ldr	r3, [pc, #36]	; (8001480 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800145a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800145c:	d3f9      	bcc.n	8001452 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800145e:	f002 fdc5 	bl	8003fec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001462:	f006 fca3 	bl	8007dac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001466:	f001 f97f 	bl	8002768 <main>
  bx  lr    
 800146a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800146c:	20008000 	.word	0x20008000
  ldr  r3, =_sidata
 8001470:	08009b58 	.word	0x08009b58
  ldr  r0, =_sdata
 8001474:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001478:	20000518 	.word	0x20000518
  ldr  r2, =_sbss
 800147c:	20000518 	.word	0x20000518
  ldr  r3, = _ebss
 8001480:	20003e64 	.word	0x20003e64

08001484 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001484:	e7fe      	b.n	8001484 <ADC_IRQHandler>
	...

08001488 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001488:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  ADC_ChannelConfTypeDef sConfig;

    /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
    */
  hadc1.Instance = ADC1;
 800148a:	4815      	ldr	r0, [pc, #84]	; (80014e0 <MX_ADC1_Init+0x58>)
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800148c:	4a15      	ldr	r2, [pc, #84]	; (80014e4 <MX_ADC1_Init+0x5c>)
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.ScanConvMode = ENABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800148e:	4916      	ldr	r1, [pc, #88]	; (80014e8 <MX_ADC1_Init+0x60>)
 8001490:	6281      	str	r1, [r0, #40]	; 0x28
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001492:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001496:	e880 000c 	stmia.w	r0, {r2, r3}
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800149a:	2300      	movs	r3, #0
  hadc1.Init.ScanConvMode = ENABLE;
 800149c:	2201      	movs	r2, #1
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800149e:	6083      	str	r3, [r0, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80014a0:	6102      	str	r2, [r0, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80014a2:	6183      	str	r3, [r0, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80014a4:	6203      	str	r3, [r0, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80014a6:	62c3      	str	r3, [r0, #44]	; 0x2c
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014a8:	60c3      	str	r3, [r0, #12]
  hadc1.Init.NbrOfConversion = 1;
 80014aa:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80014ac:	6303      	str	r3, [r0, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014ae:	6142      	str	r2, [r0, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80014b0:	f002 fe0e 	bl	80040d0 <HAL_ADC_Init>
 80014b4:	b118      	cbz	r0, 80014be <MX_ADC1_Init+0x36>
  {
    _Error_Handler(__FILE__, __LINE__);
 80014b6:	2148      	movs	r1, #72	; 0x48
 80014b8:	480c      	ldr	r0, [pc, #48]	; (80014ec <MX_ADC1_Init+0x64>)
 80014ba:	f001 f839 	bl	8002530 <_Error_Handler>

    /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
    */
  sConfig.Channel = ADC_CHANNEL_2;
  sConfig.Rank = 1;
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80014be:	2102      	movs	r1, #2
 80014c0:	2201      	movs	r2, #1
 80014c2:	2300      	movs	r3, #0
 80014c4:	e88d 000e 	stmia.w	sp, {r1, r2, r3}
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014c8:	4805      	ldr	r0, [pc, #20]	; (80014e0 <MX_ADC1_Init+0x58>)
 80014ca:	4669      	mov	r1, sp
 80014cc:	f002 fea4 	bl	8004218 <HAL_ADC_ConfigChannel>
 80014d0:	b118      	cbz	r0, 80014da <MX_ADC1_Init+0x52>
  {
    _Error_Handler(__FILE__, __LINE__);
 80014d2:	2152      	movs	r1, #82	; 0x52
 80014d4:	4805      	ldr	r0, [pc, #20]	; (80014ec <MX_ADC1_Init+0x64>)
 80014d6:	f001 f82b 	bl	8002530 <_Error_Handler>
  }

}
 80014da:	b005      	add	sp, #20
 80014dc:	f85d fb04 	ldr.w	pc, [sp], #4
 80014e0:	20000a24 	.word	0x20000a24
 80014e4:	40012000 	.word	0x40012000
 80014e8:	0f000001 	.word	0x0f000001
 80014ec:	080089d8 	.word	0x080089d8

080014f0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80014f0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(adcHandle->Instance==ADC1)
 80014f2:	6802      	ldr	r2, [r0, #0]
 80014f4:	4b0d      	ldr	r3, [pc, #52]	; (800152c <HAL_ADC_MspInit+0x3c>)
 80014f6:	429a      	cmp	r2, r3
 80014f8:	d114      	bne.n	8001524 <HAL_ADC_MspInit+0x34>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80014fa:	2100      	movs	r1, #0
 80014fc:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8001500:	9100      	str	r1, [sp, #0]
 8001502:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    PA4     ------> ADC1_IN4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001504:	480a      	ldr	r0, [pc, #40]	; (8001530 <HAL_ADC_MspInit+0x40>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001506:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800150a:	645a      	str	r2, [r3, #68]	; 0x44
 800150c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150e:	9103      	str	r1, [sp, #12]
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001510:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001514:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 8001516:	231e      	movs	r3, #30
 8001518:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800151a:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800151c:	2303      	movs	r3, #3
 800151e:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001520:	f003 fae2 	bl	8004ae8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001524:	b007      	add	sp, #28
 8001526:	f85d fb04 	ldr.w	pc, [sp], #4
 800152a:	bf00      	nop
 800152c:	40012000 	.word	0x40012000
 8001530:	40020000 	.word	0x40020000

08001534 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8001534:	b507      	push	{r0, r1, r2, lr}
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001536:	2300      	movs	r3, #0
 8001538:	9301      	str	r3, [sp, #4]
 800153a:	4b0e      	ldr	r3, [pc, #56]	; (8001574 <MX_DMA_Init+0x40>)
 800153c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800153e:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001542:	631a      	str	r2, [r3, #48]	; 0x30
 8001544:	6b1b      	ldr	r3, [r3, #48]	; 0x30

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 2, 1);
 8001546:	2201      	movs	r2, #1
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001548:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 2, 1);
 800154c:	2102      	movs	r1, #2
 800154e:	203a      	movs	r0, #58	; 0x3a
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001550:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 2, 1);
 8001552:	f002 ff07 	bl	8004364 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001556:	203a      	movs	r0, #58	; 0x3a
 8001558:	f002 ff38 	bl	80043cc <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 2, 1);
 800155c:	2201      	movs	r2, #1
 800155e:	2102      	movs	r1, #2
 8001560:	2046      	movs	r0, #70	; 0x46
 8001562:	f002 feff 	bl	8004364 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8001566:	2046      	movs	r0, #70	; 0x46
 8001568:	f002 ff30 	bl	80043cc <HAL_NVIC_EnableIRQ>

}
 800156c:	b003      	add	sp, #12
 800156e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001572:	bf00      	nop
 8001574:	40023800 	.word	0x40023800

08001578 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001578:	b5f0      	push	{r4, r5, r6, r7, lr}
 800157a:	b08b      	sub	sp, #44	; 0x2c

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800157c:	4b25      	ldr	r3, [pc, #148]	; (8001614 <MX_GPIO_Init+0x9c>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PC13_LED_GPIO_Port, PC13_LED_Pin, GPIO_PIN_RESET);
 800157e:	4f26      	ldr	r7, [pc, #152]	; (8001618 <MX_GPIO_Init+0xa0>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8001580:	4e26      	ldr	r6, [pc, #152]	; (800161c <MX_GPIO_Init+0xa4>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001582:	2400      	movs	r4, #0
 8001584:	9401      	str	r4, [sp, #4]
 8001586:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001588:	f042 0204 	orr.w	r2, r2, #4
 800158c:	631a      	str	r2, [r3, #48]	; 0x30
 800158e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001590:	f002 0204 	and.w	r2, r2, #4
 8001594:	9201      	str	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001596:	9402      	str	r4, [sp, #8]
 8001598:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800159a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800159e:	631a      	str	r2, [r3, #48]	; 0x30
 80015a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015a2:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80015a6:	9202      	str	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015a8:	9403      	str	r4, [sp, #12]
 80015aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015ac:	f042 0201 	orr.w	r2, r2, #1
 80015b0:	631a      	str	r2, [r3, #48]	; 0x30
 80015b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015b4:	f002 0201 	and.w	r2, r2, #1
 80015b8:	9203      	str	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ba:	9404      	str	r4, [sp, #16]
 80015bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015be:	f042 0202 	orr.w	r2, r2, #2
 80015c2:	631a      	str	r2, [r3, #48]	; 0x30
 80015c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(PC13_LED_GPIO_Port, PC13_LED_Pin, GPIO_PIN_RESET);
 80015c6:	4622      	mov	r2, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015c8:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(PC13_LED_GPIO_Port, PC13_LED_Pin, GPIO_PIN_RESET);
 80015cc:	4638      	mov	r0, r7
 80015ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015d2:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(PC13_LED_GPIO_Port, PC13_LED_Pin, GPIO_PIN_RESET);
 80015d4:	f003 fb42 	bl	8004c5c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 80015d8:	4622      	mov	r2, r4
 80015da:	4630      	mov	r0, r6
 80015dc:	2140      	movs	r1, #64	; 0x40
 80015de:	f003 fb3d 	bl	8004c5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PC13_LED_Pin;
 80015e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015e6:	2501      	movs	r5, #1
  GPIO_InitStruct.Pin = PC13_LED_Pin;
 80015e8:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(PC13_LED_GPIO_Port, &GPIO_InitStruct);
 80015ea:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80015ec:	2311      	movs	r3, #17
  HAL_GPIO_Init(PC13_LED_GPIO_Port, &GPIO_InitStruct);
 80015ee:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80015f0:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015f2:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f4:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(PC13_LED_GPIO_Port, &GPIO_InitStruct);
 80015f6:	f003 fa77 	bl	8004ae8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 80015fa:	2340      	movs	r3, #64	; 0x40
 80015fc:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 80015fe:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001600:	2302      	movs	r3, #2
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8001602:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001604:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001606:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001608:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 800160a:	f003 fa6d 	bl	8004ae8 <HAL_GPIO_Init>

}
 800160e:	b00b      	add	sp, #44	; 0x2c
 8001610:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001612:	bf00      	nop
 8001614:	40023800 	.word	0x40023800
 8001618:	40020800 	.word	0x40020800
 800161c:	40020400 	.word	0x40020400

08001620 <_ZNK8std_msgs4Time9serializeEPh>:
    }

    virtual int serialize(unsigned char *outbuffer) const
    {
      int offset = 0;
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8001620:	6843      	ldr	r3, [r0, #4]
 8001622:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8001624:	6843      	ldr	r3, [r0, #4]
 8001626:	0a1b      	lsrs	r3, r3, #8
 8001628:	704b      	strb	r3, [r1, #1]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 800162a:	88c3      	ldrh	r3, [r0, #6]
 800162c:	708b      	strb	r3, [r1, #2]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 800162e:	79c3      	ldrb	r3, [r0, #7]
 8001630:	70cb      	strb	r3, [r1, #3]
      offset += sizeof(this->data.sec);
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8001632:	6883      	ldr	r3, [r0, #8]
 8001634:	710b      	strb	r3, [r1, #4]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8001636:	6883      	ldr	r3, [r0, #8]
 8001638:	0a1b      	lsrs	r3, r3, #8
 800163a:	714b      	strb	r3, [r1, #5]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 800163c:	8943      	ldrh	r3, [r0, #10]
 800163e:	718b      	strb	r3, [r1, #6]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8001640:	7ac3      	ldrb	r3, [r0, #11]
 8001642:	71cb      	strb	r3, [r1, #7]
      offset += sizeof(this->data.nsec);
      return offset;
    }
 8001644:	2008      	movs	r0, #8
 8001646:	4770      	bx	lr

08001648 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
    {
      int offset = 0;
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8001648:	780b      	ldrb	r3, [r1, #0]
 800164a:	6043      	str	r3, [r0, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800164c:	784a      	ldrb	r2, [r1, #1]
 800164e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001652:	6043      	str	r3, [r0, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001654:	788a      	ldrb	r2, [r1, #2]
 8001656:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800165a:	6043      	str	r3, [r0, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800165c:	78ca      	ldrb	r2, [r1, #3]
 800165e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001662:	6043      	str	r3, [r0, #4]
      offset += sizeof(this->data.sec);
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8001664:	790b      	ldrb	r3, [r1, #4]
 8001666:	6083      	str	r3, [r0, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001668:	794a      	ldrb	r2, [r1, #5]
 800166a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800166e:	6083      	str	r3, [r0, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001670:	798a      	ldrb	r2, [r1, #6]
 8001672:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001676:	6083      	str	r3, [r0, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001678:	79ca      	ldrb	r2, [r1, #7]
 800167a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800167e:	6083      	str	r3, [r0, #8]
      offset += sizeof(this->data.nsec);
     return offset;
    }
 8001680:	2008      	movs	r0, #8
 8001682:	4770      	bx	lr

08001684 <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 8001684:	4800      	ldr	r0, [pc, #0]	; (8001688 <_ZN8std_msgs4Time7getTypeEv+0x4>)
 8001686:	4770      	bx	lr
 8001688:	08009067 	.word	0x08009067

0800168c <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 800168c:	4800      	ldr	r0, [pc, #0]	; (8001690 <_ZN8std_msgs4Time6getMD5Ev+0x4>)
 800168e:	4770      	bx	lr
 8001690:	08009046 	.word	0x08009046

08001694 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
      offset += sizeof(this->buffer_size);
      return offset;
    }

    virtual int deserialize(unsigned char *inbuffer)
 8001694:	b530      	push	{r4, r5, lr}
    {
      int offset = 0;
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8001696:	780b      	ldrb	r3, [r1, #0]
 8001698:	8083      	strh	r3, [r0, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800169a:	784a      	ldrb	r2, [r1, #1]
 800169c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80016a0:	8083      	strh	r3, [r0, #4]
      offset += sizeof(this->topic_id);
      uint32_t length_topic_name;
      memcpy(&length_topic_name, (inbuffer + offset), sizeof(uint32_t));
 80016a2:	f8d1 2002 	ldr.w	r2, [r1, #2]
 80016a6:	1d8b      	adds	r3, r1, #6
      offset += 4;
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80016a8:	1d94      	adds	r4, r2, #6
 80016aa:	1a5d      	subs	r5, r3, r1
 80016ac:	42ac      	cmp	r4, r5
 80016ae:	d904      	bls.n	80016ba <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x26>
          inbuffer[k-1]=inbuffer[k];
 80016b0:	f813 5b01 	ldrb.w	r5, [r3], #1
 80016b4:	f803 5c02 	strb.w	r5, [r3, #-2]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80016b8:	e7f7      	b.n	80016aa <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x16>
      }
      inbuffer[offset+length_topic_name-1]=0;
 80016ba:	188b      	adds	r3, r1, r2
 80016bc:	2500      	movs	r5, #0
 80016be:	715d      	strb	r5, [r3, #5]
      this->topic_name = (char *)(inbuffer + offset-1);
 80016c0:	1d4b      	adds	r3, r1, #5
 80016c2:	6083      	str	r3, [r0, #8]
      offset += length_topic_name;
      uint32_t length_message_type;
      memcpy(&length_message_type, (inbuffer + offset), sizeof(uint32_t));
 80016c4:	590b      	ldr	r3, [r1, r4]
      offset += 4;
 80016c6:	320a      	adds	r2, #10
 80016c8:	188c      	adds	r4, r1, r2
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80016ca:	4413      	add	r3, r2
 80016cc:	1a65      	subs	r5, r4, r1
 80016ce:	42ab      	cmp	r3, r5
 80016d0:	d904      	bls.n	80016dc <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x48>
          inbuffer[k-1]=inbuffer[k];
 80016d2:	f814 5b01 	ldrb.w	r5, [r4], #1
 80016d6:	f804 5c02 	strb.w	r5, [r4, #-2]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80016da:	e7f7      	b.n	80016cc <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x38>
      }
      inbuffer[offset+length_message_type-1]=0;
 80016dc:	18cc      	adds	r4, r1, r3
      this->message_type = (char *)(inbuffer + offset-1);
 80016de:	3a01      	subs	r2, #1
 80016e0:	440a      	add	r2, r1
      inbuffer[offset+length_message_type-1]=0;
 80016e2:	2500      	movs	r5, #0
 80016e4:	f804 5c01 	strb.w	r5, [r4, #-1]
      this->message_type = (char *)(inbuffer + offset-1);
 80016e8:	60c2      	str	r2, [r0, #12]
      offset += length_message_type;
      uint32_t length_md5sum;
      memcpy(&length_md5sum, (inbuffer + offset), sizeof(uint32_t));
 80016ea:	58ca      	ldr	r2, [r1, r3]
      offset += 4;
 80016ec:	3304      	adds	r3, #4
 80016ee:	18cc      	adds	r4, r1, r3
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80016f0:	441a      	add	r2, r3
 80016f2:	1a65      	subs	r5, r4, r1
 80016f4:	42aa      	cmp	r2, r5
 80016f6:	d904      	bls.n	8001702 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x6e>
          inbuffer[k-1]=inbuffer[k];
 80016f8:	f814 5b01 	ldrb.w	r5, [r4], #1
 80016fc:	f804 5c02 	strb.w	r5, [r4, #-2]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8001700:	e7f7      	b.n	80016f2 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5e>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8001702:	188c      	adds	r4, r1, r2
      this->md5sum = (char *)(inbuffer + offset-1);
 8001704:	3b01      	subs	r3, #1
 8001706:	440b      	add	r3, r1
      inbuffer[offset+length_md5sum-1]=0;
 8001708:	2500      	movs	r5, #0
 800170a:	f804 5c01 	strb.w	r5, [r4, #-1]
      this->md5sum = (char *)(inbuffer + offset-1);
 800170e:	6103      	str	r3, [r0, #16]
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001710:	78a3      	ldrb	r3, [r4, #2]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001712:	7865      	ldrb	r5, [r4, #1]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001714:	5c89      	ldrb	r1, [r1, r2]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001716:	041b      	lsls	r3, r3, #16
 8001718:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 800171c:	430b      	orrs	r3, r1
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800171e:	78e1      	ldrb	r1, [r4, #3]
 8001720:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
      this->buffer_size = u_buffer_size.real;
 8001724:	6143      	str	r3, [r0, #20]
      offset += sizeof(this->buffer_size);
     return offset;
    }
 8001726:	1d10      	adds	r0, r2, #4
 8001728:	bd30      	pop	{r4, r5, pc}
	...

0800172c <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 800172c:	4800      	ldr	r0, [pc, #0]	; (8001730 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x4>)
 800172e:	4770      	bx	lr
 8001730:	08008eda 	.word	0x08008eda

08001734 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 8001734:	4800      	ldr	r0, [pc, #0]	; (8001738 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x4>)
 8001736:	4770      	bx	lr
 8001738:	08008eb9 	.word	0x08008eb9

0800173c <_ZN14rosserial_msgs3Log11deserializeEPh>:
      memcpy(outbuffer + offset, this->msg, length_msg);
      offset += length_msg;
      return offset;
    }

    virtual int deserialize(unsigned char *inbuffer)
 800173c:	b530      	push	{r4, r5, lr}
    {
      int offset = 0;
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 800173e:	780b      	ldrb	r3, [r1, #0]
 8001740:	7103      	strb	r3, [r0, #4]
      offset += sizeof(this->level);
      uint32_t length_msg;
      memcpy(&length_msg, (inbuffer + offset), sizeof(uint32_t));
 8001742:	f8d1 3001 	ldr.w	r3, [r1, #1]
    virtual int deserialize(unsigned char *inbuffer)
 8001746:	4604      	mov	r4, r0
 8001748:	1d4a      	adds	r2, r1, #5
      offset += 4;
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 800174a:	1d58      	adds	r0, r3, #5
 800174c:	1a55      	subs	r5, r2, r1
 800174e:	42a8      	cmp	r0, r5
 8001750:	d904      	bls.n	800175c <_ZN14rosserial_msgs3Log11deserializeEPh+0x20>
          inbuffer[k-1]=inbuffer[k];
 8001752:	f812 5b01 	ldrb.w	r5, [r2], #1
 8001756:	f802 5c02 	strb.w	r5, [r2, #-2]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 800175a:	e7f7      	b.n	800174c <_ZN14rosserial_msgs3Log11deserializeEPh+0x10>
      }
      inbuffer[offset+length_msg-1]=0;
 800175c:	440b      	add	r3, r1
 800175e:	2200      	movs	r2, #0
 8001760:	711a      	strb	r2, [r3, #4]
      this->msg = (char *)(inbuffer + offset-1);
 8001762:	3104      	adds	r1, #4
 8001764:	60a1      	str	r1, [r4, #8]
      offset += length_msg;
     return offset;
    }
 8001766:	bd30      	pop	{r4, r5, pc}

08001768 <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 8001768:	4800      	ldr	r0, [pc, #0]	; (800176c <_ZN14rosserial_msgs3Log7getTypeEv+0x4>)
 800176a:	4770      	bx	lr
 800176c:	08008ea6 	.word	0x08008ea6

08001770 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 8001770:	4800      	ldr	r0, [pc, #0]	; (8001774 <_ZN14rosserial_msgs3Log6getMD5Ev+0x4>)
 8001772:	4770      	bx	lr
 8001774:	08008e85 	.word	0x08008e85

08001778 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
      }
     return offset;
    }

    const char * getType(){ return REQUESTPARAM; };
 8001778:	4800      	ldr	r0, [pc, #0]	; (800177c <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x4>)
 800177a:	4770      	bx	lr
 800177c:	080089bc 	.word	0x080089bc

08001780 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 8001780:	4800      	ldr	r0, [pc, #0]	; (8001784 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x4>)
 8001782:	4770      	bx	lr
 8001784:	08008e64 	.word	0x08008e64

08001788 <_ZNK8std_msgs4Int89serializeEPh>:
      union {
        int8_t real;
        uint8_t base;
      } u_data;
      u_data.real = this->data;
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 8001788:	7903      	ldrb	r3, [r0, #4]
 800178a:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->data);
      return offset;
    }
 800178c:	2001      	movs	r0, #1
 800178e:	4770      	bx	lr

08001790 <_ZN8std_msgs4Int811deserializeEPh>:
        int8_t real;
        uint8_t base;
      } u_data;
      u_data.base = 0;
      u_data.base |= ((uint8_t) (*(inbuffer + offset + 0))) << (8 * 0);
      this->data = u_data.real;
 8001790:	780b      	ldrb	r3, [r1, #0]
 8001792:	7103      	strb	r3, [r0, #4]
      offset += sizeof(this->data);
     return offset;
    }
 8001794:	2001      	movs	r0, #1
 8001796:	4770      	bx	lr

08001798 <_ZN8std_msgs4Int87getTypeEv>:

    const char * getType(){ return "std_msgs/Int8"; };
 8001798:	4800      	ldr	r0, [pc, #0]	; (800179c <_ZN8std_msgs4Int87getTypeEv+0x4>)
 800179a:	4770      	bx	lr
 800179c:	08009038 	.word	0x08009038

080017a0 <_ZN8std_msgs4Int86getMD5Ev>:
    const char * getMD5(){ return "27ffa0c9c4b8fb8492252bcad9e5c57b"; };
 80017a0:	4800      	ldr	r0, [pc, #0]	; (80017a4 <_ZN8std_msgs4Int86getMD5Ev+0x4>)
 80017a2:	4770      	bx	lr
 80017a4:	08009017 	.word	0x08009017

080017a8 <_ZNK13geometry_msgs7Vector39serializeEPh>:
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 80017a8:	6882      	ldr	r2, [r0, #8]
 80017aa:	68c3      	ldr	r3, [r0, #12]
 80017ac:	700a      	strb	r2, [r1, #0]
    virtual int serialize(unsigned char *outbuffer) const
 80017ae:	b510      	push	{r4, lr}
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 80017b0:	0a14      	lsrs	r4, r2, #8
 80017b2:	704c      	strb	r4, [r1, #1]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 80017b4:	0c14      	lsrs	r4, r2, #16
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 80017b6:	0e12      	lsrs	r2, r2, #24
 80017b8:	70ca      	strb	r2, [r1, #3]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 80017ba:	0a1a      	lsrs	r2, r3, #8
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 80017bc:	710b      	strb	r3, [r1, #4]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 80017be:	714a      	strb	r2, [r1, #5]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 80017c0:	0c1a      	lsrs	r2, r3, #16
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 80017c2:	0e1b      	lsrs	r3, r3, #24
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 80017c4:	708c      	strb	r4, [r1, #2]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 80017c6:	718a      	strb	r2, [r1, #6]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 80017c8:	71cb      	strb	r3, [r1, #7]
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 80017ca:	6902      	ldr	r2, [r0, #16]
 80017cc:	6943      	ldr	r3, [r0, #20]
 80017ce:	720a      	strb	r2, [r1, #8]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 80017d0:	0a14      	lsrs	r4, r2, #8
 80017d2:	724c      	strb	r4, [r1, #9]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 80017d4:	0c14      	lsrs	r4, r2, #16
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 80017d6:	0e12      	lsrs	r2, r2, #24
 80017d8:	72ca      	strb	r2, [r1, #11]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 80017da:	0a1a      	lsrs	r2, r3, #8
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 80017dc:	730b      	strb	r3, [r1, #12]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 80017de:	734a      	strb	r2, [r1, #13]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 80017e0:	0c1a      	lsrs	r2, r3, #16
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 80017e2:	0e1b      	lsrs	r3, r3, #24
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 80017e4:	728c      	strb	r4, [r1, #10]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 80017e6:	738a      	strb	r2, [r1, #14]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 80017e8:	73cb      	strb	r3, [r1, #15]
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 80017ea:	6982      	ldr	r2, [r0, #24]
 80017ec:	69c3      	ldr	r3, [r0, #28]
 80017ee:	740a      	strb	r2, [r1, #16]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 80017f0:	0a10      	lsrs	r0, r2, #8
 80017f2:	7448      	strb	r0, [r1, #17]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 80017f4:	0c10      	lsrs	r0, r2, #16
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 80017f6:	0e12      	lsrs	r2, r2, #24
 80017f8:	74ca      	strb	r2, [r1, #19]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 80017fa:	0a1a      	lsrs	r2, r3, #8
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 80017fc:	750b      	strb	r3, [r1, #20]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 80017fe:	754a      	strb	r2, [r1, #21]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 8001800:	0c1a      	lsrs	r2, r3, #16
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 8001802:	0e1b      	lsrs	r3, r3, #24
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 8001804:	7488      	strb	r0, [r1, #18]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 8001806:	758a      	strb	r2, [r1, #22]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 8001808:	75cb      	strb	r3, [r1, #23]
      offset += sizeof(this->z);
      return offset;
    }
 800180a:	2018      	movs	r0, #24
 800180c:	bd10      	pop	{r4, pc}

0800180e <_ZN13geometry_msgs7Vector311deserializeEPh>:
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 800180e:	680a      	ldr	r2, [r1, #0]
 8001810:	684b      	ldr	r3, [r1, #4]
      this->x = u_x.real;
 8001812:	e9c0 2302 	strd	r2, r3, [r0, #8]
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8001816:	688a      	ldr	r2, [r1, #8]
 8001818:	68cb      	ldr	r3, [r1, #12]
      this->y = u_y.real;
 800181a:	e9c0 2304 	strd	r2, r3, [r0, #16]
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 800181e:	690a      	ldr	r2, [r1, #16]
 8001820:	694b      	ldr	r3, [r1, #20]
      this->z = u_z.real;
 8001822:	e9c0 2306 	strd	r2, r3, [r0, #24]
      offset += sizeof(this->z);
     return offset;
    }
 8001826:	2018      	movs	r0, #24
 8001828:	4770      	bx	lr
	...

0800182c <_ZN13geometry_msgs7Vector37getTypeEv>:

    const char * getType(){ return "geometry_msgs/Vector3"; };
 800182c:	4800      	ldr	r0, [pc, #0]	; (8001830 <_ZN13geometry_msgs7Vector37getTypeEv+0x4>)
 800182e:	4770      	bx	lr
 8001830:	08008e4e 	.word	0x08008e4e

08001834 <_ZN13geometry_msgs7Vector36getMD5Ev>:
    const char * getMD5(){ return "4a842b65f413084dc2b10fb484ea7f17"; };
 8001834:	4800      	ldr	r0, [pc, #0]	; (8001838 <_ZN13geometry_msgs7Vector36getMD5Ev+0x4>)
 8001836:	4770      	bx	lr
 8001838:	08008e2d 	.word	0x08008e2d

0800183c <_ZNK13geometry_msgs5Twist9serializeEPh>:
      linear(),
      angular()
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
 800183c:	b570      	push	{r4, r5, r6, lr}
 800183e:	4605      	mov	r5, r0
    {
      int offset = 0;
      offset += this->linear.serialize(outbuffer + offset);
 8001840:	3008      	adds	r0, #8
    virtual int serialize(unsigned char *outbuffer) const
 8001842:	460e      	mov	r6, r1
      offset += this->linear.serialize(outbuffer + offset);
 8001844:	f7ff ffb0 	bl	80017a8 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8001848:	4604      	mov	r4, r0
      offset += this->angular.serialize(outbuffer + offset);
 800184a:	1831      	adds	r1, r6, r0
 800184c:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8001850:	f7ff ffaa 	bl	80017a8 <_ZNK13geometry_msgs7Vector39serializeEPh>
      return offset;
    }
 8001854:	4420      	add	r0, r4
 8001856:	bd70      	pop	{r4, r5, r6, pc}

08001858 <_ZN13geometry_msgs5Twist11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001858:	b570      	push	{r4, r5, r6, lr}
 800185a:	4605      	mov	r5, r0
    {
      int offset = 0;
      offset += this->linear.deserialize(inbuffer + offset);
 800185c:	3008      	adds	r0, #8
    virtual int deserialize(unsigned char *inbuffer)
 800185e:	460e      	mov	r6, r1
      offset += this->linear.deserialize(inbuffer + offset);
 8001860:	f7ff ffd5 	bl	800180e <_ZN13geometry_msgs7Vector311deserializeEPh>
 8001864:	4604      	mov	r4, r0
      offset += this->angular.deserialize(inbuffer + offset);
 8001866:	1831      	adds	r1, r6, r0
 8001868:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800186c:	f7ff ffcf 	bl	800180e <_ZN13geometry_msgs7Vector311deserializeEPh>
     return offset;
    }
 8001870:	4420      	add	r0, r4
 8001872:	bd70      	pop	{r4, r5, r6, pc}

08001874 <_ZN13geometry_msgs5Twist7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Twist"; };
 8001874:	4800      	ldr	r0, [pc, #0]	; (8001878 <_ZN13geometry_msgs5Twist7getTypeEv+0x4>)
 8001876:	4770      	bx	lr
 8001878:	08008e19 	.word	0x08008e19

0800187c <_ZN13geometry_msgs5Twist6getMD5Ev>:
    const char * getMD5(){ return "9f195f881246fdfa2798d1d3eebca84a"; };
 800187c:	4800      	ldr	r0, [pc, #0]	; (8001880 <_ZN13geometry_msgs5Twist6getMD5Ev+0x4>)
 800187e:	4770      	bx	lr
 8001880:	08008df8 	.word	0x08008df8

08001884 <_ZNK6kduino3Imu9serializeEPh>:
    }

    virtual int serialize(unsigned char *outbuffer) const
    {
      int offset = 0;
      *(outbuffer + offset + 0) = (this->stamp.sec >> (8 * 0)) & 0xFF;
 8001884:	6843      	ldr	r3, [r0, #4]
 8001886:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (this->stamp.sec >> (8 * 1)) & 0xFF;
 8001888:	6843      	ldr	r3, [r0, #4]
 800188a:	0a1b      	lsrs	r3, r3, #8
 800188c:	704b      	strb	r3, [r1, #1]
      *(outbuffer + offset + 2) = (this->stamp.sec >> (8 * 2)) & 0xFF;
 800188e:	88c3      	ldrh	r3, [r0, #6]
 8001890:	708b      	strb	r3, [r1, #2]
      *(outbuffer + offset + 3) = (this->stamp.sec >> (8 * 3)) & 0xFF;
 8001892:	79c3      	ldrb	r3, [r0, #7]
 8001894:	70cb      	strb	r3, [r1, #3]
      offset += sizeof(this->stamp.sec);
      *(outbuffer + offset + 0) = (this->stamp.nsec >> (8 * 0)) & 0xFF;
 8001896:	6883      	ldr	r3, [r0, #8]
 8001898:	710b      	strb	r3, [r1, #4]
      *(outbuffer + offset + 1) = (this->stamp.nsec >> (8 * 1)) & 0xFF;
 800189a:	6883      	ldr	r3, [r0, #8]
 800189c:	0a1b      	lsrs	r3, r3, #8
 800189e:	714b      	strb	r3, [r1, #5]
      *(outbuffer + offset + 2) = (this->stamp.nsec >> (8 * 2)) & 0xFF;
 80018a0:	8943      	ldrh	r3, [r0, #10]
 80018a2:	718b      	strb	r3, [r1, #6]
      *(outbuffer + offset + 3) = (this->stamp.nsec >> (8 * 3)) & 0xFF;
 80018a4:	7ac3      	ldrb	r3, [r0, #11]
 80018a6:	71cb      	strb	r3, [r1, #7]
    virtual int serialize(unsigned char *outbuffer) const
 80018a8:	b570      	push	{r4, r5, r6, lr}
 80018aa:	f101 0208 	add.w	r2, r1, #8
 80018ae:	f100 050c 	add.w	r5, r0, #12
      offset += sizeof(this->stamp.nsec);
 80018b2:	2408      	movs	r4, #8
      for( uint8_t i = 0; i < 3; i++){
 80018b4:	2c14      	cmp	r4, #20
 80018b6:	f102 0204 	add.w	r2, r2, #4
 80018ba:	d00e      	beq.n	80018da <_ZNK6kduino3Imu9serializeEPh+0x56>
      union {
        float real;
        uint32_t base;
      } u_acc_datai;
      u_acc_datai.real = this->acc_data[i];
 80018bc:	f855 3b04 	ldr.w	r3, [r5], #4
      *(outbuffer + offset + 0) = (u_acc_datai.base >> (8 * 0)) & 0xFF;
 80018c0:	f802 3c04 	strb.w	r3, [r2, #-4]
      *(outbuffer + offset + 1) = (u_acc_datai.base >> (8 * 1)) & 0xFF;
 80018c4:	0a1e      	lsrs	r6, r3, #8
 80018c6:	f802 6c03 	strb.w	r6, [r2, #-3]
      *(outbuffer + offset + 2) = (u_acc_datai.base >> (8 * 2)) & 0xFF;
 80018ca:	0c1e      	lsrs	r6, r3, #16
      *(outbuffer + offset + 3) = (u_acc_datai.base >> (8 * 3)) & 0xFF;
 80018cc:	0e1b      	lsrs	r3, r3, #24
      *(outbuffer + offset + 2) = (u_acc_datai.base >> (8 * 2)) & 0xFF;
 80018ce:	f802 6c02 	strb.w	r6, [r2, #-2]
      *(outbuffer + offset + 3) = (u_acc_datai.base >> (8 * 3)) & 0xFF;
 80018d2:	f802 3c01 	strb.w	r3, [r2, #-1]
 80018d6:	3404      	adds	r4, #4
      for( uint8_t i = 0; i < 3; i++){
 80018d8:	e7ec      	b.n	80018b4 <_ZNK6kduino3Imu9serializeEPh+0x30>
 80018da:	f100 0418 	add.w	r4, r0, #24
 80018de:	f101 0214 	add.w	r2, r1, #20
 80018e2:	f100 0624 	add.w	r6, r0, #36	; 0x24
      offset += sizeof(this->acc_data[i]);
      }
      for( uint8_t i = 0; i < 3; i++){
 80018e6:	42b4      	cmp	r4, r6
 80018e8:	eba2 0301 	sub.w	r3, r2, r1
 80018ec:	f102 0204 	add.w	r2, r2, #4
 80018f0:	d00d      	beq.n	800190e <_ZNK6kduino3Imu9serializeEPh+0x8a>
      union {
        float real;
        uint32_t base;
      } u_gyro_datai;
      u_gyro_datai.real = this->gyro_data[i];
 80018f2:	f854 3b04 	ldr.w	r3, [r4], #4
      *(outbuffer + offset + 0) = (u_gyro_datai.base >> (8 * 0)) & 0xFF;
 80018f6:	f802 3c04 	strb.w	r3, [r2, #-4]
      *(outbuffer + offset + 1) = (u_gyro_datai.base >> (8 * 1)) & 0xFF;
 80018fa:	0a1d      	lsrs	r5, r3, #8
 80018fc:	f802 5c03 	strb.w	r5, [r2, #-3]
      *(outbuffer + offset + 2) = (u_gyro_datai.base >> (8 * 2)) & 0xFF;
 8001900:	0c1d      	lsrs	r5, r3, #16
      *(outbuffer + offset + 3) = (u_gyro_datai.base >> (8 * 3)) & 0xFF;
 8001902:	0e1b      	lsrs	r3, r3, #24
      *(outbuffer + offset + 2) = (u_gyro_datai.base >> (8 * 2)) & 0xFF;
 8001904:	f802 5c02 	strb.w	r5, [r2, #-2]
      *(outbuffer + offset + 3) = (u_gyro_datai.base >> (8 * 3)) & 0xFF;
 8001908:	f802 3c01 	strb.w	r3, [r2, #-1]
      for( uint8_t i = 0; i < 3; i++){
 800190c:	e7eb      	b.n	80018e6 <_ZNK6kduino3Imu9serializeEPh+0x62>
 800190e:	440b      	add	r3, r1
 8001910:	f100 0630 	add.w	r6, r0, #48	; 0x30
      offset += sizeof(this->gyro_data[i]);
      }
      for( uint8_t i = 0; i < 3; i++){
 8001914:	42b4      	cmp	r4, r6
 8001916:	eba3 0201 	sub.w	r2, r3, r1
 800191a:	f103 0304 	add.w	r3, r3, #4
 800191e:	d00d      	beq.n	800193c <_ZNK6kduino3Imu9serializeEPh+0xb8>
      union {
        float real;
        uint32_t base;
      } u_mag_datai;
      u_mag_datai.real = this->mag_data[i];
 8001920:	f854 2b04 	ldr.w	r2, [r4], #4
      *(outbuffer + offset + 0) = (u_mag_datai.base >> (8 * 0)) & 0xFF;
 8001924:	f803 2c04 	strb.w	r2, [r3, #-4]
      *(outbuffer + offset + 1) = (u_mag_datai.base >> (8 * 1)) & 0xFF;
 8001928:	0a15      	lsrs	r5, r2, #8
 800192a:	f803 5c03 	strb.w	r5, [r3, #-3]
      *(outbuffer + offset + 2) = (u_mag_datai.base >> (8 * 2)) & 0xFF;
 800192e:	0c15      	lsrs	r5, r2, #16
      *(outbuffer + offset + 3) = (u_mag_datai.base >> (8 * 3)) & 0xFF;
 8001930:	0e12      	lsrs	r2, r2, #24
      *(outbuffer + offset + 2) = (u_mag_datai.base >> (8 * 2)) & 0xFF;
 8001932:	f803 5c02 	strb.w	r5, [r3, #-2]
      *(outbuffer + offset + 3) = (u_mag_datai.base >> (8 * 3)) & 0xFF;
 8001936:	f803 2c01 	strb.w	r2, [r3, #-1]
      for( uint8_t i = 0; i < 3; i++){
 800193a:	e7eb      	b.n	8001914 <_ZNK6kduino3Imu9serializeEPh+0x90>
 800193c:	440a      	add	r2, r1
 800193e:	f100 033c 	add.w	r3, r0, #60	; 0x3c
      offset += sizeof(this->mag_data[i]);
      }
      for( uint8_t i = 0; i < 3; i++){
 8001942:	429c      	cmp	r4, r3
 8001944:	eba2 0001 	sub.w	r0, r2, r1
 8001948:	f102 0204 	add.w	r2, r2, #4
 800194c:	d00d      	beq.n	800196a <_ZNK6kduino3Imu9serializeEPh+0xe6>
      union {
        float real;
        uint32_t base;
      } u_anglesi;
      u_anglesi.real = this->angles[i];
 800194e:	f854 0b04 	ldr.w	r0, [r4], #4
      *(outbuffer + offset + 0) = (u_anglesi.base >> (8 * 0)) & 0xFF;
 8001952:	f802 0c04 	strb.w	r0, [r2, #-4]
      *(outbuffer + offset + 1) = (u_anglesi.base >> (8 * 1)) & 0xFF;
 8001956:	0a05      	lsrs	r5, r0, #8
 8001958:	f802 5c03 	strb.w	r5, [r2, #-3]
      *(outbuffer + offset + 2) = (u_anglesi.base >> (8 * 2)) & 0xFF;
 800195c:	0c05      	lsrs	r5, r0, #16
      *(outbuffer + offset + 3) = (u_anglesi.base >> (8 * 3)) & 0xFF;
 800195e:	0e00      	lsrs	r0, r0, #24
      *(outbuffer + offset + 2) = (u_anglesi.base >> (8 * 2)) & 0xFF;
 8001960:	f802 5c02 	strb.w	r5, [r2, #-2]
      *(outbuffer + offset + 3) = (u_anglesi.base >> (8 * 3)) & 0xFF;
 8001964:	f802 0c01 	strb.w	r0, [r2, #-1]
      for( uint8_t i = 0; i < 3; i++){
 8001968:	e7eb      	b.n	8001942 <_ZNK6kduino3Imu9serializeEPh+0xbe>
      offset += sizeof(this->angles[i]);
      }
      return offset;
    }
 800196a:	bd70      	pop	{r4, r5, r6, pc}

0800196c <_ZN6kduino3Imu11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800196c:	b570      	push	{r4, r5, r6, lr}
    {
      int offset = 0;
      this->stamp.sec =  ((uint32_t) (*(inbuffer + offset)));
 800196e:	780a      	ldrb	r2, [r1, #0]
 8001970:	6042      	str	r2, [r0, #4]
    virtual int deserialize(unsigned char *inbuffer)
 8001972:	4603      	mov	r3, r0
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001974:	7848      	ldrb	r0, [r1, #1]
 8001976:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800197a:	605a      	str	r2, [r3, #4]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800197c:	7888      	ldrb	r0, [r1, #2]
 800197e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8001982:	605a      	str	r2, [r3, #4]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001984:	78c8      	ldrb	r0, [r1, #3]
 8001986:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 800198a:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->stamp.sec);
      this->stamp.nsec =  ((uint32_t) (*(inbuffer + offset)));
 800198c:	790a      	ldrb	r2, [r1, #4]
 800198e:	609a      	str	r2, [r3, #8]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001990:	7948      	ldrb	r0, [r1, #5]
 8001992:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8001996:	609a      	str	r2, [r3, #8]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001998:	7988      	ldrb	r0, [r1, #6]
 800199a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800199e:	609a      	str	r2, [r3, #8]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80019a0:	79c8      	ldrb	r0, [r1, #7]
 80019a2:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 80019a6:	609a      	str	r2, [r3, #8]
 80019a8:	f101 0408 	add.w	r4, r1, #8
 80019ac:	f103 050c 	add.w	r5, r3, #12
      offset += sizeof(this->stamp.nsec);
 80019b0:	2008      	movs	r0, #8
      for( uint8_t i = 0; i < 3; i++){
 80019b2:	2814      	cmp	r0, #20
 80019b4:	f104 0404 	add.w	r4, r4, #4
 80019b8:	d011      	beq.n	80019de <_ZN6kduino3Imu11deserializeEPh+0x72>
        uint32_t base;
      } u_acc_datai;
      u_acc_datai.base = 0;
      u_acc_datai.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
      u_acc_datai.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
      u_acc_datai.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80019ba:	f814 2c02 	ldrb.w	r2, [r4, #-2]
      u_acc_datai.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80019be:	f814 6c03 	ldrb.w	r6, [r4, #-3]
      u_acc_datai.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80019c2:	0412      	lsls	r2, r2, #16
 80019c4:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
      u_acc_datai.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80019c8:	f814 6c04 	ldrb.w	r6, [r4, #-4]
      u_acc_datai.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80019cc:	4332      	orrs	r2, r6
      u_acc_datai.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80019ce:	f814 6c01 	ldrb.w	r6, [r4, #-1]
      this->acc_data[i] = u_acc_datai.real;
 80019d2:	ea42 6206 	orr.w	r2, r2, r6, lsl #24
 80019d6:	f845 2b04 	str.w	r2, [r5], #4
 80019da:	3004      	adds	r0, #4
      for( uint8_t i = 0; i < 3; i++){
 80019dc:	e7e9      	b.n	80019b2 <_ZN6kduino3Imu11deserializeEPh+0x46>
 80019de:	f101 0414 	add.w	r4, r1, #20
 80019e2:	f103 0518 	add.w	r5, r3, #24
      offset += sizeof(this->acc_data[i]);
      }
      for( uint8_t i = 0; i < 3; i++){
 80019e6:	2820      	cmp	r0, #32
 80019e8:	f104 0404 	add.w	r4, r4, #4
 80019ec:	d011      	beq.n	8001a12 <_ZN6kduino3Imu11deserializeEPh+0xa6>
        uint32_t base;
      } u_gyro_datai;
      u_gyro_datai.base = 0;
      u_gyro_datai.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
      u_gyro_datai.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
      u_gyro_datai.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80019ee:	f814 2c02 	ldrb.w	r2, [r4, #-2]
      u_gyro_datai.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80019f2:	f814 6c03 	ldrb.w	r6, [r4, #-3]
      u_gyro_datai.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80019f6:	0412      	lsls	r2, r2, #16
 80019f8:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
      u_gyro_datai.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80019fc:	f814 6c04 	ldrb.w	r6, [r4, #-4]
      u_gyro_datai.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001a00:	4332      	orrs	r2, r6
      u_gyro_datai.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001a02:	f814 6c01 	ldrb.w	r6, [r4, #-1]
      this->gyro_data[i] = u_gyro_datai.real;
 8001a06:	ea42 6206 	orr.w	r2, r2, r6, lsl #24
 8001a0a:	f845 2b04 	str.w	r2, [r5], #4
 8001a0e:	3004      	adds	r0, #4
      for( uint8_t i = 0; i < 3; i++){
 8001a10:	e7e9      	b.n	80019e6 <_ZN6kduino3Imu11deserializeEPh+0x7a>
 8001a12:	f101 0420 	add.w	r4, r1, #32
 8001a16:	f103 0524 	add.w	r5, r3, #36	; 0x24
      offset += sizeof(this->gyro_data[i]);
      }
      for( uint8_t i = 0; i < 3; i++){
 8001a1a:	282c      	cmp	r0, #44	; 0x2c
 8001a1c:	f104 0404 	add.w	r4, r4, #4
 8001a20:	d011      	beq.n	8001a46 <_ZN6kduino3Imu11deserializeEPh+0xda>
        uint32_t base;
      } u_mag_datai;
      u_mag_datai.base = 0;
      u_mag_datai.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
      u_mag_datai.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
      u_mag_datai.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001a22:	f814 2c02 	ldrb.w	r2, [r4, #-2]
      u_mag_datai.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001a26:	f814 6c03 	ldrb.w	r6, [r4, #-3]
      u_mag_datai.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001a2a:	0412      	lsls	r2, r2, #16
 8001a2c:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
      u_mag_datai.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001a30:	f814 6c04 	ldrb.w	r6, [r4, #-4]
      u_mag_datai.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001a34:	4332      	orrs	r2, r6
      u_mag_datai.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001a36:	f814 6c01 	ldrb.w	r6, [r4, #-1]
      this->mag_data[i] = u_mag_datai.real;
 8001a3a:	ea42 6206 	orr.w	r2, r2, r6, lsl #24
 8001a3e:	f845 2b04 	str.w	r2, [r5], #4
 8001a42:	3004      	adds	r0, #4
      for( uint8_t i = 0; i < 3; i++){
 8001a44:	e7e9      	b.n	8001a1a <_ZN6kduino3Imu11deserializeEPh+0xae>
 8001a46:	312c      	adds	r1, #44	; 0x2c
 8001a48:	3330      	adds	r3, #48	; 0x30
      offset += sizeof(this->mag_data[i]);
      }
      for( uint8_t i = 0; i < 3; i++){
 8001a4a:	2838      	cmp	r0, #56	; 0x38
 8001a4c:	f101 0104 	add.w	r1, r1, #4
 8001a50:	d011      	beq.n	8001a76 <_ZN6kduino3Imu11deserializeEPh+0x10a>
        uint32_t base;
      } u_anglesi;
      u_anglesi.base = 0;
      u_anglesi.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
      u_anglesi.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
      u_anglesi.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001a52:	f811 2c02 	ldrb.w	r2, [r1, #-2]
      u_anglesi.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001a56:	f811 4c03 	ldrb.w	r4, [r1, #-3]
      u_anglesi.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001a5a:	0412      	lsls	r2, r2, #16
 8001a5c:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
      u_anglesi.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001a60:	f811 4c04 	ldrb.w	r4, [r1, #-4]
      u_anglesi.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001a64:	4322      	orrs	r2, r4
      u_anglesi.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001a66:	f811 4c01 	ldrb.w	r4, [r1, #-1]
      this->angles[i] = u_anglesi.real;
 8001a6a:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
 8001a6e:	f843 2b04 	str.w	r2, [r3], #4
 8001a72:	3004      	adds	r0, #4
      for( uint8_t i = 0; i < 3; i++){
 8001a74:	e7e9      	b.n	8001a4a <_ZN6kduino3Imu11deserializeEPh+0xde>
      offset += sizeof(this->angles[i]);
      }
     return offset;
    }
 8001a76:	bd70      	pop	{r4, r5, r6, pc}

08001a78 <_ZN6kduino3Imu7getTypeEv>:

    const char * getType(){ return "kduino/Imu"; };
 8001a78:	4800      	ldr	r0, [pc, #0]	; (8001a7c <_ZN6kduino3Imu7getTypeEv+0x4>)
 8001a7a:	4770      	bx	lr
 8001a7c:	0800900c 	.word	0x0800900c

08001a80 <_ZN6kduino3Imu6getMD5Ev>:
    const char * getMD5(){ return "68b769ca85e5d9c44dbce51dc60e4be7"; };
 8001a80:	4800      	ldr	r0, [pc, #0]	; (8001a84 <_ZN6kduino3Imu6getMD5Ev+0x4>)
 8001a82:	4770      	bx	lr
 8001a84:	08008feb 	.word	0x08008feb

08001a88 <_ZNK6kduino11DesireCoord9serializeEPh>:
      union {
        float real;
        uint32_t base;
      } u_roll;
      u_roll.real = this->roll;
      *(outbuffer + offset + 0) = (u_roll.base >> (8 * 0)) & 0xFF;
 8001a88:	6843      	ldr	r3, [r0, #4]
 8001a8a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_roll.base >> (8 * 1)) & 0xFF;
 8001a8c:	0a1a      	lsrs	r2, r3, #8
 8001a8e:	704a      	strb	r2, [r1, #1]
      *(outbuffer + offset + 2) = (u_roll.base >> (8 * 2)) & 0xFF;
 8001a90:	0c1a      	lsrs	r2, r3, #16
      *(outbuffer + offset + 3) = (u_roll.base >> (8 * 3)) & 0xFF;
 8001a92:	0e1b      	lsrs	r3, r3, #24
      *(outbuffer + offset + 2) = (u_roll.base >> (8 * 2)) & 0xFF;
 8001a94:	708a      	strb	r2, [r1, #2]
      *(outbuffer + offset + 3) = (u_roll.base >> (8 * 3)) & 0xFF;
 8001a96:	70cb      	strb	r3, [r1, #3]
      union {
        float real;
        uint32_t base;
      } u_pitch;
      u_pitch.real = this->pitch;
      *(outbuffer + offset + 0) = (u_pitch.base >> (8 * 0)) & 0xFF;
 8001a98:	6883      	ldr	r3, [r0, #8]
 8001a9a:	710b      	strb	r3, [r1, #4]
      *(outbuffer + offset + 1) = (u_pitch.base >> (8 * 1)) & 0xFF;
 8001a9c:	0a1a      	lsrs	r2, r3, #8
 8001a9e:	714a      	strb	r2, [r1, #5]
      *(outbuffer + offset + 2) = (u_pitch.base >> (8 * 2)) & 0xFF;
 8001aa0:	0c1a      	lsrs	r2, r3, #16
      *(outbuffer + offset + 3) = (u_pitch.base >> (8 * 3)) & 0xFF;
 8001aa2:	0e1b      	lsrs	r3, r3, #24
      *(outbuffer + offset + 2) = (u_pitch.base >> (8 * 2)) & 0xFF;
 8001aa4:	718a      	strb	r2, [r1, #6]
      *(outbuffer + offset + 3) = (u_pitch.base >> (8 * 3)) & 0xFF;
 8001aa6:	71cb      	strb	r3, [r1, #7]
      union {
        float real;
        uint32_t base;
      } u_yaw;
      u_yaw.real = this->yaw;
      *(outbuffer + offset + 0) = (u_yaw.base >> (8 * 0)) & 0xFF;
 8001aa8:	68c3      	ldr	r3, [r0, #12]
 8001aaa:	720b      	strb	r3, [r1, #8]
      *(outbuffer + offset + 1) = (u_yaw.base >> (8 * 1)) & 0xFF;
 8001aac:	0a1a      	lsrs	r2, r3, #8
 8001aae:	724a      	strb	r2, [r1, #9]
      *(outbuffer + offset + 2) = (u_yaw.base >> (8 * 2)) & 0xFF;
 8001ab0:	0c1a      	lsrs	r2, r3, #16
      *(outbuffer + offset + 3) = (u_yaw.base >> (8 * 3)) & 0xFF;
 8001ab2:	0e1b      	lsrs	r3, r3, #24
      *(outbuffer + offset + 2) = (u_yaw.base >> (8 * 2)) & 0xFF;
 8001ab4:	728a      	strb	r2, [r1, #10]
      *(outbuffer + offset + 3) = (u_yaw.base >> (8 * 3)) & 0xFF;
 8001ab6:	72cb      	strb	r3, [r1, #11]
      offset += sizeof(this->yaw);
      *(outbuffer + offset + 0) = (this->coord_type >> (8 * 0)) & 0xFF;
 8001ab8:	7c03      	ldrb	r3, [r0, #16]
 8001aba:	730b      	strb	r3, [r1, #12]
      offset += sizeof(this->coord_type);
      return offset;
    }
 8001abc:	200d      	movs	r0, #13
 8001abe:	4770      	bx	lr

08001ac0 <_ZN6kduino11DesireCoord11deserializeEPh>:
      u_roll.base = 0;
      u_roll.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
      u_roll.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
      u_roll.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
      u_roll.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
      this->roll = u_roll.real;
 8001ac0:	680b      	ldr	r3, [r1, #0]
 8001ac2:	6043      	str	r3, [r0, #4]
      u_pitch.base = 0;
      u_pitch.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
      u_pitch.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
      u_pitch.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
      u_pitch.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
      this->pitch = u_pitch.real;
 8001ac4:	684b      	ldr	r3, [r1, #4]
 8001ac6:	6083      	str	r3, [r0, #8]
      u_yaw.base = 0;
      u_yaw.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
      u_yaw.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
      u_yaw.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
      u_yaw.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
      this->yaw = u_yaw.real;
 8001ac8:	688b      	ldr	r3, [r1, #8]
 8001aca:	60c3      	str	r3, [r0, #12]
      offset += sizeof(this->yaw);
      this->coord_type =  ((uint8_t) (*(inbuffer + offset)));
 8001acc:	7b0b      	ldrb	r3, [r1, #12]
 8001ace:	7403      	strb	r3, [r0, #16]
      offset += sizeof(this->coord_type);
     return offset;
    }
 8001ad0:	200d      	movs	r0, #13
 8001ad2:	4770      	bx	lr

08001ad4 <_ZN6kduino11DesireCoord7getTypeEv>:

    const char * getType(){ return "kduino/DesireCoord"; };
 8001ad4:	4800      	ldr	r0, [pc, #0]	; (8001ad8 <_ZN6kduino11DesireCoord7getTypeEv+0x4>)
 8001ad6:	4770      	bx	lr
 8001ad8:	08008fd8 	.word	0x08008fd8

08001adc <_ZN6kduino11DesireCoord6getMD5Ev>:
    const char * getMD5(){ return "6ccf1a68453182818d4a1d0d5013bd0d"; };
 8001adc:	4800      	ldr	r0, [pc, #0]	; (8001ae0 <_ZN6kduino11DesireCoord6getMD5Ev+0x4>)
 8001ade:	4770      	bx	lr
 8001ae0:	08008fb7 	.word	0x08008fb7

08001ae4 <_ZNK17aerial_robot_msgs9Barometer9serializeEPh>:
    }

    virtual int serialize(unsigned char *outbuffer) const
    {
      int offset = 0;
      *(outbuffer + offset + 0) = (this->stamp.sec >> (8 * 0)) & 0xFF;
 8001ae4:	6843      	ldr	r3, [r0, #4]
 8001ae6:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (this->stamp.sec >> (8 * 1)) & 0xFF;
 8001ae8:	6843      	ldr	r3, [r0, #4]
 8001aea:	0a1b      	lsrs	r3, r3, #8
 8001aec:	704b      	strb	r3, [r1, #1]
      *(outbuffer + offset + 2) = (this->stamp.sec >> (8 * 2)) & 0xFF;
 8001aee:	88c3      	ldrh	r3, [r0, #6]
 8001af0:	708b      	strb	r3, [r1, #2]
      *(outbuffer + offset + 3) = (this->stamp.sec >> (8 * 3)) & 0xFF;
 8001af2:	79c3      	ldrb	r3, [r0, #7]
 8001af4:	70cb      	strb	r3, [r1, #3]
      offset += sizeof(this->stamp.sec);
      *(outbuffer + offset + 0) = (this->stamp.nsec >> (8 * 0)) & 0xFF;
 8001af6:	6883      	ldr	r3, [r0, #8]
 8001af8:	710b      	strb	r3, [r1, #4]
      *(outbuffer + offset + 1) = (this->stamp.nsec >> (8 * 1)) & 0xFF;
 8001afa:	6883      	ldr	r3, [r0, #8]
 8001afc:	0a1b      	lsrs	r3, r3, #8
 8001afe:	714b      	strb	r3, [r1, #5]
      *(outbuffer + offset + 2) = (this->stamp.nsec >> (8 * 2)) & 0xFF;
 8001b00:	8943      	ldrh	r3, [r0, #10]
 8001b02:	718b      	strb	r3, [r1, #6]
      *(outbuffer + offset + 3) = (this->stamp.nsec >> (8 * 3)) & 0xFF;
 8001b04:	7ac3      	ldrb	r3, [r0, #11]
 8001b06:	71cb      	strb	r3, [r1, #7]
      union {
        float real;
        uint32_t base;
      } u_altitude;
      u_altitude.real = this->altitude;
      *(outbuffer + offset + 0) = (u_altitude.base >> (8 * 0)) & 0xFF;
 8001b08:	68c3      	ldr	r3, [r0, #12]
 8001b0a:	720b      	strb	r3, [r1, #8]
      *(outbuffer + offset + 1) = (u_altitude.base >> (8 * 1)) & 0xFF;
 8001b0c:	0a1a      	lsrs	r2, r3, #8
 8001b0e:	724a      	strb	r2, [r1, #9]
      *(outbuffer + offset + 2) = (u_altitude.base >> (8 * 2)) & 0xFF;
 8001b10:	0c1a      	lsrs	r2, r3, #16
      *(outbuffer + offset + 3) = (u_altitude.base >> (8 * 3)) & 0xFF;
 8001b12:	0e1b      	lsrs	r3, r3, #24
      *(outbuffer + offset + 2) = (u_altitude.base >> (8 * 2)) & 0xFF;
 8001b14:	728a      	strb	r2, [r1, #10]
      *(outbuffer + offset + 3) = (u_altitude.base >> (8 * 3)) & 0xFF;
 8001b16:	72cb      	strb	r3, [r1, #11]
      union {
        float real;
        uint32_t base;
      } u_pressure;
      u_pressure.real = this->pressure;
      *(outbuffer + offset + 0) = (u_pressure.base >> (8 * 0)) & 0xFF;
 8001b18:	6903      	ldr	r3, [r0, #16]
 8001b1a:	730b      	strb	r3, [r1, #12]
      *(outbuffer + offset + 1) = (u_pressure.base >> (8 * 1)) & 0xFF;
 8001b1c:	0a1a      	lsrs	r2, r3, #8
 8001b1e:	734a      	strb	r2, [r1, #13]
      *(outbuffer + offset + 2) = (u_pressure.base >> (8 * 2)) & 0xFF;
 8001b20:	0c1a      	lsrs	r2, r3, #16
      *(outbuffer + offset + 3) = (u_pressure.base >> (8 * 3)) & 0xFF;
 8001b22:	0e1b      	lsrs	r3, r3, #24
      *(outbuffer + offset + 2) = (u_pressure.base >> (8 * 2)) & 0xFF;
 8001b24:	738a      	strb	r2, [r1, #14]
      *(outbuffer + offset + 3) = (u_pressure.base >> (8 * 3)) & 0xFF;
 8001b26:	73cb      	strb	r3, [r1, #15]
      union {
        float real;
        uint32_t base;
      } u_temperature;
      u_temperature.real = this->temperature;
      *(outbuffer + offset + 0) = (u_temperature.base >> (8 * 0)) & 0xFF;
 8001b28:	6943      	ldr	r3, [r0, #20]
 8001b2a:	740b      	strb	r3, [r1, #16]
      *(outbuffer + offset + 1) = (u_temperature.base >> (8 * 1)) & 0xFF;
 8001b2c:	0a1a      	lsrs	r2, r3, #8
 8001b2e:	744a      	strb	r2, [r1, #17]
      *(outbuffer + offset + 2) = (u_temperature.base >> (8 * 2)) & 0xFF;
 8001b30:	0c1a      	lsrs	r2, r3, #16
      *(outbuffer + offset + 3) = (u_temperature.base >> (8 * 3)) & 0xFF;
 8001b32:	0e1b      	lsrs	r3, r3, #24
      *(outbuffer + offset + 2) = (u_temperature.base >> (8 * 2)) & 0xFF;
 8001b34:	748a      	strb	r2, [r1, #18]
      *(outbuffer + offset + 3) = (u_temperature.base >> (8 * 3)) & 0xFF;
 8001b36:	74cb      	strb	r3, [r1, #19]
      offset += sizeof(this->temperature);
      return offset;
    }
 8001b38:	2014      	movs	r0, #20
 8001b3a:	4770      	bx	lr

08001b3c <_ZN17aerial_robot_msgs9Barometer11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
    {
      int offset = 0;
      this->stamp.sec =  ((uint32_t) (*(inbuffer + offset)));
 8001b3c:	780b      	ldrb	r3, [r1, #0]
 8001b3e:	6043      	str	r3, [r0, #4]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001b40:	784a      	ldrb	r2, [r1, #1]
 8001b42:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001b46:	6043      	str	r3, [r0, #4]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001b48:	788a      	ldrb	r2, [r1, #2]
 8001b4a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001b4e:	6043      	str	r3, [r0, #4]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001b50:	78ca      	ldrb	r2, [r1, #3]
 8001b52:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001b56:	6043      	str	r3, [r0, #4]
      offset += sizeof(this->stamp.sec);
      this->stamp.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8001b58:	790b      	ldrb	r3, [r1, #4]
 8001b5a:	6083      	str	r3, [r0, #8]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001b5c:	794a      	ldrb	r2, [r1, #5]
 8001b5e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001b62:	6083      	str	r3, [r0, #8]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001b64:	798a      	ldrb	r2, [r1, #6]
 8001b66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001b6a:	6083      	str	r3, [r0, #8]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001b6c:	79ca      	ldrb	r2, [r1, #7]
 8001b6e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001b72:	6083      	str	r3, [r0, #8]
      u_altitude.base = 0;
      u_altitude.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
      u_altitude.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
      u_altitude.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
      u_altitude.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
      this->altitude = u_altitude.real;
 8001b74:	688b      	ldr	r3, [r1, #8]
 8001b76:	60c3      	str	r3, [r0, #12]
      u_pressure.base = 0;
      u_pressure.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
      u_pressure.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
      u_pressure.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
      u_pressure.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
      this->pressure = u_pressure.real;
 8001b78:	68cb      	ldr	r3, [r1, #12]
 8001b7a:	6103      	str	r3, [r0, #16]
      u_temperature.base = 0;
      u_temperature.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
      u_temperature.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
      u_temperature.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
      u_temperature.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
      this->temperature = u_temperature.real;
 8001b7c:	690b      	ldr	r3, [r1, #16]
 8001b7e:	6143      	str	r3, [r0, #20]
      offset += sizeof(this->temperature);
     return offset;
    }
 8001b80:	2014      	movs	r0, #20
 8001b82:	4770      	bx	lr

08001b84 <_ZN17aerial_robot_msgs9Barometer7getTypeEv>:

    const char * getType(){ return "aerial_robot_msgs/Barometer"; };
 8001b84:	4800      	ldr	r0, [pc, #0]	; (8001b88 <_ZN17aerial_robot_msgs9Barometer7getTypeEv+0x4>)
 8001b86:	4770      	bx	lr
 8001b88:	08008f62 	.word	0x08008f62

08001b8c <_ZN17aerial_robot_msgs9Barometer6getMD5Ev>:
    const char * getMD5(){ return "b732c389660333d48fe976feb5768402"; };
 8001b8c:	4800      	ldr	r0, [pc, #0]	; (8001b90 <_ZN17aerial_robot_msgs9Barometer6getMD5Ev+0x4>)
 8001b8e:	4770      	bx	lr
 8001b90:	08008f41 	.word	0x08008f41

08001b94 <_ZNK17aerial_robot_msgs3Gps9serializeEPh>:
    }

    virtual int serialize(unsigned char *outbuffer) const
    {
      int offset = 0;
      *(outbuffer + offset + 0) = (this->stamp.sec >> (8 * 0)) & 0xFF;
 8001b94:	6843      	ldr	r3, [r0, #4]
 8001b96:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (this->stamp.sec >> (8 * 1)) & 0xFF;
 8001b98:	6843      	ldr	r3, [r0, #4]
 8001b9a:	0a1b      	lsrs	r3, r3, #8
 8001b9c:	704b      	strb	r3, [r1, #1]
      *(outbuffer + offset + 2) = (this->stamp.sec >> (8 * 2)) & 0xFF;
 8001b9e:	88c3      	ldrh	r3, [r0, #6]
 8001ba0:	708b      	strb	r3, [r1, #2]
      *(outbuffer + offset + 3) = (this->stamp.sec >> (8 * 3)) & 0xFF;
 8001ba2:	79c3      	ldrb	r3, [r0, #7]
 8001ba4:	70cb      	strb	r3, [r1, #3]
      offset += sizeof(this->stamp.sec);
      *(outbuffer + offset + 0) = (this->stamp.nsec >> (8 * 0)) & 0xFF;
 8001ba6:	6883      	ldr	r3, [r0, #8]
 8001ba8:	710b      	strb	r3, [r1, #4]
      *(outbuffer + offset + 1) = (this->stamp.nsec >> (8 * 1)) & 0xFF;
 8001baa:	6883      	ldr	r3, [r0, #8]
 8001bac:	0a1b      	lsrs	r3, r3, #8
 8001bae:	714b      	strb	r3, [r1, #5]
      *(outbuffer + offset + 2) = (this->stamp.nsec >> (8 * 2)) & 0xFF;
 8001bb0:	8943      	ldrh	r3, [r0, #10]
 8001bb2:	718b      	strb	r3, [r1, #6]
      *(outbuffer + offset + 3) = (this->stamp.nsec >> (8 * 3)) & 0xFF;
 8001bb4:	7ac3      	ldrb	r3, [r0, #11]
 8001bb6:	71cb      	strb	r3, [r1, #7]
      union {
        float real;
        uint32_t base;
      } u_locationi;
      u_locationi.real = this->location[i];
      *(outbuffer + offset + 0) = (u_locationi.base >> (8 * 0)) & 0xFF;
 8001bb8:	68c3      	ldr	r3, [r0, #12]
 8001bba:	720b      	strb	r3, [r1, #8]
      *(outbuffer + offset + 1) = (u_locationi.base >> (8 * 1)) & 0xFF;
 8001bbc:	0a1a      	lsrs	r2, r3, #8
 8001bbe:	724a      	strb	r2, [r1, #9]
      *(outbuffer + offset + 2) = (u_locationi.base >> (8 * 2)) & 0xFF;
 8001bc0:	0c1a      	lsrs	r2, r3, #16
      *(outbuffer + offset + 3) = (u_locationi.base >> (8 * 3)) & 0xFF;
 8001bc2:	0e1b      	lsrs	r3, r3, #24
      *(outbuffer + offset + 2) = (u_locationi.base >> (8 * 2)) & 0xFF;
 8001bc4:	728a      	strb	r2, [r1, #10]
      *(outbuffer + offset + 3) = (u_locationi.base >> (8 * 3)) & 0xFF;
 8001bc6:	72cb      	strb	r3, [r1, #11]
      *(outbuffer + offset + 0) = (u_locationi.base >> (8 * 0)) & 0xFF;
 8001bc8:	6903      	ldr	r3, [r0, #16]
 8001bca:	730b      	strb	r3, [r1, #12]
      *(outbuffer + offset + 1) = (u_locationi.base >> (8 * 1)) & 0xFF;
 8001bcc:	0a1a      	lsrs	r2, r3, #8
 8001bce:	734a      	strb	r2, [r1, #13]
      *(outbuffer + offset + 2) = (u_locationi.base >> (8 * 2)) & 0xFF;
 8001bd0:	0c1a      	lsrs	r2, r3, #16
      *(outbuffer + offset + 3) = (u_locationi.base >> (8 * 3)) & 0xFF;
 8001bd2:	0e1b      	lsrs	r3, r3, #24
    virtual int serialize(unsigned char *outbuffer) const
 8001bd4:	b570      	push	{r4, r5, r6, lr}
      *(outbuffer + offset + 2) = (u_locationi.base >> (8 * 2)) & 0xFF;
 8001bd6:	738a      	strb	r2, [r1, #14]
      *(outbuffer + offset + 3) = (u_locationi.base >> (8 * 3)) & 0xFF;
 8001bd8:	73cb      	strb	r3, [r1, #15]
 8001bda:	f100 0514 	add.w	r5, r0, #20
 8001bde:	f101 0210 	add.w	r2, r1, #16
 8001be2:	2410      	movs	r4, #16
      offset += sizeof(this->location[i]);
      }
      for( uint8_t i = 0; i < 2; i++){
 8001be4:	2c18      	cmp	r4, #24
 8001be6:	f102 0204 	add.w	r2, r2, #4
 8001bea:	d00e      	beq.n	8001c0a <_ZNK17aerial_robot_msgs3Gps9serializeEPh+0x76>
      union {
        float real;
        uint32_t base;
      } u_velocityi;
      u_velocityi.real = this->velocity[i];
 8001bec:	f855 3b04 	ldr.w	r3, [r5], #4
      *(outbuffer + offset + 0) = (u_velocityi.base >> (8 * 0)) & 0xFF;
 8001bf0:	f802 3c04 	strb.w	r3, [r2, #-4]
      *(outbuffer + offset + 1) = (u_velocityi.base >> (8 * 1)) & 0xFF;
 8001bf4:	0a1e      	lsrs	r6, r3, #8
 8001bf6:	f802 6c03 	strb.w	r6, [r2, #-3]
      *(outbuffer + offset + 2) = (u_velocityi.base >> (8 * 2)) & 0xFF;
 8001bfa:	0c1e      	lsrs	r6, r3, #16
      *(outbuffer + offset + 3) = (u_velocityi.base >> (8 * 3)) & 0xFF;
 8001bfc:	0e1b      	lsrs	r3, r3, #24
      *(outbuffer + offset + 2) = (u_velocityi.base >> (8 * 2)) & 0xFF;
 8001bfe:	f802 6c02 	strb.w	r6, [r2, #-2]
      *(outbuffer + offset + 3) = (u_velocityi.base >> (8 * 3)) & 0xFF;
 8001c02:	f802 3c01 	strb.w	r3, [r2, #-1]
 8001c06:	3404      	adds	r4, #4
      for( uint8_t i = 0; i < 2; i++){
 8001c08:	e7ec      	b.n	8001be4 <_ZNK17aerial_robot_msgs3Gps9serializeEPh+0x50>
      offset += sizeof(this->velocity[i]);
      }
      *(outbuffer + offset + 0) = (this->sat_num >> (8 * 0)) & 0xFF;
 8001c0a:	7f03      	ldrb	r3, [r0, #28]
 8001c0c:	760b      	strb	r3, [r1, #24]
      offset += sizeof(this->sat_num);
      return offset;
    }
 8001c0e:	2019      	movs	r0, #25
 8001c10:	bd70      	pop	{r4, r5, r6, pc}

08001c12 <_ZN17aerial_robot_msgs3Gps11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
    {
      int offset = 0;
      this->stamp.sec =  ((uint32_t) (*(inbuffer + offset)));
 8001c12:	780b      	ldrb	r3, [r1, #0]
    virtual int deserialize(unsigned char *inbuffer)
 8001c14:	b570      	push	{r4, r5, r6, lr}
      this->stamp.sec =  ((uint32_t) (*(inbuffer + offset)));
 8001c16:	6043      	str	r3, [r0, #4]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001c18:	784a      	ldrb	r2, [r1, #1]
 8001c1a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001c1e:	6043      	str	r3, [r0, #4]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001c20:	788a      	ldrb	r2, [r1, #2]
 8001c22:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001c26:	6043      	str	r3, [r0, #4]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001c28:	78ca      	ldrb	r2, [r1, #3]
 8001c2a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001c2e:	6043      	str	r3, [r0, #4]
      offset += sizeof(this->stamp.sec);
      this->stamp.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8001c30:	790b      	ldrb	r3, [r1, #4]
 8001c32:	6083      	str	r3, [r0, #8]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001c34:	794a      	ldrb	r2, [r1, #5]
 8001c36:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001c3a:	6083      	str	r3, [r0, #8]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001c3c:	798a      	ldrb	r2, [r1, #6]
 8001c3e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001c42:	6083      	str	r3, [r0, #8]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001c44:	79ca      	ldrb	r2, [r1, #7]
 8001c46:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001c4a:	6083      	str	r3, [r0, #8]
        uint32_t base;
      } u_locationi;
      u_locationi.base = 0;
      u_locationi.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
      u_locationi.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
      u_locationi.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001c4c:	7a8b      	ldrb	r3, [r1, #10]
      u_locationi.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001c4e:	7a4a      	ldrb	r2, [r1, #9]
      u_locationi.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001c50:	041b      	lsls	r3, r3, #16
 8001c52:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
      u_locationi.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001c56:	7a0a      	ldrb	r2, [r1, #8]
      u_locationi.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001c58:	4313      	orrs	r3, r2
      u_locationi.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001c5a:	7aca      	ldrb	r2, [r1, #11]
      this->location[i] = u_locationi.real;
 8001c5c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001c60:	60c3      	str	r3, [r0, #12]
      u_locationi.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001c62:	7b8b      	ldrb	r3, [r1, #14]
      u_locationi.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001c64:	7b4a      	ldrb	r2, [r1, #13]
      u_locationi.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001c66:	041b      	lsls	r3, r3, #16
 8001c68:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
      u_locationi.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001c6c:	7b0a      	ldrb	r2, [r1, #12]
      u_locationi.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001c6e:	4313      	orrs	r3, r2
      u_locationi.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001c70:	7bca      	ldrb	r2, [r1, #15]
      this->location[i] = u_locationi.real;
 8001c72:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001c76:	6103      	str	r3, [r0, #16]
 8001c78:	f101 0210 	add.w	r2, r1, #16
 8001c7c:	f100 0514 	add.w	r5, r0, #20
 8001c80:	2410      	movs	r4, #16
      offset += sizeof(this->location[i]);
      }
      for( uint8_t i = 0; i < 2; i++){
 8001c82:	2c18      	cmp	r4, #24
 8001c84:	f102 0204 	add.w	r2, r2, #4
 8001c88:	d011      	beq.n	8001cae <_ZN17aerial_robot_msgs3Gps11deserializeEPh+0x9c>
        uint32_t base;
      } u_velocityi;
      u_velocityi.base = 0;
      u_velocityi.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
      u_velocityi.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
      u_velocityi.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001c8a:	f812 3c02 	ldrb.w	r3, [r2, #-2]
      u_velocityi.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001c8e:	f812 6c03 	ldrb.w	r6, [r2, #-3]
      u_velocityi.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001c92:	041b      	lsls	r3, r3, #16
 8001c94:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
      u_velocityi.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001c98:	f812 6c04 	ldrb.w	r6, [r2, #-4]
      u_velocityi.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001c9c:	4333      	orrs	r3, r6
      u_velocityi.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001c9e:	f812 6c01 	ldrb.w	r6, [r2, #-1]
      this->velocity[i] = u_velocityi.real;
 8001ca2:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
 8001ca6:	f845 3b04 	str.w	r3, [r5], #4
 8001caa:	3404      	adds	r4, #4
      for( uint8_t i = 0; i < 2; i++){
 8001cac:	e7e9      	b.n	8001c82 <_ZN17aerial_robot_msgs3Gps11deserializeEPh+0x70>
      offset += sizeof(this->velocity[i]);
      }
      this->sat_num =  ((uint8_t) (*(inbuffer + offset)));
 8001cae:	7e0b      	ldrb	r3, [r1, #24]
 8001cb0:	7703      	strb	r3, [r0, #28]
      offset += sizeof(this->sat_num);
     return offset;
    }
 8001cb2:	2019      	movs	r0, #25
 8001cb4:	bd70      	pop	{r4, r5, r6, pc}
	...

08001cb8 <_ZN17aerial_robot_msgs3Gps7getTypeEv>:

    const char * getType(){ return "aerial_robot_msgs/Gps"; };
 8001cb8:	4800      	ldr	r0, [pc, #0]	; (8001cbc <_ZN17aerial_robot_msgs3Gps7getTypeEv+0x4>)
 8001cba:	4770      	bx	lr
 8001cbc:	08008f2b 	.word	0x08008f2b

08001cc0 <_ZN17aerial_robot_msgs3Gps6getMD5Ev>:
    const char * getMD5(){ return "b9b55701ff5240f76ada29af2827853c"; };
 8001cc0:	4800      	ldr	r0, [pc, #0]	; (8001cc4 <_ZN17aerial_robot_msgs3Gps6getMD5Ev+0x4>)
 8001cc2:	4770      	bx	lr
 8001cc4:	08008f0a 	.word	0x08008f0a

08001cc8 <_ZN13StateEstimateD1Ev>:
{
public:
  StateEstimate()
  {
  }
  ~StateEstimate(){}
 8001cc8:	4770      	bx	lr

08001cca <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE9connectedEv>:


    /* Are we connected to the PC? */
    virtual bool connected() {
      return configured_;
    };
 8001cca:	f890 02d0 	ldrb.w	r0, [r0, #720]	; 0x2d0
 8001cce:	4770      	bx	lr

08001cd0 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef>:

  static void TransmitCplt(DMA_HandleTypeDef *hdma)
  {
    Hardware* huart = ( Hardware* )(hdma)->Parent;
    /* DMA Normal mode*/
    if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0)
 8001cd0:	6803      	ldr	r3, [r0, #0]
    Hardware* huart = ( Hardware* )(hdma)->Parent;
 8001cd2:	6b81      	ldr	r1, [r0, #56]	; 0x38
    if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	680a      	ldr	r2, [r1, #0]
 8001cd8:	f413 7380 	ands.w	r3, r3, #256	; 0x100
  static void TransmitCplt(DMA_HandleTypeDef *hdma)
 8001cdc:	b530      	push	{r4, r5, lr}
    if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0)
 8001cde:	d109      	bne.n	8001cf4 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x24>
      {
        huart->TxXferCount = 0;
 8001ce0:	84cb      	strh	r3, [r1, #38]	; 0x26

        /* Disable the DMA transfer for transmit request by setting the DMAT bit
           in the UART CR3 register */
        huart->Instance->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DMAT);
 8001ce2:	6953      	ldr	r3, [r2, #20]
 8001ce4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001ce8:	6153      	str	r3, [r2, #20]
 /* Enable the UART Transmit Complete Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001cea:	68d3      	ldr	r3, [r2, #12]
 8001cec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
              {
                idle_flag_ = true;
              }

          }
        __HAL_DMA_CLEAR_FLAG(huart->hdmatx, __HAL_DMA_GET_TC_FLAG_INDEX(huart->hdmatx));
 8001cf0:	60d3      	str	r3, [r2, #12]
 8001cf2:	bd30      	pop	{r4, r5, pc}
        if(!idle_flag_)
 8001cf4:	4847      	ldr	r0, [pc, #284]	; (8001e14 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x144>)
        huart->Instance->CR3 &= (uint32_t)(~USART_CR3_DMAT);
 8001cf6:	6953      	ldr	r3, [r2, #20]
        if(!idle_flag_)
 8001cf8:	7805      	ldrb	r5, [r0, #0]
 8001cfa:	6b0c      	ldr	r4, [r1, #48]	; 0x30
        huart->Instance->CR3 &= (uint32_t)(~USART_CR3_DMAT);
 8001cfc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001d00:	6153      	str	r3, [r2, #20]
        if(!idle_flag_)
 8001d02:	bb3d      	cbnz	r5, 8001d54 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x84>
            subscript_in_progress_++;
 8001d04:	4b44      	ldr	r3, [pc, #272]	; (8001e18 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x148>)
 8001d06:	7819      	ldrb	r1, [r3, #0]
 8001d08:	3101      	adds	r1, #1
 8001d0a:	b2c9      	uxtb	r1, r1
            if (subscript_in_progress_ == TX_SIZE)
 8001d0c:	2932      	cmp	r1, #50	; 0x32
            subscript_in_progress_++;
 8001d0e:	bf18      	it	ne
 8001d10:	7019      	strbne	r1, [r3, #0]
            if (subscript_in_progress_ != subscript_to_add_)
 8001d12:	4942      	ldr	r1, [pc, #264]	; (8001e1c <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x14c>)
                subscript_in_progress_ = 0;
 8001d14:	bf08      	it	eq
 8001d16:	701d      	strbeq	r5, [r3, #0]
            if (subscript_in_progress_ != subscript_to_add_)
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	7809      	ldrb	r1, [r1, #0]
 8001d1c:	4299      	cmp	r1, r3
 8001d1e:	d02c      	beq.n	8001d7a <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0xaa>
                __HAL_DMA_DISABLE(huart->hdmatx);
 8001d20:	6821      	ldr	r1, [r4, #0]
                huart->hdmatx->Instance->NDTR = (uint32_t)tx_buffer_unit_[subscript_in_progress_].tx_len_;
 8001d22:	4d3f      	ldr	r5, [pc, #252]	; (8001e20 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x150>)
                __HAL_DMA_DISABLE(huart->hdmatx);
 8001d24:	6808      	ldr	r0, [r1, #0]
 8001d26:	f020 0001 	bic.w	r0, r0, #1
 8001d2a:	6008      	str	r0, [r1, #0]
                huart->hdmatx->Instance->NDTR = (uint32_t)tx_buffer_unit_[subscript_in_progress_].tx_len_;
 8001d2c:	20fb      	movs	r0, #251	; 0xfb
 8001d2e:	fb00 5003 	mla	r0, r0, r3, r5
 8001d32:	f890 00fa 	ldrb.w	r0, [r0, #250]	; 0xfa
 8001d36:	6048      	str	r0, [r1, #4]
                uint8_t* tmp8 = tx_buffer_unit_[subscript_in_progress_].tx_data_;
 8001d38:	ebc3 1083 	rsb	r0, r3, r3, lsl #6
 8001d3c:	ebc3 0380 	rsb	r3, r3, r0, lsl #2
 8001d40:	442b      	add	r3, r5
                huart->hdmatx->Instance->M0AR = *(uint32_t*)tmp32;
 8001d42:	60cb      	str	r3, [r1, #12]
                huart->Instance->CR3 |= USART_CR3_DMAT; //enable dma request in hsuart side
 8001d44:	6953      	ldr	r3, [r2, #20]
 8001d46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d4a:	6153      	str	r3, [r2, #20]
                __HAL_DMA_ENABLE(huart->hdmatx);
 8001d4c:	680b      	ldr	r3, [r1, #0]
 8001d4e:	f043 0301 	orr.w	r3, r3, #1
 8001d52:	600b      	str	r3, [r1, #0]
        __HAL_DMA_CLEAR_FLAG(huart->hdmatx, __HAL_DMA_GET_TC_FLAG_INDEX(huart->hdmatx));
 8001d54:	6823      	ldr	r3, [r4, #0]
 8001d56:	4a33      	ldr	r2, [pc, #204]	; (8001e24 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x154>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d916      	bls.n	8001d8a <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0xba>
 8001d5c:	3218      	adds	r2, #24
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d00e      	beq.n	8001d80 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0xb0>
 8001d62:	3218      	adds	r2, #24
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d00d      	beq.n	8001d84 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0xb4>
 8001d68:	3218      	adds	r2, #24
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	bf0c      	ite	eq
 8001d6e:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 8001d72:	f04f 6300 	movne.w	r3, #134217728	; 0x8000000
 8001d76:	4a2c      	ldr	r2, [pc, #176]	; (8001e28 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x158>)
 8001d78:	e7ba      	b.n	8001cf0 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x20>
                idle_flag_ = true;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	7003      	strb	r3, [r0, #0]
 8001d7e:	e7e9      	b.n	8001d54 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x84>
        __HAL_DMA_CLEAR_FLAG(huart->hdmatx, __HAL_DMA_GET_TC_FLAG_INDEX(huart->hdmatx));
 8001d80:	2320      	movs	r3, #32
 8001d82:	e7f8      	b.n	8001d76 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0xa6>
 8001d84:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001d88:	e7f5      	b.n	8001d76 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0xa6>
 8001d8a:	4a28      	ldr	r2, [pc, #160]	; (8001e2c <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x15c>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d915      	bls.n	8001dbc <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0xec>
 8001d90:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d00c      	beq.n	8001db2 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0xe2>
 8001d98:	3218      	adds	r2, #24
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d00b      	beq.n	8001db6 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0xe6>
 8001d9e:	3218      	adds	r2, #24
 8001da0:	4293      	cmp	r3, r2
 8001da2:	bf0c      	ite	eq
 8001da4:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 8001da8:	f04f 6300 	movne.w	r3, #134217728	; 0x8000000
 8001dac:	4a1e      	ldr	r2, [pc, #120]	; (8001e28 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x158>)
 8001dae:	6093      	str	r3, [r2, #8]
 8001db0:	bd30      	pop	{r4, r5, pc}
 8001db2:	2320      	movs	r3, #32
 8001db4:	e7fa      	b.n	8001dac <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0xdc>
 8001db6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001dba:	e7f7      	b.n	8001dac <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0xdc>
 8001dbc:	4a1c      	ldr	r2, [pc, #112]	; (8001e30 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x160>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d913      	bls.n	8001dea <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x11a>
 8001dc2:	3218      	adds	r2, #24
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d00b      	beq.n	8001de0 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x110>
 8001dc8:	3218      	adds	r2, #24
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d00a      	beq.n	8001de4 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x114>
 8001dce:	3218      	adds	r2, #24
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	bf0c      	ite	eq
 8001dd4:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 8001dd8:	f04f 6300 	movne.w	r3, #134217728	; 0x8000000
 8001ddc:	4a15      	ldr	r2, [pc, #84]	; (8001e34 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x164>)
 8001dde:	e787      	b.n	8001cf0 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x20>
 8001de0:	2320      	movs	r3, #32
 8001de2:	e7fb      	b.n	8001ddc <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x10c>
 8001de4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001de8:	e7f8      	b.n	8001ddc <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x10c>
 8001dea:	4a13      	ldr	r2, [pc, #76]	; (8001e38 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x168>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d00b      	beq.n	8001e08 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x138>
 8001df0:	3218      	adds	r2, #24
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d00a      	beq.n	8001e0c <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x13c>
 8001df6:	3218      	adds	r2, #24
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	bf0c      	ite	eq
 8001dfc:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 8001e00:	f04f 6300 	movne.w	r3, #134217728	; 0x8000000
 8001e04:	4a0b      	ldr	r2, [pc, #44]	; (8001e34 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x164>)
 8001e06:	e7d2      	b.n	8001dae <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0xde>
 8001e08:	2320      	movs	r3, #32
 8001e0a:	e7fb      	b.n	8001e04 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x134>
 8001e0c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001e10:	e7f8      	b.n	8001e04 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x134>
 8001e12:	bf00      	nop
 8001e14:	20000a6c 	.word	0x20000a6c
 8001e18:	20000a6e 	.word	0x20000a6e
 8001e1c:	20000a6d 	.word	0x20000a6d
 8001e20:	20000a6f 	.word	0x20000a6f
 8001e24:	40026458 	.word	0x40026458
 8001e28:	40026400 	.word	0x40026400
 8001e2c:	400260b8 	.word	0x400260b8
 8001e30:	40026058 	.word	0x40026058
 8001e34:	40026000 	.word	0x40026000
 8001e38:	40026010 	.word	0x40026010

08001e3c <_ZN8RxBufferI18UART_HandleTypeDefLi400ELi8EE11ReceiveCpltEP19__DMA_HandleTypeDef>:
    if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0)
 8001e3c:	6803      	ldr	r3, [r0, #0]
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	f412 7280 	ands.w	r2, r2, #256	; 0x100
  static void ReceiveCplt(DMA_HandleTypeDef *hdma)
 8001e44:	b530      	push	{r4, r5, lr}
    if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0)
 8001e46:	d10e      	bne.n	8001e66 <_ZN8RxBufferI18UART_HandleTypeDefLi400ELi8EE11ReceiveCpltEP19__DMA_HandleTypeDef+0x2a>
    Hardware* huart = ( Hardware* )(hdma)->Parent;
 8001e48:	6b83      	ldr	r3, [r0, #56]	; 0x38
        huart->Instance->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DMAR);
 8001e4a:	6819      	ldr	r1, [r3, #0]
        huart->RxXferCount = 0;
 8001e4c:	85da      	strh	r2, [r3, #46]	; 0x2e
        huart->Instance->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DMAR);
 8001e4e:	694a      	ldr	r2, [r1, #20]
 8001e50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e54:	614a      	str	r2, [r1, #20]
        if(huart->gState == HAL_UART_STATE_BUSY_TX_RX)
 8001e56:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 8001e5a:	2a23      	cmp	r2, #35	; 0x23
          huart->gState = HAL_UART_STATE_BUSY_TX;
 8001e5c:	bf0c      	ite	eq
 8001e5e:	2221      	moveq	r2, #33	; 0x21
          huart->gState = HAL_UART_STATE_READY;
 8001e60:	2220      	movne	r2, #32
 8001e62:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    ring_buf_->push(rx_value_[i]);
 8001e66:	4b0a      	ldr	r3, [pc, #40]	; (8001e90 <_ZN8RxBufferI18UART_HandleTypeDefLi400ELi8EE11ReceiveCpltEP19__DMA_HandleTypeDef+0x54>)
 8001e68:	4d0a      	ldr	r5, [pc, #40]	; (8001e94 <_ZN8RxBufferI18UART_HandleTypeDefLi400ELi8EE11ReceiveCpltEP19__DMA_HandleTypeDef+0x58>)
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	f9b2 3192 	ldrsh.w	r3, [r2, #402]	; 0x192
    if (byte_to_add_ == buffer_length_)
 8001e70:	f8b2 0194 	ldrh.w	r0, [r2, #404]	; 0x194
 8001e74:	2100      	movs	r1, #0
    buf_[byte_to_add_] = new_value;
 8001e76:	5d4c      	ldrb	r4, [r1, r5]
 8001e78:	54d4      	strb	r4, [r2, r3]
    byte_to_add_++;
 8001e7a:	3301      	adds	r3, #1
 8001e7c:	b21b      	sxth	r3, r3
for(int i = 0; i < RX_BURST_SIZE; i++)
 8001e7e:	3101      	adds	r1, #1
        byte_to_add_ = 0;
 8001e80:	4283      	cmp	r3, r0
 8001e82:	bf08      	it	eq
 8001e84:	2300      	moveq	r3, #0
for(int i = 0; i < RX_BURST_SIZE; i++)
 8001e86:	2908      	cmp	r1, #8
 8001e88:	d1f5      	bne.n	8001e76 <_ZN8RxBufferI18UART_HandleTypeDefLi400ELi8EE11ReceiveCpltEP19__DMA_HandleTypeDef+0x3a>
 8001e8a:	f8a2 3192 	strh.w	r3, [r2, #402]	; 0x192
 8001e8e:	bd30      	pop	{r4, r5, pc}
 8001e90:	20003b80 	.word	0x20003b80
 8001e94:	20003b75 	.word	0x20003b75

08001e98 <_ZN3ros11Subscriber2IN6kduino11DesireCoordE16AttitudeEstimateE15getEndpointTypeEv>:
        this->fun_obj_(obj_, msg);
      }

      virtual const char * getMsgType(){ return this->msg.getType(); }
      virtual const char * getMsgMD5(){ return this->msg.getMD5(); }
      virtual int getEndpointType(){ return endpoint_; }
 8001e98:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8001e9a:	4770      	bx	lr

08001e9c <_ZN3ros11Subscriber2IN6kduino11DesireCoordE16AttitudeEstimateE10getMsgTypeEv>:
      virtual const char * getMsgType(){ return this->msg.getType(); }
 8001e9c:	4800      	ldr	r0, [pc, #0]	; (8001ea0 <_ZN3ros11Subscriber2IN6kduino11DesireCoordE16AttitudeEstimateE10getMsgTypeEv+0x4>)
 8001e9e:	4770      	bx	lr
 8001ea0:	08008fd8 	.word	0x08008fd8

08001ea4 <_ZN3ros11Subscriber2IN6kduino11DesireCoordE16AttitudeEstimateE9getMsgMD5Ev>:
      virtual const char * getMsgMD5(){ return this->msg.getMD5(); }
 8001ea4:	4800      	ldr	r0, [pc, #0]	; (8001ea8 <_ZN3ros11Subscriber2IN6kduino11DesireCoordE16AttitudeEstimateE9getMsgMD5Ev+0x4>)
 8001ea6:	4770      	bx	lr
 8001ea8:	08008fb7 	.word	0x08008fb7

08001eac <_ZN3ros11Subscriber2IN6kduino11DesireCoordE16AttitudeEstimateE8callbackEPh>:
      virtual void callback(unsigned char* data){
 8001eac:	b570      	push	{r4, r5, r6, lr}
 8001eae:	4604      	mov	r4, r0
        msg.deserialize(data);
 8001eb0:	f100 050c 	add.w	r5, r0, #12
 8001eb4:	4628      	mov	r0, r5
 8001eb6:	f7ff fe03 	bl	8001ac0 <_ZN6kduino11DesireCoord11deserializeEPh>
      mem_fun1_t(_Ret (_Tp::*__pf)(_Arg))
      : _M_f(__pf) { }

      _Ret
      operator()(_Tp* __p, _Arg __x) const
      { return (__p->*_M_f)(__x); }
 8001eba:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        this->fun_obj_(obj_, msg);
 8001ebc:	6a20      	ldr	r0, [r4, #32]
 8001ebe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001ec0:	f012 0f01 	tst.w	r2, #1
 8001ec4:	ea4f 0262 	mov.w	r2, r2, asr #1
 8001ec8:	bf18      	it	ne
 8001eca:	5881      	ldrne	r1, [r0, r2]
 8001ecc:	4410      	add	r0, r2
 8001ece:	bf18      	it	ne
 8001ed0:	58cb      	ldrne	r3, [r1, r3]
 8001ed2:	4629      	mov	r1, r5
      }
 8001ed4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8001ed8:	4718      	bx	r3

08001eda <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:
    virtual int serialize(unsigned char *outbuffer) const
 8001eda:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
      *(outbuffer + offset++) = ints_length;
 8001ede:	7903      	ldrb	r3, [r0, #4]
 8001ee0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset++) = 0;
 8001ee2:	2300      	movs	r3, #0
    virtual int serialize(unsigned char *outbuffer) const
 8001ee4:	460c      	mov	r4, r1
      *(outbuffer + offset++) = 0;
 8001ee6:	704b      	strb	r3, [r1, #1]
      *(outbuffer + offset++) = 0;
 8001ee8:	708b      	strb	r3, [r1, #2]
      *(outbuffer + offset++) = 0;
 8001eea:	70cb      	strb	r3, [r1, #3]
    virtual int serialize(unsigned char *outbuffer) const
 8001eec:	4607      	mov	r7, r0
 8001eee:	3104      	adds	r1, #4
      *(outbuffer + offset++) = 0;
 8001ef0:	461a      	mov	r2, r3
      for( uint8_t i = 0; i < ints_length; i++){
 8001ef2:	793d      	ldrb	r5, [r7, #4]
 8001ef4:	1c50      	adds	r0, r2, #1
 8001ef6:	b2d2      	uxtb	r2, r2
 8001ef8:	42aa      	cmp	r2, r5
 8001efa:	eba1 0304 	sub.w	r3, r1, r4
 8001efe:	f101 0104 	add.w	r1, r1, #4
 8001f02:	da0f      	bge.n	8001f24 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x4a>
      u_intsi.real = this->ints[i];
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8001f0a:	f801 3c04 	strb.w	r3, [r1, #-4]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8001f0e:	0a1a      	lsrs	r2, r3, #8
 8001f10:	f801 2c03 	strb.w	r2, [r1, #-3]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8001f14:	0c1a      	lsrs	r2, r3, #16
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8001f16:	0e1b      	lsrs	r3, r3, #24
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8001f18:	f801 2c02 	strb.w	r2, [r1, #-2]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8001f1c:	f801 3c01 	strb.w	r3, [r1, #-1]
      for( uint8_t i = 0; i < ints_length; i++){
 8001f20:	4602      	mov	r2, r0
 8001f22:	e7e6      	b.n	8001ef2 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x18>
      *(outbuffer + offset++) = floats_length;
 8001f24:	7c3a      	ldrb	r2, [r7, #16]
 8001f26:	54e2      	strb	r2, [r4, r3]
      *(outbuffer + offset++) = 0;
 8001f28:	18e1      	adds	r1, r4, r3
 8001f2a:	2200      	movs	r2, #0
      *(outbuffer + offset++) = 0;
 8001f2c:	3304      	adds	r3, #4
      *(outbuffer + offset++) = 0;
 8001f2e:	704a      	strb	r2, [r1, #1]
      *(outbuffer + offset++) = 0;
 8001f30:	708a      	strb	r2, [r1, #2]
      *(outbuffer + offset++) = 0;
 8001f32:	70ca      	strb	r2, [r1, #3]
 8001f34:	4423      	add	r3, r4
      for( uint8_t i = 0; i < floats_length; i++){
 8001f36:	7c38      	ldrb	r0, [r7, #16]
 8001f38:	1c51      	adds	r1, r2, #1
 8001f3a:	b2d2      	uxtb	r2, r2
 8001f3c:	4282      	cmp	r2, r0
 8001f3e:	eba3 0604 	sub.w	r6, r3, r4
 8001f42:	f103 0304 	add.w	r3, r3, #4
 8001f46:	da0f      	bge.n	8001f68 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x8e>
      u_floatsi.real = this->floats[i];
 8001f48:	69b8      	ldr	r0, [r7, #24]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8001f4a:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 8001f4e:	f803 2c04 	strb.w	r2, [r3, #-4]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8001f52:	0a10      	lsrs	r0, r2, #8
 8001f54:	f803 0c03 	strb.w	r0, [r3, #-3]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8001f58:	0c10      	lsrs	r0, r2, #16
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8001f5a:	0e12      	lsrs	r2, r2, #24
 8001f5c:	f803 2c01 	strb.w	r2, [r3, #-1]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8001f60:	f803 0c02 	strb.w	r0, [r3, #-2]
      for( uint8_t i = 0; i < floats_length; i++){
 8001f64:	460a      	mov	r2, r1
 8001f66:	e7e6      	b.n	8001f36 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      *(outbuffer + offset++) = strings_length;
 8001f68:	7f3b      	ldrb	r3, [r7, #28]
 8001f6a:	55a3      	strb	r3, [r4, r6]
      *(outbuffer + offset++) = 0;
 8001f6c:	19a2      	adds	r2, r4, r6
 8001f6e:	2300      	movs	r3, #0
 8001f70:	7053      	strb	r3, [r2, #1]
      *(outbuffer + offset++) = 0;
 8001f72:	7093      	strb	r3, [r2, #2]
      *(outbuffer + offset++) = 0;
 8001f74:	3604      	adds	r6, #4
 8001f76:	70d3      	strb	r3, [r2, #3]
      for( uint8_t i = 0; i < strings_length; i++){
 8001f78:	b2dd      	uxtb	r5, r3
 8001f7a:	f103 0901 	add.w	r9, r3, #1
 8001f7e:	7f3b      	ldrb	r3, [r7, #28]
 8001f80:	429d      	cmp	r5, r3
 8001f82:	da11      	bge.n	8001fa8 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xce>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8001f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f86:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8001f8a:	f7fe f947 	bl	800021c <strlen>
      memcpy(outbuffer + offset, &length_stringsi, sizeof(uint32_t));
 8001f8e:	51a0      	str	r0, [r4, r6]
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8001f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
      offset += 4;
 8001f92:	3604      	adds	r6, #4
      uint32_t length_stringsi = strlen(this->strings[i]);
 8001f94:	4680      	mov	r8, r0
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8001f96:	4602      	mov	r2, r0
 8001f98:	f853 1025 	ldr.w	r1, [r3, r5, lsl #2]
 8001f9c:	19a0      	adds	r0, r4, r6
 8001f9e:	f006 f947 	bl	8008230 <memcpy>
      offset += length_stringsi;
 8001fa2:	4446      	add	r6, r8
      for( uint8_t i = 0; i < strings_length; i++){
 8001fa4:	464b      	mov	r3, r9
 8001fa6:	e7e7      	b.n	8001f78 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x9e>
    }
 8001fa8:	4630      	mov	r0, r6
 8001faa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08001fae <_ZNK14rosserial_msgs3Log9serializeEPh>:
    virtual int serialize(unsigned char *outbuffer) const
 8001fae:	b570      	push	{r4, r5, r6, lr}
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8001fb0:	7903      	ldrb	r3, [r0, #4]
 8001fb2:	700b      	strb	r3, [r1, #0]
    virtual int serialize(unsigned char *outbuffer) const
 8001fb4:	4606      	mov	r6, r0
      uint32_t length_msg = strlen(this->msg);
 8001fb6:	6880      	ldr	r0, [r0, #8]
    virtual int serialize(unsigned char *outbuffer) const
 8001fb8:	460d      	mov	r5, r1
      uint32_t length_msg = strlen(this->msg);
 8001fba:	f7fe f92f 	bl	800021c <strlen>
      memcpy(outbuffer + offset, &length_msg, sizeof(uint32_t));
 8001fbe:	f8c5 0001 	str.w	r0, [r5, #1]
      uint32_t length_msg = strlen(this->msg);
 8001fc2:	4604      	mov	r4, r0
      memcpy(outbuffer + offset, this->msg, length_msg);
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	68b1      	ldr	r1, [r6, #8]
 8001fc8:	1d68      	adds	r0, r5, #5
 8001fca:	f006 f931 	bl	8008230 <memcpy>
    }
 8001fce:	1d60      	adds	r0, r4, #5
 8001fd0:	bd70      	pop	{r4, r5, r6, pc}

08001fd2 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8001fd2:	8883      	ldrh	r3, [r0, #4]
    virtual int serialize(unsigned char *outbuffer) const
 8001fd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8001fd8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8001fda:	8883      	ldrh	r3, [r0, #4]
 8001fdc:	0a1b      	lsrs	r3, r3, #8
 8001fde:	704b      	strb	r3, [r1, #1]
    virtual int serialize(unsigned char *outbuffer) const
 8001fe0:	4605      	mov	r5, r0
      uint32_t length_topic_name = strlen(this->topic_name);
 8001fe2:	6880      	ldr	r0, [r0, #8]
    virtual int serialize(unsigned char *outbuffer) const
 8001fe4:	460c      	mov	r4, r1
      uint32_t length_topic_name = strlen(this->topic_name);
 8001fe6:	f7fe f919 	bl	800021c <strlen>
      memcpy(outbuffer + offset, &length_topic_name, sizeof(uint32_t));
 8001fea:	f8c4 0002 	str.w	r0, [r4, #2]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8001fee:	4602      	mov	r2, r0
 8001ff0:	68a9      	ldr	r1, [r5, #8]
      uint32_t length_topic_name = strlen(this->topic_name);
 8001ff2:	4607      	mov	r7, r0
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8001ff4:	1da0      	adds	r0, r4, #6
 8001ff6:	f006 f91b 	bl	8008230 <memcpy>
      uint32_t length_message_type = strlen(this->message_type);
 8001ffa:	68e8      	ldr	r0, [r5, #12]
 8001ffc:	f7fe f90e 	bl	800021c <strlen>
      offset += length_topic_name;
 8002000:	f107 0806 	add.w	r8, r7, #6
      offset += 4;
 8002004:	370a      	adds	r7, #10
      memcpy(outbuffer + offset, &length_message_type, sizeof(uint32_t));
 8002006:	f844 0008 	str.w	r0, [r4, r8]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 800200a:	4602      	mov	r2, r0
 800200c:	68e9      	ldr	r1, [r5, #12]
      uint32_t length_message_type = strlen(this->message_type);
 800200e:	4606      	mov	r6, r0
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8002010:	19e0      	adds	r0, r4, r7
 8002012:	f006 f90d 	bl	8008230 <memcpy>
      uint32_t length_md5sum = strlen(this->md5sum);
 8002016:	6928      	ldr	r0, [r5, #16]
 8002018:	f7fe f900 	bl	800021c <strlen>
      offset += length_message_type;
 800201c:	443e      	add	r6, r7
      uint32_t length_md5sum = strlen(this->md5sum);
 800201e:	4607      	mov	r7, r0
      memcpy(outbuffer + offset, &length_md5sum, sizeof(uint32_t));
 8002020:	51a0      	str	r0, [r4, r6]
      offset += 4;
 8002022:	3604      	adds	r6, #4
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8002024:	4602      	mov	r2, r0
 8002026:	6929      	ldr	r1, [r5, #16]
 8002028:	19a0      	adds	r0, r4, r6
      offset += length_md5sum;
 800202a:	443e      	add	r6, r7
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 800202c:	f006 f900 	bl	8008230 <memcpy>
      u_buffer_size.real = this->buffer_size;
 8002030:	696b      	ldr	r3, [r5, #20]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8002032:	55a3      	strb	r3, [r4, r6]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8002034:	4434      	add	r4, r6
 8002036:	0a1a      	lsrs	r2, r3, #8
 8002038:	7062      	strb	r2, [r4, #1]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 800203a:	0c1a      	lsrs	r2, r3, #16
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 800203c:	0e1b      	lsrs	r3, r3, #24
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 800203e:	70a2      	strb	r2, [r4, #2]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8002040:	70e3      	strb	r3, [r4, #3]
    }
 8002042:	1d30      	adds	r0, r6, #4
 8002044:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002048 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:
    virtual int deserialize(unsigned char *inbuffer)
 8002048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
      uint8_t ints_lengthT = *(inbuffer + offset++);
 800204a:	780e      	ldrb	r6, [r1, #0]
      if(ints_lengthT > ints_length)
 800204c:	7903      	ldrb	r3, [r0, #4]
 800204e:	429e      	cmp	r6, r3
    virtual int deserialize(unsigned char *inbuffer)
 8002050:	4604      	mov	r4, r0
 8002052:	460d      	mov	r5, r1
      if(ints_lengthT > ints_length)
 8002054:	dd04      	ble.n	8002060 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x18>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8002056:	00b1      	lsls	r1, r6, #2
 8002058:	68c0      	ldr	r0, [r0, #12]
 800205a:	f006 f901 	bl	8008260 <realloc>
 800205e:	60e0      	str	r0, [r4, #12]
      ints_length = ints_lengthT;
 8002060:	7126      	strb	r6, [r4, #4]
 8002062:	1d2a      	adds	r2, r5, #4
 8002064:	2100      	movs	r1, #0
      for( uint8_t i = 0; i < ints_length; i++){
 8002066:	7923      	ldrb	r3, [r4, #4]
 8002068:	1c48      	adds	r0, r1, #1
 800206a:	b2c9      	uxtb	r1, r1
 800206c:	4299      	cmp	r1, r3
 800206e:	eba2 0605 	sub.w	r6, r2, r5
 8002072:	f102 0204 	add.w	r2, r2, #4
 8002076:	da13      	bge.n	80020a0 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x58>
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002078:	f812 3c02 	ldrb.w	r3, [r2, #-2]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800207c:	f812 6c03 	ldrb.w	r6, [r2, #-3]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002080:	041b      	lsls	r3, r3, #16
 8002082:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002086:	f812 6c04 	ldrb.w	r6, [r2, #-4]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800208a:	4333      	orrs	r3, r6
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800208c:	f812 6c01 	ldrb.w	r6, [r2, #-1]
 8002090:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8002094:	68e6      	ldr	r6, [r4, #12]
      this->st_ints = u_st_ints.real;
 8002096:	60a3      	str	r3, [r4, #8]
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8002098:	f846 3021 	str.w	r3, [r6, r1, lsl #2]
      for( uint8_t i = 0; i < ints_length; i++){
 800209c:	4601      	mov	r1, r0
 800209e:	e7e2      	b.n	8002066 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1e>
      uint8_t floats_lengthT = *(inbuffer + offset++);
 80020a0:	5daf      	ldrb	r7, [r5, r6]
      if(floats_lengthT > floats_length)
 80020a2:	7c23      	ldrb	r3, [r4, #16]
 80020a4:	429f      	cmp	r7, r3
 80020a6:	dd04      	ble.n	80020b2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x6a>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 80020a8:	00b9      	lsls	r1, r7, #2
 80020aa:	69a0      	ldr	r0, [r4, #24]
 80020ac:	f006 f8d8 	bl	8008260 <realloc>
 80020b0:	61a0      	str	r0, [r4, #24]
      offset += 3;
 80020b2:	1d33      	adds	r3, r6, #4
      floats_length = floats_lengthT;
 80020b4:	7427      	strb	r7, [r4, #16]
 80020b6:	442b      	add	r3, r5
 80020b8:	2200      	movs	r2, #0
      for( uint8_t i = 0; i < floats_length; i++){
 80020ba:	b2d1      	uxtb	r1, r2
 80020bc:	1c50      	adds	r0, r2, #1
 80020be:	7c22      	ldrb	r2, [r4, #16]
 80020c0:	4291      	cmp	r1, r2
 80020c2:	eba3 0605 	sub.w	r6, r3, r5
 80020c6:	f103 0304 	add.w	r3, r3, #4
 80020ca:	da13      	bge.n	80020f4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xac>
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80020cc:	f813 2c02 	ldrb.w	r2, [r3, #-2]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80020d0:	f813 6c03 	ldrb.w	r6, [r3, #-3]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80020d4:	0412      	lsls	r2, r2, #16
 80020d6:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80020da:	f813 6c04 	ldrb.w	r6, [r3, #-4]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80020de:	4332      	orrs	r2, r6
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80020e0:	f813 6c01 	ldrb.w	r6, [r3, #-1]
 80020e4:	ea42 6206 	orr.w	r2, r2, r6, lsl #24
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 80020e8:	69a6      	ldr	r6, [r4, #24]
      this->st_floats = u_st_floats.real;
 80020ea:	6162      	str	r2, [r4, #20]
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 80020ec:	f846 2021 	str.w	r2, [r6, r1, lsl #2]
      for( uint8_t i = 0; i < floats_length; i++){
 80020f0:	4602      	mov	r2, r0
 80020f2:	e7e2      	b.n	80020ba <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x72>
      uint8_t strings_lengthT = *(inbuffer + offset++);
 80020f4:	5daf      	ldrb	r7, [r5, r6]
      if(strings_lengthT > strings_length)
 80020f6:	7f23      	ldrb	r3, [r4, #28]
 80020f8:	429f      	cmp	r7, r3
 80020fa:	dd04      	ble.n	8002106 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xbe>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 80020fc:	00b9      	lsls	r1, r7, #2
 80020fe:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002100:	f006 f8ae 	bl	8008260 <realloc>
 8002104:	6260      	str	r0, [r4, #36]	; 0x24
      strings_length = strings_lengthT;
 8002106:	2100      	movs	r1, #0
 8002108:	7727      	strb	r7, [r4, #28]
      offset += 3;
 800210a:	1d30      	adds	r0, r6, #4
      inbuffer[offset+length_st_strings-1]=0;
 800210c:	460f      	mov	r7, r1
      for( uint8_t i = 0; i < strings_length; i++){
 800210e:	7f23      	ldrb	r3, [r4, #28]
 8002110:	b2ce      	uxtb	r6, r1
 8002112:	429e      	cmp	r6, r3
 8002114:	da19      	bge.n	800214a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x102>
      memcpy(&length_st_strings, (inbuffer + offset), sizeof(uint32_t));
 8002116:	f855 e000 	ldr.w	lr, [r5, r0]
      offset += 4;
 800211a:	1d03      	adds	r3, r0, #4
 800211c:	18ea      	adds	r2, r5, r3
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 800211e:	eb0e 0003 	add.w	r0, lr, r3
 8002122:	eba2 0e05 	sub.w	lr, r2, r5
 8002126:	4570      	cmp	r0, lr
 8002128:	d904      	bls.n	8002134 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xec>
          inbuffer[k-1]=inbuffer[k];
 800212a:	f812 eb01 	ldrb.w	lr, [r2], #1
 800212e:	f802 ec02 	strb.w	lr, [r2, #-2]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002132:	e7f6      	b.n	8002122 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xda>
      inbuffer[offset+length_st_strings-1]=0;
 8002134:	182a      	adds	r2, r5, r0
      this->st_strings = (char *)(inbuffer + offset-1);
 8002136:	3b01      	subs	r3, #1
      inbuffer[offset+length_st_strings-1]=0;
 8002138:	f802 7c01 	strb.w	r7, [r2, #-1]
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 800213c:	6a62      	ldr	r2, [r4, #36]	; 0x24
      this->st_strings = (char *)(inbuffer + offset-1);
 800213e:	442b      	add	r3, r5
 8002140:	6223      	str	r3, [r4, #32]
 8002142:	3101      	adds	r1, #1
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8002144:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
      for( uint8_t i = 0; i < strings_length; i++){
 8002148:	e7e1      	b.n	800210e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xc6>
    }
 800214a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800214c <_ZN17ComplementaryAHRS10estimationEv>:
    v->y +=  delta[X]  * v_tmp.z - delta[Z]   * v_tmp.x;
  }
  */

  /* core esitmation process, using body frame */
  virtual void estimation() 
 800214c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002150:	ed2d 8b04 	vpush	{d8-d9}
 8002154:	4604      	mov	r4, r0

      rotateV(&EstGb_.V,delta_gyro_angle);
      rotateV(&EstMb_.V,delta_gyro_angle);
 #endif

    float acc_magnitude = acc_b_ * acc_b_; //norm?
 8002156:	f100 0b04 	add.w	fp, r0, #4
  virtual void estimation() 
 800215a:	b08d      	sub	sp, #52	; 0x34
    float acc_magnitude = acc_b_ * acc_b_; //norm?
 800215c:	4659      	mov	r1, fp
 800215e:	4658      	mov	r0, fp
    Vector3f est_g_b_tmp = est_g_b_;
 8002160:	f104 06b0 	add.w	r6, r4, #176	; 0xb0
    float acc_magnitude = acc_b_ * acc_b_; //norm?
 8002164:	f003 fec6 	bl	8005ef4 <_ZNK7Vector3IfEmlERKS0_>
    Vector3f est_g_b_tmp = est_g_b_;
 8002168:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    Vector3f est_m_b_tmp = est_m_b_;
 800216c:	f104 05bc 	add.w	r5, r4, #188	; 0xbc
    Vector3f est_g_b_tmp = est_g_b_;
 8002170:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
    Vector3f est_m_b_tmp = est_m_b_;
 8002174:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002178:	af03      	add	r7, sp, #12
    est_g_b_ += (est_g_b_tmp % (gyro_b_  * (DELTA_T * GYRO_AMP) )); //rotation by gyro
 800217a:	f104 091c 	add.w	r9, r4, #28
    Vector3f est_m_b_tmp = est_m_b_;
 800217e:	e887 0007 	stmia.w	r7, {r0, r1, r2}
    float acc_magnitude = acc_b_ * acc_b_; //norm?
 8002182:	eeb0 8a40 	vmov.f32	s16, s0
    est_g_b_ += (est_g_b_tmp % (gyro_b_  * (DELTA_T * GYRO_AMP) )); //rotation by gyro
 8002186:	4648      	mov	r0, r9
 8002188:	ed9f 0a87 	vldr	s0, [pc, #540]	; 80023a8 <_ZN17ComplementaryAHRS10estimationEv+0x25c>
 800218c:	f003 ffa2 	bl	80060d4 <_ZNK7Vector3IfEmlEf>
 8002190:	a906      	add	r1, sp, #24
 8002192:	4668      	mov	r0, sp
 8002194:	edcd 0a07 	vstr	s1, [sp, #28]
 8002198:	ed8d 1a08 	vstr	s2, [sp, #32]
 800219c:	ed8d 0a06 	vstr	s0, [sp, #24]
 80021a0:	f003 fe48 	bl	8005e34 <_ZNK7Vector3IfErmERKS0_>
 80021a4:	a909      	add	r1, sp, #36	; 0x24
 80021a6:	4630      	mov	r0, r6
 80021a8:	edcd 0a0a 	vstr	s1, [sp, #40]	; 0x28
 80021ac:	ed8d 1a0b 	vstr	s2, [sp, #44]	; 0x2c
 80021b0:	ed8d 0a09 	vstr	s0, [sp, #36]	; 0x24
 80021b4:	f003 ff20 	bl	8005ff8 <_ZN7Vector3IfEpLERKS0_>
    est_m_b_ += (est_m_b_tmp % (gyro_b_  * (DELTA_T * GYRO_AMP) )); //rotation by gyro
 80021b8:	ed9f 0a7b 	vldr	s0, [pc, #492]	; 80023a8 <_ZN17ComplementaryAHRS10estimationEv+0x25c>
 80021bc:	4648      	mov	r0, r9
 80021be:	f003 ff89 	bl	80060d4 <_ZNK7Vector3IfEmlEf>
 80021c2:	a906      	add	r1, sp, #24
 80021c4:	4638      	mov	r0, r7
 80021c6:	ed8d 0a06 	vstr	s0, [sp, #24]
 80021ca:	edcd 0a07 	vstr	s1, [sp, #28]
 80021ce:	ed8d 1a08 	vstr	s2, [sp, #32]
 80021d2:	f003 fe2f 	bl	8005e34 <_ZNK7Vector3IfErmERKS0_>
 80021d6:	a909      	add	r1, sp, #36	; 0x24
 80021d8:	4628      	mov	r0, r5
 80021da:	ed8d 0a09 	vstr	s0, [sp, #36]	; 0x24
 80021de:	edcd 0a0a 	vstr	s1, [sp, #40]	; 0x28
 80021e2:	ed8d 1a0b 	vstr	s2, [sp, #44]	; 0x2c
 80021e6:	f003 ff07 	bl	8005ff8 <_ZN7Vector3IfEpLERKS0_>



    if( G_MIN < acc_magnitude && acc_magnitude < G_MAX) valid_acc = 1;
 80021ea:	eddf 7a70 	vldr	s15, [pc, #448]	; 80023ac <_ZN17ComplementaryAHRS10estimationEv+0x260>
 80021ee:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80021f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    Vector3f est_g_b_tmp = est_g_b_;
 80021f6:	46e8      	mov	r8, sp
    if( G_MIN < acc_magnitude && acc_magnitude < G_MAX) valid_acc = 1;
 80021f8:	f340 80d2 	ble.w	80023a0 <_ZN17ComplementaryAHRS10estimationEv+0x254>
 80021fc:	eddf 7a6c 	vldr	s15, [pc, #432]	; 80023b0 <_ZN17ComplementaryAHRS10estimationEv+0x264>
 8002200:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8002204:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002208:	bf4c      	ite	mi
 800220a:	f04f 0a01 	movmi.w	sl, #1
 800220e:	f04f 0a00 	movpl.w	sl, #0
    rpy_[Z] = atan2f( EstMv_.V.z * EstGv_.V.y - EstMv_.V.y * EstGv_.V.z,
                      EstMv_.V.x * invG * sqGY_sqGZ  - (EstMv_.V.y * EstGv_.V.y + EstMv_.V.z * EstGv_.V.z) * invG * EstGv_.V.x ) ;//+ MAG_DECLINIATION;
#endif


    est_g_b_tmp = est_g_b_;
 8002212:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8002216:	e888 0007 	stmia.w	r8, {r0, r1, r2}
    est_m_b_tmp = est_m_b_;
 800221a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800221e:	f8df 91a4 	ldr.w	r9, [pc, #420]	; 80023c4 <_ZN17ComplementaryAHRS10estimationEv+0x278>
 8002222:	e887 0007 	stmia.w	r7, {r0, r1, r2}

    if ( valid_acc == 1 && cnt == 0)
 8002226:	f1ba 0f00 	cmp.w	sl, #0
 800222a:	d022      	beq.n	8002272 <_ZN17ComplementaryAHRS10estimationEv+0x126>
 800222c:	f8d9 3000 	ldr.w	r3, [r9]
 8002230:	b9fb      	cbnz	r3, 8002272 <_ZN17ComplementaryAHRS10estimationEv+0x126>
      est_g_b_ = (est_g_b_tmp * GYR_CMPF_FACTOR + acc_b_) * INV_GYR_CMPF_FACTOR;
 8002232:	ed9f 0a60 	vldr	s0, [pc, #384]	; 80023b4 <_ZN17ComplementaryAHRS10estimationEv+0x268>
 8002236:	4640      	mov	r0, r8
 8002238:	f003 ff4c 	bl	80060d4 <_ZNK7Vector3IfEmlEf>
 800223c:	4659      	mov	r1, fp
 800223e:	a806      	add	r0, sp, #24
 8002240:	ed8d 0a06 	vstr	s0, [sp, #24]
 8002244:	edcd 0a07 	vstr	s1, [sp, #28]
 8002248:	ed8d 1a08 	vstr	s2, [sp, #32]
 800224c:	f003 ff82 	bl	8006154 <_ZNK7Vector3IfEplERKS0_>
 8002250:	a809      	add	r0, sp, #36	; 0x24
 8002252:	ed8d 0a09 	vstr	s0, [sp, #36]	; 0x24
 8002256:	ed9f 0a58 	vldr	s0, [pc, #352]	; 80023b8 <_ZN17ComplementaryAHRS10estimationEv+0x26c>
 800225a:	edcd 0a0a 	vstr	s1, [sp, #40]	; 0x28
 800225e:	ed8d 1a0b 	vstr	s2, [sp, #44]	; 0x2c
 8002262:	f003 ff37 	bl	80060d4 <_ZNK7Vector3IfEmlEf>
 8002266:	ed84 0a2c 	vstr	s0, [r4, #176]	; 0xb0
 800226a:	edc4 0a2d 	vstr	s1, [r4, #180]	; 0xb4
 800226e:	ed84 1a2e 	vstr	s2, [r4, #184]	; 0xb8
    est_m_b_ = (est_m_b_tmp * GYR_CMPFM_FACTOR  + mag_b_) * INV_GYR_CMPFM_FACTOR;
 8002272:	ed9f 0a52 	vldr	s0, [pc, #328]	; 80023bc <_ZN17ComplementaryAHRS10estimationEv+0x270>
 8002276:	4638      	mov	r0, r7
 8002278:	f003 ff2c 	bl	80060d4 <_ZNK7Vector3IfEmlEf>
 800227c:	f104 0134 	add.w	r1, r4, #52	; 0x34
 8002280:	a806      	add	r0, sp, #24
 8002282:	ed8d 1a08 	vstr	s2, [sp, #32]
 8002286:	edcd 0a07 	vstr	s1, [sp, #28]
 800228a:	ed8d 0a06 	vstr	s0, [sp, #24]
 800228e:	f003 ff61 	bl	8006154 <_ZNK7Vector3IfEplERKS0_>
 8002292:	a809      	add	r0, sp, #36	; 0x24
 8002294:	ed8d 0a09 	vstr	s0, [sp, #36]	; 0x24
 8002298:	ed9f 0a49 	vldr	s0, [pc, #292]	; 80023c0 <_ZN17ComplementaryAHRS10estimationEv+0x274>
 800229c:	ed8d 1a0b 	vstr	s2, [sp, #44]	; 0x2c
 80022a0:	edcd 0a0a 	vstr	s1, [sp, #40]	; 0x28
 80022a4:	f003 ff16 	bl	80060d4 <_ZNK7Vector3IfEmlEf>

    est_g_v_ = r_ * est_g_b_;
 80022a8:	f104 074c 	add.w	r7, r4, #76	; 0x4c
    est_m_b_ = (est_m_b_tmp * GYR_CMPFM_FACTOR  + mag_b_) * INV_GYR_CMPFM_FACTOR;
 80022ac:	ed84 1a31 	vstr	s2, [r4, #196]	; 0xc4
 80022b0:	edc4 0a30 	vstr	s1, [r4, #192]	; 0xc0
 80022b4:	ed84 0a2f 	vstr	s0, [r4, #188]	; 0xbc
    est_g_v_ = r_ * est_g_b_;
 80022b8:	4631      	mov	r1, r6
 80022ba:	4638      	mov	r0, r7
 80022bc:	f004 f89a 	bl	80063f4 <_ZNK7Matrix3IfEmlERK7Vector3IfE>
    est_m_v_ = r_ * est_m_b_;
 80022c0:	4629      	mov	r1, r5
    est_g_v_ = r_ * est_g_b_;
 80022c2:	ed84 1a28 	vstr	s2, [r4, #160]	; 0xa0
    est_m_v_ = r_ * est_m_b_;
 80022c6:	4638      	mov	r0, r7
    est_g_v_ = r_ * est_g_b_;
 80022c8:	edc4 0a27 	vstr	s1, [r4, #156]	; 0x9c
 80022cc:	ed84 0a26 	vstr	s0, [r4, #152]	; 0x98
    est_m_v_ = r_ * est_m_b_;
 80022d0:	f004 f890 	bl	80063f4 <_ZNK7Matrix3IfEmlERK7Vector3IfE>
 80022d4:	ed84 0a29 	vstr	s0, [r4, #164]	; 0xa4

    // Attitude of the estimated vector
    float sq_g_x_sq_g_z = est_g_v_.x * est_g_v_.x + est_g_v_.z * est_g_v_.z;
 80022d8:	ed94 0a28 	vldr	s0, [r4, #160]	; 0xa0
 80022dc:	ed94 7a26 	vldr	s14, [r4, #152]	; 0x98
    float sq_g_y_sq_g_z = est_g_v_.y * est_g_v_.y + est_g_v_.z * est_g_v_.z;
 80022e0:	edd4 7a27 	vldr	s15, [r4, #156]	; 0x9c
    est_m_v_ = r_ * est_m_b_;
 80022e4:	ed84 1a2b 	vstr	s2, [r4, #172]	; 0xac
    float sq_g_x_sq_g_z = est_g_v_.x * est_g_v_.x + est_g_v_.z * est_g_v_.z;
 80022e8:	ee20 0a00 	vmul.f32	s0, s0, s0
    est_m_v_ = r_ * est_m_b_;
 80022ec:	edc4 0a2a 	vstr	s1, [r4, #168]	; 0xa8
    float sq_g_y_sq_g_z = est_g_v_.y * est_g_v_.y + est_g_v_.z * est_g_v_.z;
 80022f0:	eef0 8a40 	vmov.f32	s17, s0
    float sq_g_x_sq_g_z = est_g_v_.x * est_g_v_.x + est_g_v_.z * est_g_v_.z;
 80022f4:	eea7 0a07 	vfma.f32	s0, s14, s14
    float sq_g_y_sq_g_z = est_g_v_.y * est_g_v_.y + est_g_v_.z * est_g_v_.z;
 80022f8:	eee7 8aa7 	vfma.f32	s17, s15, s15
    float invG = inv_sqrt(sq_g_x_sq_g_z + est_g_v_.y * est_g_v_.y);
 80022fc:	eea7 0aa7 	vfma.f32	s0, s15, s15
 8002300:	f004 f8f6 	bl	80064f0 <_Z8inv_sqrtf>

    rpy_.x = atan2f(est_g_v_.y , est_g_v_.z);
 8002304:	edd4 0a28 	vldr	s1, [r4, #160]	; 0xa0
    float invG = inv_sqrt(sq_g_x_sq_g_z + est_g_v_.y * est_g_v_.y);
 8002308:	eeb0 8a40 	vmov.f32	s16, s0
    rpy_.x = atan2f(est_g_v_.y , est_g_v_.z);
 800230c:	ed94 0a27 	vldr	s0, [r4, #156]	; 0x9c
 8002310:	f004 fed6 	bl	80070c0 <atan2f>
 8002314:	ed84 0a1c 	vstr	s0, [r4, #112]	; 0x70
    rpy_.y = atan2f(-est_g_v_.x , inv_sqrt(sq_g_y_sq_g_z)* sq_g_y_sq_g_z);
 8002318:	eeb0 0a68 	vmov.f32	s0, s17
 800231c:	ed94 9a26 	vldr	s18, [r4, #152]	; 0x98
 8002320:	f004 f8e6 	bl	80064f0 <_Z8inv_sqrtf>
 8002324:	eeb1 9a49 	vneg.f32	s18, s18
 8002328:	ee68 0a80 	vmul.f32	s1, s17, s0
 800232c:	eeb0 0a49 	vmov.f32	s0, s18
 8002330:	f004 fec6 	bl	80070c0 <atan2f>
    rpy_.z = atan2f( est_m_v_.z * est_g_v_.y - est_m_v_.y * est_g_v_.z,
 8002334:	edd4 6a2b 	vldr	s13, [r4, #172]	; 0xac
    rpy_.y = atan2f(-est_g_v_.x , inv_sqrt(sq_g_y_sq_g_z)* sq_g_y_sq_g_z);
 8002338:	ed84 0a1d 	vstr	s0, [r4, #116]	; 0x74
    rpy_.z = atan2f( est_m_v_.z * est_g_v_.y - est_m_v_.y * est_g_v_.z,
 800233c:	ed94 0a28 	vldr	s0, [r4, #160]	; 0xa0
 8002340:	ed94 7a27 	vldr	s14, [r4, #156]	; 0x9c
 8002344:	ed94 6a2a 	vldr	s12, [r4, #168]	; 0xa8
                      est_m_v_.x * invG * sq_g_y_sq_g_z  - (est_m_v_.y * est_g_v_.y + est_m_v_.z * est_g_v_.z) * invG * est_g_v_.x ) ;//+ MAG_DECLINIATION;
 8002348:	edd4 7a26 	vldr	s15, [r4, #152]	; 0x98
 800234c:	ee66 0a80 	vmul.f32	s1, s13, s0
    rpy_.z = atan2f( est_m_v_.z * est_g_v_.y - est_m_v_.y * est_g_v_.z,
 8002350:	ee20 0a46 	vnmul.f32	s0, s0, s12
                      est_m_v_.x * invG * sq_g_y_sq_g_z  - (est_m_v_.y * est_g_v_.y + est_m_v_.z * est_g_v_.z) * invG * est_g_v_.x ) ;//+ MAG_DECLINIATION;
 8002354:	eee7 0a06 	vfma.f32	s1, s14, s12
    rpy_.z = atan2f( est_m_v_.z * est_g_v_.y - est_m_v_.y * est_g_v_.z,
 8002358:	eea6 0a87 	vfma.f32	s0, s13, s14
                      est_m_v_.x * invG * sq_g_y_sq_g_z  - (est_m_v_.y * est_g_v_.y + est_m_v_.z * est_g_v_.z) * invG * est_g_v_.x ) ;//+ MAG_DECLINIATION;
 800235c:	ee60 0a88 	vmul.f32	s1, s1, s16
    rpy_.z = atan2f( est_m_v_.z * est_g_v_.y - est_m_v_.y * est_g_v_.z,
 8002360:	ee67 0ae0 	vnmul.f32	s1, s15, s1
                      est_m_v_.x * invG * sq_g_y_sq_g_z  - (est_m_v_.y * est_g_v_.y + est_m_v_.z * est_g_v_.z) * invG * est_g_v_.x ) ;//+ MAG_DECLINIATION;
 8002364:	edd4 7a29 	vldr	s15, [r4, #164]	; 0xa4
 8002368:	ee28 8a27 	vmul.f32	s16, s16, s15
    rpy_.z = atan2f( est_m_v_.z * est_g_v_.y - est_m_v_.y * est_g_v_.z,
 800236c:	eee8 0a88 	vfma.f32	s1, s17, s16
 8002370:	f004 fea6 	bl	80070c0 <atan2f>
 8002374:	ed84 0a1e 	vstr	s0, [r4, #120]	; 0x78
     //********************************************************************************:
     //** refrence1: https://sites.google.com/site/myimuestimationexperience/sensors/magnetometer
     //** refrence2: http://uav.xenocross.net/hdg.html
     //********************************************************************************
    /* update */
    if(valid_acc) cnt++;
 8002378:	f1ba 0f00 	cmp.w	sl, #0
 800237c:	d004      	beq.n	8002388 <_ZN17ComplementaryAHRS10estimationEv+0x23c>
 800237e:	f8d9 3000 	ldr.w	r3, [r9]
 8002382:	3301      	adds	r3, #1
 8002384:	f8c9 3000 	str.w	r3, [r9]
    if(cnt == PRESCLAER_ACC) cnt = 0;
 8002388:	f8d9 3000 	ldr.w	r3, [r9]
 800238c:	2b03      	cmp	r3, #3
 800238e:	bf04      	itt	eq
 8002390:	2300      	moveq	r3, #0
 8002392:	f8c9 3000 	streq.w	r3, [r9]
  }
 8002396:	b00d      	add	sp, #52	; 0x34
 8002398:	ecbd 8b04 	vpop	{d8-d9}
 800239c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80023a0:	f04f 0a00 	mov.w	sl, #0
 80023a4:	e735      	b.n	8002212 <_ZN17ComplementaryAHRS10estimationEv+0xc6>
 80023a6:	bf00      	nop
 80023a8:	3a955b47 	.word	0x3a955b47
 80023ac:	42900000 	.word	0x42900000
 80023b0:	43050000 	.word	0x43050000
 80023b4:	44160000 	.word	0x44160000
 80023b8:	3ada1700 	.word	0x3ada1700
 80023bc:	437a0000 	.word	0x437a0000
 80023c0:	3b828cc0 	.word	0x3b828cc0
 80023c4:	20003b84 	.word	0x20003b84

080023c8 <_ZN16AttitudeEstimate19desireCoordCallbackERKN6kduino11DesireCoordE>:
  uint32_t last_pub_time_;

  //void desireCoordCallback(const aerial_robot_base::DesireCoord& coord_msg)
  void desireCoordCallback(const kduino::DesireCoord& coord_msg)
  {
    estimator_->coordinateUpdate(coord_msg.roll, coord_msg.pitch);
 80023c8:	6c80      	ldr	r0, [r0, #72]	; 0x48
 80023ca:	ed91 0a01 	vldr	s0, [r1, #4]
 80023ce:	edd1 0a02 	vldr	s1, [r1, #8]
  void coordinateUpdate(float desire_attitude_roll, float desire_attitude_pitch)
  {
    desire_attitude_roll_ = desire_attitude_roll; 
    desire_attitude_pitch_ = desire_attitude_pitch; 

    r_.from_euler(desire_attitude_roll_, desire_attitude_pitch_, 0);
 80023d2:	ed9f 1a04 	vldr	s2, [pc, #16]	; 80023e4 <_ZN16AttitudeEstimate19desireCoordCallbackERKN6kduino11DesireCoordE+0x1c>
    desire_attitude_roll_ = desire_attitude_roll; 
 80023d6:	ed80 0a23 	vstr	s0, [r0, #140]	; 0x8c
    desire_attitude_pitch_ = desire_attitude_pitch; 
 80023da:	edc0 0a24 	vstr	s1, [r0, #144]	; 0x90
    r_.from_euler(desire_attitude_roll_, desire_attitude_pitch_, 0);
 80023de:	304c      	adds	r0, #76	; 0x4c
 80023e0:	f003 bf56 	b.w	8006290 <_ZN7Matrix3IfE10from_eulerEfff>
 80023e4:	00000000 	.word	0x00000000

080023e8 <_ZN3IMUD1Ev>:
class IMU : public SENSOR_<Imugyro>
{
public:
	IMU(SPI_HandleTypeDef* hspi, ros::NodeHandle* nh);
	IMU(){};
	~IMU(){}
 80023e8:	b510      	push	{r4, lr}
 80023ea:	4604      	mov	r4, r0
	  }
      }
#endif

      ~_Vector_base() _GLIBCXX_NOEXCEPT
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 80023ec:	68c0      	ldr	r0, [r0, #12]

      void
      _M_deallocate(pointer __p, size_t __n)
      {
	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
	if (__p)
 80023ee:	b108      	cbz	r0, 80023f4 <_ZN3IMUD1Ev+0xc>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
 80023f0:	f004 f93d 	bl	800666e <_ZdlPv>
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 80023f4:	6820      	ldr	r0, [r4, #0]
	if (__p)
 80023f6:	b108      	cbz	r0, 80023fc <_ZN3IMUD1Ev+0x14>
 80023f8:	f004 f939 	bl	800666e <_ZdlPv>
 80023fc:	4620      	mov	r0, r4
 80023fe:	bd10      	pop	{r4, pc}

08002400 <_ZN3ros9Publisher7publishEPKNS_3MsgE>:
      Publisher( const char * topic_name, Msg * msg, int endpoint=rosserial_msgs::TopicInfo::ID_PUBLISHER) :
        topic_(topic_name), 
        msg_(msg),
        endpoint_(endpoint) {};

      int publish( const Msg * msg ) { return nh_->publish(id_, msg); };
 8002400:	68c3      	ldr	r3, [r0, #12]
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	b410      	push	{r4}
 8002406:	6814      	ldr	r4, [r2, #0]
 8002408:	460a      	mov	r2, r1
 800240a:	6881      	ldr	r1, [r0, #8]
 800240c:	4618      	mov	r0, r3
 800240e:	4623      	mov	r3, r4
 8002410:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002414:	4718      	bx	r3
	...

08002418 <_ZN13StateEstimateC1Ev>:
  StateEstimate()
 8002418:	b510      	push	{r4, lr}
      angles()
 800241a:	4a16      	ldr	r2, [pc, #88]	; (8002474 <_ZN13StateEstimateC1Ev+0x5c>)
      temperature(0)
 800241c:	4c16      	ldr	r4, [pc, #88]	; (8002478 <_ZN13StateEstimateC1Ev+0x60>)
 800241e:	6182      	str	r2, [r0, #24]
  class Time
  {
    public:
      uint32_t sec, nsec;

      Time() : sec(0), nsec(0) {}
 8002420:	2100      	movs	r1, #0
 8002422:	2200      	movs	r2, #0
 8002424:	66c4      	str	r4, [r0, #108]	; 0x6c
      sat_num(0)
 8002426:	4c15      	ldr	r4, [pc, #84]	; (800247c <_ZN13StateEstimateC1Ev+0x64>)
 8002428:	61c1      	str	r1, [r0, #28]
 800242a:	6201      	str	r1, [r0, #32]
 800242c:	6242      	str	r2, [r0, #36]	; 0x24
 800242e:	6282      	str	r2, [r0, #40]	; 0x28
 8002430:	62c2      	str	r2, [r0, #44]	; 0x2c
 8002432:	6302      	str	r2, [r0, #48]	; 0x30
 8002434:	6342      	str	r2, [r0, #52]	; 0x34
 8002436:	6382      	str	r2, [r0, #56]	; 0x38
 8002438:	63c2      	str	r2, [r0, #60]	; 0x3c
 800243a:	6402      	str	r2, [r0, #64]	; 0x40
 800243c:	6442      	str	r2, [r0, #68]	; 0x44
 800243e:	6482      	str	r2, [r0, #72]	; 0x48
 8002440:	64c2      	str	r2, [r0, #76]	; 0x4c
 8002442:	6502      	str	r2, [r0, #80]	; 0x50
 8002444:	6701      	str	r1, [r0, #112]	; 0x70
 8002446:	6741      	str	r1, [r0, #116]	; 0x74
 8002448:	6782      	str	r2, [r0, #120]	; 0x78
 800244a:	67c2      	str	r2, [r0, #124]	; 0x7c
 800244c:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
 8002450:	f8c0 4094 	str.w	r4, [r0, #148]	; 0x94
 8002454:	f8c0 1098 	str.w	r1, [r0, #152]	; 0x98
 8002458:	f8c0 109c 	str.w	r1, [r0, #156]	; 0x9c
 800245c:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
 8002460:	f8c0 20a4 	str.w	r2, [r0, #164]	; 0xa4
 8002464:	f8c0 20a8 	str.w	r2, [r0, #168]	; 0xa8
 8002468:	f8c0 20ac 	str.w	r2, [r0, #172]	; 0xac
 800246c:	f880 10b0 	strb.w	r1, [r0, #176]	; 0xb0
  }
 8002470:	bd10      	pop	{r4, pc}
 8002472:	bf00      	nop
 8002474:	08008d7c 	.word	0x08008d7c
 8002478:	08008dd0 	.word	0x08008dd0
 800247c:	08008de8 	.word	0x08008de8

08002480 <_Z18SystemClock_Configv>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8002480:	b530      	push	{r4, r5, lr}
 8002482:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002484:	4b28      	ldr	r3, [pc, #160]	; (8002528 <_Z18SystemClock_Configv+0xa8>)
 8002486:	2100      	movs	r1, #0
 8002488:	9100      	str	r1, [sp, #0]
 800248a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800248c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002490:	641a      	str	r2, [r3, #64]	; 0x40
 8002492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002494:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002498:	9300      	str	r3, [sp, #0]
 800249a:	9b00      	ldr	r3, [sp, #0]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800249c:	4b23      	ldr	r3, [pc, #140]	; (800252c <_Z18SystemClock_Configv+0xac>)
 800249e:	9101      	str	r1, [sp, #4]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80024a6:	601a      	str	r2, [r3, #0]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80024ae:	9301      	str	r3, [sp, #4]
 80024b0:	9b01      	ldr	r3, [sp, #4]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80024b2:	2309      	movs	r3, #9
 80024b4:	9307      	str	r3, [sp, #28]
   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80024b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80024ba:	9308      	str	r3, [sp, #32]
   RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80024bc:	2301      	movs	r3, #1
 80024be:	930c      	str	r3, [sp, #48]	; 0x30
   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80024c0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80024c4:	2402      	movs	r4, #2
   RCC_OscInitStruct.PLL.PLLM = 4;
 80024c6:	2504      	movs	r5, #4
   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80024c8:	930e      	str	r3, [sp, #56]	; 0x38
   RCC_OscInitStruct.PLL.PLLN = 100;
   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
   RCC_OscInitStruct.PLL.PLLQ = 4;
   RCC_OscInitStruct.PLL.PLLR = 2;
   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024ca:	a807      	add	r0, sp, #28
   RCC_OscInitStruct.PLL.PLLN = 100;
 80024cc:	2364      	movs	r3, #100	; 0x64
   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80024ce:	940d      	str	r4, [sp, #52]	; 0x34
   RCC_OscInitStruct.PLL.PLLM = 4;
 80024d0:	950f      	str	r5, [sp, #60]	; 0x3c
   RCC_OscInitStruct.PLL.PLLN = 100;
 80024d2:	9310      	str	r3, [sp, #64]	; 0x40
   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80024d4:	9411      	str	r4, [sp, #68]	; 0x44
   RCC_OscInitStruct.PLL.PLLQ = 4;
 80024d6:	9512      	str	r5, [sp, #72]	; 0x48
   RCC_OscInitStruct.PLL.PLLR = 2;
 80024d8:	9413      	str	r4, [sp, #76]	; 0x4c
   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024da:	f002 fcb7 	bl	8004e4c <HAL_RCC_OscConfig>
 80024de:	b100      	cbz	r0, 80024e2 <_Z18SystemClock_Configv+0x62>
 80024e0:	e7fe      	b.n	80024e0 <_Z18SystemClock_Configv+0x60>
   }


    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80024e2:	230f      	movs	r3, #15
 80024e4:	9302      	str	r3, [sp, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80024e6:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80024e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80024ec:	9006      	str	r0, [sp, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80024ee:	2103      	movs	r1, #3
 80024f0:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80024f2:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80024f4:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80024f6:	f002 fbe9 	bl	8004ccc <HAL_RCC_ClockConfig>
 80024fa:	4604      	mov	r4, r0
 80024fc:	b100      	cbz	r0, 8002500 <_Z18SystemClock_Configv+0x80>
 80024fe:	e7fe      	b.n	80024fe <_Z18SystemClock_Configv+0x7e>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8002500:	f002 fc7e 	bl	8004e00 <HAL_RCC_GetHCLKFreq>
 8002504:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002508:	fbb0 f0f3 	udiv	r0, r0, r3
 800250c:	f001 ff6a 	bl	80043e4 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002510:	4628      	mov	r0, r5
 8002512:	f001 ff7d 	bl	8004410 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002516:	4622      	mov	r2, r4
 8002518:	4621      	mov	r1, r4
 800251a:	f04f 30ff 	mov.w	r0, #4294967295
 800251e:	f001 ff21 	bl	8004364 <HAL_NVIC_SetPriority>
}
 8002522:	b015      	add	sp, #84	; 0x54
 8002524:	bd30      	pop	{r4, r5, pc}
 8002526:	bf00      	nop
 8002528:	40023800 	.word	0x40023800
 800252c:	40007000 	.word	0x40007000

08002530 <_Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void _Error_Handler(char * file, int line)
{
 8002530:	e7fe      	b.n	8002530 <_Error_Handler>
	...

08002534 <_ZN10UartDriverI18UART_HandleTypeDefLi50ELi250ELi400ELi8EEC1EPS0_>:
         int MAX_RX_BUFFER=400,
			int RX_BURST_SIZE=RX_BURST_MODE>
class UartDriver{
public:

  UartDriver(Hardware *huart): huart_(huart)
 8002534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002536:	4604      	mov	r4, r0
 8002538:	6001      	str	r1, [r0, #0]
  {
    rx_ = new RxBuffer<Hardware, MAX_RX_BUFFER, RX_BURST_SIZE>(huart_);
 800253a:	2004      	movs	r0, #4
 800253c:	f004 f89e 	bl	800667c <_Znwj>
  RxBuffer(Hardware *huart):huart_(huart)
 8002540:	6823      	ldr	r3, [r4, #0]
 8002542:	6003      	str	r3, [r0, #0]
    rx_ = new RxBuffer<Hardware, MAX_RX_BUFFER, RX_BURST_SIZE>(huart_);
 8002544:	4605      	mov	r5, r0
    ring_buf_ = new RingBuffer<uint8_t, RX_SIZE>();
 8002546:	f44f 70cb 	mov.w	r0, #406	; 0x196
 800254a:	f004 f897 	bl	800667c <_Znwj>
    byte_in_progress_ = 0;
 800254e:	2300      	movs	r3, #0
 8002550:	f8a0 3190 	strh.w	r3, [r0, #400]	; 0x190
    byte_to_add_ = 0;
 8002554:	f8a0 3192 	strh.w	r3, [r0, #402]	; 0x192
    buffer_length_ = (uint16_t)SIZE;
 8002558:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800255c:	f8a0 3194 	strh.w	r3, [r0, #404]	; 0x194
    ring_buf_ = new RingBuffer<uint8_t, RX_SIZE>();
 8002560:	4b22      	ldr	r3, [pc, #136]	; (80025ec <_ZN10UartDriverI18UART_HandleTypeDefLi50ELi250ELi400ELi8EEC1EPS0_+0xb8>)
    HAL_UART_Receive_DMA(huart_, rx_value_, RX_BURST_SIZE); //1byte receive protocal
 8002562:	4923      	ldr	r1, [pc, #140]	; (80025f0 <_ZN10UartDriverI18UART_HandleTypeDefLi50ELi250ELi400ELi8EEC1EPS0_+0xbc>)
    ring_buf_ = new RingBuffer<uint8_t, RX_SIZE>();
 8002564:	6018      	str	r0, [r3, #0]
    HAL_UART_Receive_DMA(huart_, rx_value_, RX_BURST_SIZE); //1byte receive protocal
 8002566:	2208      	movs	r2, #8
 8002568:	6828      	ldr	r0, [r5, #0]
 800256a:	f003 facb 	bl	8005b04 <HAL_UART_Receive_DMA>
    huart_->hdmarx->XferCpltCallback = ReceiveCplt;
 800256e:	682b      	ldr	r3, [r5, #0]
 8002570:	4920      	ldr	r1, [pc, #128]	; (80025f4 <_ZN10UartDriverI18UART_HandleTypeDefLi50ELi250ELi400ELi8EEC1EPS0_+0xc0>)
 8002572:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002574:	4e20      	ldr	r6, [pc, #128]	; (80025f8 <_ZN10UartDriverI18UART_HandleTypeDefLi50ELi250ELi400ELi8EEC1EPS0_+0xc4>)
 8002576:	63d1      	str	r1, [r2, #60]	; 0x3c
    __HAL_UART_DISABLE_IT(huart_, UART_IT_RXNE);
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	68d3      	ldr	r3, [r2, #12]
 800257c:	f023 0320 	bic.w	r3, r3, #32
 8002580:	60d3      	str	r3, [r2, #12]
    tx_ = new TxBuffer<Hardware, MAX_TX_BUFFER, MAX_TX_BUFFER_LENGTH>(huart_);
 8002582:	2004      	movs	r0, #4
    rx_ = new RxBuffer<Hardware, MAX_RX_BUFFER, RX_BURST_SIZE>(huart_);
 8002584:	6065      	str	r5, [r4, #4]
    tx_ = new TxBuffer<Hardware, MAX_TX_BUFFER, MAX_TX_BUFFER_LENGTH>(huart_);
 8002586:	f004 f879 	bl	800667c <_Znwj>
    idle_flag_ = true;
 800258a:	4b1c      	ldr	r3, [pc, #112]	; (80025fc <_ZN10UartDriverI18UART_HandleTypeDefLi50ELi250ELi400ELi8EEC1EPS0_+0xc8>)
    subscript_in_progress_ = 0;
 800258c:	491c      	ldr	r1, [pc, #112]	; (8002600 <_ZN10UartDriverI18UART_HandleTypeDefLi50ELi250ELi400ELi8EEC1EPS0_+0xcc>)
    idle_flag_ = true;
 800258e:	2201      	movs	r2, #1
    tx_ = new TxBuffer<Hardware, MAX_TX_BUFFER, MAX_TX_BUFFER_LENGTH>(huart_);
 8002590:	4605      	mov	r5, r0
 8002592:	6820      	ldr	r0, [r4, #0]
    idle_flag_ = true;
 8002594:	701a      	strb	r2, [r3, #0]
    subscript_in_progress_ = 0;
 8002596:	2300      	movs	r3, #0
 8002598:	700b      	strb	r3, [r1, #0]
    subscript_to_add_ = 0;
 800259a:	491a      	ldr	r1, [pc, #104]	; (8002604 <_ZN10UartDriverI18UART_HandleTypeDefLi50ELi250ELi400ELi8EEC1EPS0_+0xd0>)
  TxBuffer(Hardware *huart): huart_(huart)
 800259c:	6028      	str	r0, [r5, #0]
    subscript_to_add_ = 0;
 800259e:	700b      	strb	r3, [r1, #0]
 80025a0:	46b6      	mov	lr, r6
    for(int i = 0; i < TX_SIZE; i++) 
 80025a2:	f243 1c06 	movw	ip, #12550	; 0x3106
 80025a6:	199f      	adds	r7, r3, r6
        for(int j = 0; j < BUFFER_LENGTH; j++)
 80025a8:	2100      	movs	r1, #0
        tx_buffer_unit_[i].tx_len_ = 1;
 80025aa:	f887 20fa 	strb.w	r2, [r7, #250]	; 0xfa
          tx_buffer_unit_[i].tx_data_[j]  = 1;
 80025ae:	547a      	strb	r2, [r7, r1]
        for(int j = 0; j < BUFFER_LENGTH; j++)
 80025b0:	3101      	adds	r1, #1
 80025b2:	29fa      	cmp	r1, #250	; 0xfa
 80025b4:	d1fb      	bne.n	80025ae <_ZN10UartDriverI18UART_HandleTypeDefLi50ELi250ELi400ELi8EEC1EPS0_+0x7a>
 80025b6:	33fb      	adds	r3, #251	; 0xfb
    for(int i = 0; i < TX_SIZE; i++) 
 80025b8:	4563      	cmp	r3, ip
 80025ba:	d1f4      	bne.n	80025a6 <_ZN10UartDriverI18UART_HandleTypeDefLi50ELi250ELi400ELi8EEC1EPS0_+0x72>
    HAL_UART_Transmit_DMA(huart_, (uint8_t*)tx_buffer_unit_[0].tx_data_, tx_buffer_unit_[0].tx_len_);
 80025bc:	f89e 20fa 	ldrb.w	r2, [lr, #250]	; 0xfa
 80025c0:	490d      	ldr	r1, [pc, #52]	; (80025f8 <_ZN10UartDriverI18UART_HandleTypeDefLi50ELi250ELi400ELi8EEC1EPS0_+0xc4>)
 80025c2:	f003 fa65 	bl	8005a90 <HAL_UART_Transmit_DMA>
 80025c6:	e005      	b.n	80025d4 <_ZN10UartDriverI18UART_HandleTypeDefLi50ELi250ELi400ELi8EEC1EPS0_+0xa0>
    tx_ = new TxBuffer<Hardware, MAX_TX_BUFFER, MAX_TX_BUFFER_LENGTH>(huart_);
 80025c8:	4628      	mov	r0, r5
 80025ca:	f004 f850 	bl	800666e <_ZdlPv>
 80025ce:	f004 f866 	bl	800669e <__cxa_end_cleanup>
 80025d2:	e7f9      	b.n	80025c8 <_ZN10UartDriverI18UART_HandleTypeDefLi50ELi250ELi400ELi8EEC1EPS0_+0x94>
    huart_->Instance->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DMAT);
 80025d4:	682a      	ldr	r2, [r5, #0]
 80025d6:	6811      	ldr	r1, [r2, #0]
 80025d8:	694b      	ldr	r3, [r1, #20]
 80025da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80025de:	614b      	str	r3, [r1, #20]
    huart_->hdmatx->XferCpltCallback = TransmitCplt;
 80025e0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80025e2:	4a09      	ldr	r2, [pc, #36]	; (8002608 <_ZN10UartDriverI18UART_HandleTypeDefLi50ELi250ELi400ELi8EEC1EPS0_+0xd4>)
 80025e4:	63da      	str	r2, [r3, #60]	; 0x3c
  }
 80025e6:	4620      	mov	r0, r4
    tx_ = new TxBuffer<Hardware, MAX_TX_BUFFER, MAX_TX_BUFFER_LENGTH>(huart_);
 80025e8:	60a5      	str	r5, [r4, #8]
  }
 80025ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80025ec:	20003b80 	.word	0x20003b80
 80025f0:	20003b75 	.word	0x20003b75
 80025f4:	08001e3d 	.word	0x08001e3d
 80025f8:	20000a6f 	.word	0x20000a6f
 80025fc:	20000a6c 	.word	0x20000a6c
 8002600:	20000a6e 	.word	0x20000a6e
 8002604:	20000a6d 	.word	0x20000a6d
 8002608:	08001cd1 	.word	0x08001cd1

0800260c <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE9advertiseERNS_9PublisherE>:
    /********************************************************************
     * Topic Management
     */

    /* Register a new publisher */
    bool advertise(Publisher & p)
 800260c:	b510      	push	{r4, lr}
 800260e:	f500 7207 	add.w	r2, r0, #540	; 0x21c
    {
      for(int i = 0; i < MAX_PUBLISHERS; i++){
 8002612:	2300      	movs	r3, #0
        if(publishers[i] == 0){ // empty slot
 8002614:	f852 4b04 	ldr.w	r4, [r2], #4
 8002618:	b944      	cbnz	r4, 800262c <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE9advertiseERNS_9PublisherE+0x20>
          publishers[i] = &p;
 800261a:	eb00 0283 	add.w	r2, r0, r3, lsl #2
          p.id_ = i+100+MAX_SUBSCRIBERS;
 800261e:	3378      	adds	r3, #120	; 0x78
          publishers[i] = &p;
 8002620:	f8c2 121c 	str.w	r1, [r2, #540]	; 0x21c
          p.nh_ = this;
 8002624:	60c8      	str	r0, [r1, #12]
          p.id_ = i+100+MAX_SUBSCRIBERS;
 8002626:	608b      	str	r3, [r1, #8]
          return true;
 8002628:	2001      	movs	r0, #1
 800262a:	bd10      	pop	{r4, pc}
      for(int i = 0; i < MAX_PUBLISHERS; i++){
 800262c:	3301      	adds	r3, #1
 800262e:	2b14      	cmp	r3, #20
 8002630:	d1f0      	bne.n	8002614 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE9advertiseERNS_9PublisherE+0x8>
        }
      }
      return false;
 8002632:	2000      	movs	r0, #0
    }
 8002634:	bd10      	pop	{r4, pc}
	...

08002638 <_ZN16AttitudeEstimate4initEP3IMUPN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EEE>:
  void init(IMU* imu, ros::NodeHandle* nh)
 8002638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    nh_ = nh;
 800263a:	4604      	mov	r4, r0
  void init(IMU* imu, ros::NodeHandle* nh)
 800263c:	4606      	mov	r6, r0
    nh_ = nh;
 800263e:	f844 2b08 	str.w	r2, [r4], #8
    imu_pub_  = new ros::Publisher("imu", &imu_msg_);
 8002642:	2014      	movs	r0, #20
  void init(IMU* imu, ros::NodeHandle* nh)
 8002644:	460f      	mov	r7, r1
    imu_pub_  = new ros::Publisher("imu", &imu_msg_);
 8002646:	f004 f819 	bl	800667c <_Znwj>
        endpoint_(endpoint) {};
 800264a:	4b41      	ldr	r3, [pc, #260]	; (8002750 <_ZN16AttitudeEstimate4initEP3IMUPN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EEE+0x118>)
 800264c:	6070      	str	r0, [r6, #4]
 800264e:	2500      	movs	r5, #0
 8002650:	e880 0018 	stmia.w	r0, {r3, r4}
 8002654:	4601      	mov	r1, r0
 8002656:	6105      	str	r5, [r0, #16]
    nh_->advertise(*imu_pub_);
 8002658:	6830      	ldr	r0, [r6, #0]
 800265a:	f7ff ffd7 	bl	800260c <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE9advertiseERNS_9PublisherE>
    desire_coord_sub_ = new ros::Subscriber2<kduino::DesireCoord, AttitudeEstimate> ("/desire_coordinate", &AttitudeEstimate::desireCoordCallback, this );
 800265e:	2030      	movs	r0, #48	; 0x30
 8002660:	f004 f80c 	bl	800667c <_Znwj>
        obj_(obj), fun_obj_(cb), endpoint_(endpoint)
 8002664:	4b3b      	ldr	r3, [pc, #236]	; (8002754 <_ZN16AttitudeEstimate4initEP3IMUPN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EEE+0x11c>)
 8002666:	6003      	str	r3, [r0, #0]
      coord_type(0)
 8002668:	4b3b      	ldr	r3, [pc, #236]	; (8002758 <_ZN16AttitudeEstimate4initEP3IMUPN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EEE+0x120>)
 800266a:	60c3      	str	r3, [r0, #12]
      : _M_f(__pf) { }
 800266c:	4b3b      	ldr	r3, [pc, #236]	; (800275c <_ZN16AttitudeEstimate4initEP3IMUPN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EEE+0x124>)
 800266e:	6243      	str	r3, [r0, #36]	; 0x24
    nh_->subscribe<kduino::DesireCoord, AttitudeEstimate>(*desire_coord_sub_);
 8002670:	6832      	ldr	r2, [r6, #0]
 8002672:	7705      	strb	r5, [r0, #28]
 8002674:	2301      	movs	r3, #1
 8002676:	2400      	movs	r4, #0
 8002678:	62c3      	str	r3, [r0, #44]	; 0x2c
        topic_ = topic_name;
 800267a:	4b39      	ldr	r3, [pc, #228]	; (8002760 <_ZN16AttitudeEstimate4initEP3IMUPN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EEE+0x128>)
 800267c:	6083      	str	r3, [r0, #8]
 800267e:	6104      	str	r4, [r0, #16]
 8002680:	6144      	str	r4, [r0, #20]
 8002682:	6184      	str	r4, [r0, #24]
        obj_(obj), fun_obj_(cb), endpoint_(endpoint)
 8002684:	6206      	str	r6, [r0, #32]
 8002686:	6285      	str	r5, [r0, #40]	; 0x28
    desire_coord_sub_ = new ros::Subscriber2<kduino::DesireCoord, AttitudeEstimate> ("/desire_coordinate", &AttitudeEstimate::desireCoordCallback, this );
 8002688:	6470      	str	r0, [r6, #68]	; 0x44
 800268a:	f502 711b 	add.w	r1, r2, #620	; 0x26c
      return false;
    }
    /* Register a new subscriber, which is a member of class*/
    template<typename MsgT, class T>
    bool subscribe(Subscriber2< MsgT, T> & s){
      for(int i = 0; i < MAX_SUBSCRIBERS; i++){
 800268e:	462b      	mov	r3, r5
        if(subscribers[i] == 0){ // empty slot
 8002690:	f851 5b04 	ldr.w	r5, [r1], #4
 8002694:	2d00      	cmp	r5, #0
 8002696:	d156      	bne.n	8002746 <_ZN16AttitudeEstimate4initEP3IMUPN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EEE+0x10e>
          subscribers[i] = (Subscriber_*) &s;
 8002698:	eb02 0283 	add.w	r2, r2, r3, lsl #2
          s.id_ = i+100;
 800269c:	3364      	adds	r3, #100	; 0x64
          subscribers[i] = (Subscriber_*) &s;
 800269e:	f8c2 026c 	str.w	r0, [r2, #620]	; 0x26c
          s.id_ = i+100;
 80026a2:	6043      	str	r3, [r0, #4]
    imu_ = imu;
 80026a4:	64f7      	str	r7, [r6, #76]	; 0x4c
    last_pub_time_ = HAL_GetTick();
 80026a6:	f001 fcfd 	bl	80040a4 <HAL_GetTick>
 80026aa:	6530      	str	r0, [r6, #80]	; 0x50
    estimator_ = new ComplementaryAHRS();
 80026ac:	20c8      	movs	r0, #200	; 0xc8
 80026ae:	f003 ffe5 	bl	800667c <_Znwj>
    float        q1, q2, q3, q4;

    // constructor creates a quaternion equivalent
    // to roll=0, pitch=0, yaw=0
    Quaternion() {
        q1 = 1; q2 = q3 = q4 = 0;
 80026b2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    abs_rel_(ABSOLUTE_COORD)
 80026b6:	2200      	movs	r2, #0
 80026b8:	67c3      	str	r3, [r0, #124]	; 0x7c
public:
    T        x, y, z;

    // trivial ctor
    Vector3<T>() {
        x = y = z = 0;
 80026ba:	60c4      	str	r4, [r0, #12]
 80026bc:	6084      	str	r4, [r0, #8]
 80026be:	6044      	str	r4, [r0, #4]
 80026c0:	6184      	str	r4, [r0, #24]
 80026c2:	6144      	str	r4, [r0, #20]
 80026c4:	6104      	str	r4, [r0, #16]
 80026c6:	6244      	str	r4, [r0, #36]	; 0x24
 80026c8:	6204      	str	r4, [r0, #32]
 80026ca:	61c4      	str	r4, [r0, #28]
 80026cc:	6304      	str	r4, [r0, #48]	; 0x30
 80026ce:	62c4      	str	r4, [r0, #44]	; 0x2c
 80026d0:	6284      	str	r4, [r0, #40]	; 0x28
 80026d2:	63c4      	str	r4, [r0, #60]	; 0x3c
 80026d4:	6384      	str	r4, [r0, #56]	; 0x38
 80026d6:	6344      	str	r4, [r0, #52]	; 0x34
 80026d8:	6484      	str	r4, [r0, #72]	; 0x48
 80026da:	6444      	str	r4, [r0, #68]	; 0x44
 80026dc:	6404      	str	r4, [r0, #64]	; 0x40
 80026de:	6544      	str	r4, [r0, #84]	; 0x54
 80026e0:	6504      	str	r4, [r0, #80]	; 0x50
 80026e2:	6604      	str	r4, [r0, #96]	; 0x60
 80026e4:	6584      	str	r4, [r0, #88]	; 0x58
 80026e6:	6684      	str	r4, [r0, #104]	; 0x68
 80026e8:	6644      	str	r4, [r0, #100]	; 0x64
 80026ea:	6784      	str	r4, [r0, #120]	; 0x78
 80026ec:	6744      	str	r4, [r0, #116]	; 0x74
 80026ee:	6704      	str	r4, [r0, #112]	; 0x70
 80026f0:	f8c0 4088 	str.w	r4, [r0, #136]	; 0x88
 80026f4:	f8c0 4084 	str.w	r4, [r0, #132]	; 0x84
 80026f8:	f8c0 4080 	str.w	r4, [r0, #128]	; 0x80
 80026fc:	f8c0 408c 	str.w	r4, [r0, #140]	; 0x8c
 8002700:	f8c0 4090 	str.w	r4, [r0, #144]	; 0x90
    // zero the matrix
    void        zero(void);

    // setup the identity matrix
    void        identity(void) {
        a.x = b.y = c.z = 1;
 8002704:	66c3      	str	r3, [r0, #108]	; 0x6c
 8002706:	65c3      	str	r3, [r0, #92]	; 0x5c
 8002708:	64c3      	str	r3, [r0, #76]	; 0x4c
 800270a:	f880 2094 	strb.w	r2, [r0, #148]	; 0x94
                       est_g_b_(), est_m_b_()
 800270e:	4b15      	ldr	r3, [pc, #84]	; (8002764 <_ZN16AttitudeEstimate4initEP3IMUPN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EEE+0x12c>)
 8002710:	6003      	str	r3, [r0, #0]
 8002712:	f8c0 40a0 	str.w	r4, [r0, #160]	; 0xa0
 8002716:	f8c0 409c 	str.w	r4, [r0, #156]	; 0x9c
 800271a:	f8c0 4098 	str.w	r4, [r0, #152]	; 0x98
 800271e:	f8c0 40ac 	str.w	r4, [r0, #172]	; 0xac
 8002722:	f8c0 40a8 	str.w	r4, [r0, #168]	; 0xa8
 8002726:	f8c0 40a4 	str.w	r4, [r0, #164]	; 0xa4
 800272a:	f8c0 40b8 	str.w	r4, [r0, #184]	; 0xb8
 800272e:	f8c0 40b4 	str.w	r4, [r0, #180]	; 0xb4
 8002732:	f8c0 40b0 	str.w	r4, [r0, #176]	; 0xb0
 8002736:	f8c0 40c4 	str.w	r4, [r0, #196]	; 0xc4
 800273a:	f8c0 40c0 	str.w	r4, [r0, #192]	; 0xc0
 800273e:	f8c0 40bc 	str.w	r4, [r0, #188]	; 0xbc
 8002742:	64b0      	str	r0, [r6, #72]	; 0x48
 8002744:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      for(int i = 0; i < MAX_SUBSCRIBERS; i++){
 8002746:	3301      	adds	r3, #1
 8002748:	2b14      	cmp	r3, #20
 800274a:	d1a1      	bne.n	8002690 <_ZN16AttitudeEstimate4initEP3IMUPN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EEE+0x58>
 800274c:	e7aa      	b.n	80026a4 <_ZN16AttitudeEstimate4initEP3IMUPN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EEE+0x6c>
 800274e:	bf00      	nop
 8002750:	08008ef3 	.word	0x08008ef3
 8002754:	08008db8 	.word	0x08008db8
 8002758:	08008d94 	.word	0x08008d94
 800275c:	080023c9 	.word	0x080023c9
 8002760:	08008ef7 	.word	0x08008ef7
 8002764:	08008dac 	.word	0x08008dac

08002768 <main>:
{
 8002768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  HAL_Init();
 800276a:	f001 fc79 	bl	8004060 <HAL_Init>
  SystemClock_Config();
 800276e:	f7ff fe87 	bl	8002480 <_Z18SystemClock_Configv>
  MX_GPIO_Init();
 8002772:	f7fe ff01 	bl	8001578 <MX_GPIO_Init>
  MX_DMA_Init();
 8002776:	f7fe fedd 	bl	8001534 <MX_DMA_Init>
  MX_USART1_UART_Init();
 800277a:	f000 fe9b 	bl	80034b4 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 800277e:	f000 fded 	bl	800335c <MX_SPI1_Init>
  MX_ADC1_Init();
 8002782:	f7fe fe81 	bl	8001488 <MX_ADC1_Init>
  }

  int getBaud(){return baud_;}

  void init(serial_class* huart){
    iostream_ = new UartDriver<serial_class>(huart);
 8002786:	200c      	movs	r0, #12
 8002788:	f003 ff78 	bl	800667c <_Znwj>
 800278c:	4942      	ldr	r1, [pc, #264]	; (8002898 <main+0x130>)
 800278e:	4604      	mov	r4, r0
 8002790:	f7ff fed0 	bl	8002534 <_ZN10UartDriverI18UART_HandleTypeDefLi50ELi250ELi400ELi8EEC1EPS0_>
 8002794:	4d41      	ldr	r5, [pc, #260]	; (800289c <main+0x134>)
 8002796:	6820      	ldr	r0, [r4, #0]
    huart_->Init.BaudRate = baud_rate;
 8002798:	68eb      	ldr	r3, [r5, #12]
    iostream_ = new UartDriver<serial_class>(huart);
 800279a:	60ac      	str	r4, [r5, #8]
    huart_->Init.BaudRate = baud_rate;
 800279c:	6043      	str	r3, [r0, #4]
    HAL_UART_Init(huart_);
 800279e:	f003 f949 	bl	8005a34 <HAL_UART_Init>
      mode_ = 0;
 80027a2:	2600      	movs	r6, #0
	  testnode = new RosNode(&nh_);
 80027a4:	2070      	movs	r0, #112	; 0x70
 80027a6:	f8c5 62bc 	str.w	r6, [r5, #700]	; 0x2bc
      bytes_ = 0;
 80027aa:	f8c5 62c0 	str.w	r6, [r5, #704]	; 0x2c0
      index_ = 0;
 80027ae:	f8c5 62c8 	str.w	r6, [r5, #712]	; 0x2c8
      topic_ = 0;
 80027b2:	f8c5 62c4 	str.w	r6, [r5, #708]	; 0x2c4
 80027b6:	f003 ff61 	bl	800667c <_Znwj>
      data(0)
 80027ba:	4b39      	ldr	r3, [pc, #228]	; (80028a0 <main+0x138>)
 80027bc:	60c3      	str	r3, [r0, #12]
      angular()
 80027be:	4b39      	ldr	r3, [pc, #228]	; (80028a4 <main+0x13c>)
 80027c0:	6183      	str	r3, [r0, #24]
      z(0)
 80027c2:	2200      	movs	r2, #0
 80027c4:	2300      	movs	r3, #0
 80027c6:	e9c0 230a 	strd	r2, r3, [r0, #40]	; 0x28
 80027ca:	e9c0 230c 	strd	r2, r3, [r0, #48]	; 0x30
 80027ce:	e9c0 230e 	strd	r2, r3, [r0, #56]	; 0x38
 80027d2:	e9c0 2312 	strd	r2, r3, [r0, #72]	; 0x48
 80027d6:	e9c0 2314 	strd	r2, r3, [r0, #80]	; 0x50
 80027da:	e9c0 2316 	strd	r2, r3, [r0, #88]	; 0x58

class RosNode
{
public:
	RosNode(ros::NodeHandle* nh)
{
 80027de:	2300      	movs	r3, #0
 80027e0:	4931      	ldr	r1, [pc, #196]	; (80028a8 <main+0x140>)
 80027e2:	6603      	str	r3, [r0, #96]	; 0x60
 80027e4:	6643      	str	r3, [r0, #100]	; 0x64
 80027e6:	f649 6334 	movw	r3, #40500	; 0x9e34
 80027ea:	7406      	strb	r6, [r0, #16]
 80027ec:	4604      	mov	r4, r0
 80027ee:	f100 0618 	add.w	r6, r0, #24
 80027f2:	6201      	str	r1, [r0, #32]
 80027f4:	6401      	str	r1, [r0, #64]	; 0x40
 80027f6:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
 80027fa:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
		/* ros node initialize */
		nh_ = nh;
 80027fe:	6005      	str	r5, [r0, #0]

		/* ros publisher initialize */
		radioflag_pub_ = new ros::Publisher("radioflag",&radioflag_msg);
 8002800:	2014      	movs	r0, #20
 8002802:	f003 ff3b 	bl	800667c <_Znwj>
 8002806:	4b29      	ldr	r3, [pc, #164]	; (80028ac <main+0x144>)
 8002808:	6003      	str	r3, [r0, #0]
 800280a:	f104 030c 	add.w	r3, r4, #12
 800280e:	6043      	str	r3, [r0, #4]
 8002810:	2300      	movs	r3, #0
 8002812:	6103      	str	r3, [r0, #16]
 8002814:	6060      	str	r0, [r4, #4]
		odom_pub_ = new ros::Publisher("odometry/raw",&odom_msg);
 8002816:	2014      	movs	r0, #20
 8002818:	f003 ff30 	bl	800667c <_Znwj>
 800281c:	e004      	b.n	8002828 <main+0xc0>
 800281e:	4620      	mov	r0, r4
 8002820:	f003 ff25 	bl	800666e <_ZdlPv>
 8002824:	f003 ff3b 	bl	800669e <__cxa_end_cleanup>
 8002828:	4b21      	ldr	r3, [pc, #132]	; (80028b0 <main+0x148>)
 800282a:	60a0      	str	r0, [r4, #8]
 800282c:	e880 0048 	stmia.w	r0, {r3, r6}
 8002830:	2600      	movs	r6, #0
 8002832:	6106      	str	r6, [r0, #16]
		//publish the msgs
		nh_->advertise(*radioflag_pub_);
 8002834:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002838:	f7ff fee8 	bl	800260c <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE9advertiseERNS_9PublisherE>
		nh_->advertise(*odom_pub_);
 800283c:	68a1      	ldr	r1, [r4, #8]
 800283e:	6820      	ldr	r0, [r4, #0]
	  imu_.init(&hspi1, &nh_);
 8002840:	4c1c      	ldr	r4, [pc, #112]	; (80028b4 <main+0x14c>)
 8002842:	f7ff fee3 	bl	800260c <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE9advertiseERNS_9PublisherE>
 8002846:	f5a4 7243 	sub.w	r2, r4, #780	; 0x30c
 800284a:	4620      	mov	r0, r4
 800284c:	491a      	ldr	r1, [pc, #104]	; (80028b8 <main+0x150>)
 800284e:	f001 f875 	bl	800393c <_ZN3IMU4initEP19__SPI_HandleTypeDefPN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EEE>
      }
    else
      {
        attitude_estimate_flag_ = true;
        imu_ = imu;
        attitude_estimator_.init(imu_, nh_);
 8002852:	f5a4 7243 	sub.w	r2, r4, #780	; 0x30c
        attitude_estimate_flag_ = true;
 8002856:	2701      	movs	r7, #1
        imu_ = imu;
 8002858:	f8c5 4424 	str.w	r4, [r5, #1060]	; 0x424
        attitude_estimator_.init(imu_, nh_);
 800285c:	4621      	mov	r1, r4
 800285e:	f502 6086 	add.w	r0, r2, #1072	; 0x430
		  HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_13);
 8002862:	4c16      	ldr	r4, [pc, #88]	; (80028bc <main+0x154>)
    nh_ = nh;
 8002864:	f8c5 5420 	str.w	r5, [r5, #1056]	; 0x420
        attitude_estimate_flag_ = true;
 8002868:	f885 74dc 	strb.w	r7, [r5, #1244]	; 0x4dc
        attitude_estimator_.init(imu_, nh_);
 800286c:	f7ff fee4 	bl	8002638 <_ZN16AttitudeEstimate4initEP3IMUPN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EEE>
      }

    if(baro == NULL)
      {
        altitude_estimate_flag_ = false;
 8002870:	f885 64dd 	strb.w	r6, [r5, #1245]	; 0x4dd
        altitude_estimator_.init(imu_, baro_, nh_);
      }

    if(gps == NULL)
      {
        pos_estimate_flag_ = false;
 8002874:	f885 64de 	strb.w	r6, [r5, #1246]	; 0x4de
	  start_process_flag_ = true;
 8002878:	f885 74e0 	strb.w	r7, [r5, #1248]	; 0x4e0
	  if(start_process_flag_)
 800287c:	f895 34e0 	ldrb.w	r3, [r5, #1248]	; 0x4e0
 8002880:	b123      	cbz	r3, 800288c <main+0x124>
		  HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_13);
 8002882:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002886:	4620      	mov	r0, r4
 8002888:	f002 f9ed 	bl	8004c66 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 800288c:	2064      	movs	r0, #100	; 0x64
 800288e:	f001 fc0f 	bl	80040b0 <HAL_Delay>
  }
 8002892:	e7f3      	b.n	800287c <main+0x114>
 8002894:	e7c3      	b.n	800281e <main+0xb6>
 8002896:	bf00      	nop
 8002898:	20003ca0 	.word	0x20003ca0
 800289c:	20000534 	.word	0x20000534
 80028a0:	08008d20 	.word	0x08008d20
 80028a4:	08008d50 	.word	0x08008d50
 80028a8:	08008d38 	.word	0x08008d38
 80028ac:	08009075 	.word	0x08009075
 80028b0:	0800907f 	.word	0x0800907f
 80028b4:	20000840 	.word	0x20000840
 80028b8:	20003b88 	.word	0x20003b88
 80028bc:	40020800 	.word	0x40020800

080028c0 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE3nowEv>:
    Time now()
 80028c0:	b538      	push	{r3, r4, r5, lr}
 80028c2:	460d      	mov	r5, r1
 80028c4:	4604      	mov	r4, r0

  void write(uint8_t* data, int length){
    iostream_->write(data, length);
  }

  uint32_t time(){return HAL_GetTick();}
 80028c6:	f001 fbed 	bl	80040a4 <HAL_GetTick>
      current_time.sec = ms/1000 + sec_offset;
 80028ca:	696a      	ldr	r2, [r5, #20]
 80028cc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80028d0:	fbb0 f3f1 	udiv	r3, r0, r1
 80028d4:	441a      	add	r2, r3
 80028d6:	6022      	str	r2, [r4, #0]
      current_time.nsec = (ms%1000)*1000000UL + nsec_offset;
 80028d8:	fb01 0313 	mls	r3, r1, r3, r0
 80028dc:	4a05      	ldr	r2, [pc, #20]	; (80028f4 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE3nowEv+0x34>)
 80028de:	69a8      	ldr	r0, [r5, #24]
 80028e0:	4621      	mov	r1, r4
 80028e2:	fb02 0303 	mla	r3, r2, r3, r0
 80028e6:	f841 3f04 	str.w	r3, [r1, #4]!
      normalizeSecNSec(current_time.sec, current_time.nsec);
 80028ea:	4620      	mov	r0, r4
 80028ec:	f001 fb70 	bl	8003fd0 <_ZN3ros16normalizeSecNSecERmS0_>
    }
 80028f0:	4620      	mov	r0, r4
 80028f2:	bd38      	pop	{r3, r4, r5, pc}
 80028f4:	000f4240 	.word	0x000f4240

080028f8 <_ZN16AttitudeEstimate7publishEv>:
  void publish()
 80028f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80028fc:	4604      	mov	r4, r0
 80028fe:	b0ab      	sub	sp, #172	; 0xac
    uint32_t now_time = HAL_GetTick();
 8002900:	f001 fbd0 	bl	80040a4 <HAL_GetTick>
    if( now_time - last_pub_time_ >= PUB_INTERVAL)
 8002904:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002906:	1ac3      	subs	r3, r0, r3
 8002908:	2b01      	cmp	r3, #1
 800290a:	d969      	bls.n	80029e0 <_ZN16AttitudeEstimate7publishEv+0xe8>
        imu_msg_.stamp = nh_->now();
 800290c:	4625      	mov	r5, r4
 800290e:	ae04      	add	r6, sp, #16
 8002910:	f855 1b0c 	ldr.w	r1, [r5], #12
        last_pub_time_ = now_time;
 8002914:	6520      	str	r0, [r4, #80]	; 0x50
        imu_msg_.stamp = nh_->now();
 8002916:	4630      	mov	r0, r6
 8002918:	f7ff ffd2 	bl	80028c0 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE3nowEv>
 800291c:	e896 0003 	ldmia.w	r6, {r0, r1}
 8002920:	ab09      	add	r3, sp, #36	; 0x24
 8002922:	9301      	str	r3, [sp, #4]
 8002924:	ab0f      	add	r3, sp, #60	; 0x3c
 8002926:	9302      	str	r3, [sp, #8]
 8002928:	f104 0320 	add.w	r3, r4, #32
 800292c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002930:	af06      	add	r7, sp, #24
 8002932:	f104 0514 	add.w	r5, r4, #20
 8002936:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 800293a:	9303      	str	r3, [sp, #12]
	static const uint8_t RESET_CALIB_CMD = 0x00;
	static const uint8_t MPU_ACC_GYRO_CALIB_CMD = 0x01;
	static const uint8_t MPU_MAG_CALIB_CMD = 0x02;

	Vector3f  getAcc(){return acc_;}
	Vector3f  getGyro(){return gyro_;}
 800293c:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
 8002940:	f10d 0990 	add.w	r9, sp, #144	; 0x90
	Vector3f  getMag(){return mag_;}
 8002944:	f10d 0884 	add.w	r8, sp, #132	; 0x84
 8002948:	f10d 0c78 	add.w	ip, sp, #120	; 0x78
	Vector3f  getAcc(){return acc_;}
 800294c:	f10d 0e6c 	add.w	lr, sp, #108	; 0x6c
            imu_msg_.gyro_data[i] = imu_->getGyro()[i];
 8002950:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
	Vector3f  getGyro(){return gyro_;}
 8002952:	f103 0294 	add.w	r2, r3, #148	; 0x94
 8002956:	ca07      	ldmia	r2, {r0, r1, r2}
 8002958:	ae06      	add	r6, sp, #24
 800295a:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 800295e:	e88a 0007 	stmia.w	sl, {r0, r1, r2}
 8002962:	e889 0007 	stmia.w	r9, {r0, r1, r2}
 8002966:	f857 2b04 	ldr.w	r2, [r7], #4
 800296a:	60ea      	str	r2, [r5, #12]
	Vector3f  getMag(){return mag_;}
 800296c:	f103 02a0 	add.w	r2, r3, #160	; 0xa0
 8002970:	ca07      	ldmia	r2, {r0, r1, r2}
            imu_msg_.mag_data[i] = imu_->getMag()[i];
 8002972:	ae09      	add	r6, sp, #36	; 0x24
 8002974:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8002978:	e888 0007 	stmia.w	r8, {r0, r1, r2}
 800297c:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 8002980:	9901      	ldr	r1, [sp, #4]
 8002982:	f851 2b04 	ldr.w	r2, [r1], #4
 8002986:	61aa      	str	r2, [r5, #24]
	Vector3f  getAcc(){return acc_;}
 8002988:	3388      	adds	r3, #136	; 0x88
 800298a:	9101      	str	r1, [sp, #4]
 800298c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002990:	ab18      	add	r3, sp, #96	; 0x60
 8002992:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            imu_msg_.acc_data[i] = imu_->getAcc()[i];
 8002996:	ab0c      	add	r3, sp, #48	; 0x30
 8002998:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800299c:	f85b 3b04 	ldr.w	r3, [fp], #4
 80029a0:	f845 3b04 	str.w	r3, [r5], #4
  static const uint8_t RELATIVE_COORD = 1;
  static const uint8_t X = 0;
  static const uint8_t Y = 1;
  static const uint8_t Z = 2;

  Vector3f getAngles(){return rpy_;}
 80029a4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80029a6:	3370      	adds	r3, #112	; 0x70
 80029a8:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
 80029ac:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80029b0:	ab15      	add	r3, sp, #84	; 0x54
 80029b2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80029b6:	ab12      	add	r3, sp, #72	; 0x48
 80029b8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            imu_msg_.angles[i] = estimator_->getAngles()[i];
 80029bc:	aa12      	add	r2, sp, #72	; 0x48
 80029be:	ca07      	ldmia	r2, {r0, r1, r2}
 80029c0:	ab0f      	add	r3, sp, #60	; 0x3c
 80029c2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80029c6:	9a02      	ldr	r2, [sp, #8]
 80029c8:	f852 3b04 	ldr.w	r3, [r2], #4
 80029cc:	9202      	str	r2, [sp, #8]
 80029ce:	622b      	str	r3, [r5, #32]
        for(int i = 0; i < 3 ; i ++)
 80029d0:	9b03      	ldr	r3, [sp, #12]
 80029d2:	429d      	cmp	r5, r3
 80029d4:	d1bc      	bne.n	8002950 <_ZN16AttitudeEstimate7publishEv+0x58>
        imu_pub_->publish(&imu_msg_);
 80029d6:	f104 0108 	add.w	r1, r4, #8
 80029da:	6860      	ldr	r0, [r4, #4]
 80029dc:	f7ff fd10 	bl	8002400 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
  }
 80029e0:	b02b      	add	sp, #172	; 0xac
 80029e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080029e6 <_ZN13StateEstimate6updateEv>:
        gps_ = gps;
        pos_estimator_.init(imu_, gps_, nh_);
      }
  }

  void update()
 80029e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  {
    if(attitude_estimate_flag_) attitude_estimator_.update();
 80029ea:	f890 30bc 	ldrb.w	r3, [r0, #188]	; 0xbc
  void update()
 80029ee:	b09e      	sub	sp, #120	; 0x78
 80029f0:	4604      	mov	r4, r0
    if(attitude_estimate_flag_) attitude_estimator_.update();
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d074      	beq.n	8002ae0 <_ZN13StateEstimate6updateEv+0xfa>
    if(imu_->getUpdate())
 80029f6:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 80029f8:	f890 3110 	ldrb.w	r3, [r0, #272]	; 0x110
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d06f      	beq.n	8002ae0 <_ZN13StateEstimate6updateEv+0xfa>
        if(!imu_->getCalibrated()) return;
 8002a00:	f000 fe44 	bl	800368c <_ZN3IMU13getCalibratedEv>
 8002a04:	2800      	cmp	r0, #0
 8002a06:	d06b      	beq.n	8002ae0 <_ZN13StateEstimate6updateEv+0xfa>
        estimator_->update(imu_->getGyro(), imu_->getAcc(), imu_->getMag());
 8002a08:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002a0a:	6da5      	ldr	r5, [r4, #88]	; 0x58
	Vector3f  getGyro(){return gyro_;}
 8002a0c:	f103 0294 	add.w	r2, r3, #148	; 0x94
 8002a10:	ca07      	ldmia	r2, {r0, r1, r2}
 8002a12:	ae1b      	add	r6, sp, #108	; 0x6c
 8002a14:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8002a18:	af18      	add	r7, sp, #96	; 0x60
 8002a1a:	ae03      	add	r6, sp, #12
 8002a1c:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 8002a20:	e886 0007 	stmia.w	r6, {r0, r1, r2}
	Vector3f  getAcc(){return acc_;}
 8002a24:	f103 0288 	add.w	r2, r3, #136	; 0x88
 8002a28:	ca07      	ldmia	r2, {r0, r1, r2}
 8002a2a:	af15      	add	r7, sp, #84	; 0x54
 8002a2c:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 8002a30:	f10d 0e48 	add.w	lr, sp, #72	; 0x48
 8002a34:	af06      	add	r7, sp, #24
	Vector3f  getMag(){return mag_;}
 8002a36:	33a0      	adds	r3, #160	; 0xa0
 8002a38:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
 8002a3c:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 8002a40:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002a44:	f10d 0c3c 	add.w	ip, sp, #60	; 0x3c
 8002a48:	ab09      	add	r3, sp, #36	; 0x24
 8002a4a:	f10d 0e30 	add.w	lr, sp, #48	; 0x30
 8002a4e:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 8002a52:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
 8002a56:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    acc_b_ = acc;
 8002a5a:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8002a5e:	f105 0e04 	add.w	lr, r5, #4
 8002a62:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
    gyro_b_ = gyro;
 8002a66:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8002a6a:	f105 071c 	add.w	r7, r5, #28
 8002a6e:	e887 0007 	stmia.w	r7, {r0, r1, r2}
    mag_b_ = mag;
 8002a72:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    acc_v_ = r_* acc_b_;
 8002a76:	f105 084c 	add.w	r8, r5, #76	; 0x4c
    mag_b_ = mag;
 8002a7a:	f105 0634 	add.w	r6, r5, #52	; 0x34
 8002a7e:	e886 0007 	stmia.w	r6, {r0, r1, r2}
    acc_v_ = r_* acc_b_;
 8002a82:	4671      	mov	r1, lr
 8002a84:	4640      	mov	r0, r8
 8002a86:	f003 fcb5 	bl	80063f4 <_ZNK7Matrix3IfEmlERK7Vector3IfE>
    gyro_v_ = r_*  gyro_b_;
 8002a8a:	4639      	mov	r1, r7
    acc_v_ = r_* acc_b_;
 8002a8c:	ed85 0a04 	vstr	s0, [r5, #16]
 8002a90:	edc5 0a05 	vstr	s1, [r5, #20]
 8002a94:	ed85 1a06 	vstr	s2, [r5, #24]
    gyro_v_ = r_*  gyro_b_;
 8002a98:	4640      	mov	r0, r8
 8002a9a:	f003 fcab 	bl	80063f4 <_ZNK7Matrix3IfEmlERK7Vector3IfE>
    mag_v_ = r_ * mag_b_;
 8002a9e:	4631      	mov	r1, r6
    gyro_v_ = r_*  gyro_b_;
 8002aa0:	ed85 0a0a 	vstr	s0, [r5, #40]	; 0x28
 8002aa4:	edc5 0a0b 	vstr	s1, [r5, #44]	; 0x2c
 8002aa8:	ed85 1a0c 	vstr	s2, [r5, #48]	; 0x30
    mag_v_ = r_ * mag_b_;
 8002aac:	4640      	mov	r0, r8
 8002aae:	f003 fca1 	bl	80063f4 <_ZNK7Matrix3IfEmlERK7Vector3IfE>
    estimation();
 8002ab2:	682b      	ldr	r3, [r5, #0]
    mag_v_ = r_ * mag_b_;
 8002ab4:	ed85 0a10 	vstr	s0, [r5, #64]	; 0x40
    estimation();
 8002ab8:	681b      	ldr	r3, [r3, #0]
    mag_v_ = r_ * mag_b_;
 8002aba:	edc5 0a11 	vstr	s1, [r5, #68]	; 0x44
    estimation();
 8002abe:	4628      	mov	r0, r5
    mag_v_ = r_ * mag_b_;
 8002ac0:	ed85 1a12 	vstr	s2, [r5, #72]	; 0x48
    estimation();
 8002ac4:	4798      	blx	r3
        if(nh_->connected())  publish();
 8002ac6:	6920      	ldr	r0, [r4, #16]
 8002ac8:	6803      	ldr	r3, [r0, #0]
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	4798      	blx	r3
 8002ace:	b118      	cbz	r0, 8002ad8 <_ZN13StateEstimate6updateEv+0xf2>
 8002ad0:	f104 0010 	add.w	r0, r4, #16
 8002ad4:	f7ff ff10 	bl	80028f8 <_ZN16AttitudeEstimate7publishEv>
	void setUpdate(bool update) { update_ = update; }
 8002ad8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002ada:	2200      	movs	r2, #0
 8002adc:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
    if(altitude_estimate_flag_) altitude_estimator_.update();
 8002ae0:	f894 30bd 	ldrb.w	r3, [r4, #189]	; 0xbd
 8002ae4:	b30b      	cbz	r3, 8002b2a <_ZN13StateEstimate6updateEv+0x144>
    baro_= baro;
  }

  void update()
  {
    if(baro_->getUpdate())
 8002ae6:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8002aea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002aee:	b1e3      	cbz	r3, 8002b2a <_ZN13StateEstimate6updateEv+0x144>
  //nav-ekf


  void publish()
  {
    baro_msg_.stamp = nh_->now();
 8002af0:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8002af2:	4668      	mov	r0, sp
 8002af4:	f7ff fee4 	bl	80028c0 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE3nowEv>
 8002af8:	e89d 0003 	ldmia.w	sp, {r0, r1}
 8002afc:	f104 0370 	add.w	r3, r4, #112	; 0x70
 8002b00:	e883 0003 	stmia.w	r3, {r0, r1}
    baro_msg_.pressure = baro_->getPressure();
 8002b04:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
    baro_msg_.temperature = baro_->getTemperature();
    baro_msg_.altitude = baro_->getAltitude();
    baro_pub_->publish(&baro_msg_);
 8002b08:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8002b0a:	681a      	ldr	r2, [r3, #0]
    baro_msg_.pressure = baro_->getPressure();
 8002b0c:	67e2      	str	r2, [r4, #124]	; 0x7c
 8002b0e:	689a      	ldr	r2, [r3, #8]
    baro_msg_.temperature = baro_->getTemperature();
 8002b10:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
 8002b14:	68db      	ldr	r3, [r3, #12]
    baro_msg_.altitude = baro_->getAltitude();
 8002b16:	67a3      	str	r3, [r4, #120]	; 0x78
    baro_pub_->publish(&baro_msg_);
 8002b18:	f104 016c 	add.w	r1, r4, #108	; 0x6c
 8002b1c:	f7ff fc70 	bl	8002400 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
  float getClimbRate(void);
  // get last time sample was taken (in ms)
  uint32_t getLastUpdate(void) const { return last_timer_; }

  bool getUpdate() { return update_; }
  void setUpdate(bool update) { update_ = update; }
 8002b20:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8002b24:	2200      	movs	r2, #0
 8002b26:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    if(pos_estimate_flag_) pos_estimator_.update();
 8002b2a:	f894 30be 	ldrb.w	r3, [r4, #190]	; 0xbe
 8002b2e:	b3b3      	cbz	r3, 8002b9e <_ZN13StateEstimate6updateEv+0x1b8>
    gps_ = gps;
  }

  void update()
  {
    if(gps_->getUpdate())
 8002b30:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
 8002b34:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8002b38:	b38b      	cbz	r3, 8002b9e <_ZN13StateEstimate6updateEv+0x1b8>
  GPS* gps_;
  //nav-ekf2

  void publish()
  {
    gps_msg_.stamp = nh_->now();
 8002b3a:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8002b3e:	4668      	mov	r0, sp
 8002b40:	f7ff febe 	bl	80028c0 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE3nowEv>
 8002b44:	e89d 0003 	ldmia.w	sp, {r0, r1}
 8002b48:	f104 0398 	add.w	r3, r4, #152	; 0x98
 8002b4c:	e883 0003 	stmia.w	r3, {r0, r1}

    gps_msg_.location[0] = gps_->getGosState().location.lat; // lat
 8002b50:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
    gps_msg_.velocity[0] = gps_->getGosState().velocity.x;
    gps_msg_.velocity[1] = gps_->getGosState().velocity.y;

    gps_msg_.sat_num = gps_->getGosState().num_sats;

    gps_pub_->publish(&gps_msg_);
 8002b54:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
  virtual bool is_configured(void) { return true; }
  virtual void inject_data(uint8_t *data, uint8_t len) { return; }

  GPS_State getGosState()
  {
    return state;
 8002b58:	f8d3 201e 	ldr.w	r2, [r3, #30]
 8002b5c:	ee07 2a90 	vmov	s15, r2
 8002b60:	f8d3 2022 	ldr.w	r2, [r3, #34]	; 0x22
    gps_msg_.location[0] = gps_->getGosState().location.lat; // lat
 8002b64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    gps_pub_->publish(&gps_msg_);
 8002b68:	f104 0194 	add.w	r1, r4, #148	; 0x94
    gps_msg_.location[0] = gps_->getGosState().location.lat; // lat
 8002b6c:	edc4 7a28 	vstr	s15, [r4, #160]	; 0xa0
 8002b70:	ee07 2a90 	vmov	s15, r2
    gps_msg_.velocity[0] = gps_->getGosState().velocity.x;
 8002b74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b76:	f8c4 20a8 	str.w	r2, [r4, #168]	; 0xa8
    gps_msg_.location[1] = gps_->getGosState().location.lng; // lng
 8002b7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    gps_msg_.velocity[1] = gps_->getGosState().velocity.y;
 8002b7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    gps_msg_.sat_num = gps_->getGosState().num_sats;
 8002b80:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
    gps_msg_.velocity[1] = gps_->getGosState().velocity.y;
 8002b84:	f8c4 20ac 	str.w	r2, [r4, #172]	; 0xac
    gps_msg_.sat_num = gps_->getGosState().num_sats;
 8002b88:	f884 30b0 	strb.w	r3, [r4, #176]	; 0xb0
    gps_msg_.location[1] = gps_->getGosState().location.lng; // lng
 8002b8c:	edc4 7a29 	vstr	s15, [r4, #164]	; 0xa4
    gps_pub_->publish(&gps_msg_);
 8002b90:	f7ff fc36 	bl	8002400 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
  {
    return (uint16_t)GPS_RX_SIZE;
  }

  bool getUpdate() { return update_; }
  void setUpdate(bool update) { update_ = update; }
 8002b94:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
 8002b98:	2200      	movs	r2, #0
 8002b9a:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
  }
 8002b9e:	b01e      	add	sp, #120	; 0x78
 8002ba0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002ba4 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh>:
  void write(uint8_t * new_data, uint8_t new_size)
 8002ba4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (subscript_in_progress_ == subscript_to_add_ + 1 || ( subscript_to_add_ == TX_SIZE - 1 && subscript_in_progress_ == 0) )
 8002ba8:	4e56      	ldr	r6, [pc, #344]	; (8002d04 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x160>)
 8002baa:	4b57      	ldr	r3, [pc, #348]	; (8002d08 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x164>)
  void write(uint8_t * new_data, uint8_t new_size)
 8002bac:	4607      	mov	r7, r0
    if (subscript_in_progress_ == subscript_to_add_ + 1 || ( subscript_to_add_ == TX_SIZE - 1 && subscript_in_progress_ == 0) )
 8002bae:	7830      	ldrb	r0, [r6, #0]
 8002bb0:	781c      	ldrb	r4, [r3, #0]
 8002bb2:	1c45      	adds	r5, r0, #1
 8002bb4:	42ac      	cmp	r4, r5
 8002bb6:	d0fd      	beq.n	8002bb4 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x10>
 8002bb8:	2831      	cmp	r0, #49	; 0x31
 8002bba:	d101      	bne.n	8002bc0 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x1c>
 8002bbc:	2c00      	cmp	r4, #0
 8002bbe:	d0f9      	beq.n	8002bb4 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x10>
    tx_buffer_unit_[subscript_to_add_].tx_len_ = new_size;
 8002bc0:	f8df 8164 	ldr.w	r8, [pc, #356]	; 8002d28 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x184>
 8002bc4:	23fb      	movs	r3, #251	; 0xfb
 8002bc6:	fb03 8300 	mla	r3, r3, r0, r8
    subscript_to_add_++;
 8002bca:	b2ed      	uxtb	r5, r5
    tx_buffer_unit_[subscript_to_add_].tx_len_ = new_size;
 8002bcc:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
    memcpy(tx_buffer_unit_[subscript_to_add_].tx_data_, new_data, new_size);
 8002bd0:	ebc0 1380 	rsb	r3, r0, r0, lsl #6
 8002bd4:	ebc0 0083 	rsb	r0, r0, r3, lsl #2
 8002bd8:	4440      	add	r0, r8
 8002bda:	f005 fb29 	bl	8008230 <memcpy>
    if (subscript_to_add_ == TX_SIZE)
 8002bde:	2d32      	cmp	r5, #50	; 0x32
      subscript_to_add_ = 0;
 8002be0:	bf04      	itt	eq
 8002be2:	2300      	moveq	r3, #0
 8002be4:	7033      	strbeq	r3, [r6, #0]
    if (idle_flag_ )
 8002be6:	4b49      	ldr	r3, [pc, #292]	; (8002d0c <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x168>)
    subscript_to_add_++;
 8002be8:	bf18      	it	ne
 8002bea:	7035      	strbne	r5, [r6, #0]
    if (idle_flag_ )
 8002bec:	7819      	ldrb	r1, [r3, #0]
 8002bee:	4642      	mov	r2, r8
 8002bf0:	2900      	cmp	r1, #0
 8002bf2:	d054      	beq.n	8002c9e <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0xfa>
        if ((subscript_in_progress_ == (subscript_to_add_-1)) || (subscript_in_progress_ == TX_SIZE -1 && subscript_to_add_ == 0)) idle_flag_= false;
 8002bf4:	7831      	ldrb	r1, [r6, #0]
 8002bf6:	1e48      	subs	r0, r1, #1
 8002bf8:	4284      	cmp	r4, r0
 8002bfa:	d002      	beq.n	8002c02 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x5e>
 8002bfc:	2c31      	cmp	r4, #49	; 0x31
 8002bfe:	d102      	bne.n	8002c06 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x62>
 8002c00:	b909      	cbnz	r1, 8002c06 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x62>
 8002c02:	2100      	movs	r1, #0
 8002c04:	7019      	strb	r1, [r3, #0]
        huart_->Instance->CR3 &= (uint32_t)(~USART_CR3_DMAT);
 8002c06:	6838      	ldr	r0, [r7, #0]
 8002c08:	6801      	ldr	r1, [r0, #0]
 8002c0a:	694b      	ldr	r3, [r1, #20]
 8002c0c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c10:	614b      	str	r3, [r1, #20]
        __HAL_DMA_DISABLE(huart_->hdmatx);
 8002c12:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	6818      	ldr	r0, [r3, #0]
 8002c18:	f020 0001 	bic.w	r0, r0, #1
 8002c1c:	6018      	str	r0, [r3, #0]
        huart_->hdmatx->Instance->NDTR = (uint32_t)tx_buffer_unit_[subscript_in_progress_].tx_len_;
 8002c1e:	20fb      	movs	r0, #251	; 0xfb
 8002c20:	fb00 2004 	mla	r0, r0, r4, r2
 8002c24:	f890 00fa 	ldrb.w	r0, [r0, #250]	; 0xfa
 8002c28:	6058      	str	r0, [r3, #4]
        uint8_t* tmp8 = tx_buffer_unit_[subscript_in_progress_].tx_data_;
 8002c2a:	ebc4 1084 	rsb	r0, r4, r4, lsl #6
 8002c2e:	ebc4 0480 	rsb	r4, r4, r0, lsl #2
 8002c32:	4414      	add	r4, r2
        huart_->hdmatx->Instance->M0AR = *(uint32_t*)tmp32;
 8002c34:	60dc      	str	r4, [r3, #12]
        huart_->Instance->CR3 |= USART_CR3_DMAT;
 8002c36:	694a      	ldr	r2, [r1, #20]
 8002c38:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002c3c:	614a      	str	r2, [r1, #20]
        __HAL_DMA_ENABLE(huart_->hdmatx);
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	f042 0201 	orr.w	r2, r2, #1
 8002c44:	601a      	str	r2, [r3, #0]
        __HAL_DMA_CLEAR_FLAG(huart_->hdmatx, __HAL_DMA_GET_TC_FLAG_INDEX(huart_->hdmatx));
 8002c46:	4a32      	ldr	r2, [pc, #200]	; (8002d10 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x16c>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d915      	bls.n	8002c78 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0xd4>
 8002c4c:	3218      	adds	r2, #24
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d00d      	beq.n	8002c6e <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0xca>
 8002c52:	3218      	adds	r2, #24
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d00c      	beq.n	8002c72 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0xce>
 8002c58:	3218      	adds	r2, #24
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	bf0c      	ite	eq
 8002c5e:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 8002c62:	f04f 6300 	movne.w	r3, #134217728	; 0x8000000
 8002c66:	4a2b      	ldr	r2, [pc, #172]	; (8002d14 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x170>)
 8002c68:	60d3      	str	r3, [r2, #12]
 8002c6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002c6e:	2320      	movs	r3, #32
 8002c70:	e7f9      	b.n	8002c66 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0xc2>
 8002c72:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002c76:	e7f6      	b.n	8002c66 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0xc2>
 8002c78:	4a27      	ldr	r2, [pc, #156]	; (8002d18 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x174>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d916      	bls.n	8002cac <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x108>
 8002c7e:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d00d      	beq.n	8002ca2 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0xfe>
 8002c86:	3218      	adds	r2, #24
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d00c      	beq.n	8002ca6 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x102>
 8002c8c:	3218      	adds	r2, #24
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	bf0c      	ite	eq
 8002c92:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 8002c96:	f04f 6300 	movne.w	r3, #134217728	; 0x8000000
 8002c9a:	4a1e      	ldr	r2, [pc, #120]	; (8002d14 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x170>)
 8002c9c:	6093      	str	r3, [r2, #8]
 8002c9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002ca2:	2320      	movs	r3, #32
 8002ca4:	e7f9      	b.n	8002c9a <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0xf6>
 8002ca6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002caa:	e7f6      	b.n	8002c9a <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0xf6>
 8002cac:	4a1b      	ldr	r2, [pc, #108]	; (8002d1c <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x178>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d913      	bls.n	8002cda <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x136>
 8002cb2:	3218      	adds	r2, #24
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d00b      	beq.n	8002cd0 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x12c>
 8002cb8:	3218      	adds	r2, #24
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d00a      	beq.n	8002cd4 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x130>
 8002cbe:	3218      	adds	r2, #24
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	bf0c      	ite	eq
 8002cc4:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 8002cc8:	f04f 6300 	movne.w	r3, #134217728	; 0x8000000
 8002ccc:	4a14      	ldr	r2, [pc, #80]	; (8002d20 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x17c>)
 8002cce:	e7cb      	b.n	8002c68 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0xc4>
 8002cd0:	2320      	movs	r3, #32
 8002cd2:	e7fb      	b.n	8002ccc <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x128>
 8002cd4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002cd8:	e7f8      	b.n	8002ccc <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x128>
 8002cda:	4a12      	ldr	r2, [pc, #72]	; (8002d24 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x180>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d00b      	beq.n	8002cf8 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x154>
 8002ce0:	3218      	adds	r2, #24
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d00a      	beq.n	8002cfc <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x158>
 8002ce6:	3218      	adds	r2, #24
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	bf0c      	ite	eq
 8002cec:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 8002cf0:	f04f 6300 	movne.w	r3, #134217728	; 0x8000000
 8002cf4:	4a0a      	ldr	r2, [pc, #40]	; (8002d20 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x17c>)
 8002cf6:	e7d1      	b.n	8002c9c <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0xf8>
 8002cf8:	2320      	movs	r3, #32
 8002cfa:	e7fb      	b.n	8002cf4 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x150>
 8002cfc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002d00:	e7f8      	b.n	8002cf4 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x150>
 8002d02:	bf00      	nop
 8002d04:	20000a6d 	.word	0x20000a6d
 8002d08:	20000a6e 	.word	0x20000a6e
 8002d0c:	20000a6c 	.word	0x20000a6c
 8002d10:	40026458 	.word	0x40026458
 8002d14:	40026400 	.word	0x40026400
 8002d18:	400260b8 	.word	0x400260b8
 8002d1c:	40026058 	.word	0x40026058
 8002d20:	40026000 	.word	0x40026000
 8002d24:	40026010 	.word	0x40026010
 8002d28:	20000a6f 	.word	0x20000a6f

08002d2c <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE>:
      configured_ = true;
    }

    virtual int publish(int id, const Msg * msg)
    {
      if(id >= 100 && !configured_)
 8002d2c:	2963      	cmp	r1, #99	; 0x63
    virtual int publish(int id, const Msg * msg)
 8002d2e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8002d30:	4604      	mov	r4, r0
 8002d32:	460e      	mov	r6, r1
      if(id >= 100 && !configured_)
 8002d34:	dd03      	ble.n	8002d3e <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x12>
 8002d36:	f890 52d0 	ldrb.w	r5, [r0, #720]	; 0x2d0
 8002d3a:	2d00      	cmp	r5, #0
 8002d3c:	d03b      	beq.n	8002db6 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x8a>
        return 0;

      /* serialize message */
      uint16_t l = msg->serialize(message_out+7);
 8002d3e:	6813      	ldr	r3, [r2, #0]
 8002d40:	f504 7191 	add.w	r1, r4, #290	; 0x122
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4610      	mov	r0, r2
 8002d48:	4798      	blx	r3

      /* setup the header */
      message_out[0] = 0xff;
 8002d4a:	22ff      	movs	r2, #255	; 0xff
 8002d4c:	f884 211b 	strb.w	r2, [r4, #283]	; 0x11b
      message_out[1] = PROTOCOL_VER;
 8002d50:	22fe      	movs	r2, #254	; 0xfe
      uint16_t l = msg->serialize(message_out+7);
 8002d52:	b283      	uxth	r3, r0
      message_out[1] = PROTOCOL_VER;
 8002d54:	f884 211c 	strb.w	r2, [r4, #284]	; 0x11c
      message_out[2] = (uint8_t) ((uint16_t)l&255);
 8002d58:	b2c2      	uxtb	r2, r0
      message_out[3] = (uint8_t) ((uint16_t)l>>8);
 8002d5a:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8002d5e:	f884 011e 	strb.w	r0, [r4, #286]	; 0x11e
      message_out[4] = 255 - ((message_out[2] + message_out[3])%256);
 8002d62:	4410      	add	r0, r2
 8002d64:	43c0      	mvns	r0, r0
      message_out[5] = (uint8_t) ((int16_t)id&255);
 8002d66:	f884 6120 	strb.w	r6, [r4, #288]	; 0x120
      message_out[6] = (uint8_t) ((int16_t)id>>8);
 8002d6a:	f346 2607 	sbfx	r6, r6, #8, #8
      message_out[2] = (uint8_t) ((uint16_t)l&255);
 8002d6e:	f884 211d 	strb.w	r2, [r4, #285]	; 0x11d
      message_out[4] = 255 - ((message_out[2] + message_out[3])%256);
 8002d72:	f884 011f 	strb.w	r0, [r4, #287]	; 0x11f
      message_out[6] = (uint8_t) ((int16_t)id>>8);
 8002d76:	f884 6121 	strb.w	r6, [r4, #289]	; 0x121

      /* calculate checksum */
      int chk = 0;
      for(int i =5; i<l+7; i++)
 8002d7a:	2105      	movs	r1, #5
 8002d7c:	f504 7690 	add.w	r6, r4, #288	; 0x120
      int chk = 0;
 8002d80:	2200      	movs	r2, #0
      for(int i =5; i<l+7; i++)
 8002d82:	1d98      	adds	r0, r3, #6
 8002d84:	4281      	cmp	r1, r0
 8002d86:	dc04      	bgt.n	8002d92 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x66>
        chk += message_out[i];
 8002d88:	f816 5b01 	ldrb.w	r5, [r6], #1
      for(int i =5; i<l+7; i++)
 8002d8c:	3101      	adds	r1, #1
        chk += message_out[i];
 8002d8e:	442a      	add	r2, r5
      for(int i =5; i<l+7; i++)
 8002d90:	e7f8      	b.n	8002d84 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x58>
      l += 7;
      message_out[l++] = 255 - (chk%256);
 8002d92:	f103 0508 	add.w	r5, r3, #8
      l += 7;
 8002d96:	3307      	adds	r3, #7
      message_out[l++] = 255 - (chk%256);
 8002d98:	fa14 f383 	uxtah	r3, r4, r3
        {
          uint8_t reminder = l % DMA_TX_BURST_SIZE;
          if(reminder != 0) l = (l / DMA_TX_BURST_SIZE + 1) * DMA_TX_BURST_SIZE;
        }

      if( l <= OUTPUT_SIZE ){
 8002d9c:	b2ad      	uxth	r5, r5
      message_out[l++] = 255 - (chk%256);
 8002d9e:	43d2      	mvns	r2, r2
      if( l <= OUTPUT_SIZE ){
 8002da0:	2dff      	cmp	r5, #255	; 0xff
      message_out[l++] = 255 - (chk%256);
 8002da2:	f883 211b 	strb.w	r2, [r3, #283]	; 0x11b
      if( l <= OUTPUT_SIZE ){
 8002da6:	d809      	bhi.n	8002dbc <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x90>
    tx_->write(data_byte, size);
 8002da8:	68a3      	ldr	r3, [r4, #8]
 8002daa:	b2ea      	uxtb	r2, r5
 8002dac:	f204 111b 	addw	r1, r4, #283	; 0x11b
 8002db0:	6898      	ldr	r0, [r3, #8]
 8002db2:	f7ff fef7 	bl	8002ba4 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh>
        return l;
      }else{
        logerror("Message from device dropped: message larger than buffer.");
        return -1;
      }
    }
 8002db6:	4628      	mov	r0, r5
 8002db8:	b004      	add	sp, #16
 8002dba:	bd70      	pop	{r4, r5, r6, pc}
      msg("")
 8002dbc:	4b07      	ldr	r3, [pc, #28]	; (8002ddc <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0xb0>)
 8002dbe:	9301      	str	r3, [sp, #4]
     */

  private:
    void log(char byte, const char * msg){
      rosserial_msgs::Log l;
      l.level= byte;
 8002dc0:	2303      	movs	r3, #3
 8002dc2:	f88d 3008 	strb.w	r3, [sp, #8]
      l.msg = (char*)msg;
 8002dc6:	4b06      	ldr	r3, [pc, #24]	; (8002de0 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0xb4>)
 8002dc8:	9303      	str	r3, [sp, #12]
      publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8002dca:	6823      	ldr	r3, [r4, #0]
 8002dcc:	aa01      	add	r2, sp, #4
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	2107      	movs	r1, #7
 8002dd2:	4620      	mov	r0, r4
 8002dd4:	4798      	blx	r3
        return -1;
 8002dd6:	f04f 35ff 	mov.w	r5, #4294967295
 8002dda:	e7ec      	b.n	8002db6 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x8a>
 8002ddc:	08008cf0 	.word	0x08008cf0
 8002de0:	08008f7e 	.word	0x08008f7e

08002de4 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE15requestSyncTimeEv>:
    void requestSyncTime()
 8002de4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
      data()
 8002de6:	4b08      	ldr	r3, [pc, #32]	; (8002e08 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE15requestSyncTimeEv+0x24>)
 8002de8:	9301      	str	r3, [sp, #4]
 8002dea:	2300      	movs	r3, #0
 8002dec:	9302      	str	r3, [sp, #8]
 8002dee:	9303      	str	r3, [sp, #12]
      publish(TopicInfo::ID_TIME, &t);
 8002df0:	6803      	ldr	r3, [r0, #0]
 8002df2:	aa01      	add	r2, sp, #4
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	210a      	movs	r1, #10
    void requestSyncTime()
 8002df8:	4604      	mov	r4, r0
      publish(TopicInfo::ID_TIME, &t);
 8002dfa:	4798      	blx	r3
  uint32_t time(){return HAL_GetTick();}
 8002dfc:	f001 f952 	bl	80040a4 <HAL_GetTick>
      rt_time = hardware_.time();
 8002e00:	6120      	str	r0, [r4, #16]
    }
 8002e02:	b004      	add	sp, #16
 8002e04:	bd10      	pop	{r4, pc}
 8002e06:	bf00      	nop
 8002e08:	08008cc0 	.word	0x08008cc0

08002e0c <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE15negotiateTopicsEv>:
    void negotiateTopics()
 8002e0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e10:	b086      	sub	sp, #24
      buffer_size(0)
 8002e12:	4b2a      	ldr	r3, [pc, #168]	; (8002ebc <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE15negotiateTopicsEv+0xb0>)
 8002e14:	9300      	str	r3, [sp, #0]
 8002e16:	2200      	movs	r2, #0
 8002e18:	4b29      	ldr	r3, [pc, #164]	; (8002ec0 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE15negotiateTopicsEv+0xb4>)
 8002e1a:	f8ad 2004 	strh.w	r2, [sp, #4]
 8002e1e:	4605      	mov	r5, r0
 8002e20:	9302      	str	r3, [sp, #8]
 8002e22:	9303      	str	r3, [sp, #12]
 8002e24:	9304      	str	r3, [sp, #16]
 8002e26:	9205      	str	r2, [sp, #20]
 8002e28:	f500 7407 	add.w	r4, r0, #540	; 0x21c
 8002e2c:	f500 761b 	add.w	r6, r0, #620	; 0x26c
              ti.buffer_size = OUTPUT_SIZE;
 8002e30:	27ff      	movs	r7, #255	; 0xff
          if(publishers[i] != 0) // non-empty slot
 8002e32:	6823      	ldr	r3, [r4, #0]
 8002e34:	b1bb      	cbz	r3, 8002e66 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE15negotiateTopicsEv+0x5a>
              ti.message_type = (char *) publishers[i]->msg_->getType();
 8002e36:	6858      	ldr	r0, [r3, #4]
              ti.topic_id = publishers[i]->id_;
 8002e38:	689a      	ldr	r2, [r3, #8]
 8002e3a:	f8ad 2004 	strh.w	r2, [sp, #4]
              ti.topic_name = (char *) publishers[i]->topic_;
 8002e3e:	681a      	ldr	r2, [r3, #0]
              ti.message_type = (char *) publishers[i]->msg_->getType();
 8002e40:	6803      	ldr	r3, [r0, #0]
              ti.topic_name = (char *) publishers[i]->topic_;
 8002e42:	9202      	str	r2, [sp, #8]
              ti.message_type = (char *) publishers[i]->msg_->getType();
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	4798      	blx	r3
              ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8002e48:	6823      	ldr	r3, [r4, #0]
              ti.message_type = (char *) publishers[i]->msg_->getType();
 8002e4a:	9003      	str	r0, [sp, #12]
              ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8002e4c:	6858      	ldr	r0, [r3, #4]
 8002e4e:	6803      	ldr	r3, [r0, #0]
 8002e50:	68db      	ldr	r3, [r3, #12]
 8002e52:	4798      	blx	r3
              publish( publishers[i]->getEndpointType(), &ti );
 8002e54:	6821      	ldr	r1, [r4, #0]
 8002e56:	682b      	ldr	r3, [r5, #0]
              ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8002e58:	9004      	str	r0, [sp, #16]
              ti.buffer_size = OUTPUT_SIZE;
 8002e5a:	9705      	str	r7, [sp, #20]
              publish( publishers[i]->getEndpointType(), &ti );
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	6909      	ldr	r1, [r1, #16]
 8002e60:	466a      	mov	r2, sp
 8002e62:	4628      	mov	r0, r5
 8002e64:	4798      	blx	r3
 8002e66:	3404      	adds	r4, #4
      for(i = 0; i < MAX_PUBLISHERS; i++)
 8002e68:	42b4      	cmp	r4, r6
 8002e6a:	d1e2      	bne.n	8002e32 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE15negotiateTopicsEv+0x26>
 8002e6c:	f505 762f 	add.w	r6, r5, #700	; 0x2bc
              ti.buffer_size = INPUT_SIZE;
 8002e70:	27ff      	movs	r7, #255	; 0xff
          if(subscribers[i] != 0) // non-empty slot
 8002e72:	6820      	ldr	r0, [r4, #0]
 8002e74:	b1c8      	cbz	r0, 8002eaa <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE15negotiateTopicsEv+0x9e>
              ti.topic_id = subscribers[i]->id_;
 8002e76:	6843      	ldr	r3, [r0, #4]
 8002e78:	f8ad 3004 	strh.w	r3, [sp, #4]
              ti.topic_name = (char *) subscribers[i]->topic_;
 8002e7c:	6883      	ldr	r3, [r0, #8]
 8002e7e:	9302      	str	r3, [sp, #8]
              ti.message_type = (char *) subscribers[i]->getMsgType();
 8002e80:	6803      	ldr	r3, [r0, #0]
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	4798      	blx	r3
 8002e86:	9003      	str	r0, [sp, #12]
              ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8002e88:	6820      	ldr	r0, [r4, #0]
 8002e8a:	6803      	ldr	r3, [r0, #0]
 8002e8c:	68db      	ldr	r3, [r3, #12]
 8002e8e:	4798      	blx	r3
              publish( subscribers[i]->getEndpointType(), &ti );
 8002e90:	682b      	ldr	r3, [r5, #0]
              ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8002e92:	9004      	str	r0, [sp, #16]
              publish( subscribers[i]->getEndpointType(), &ti );
 8002e94:	6820      	ldr	r0, [r4, #0]
 8002e96:	f8d3 8000 	ldr.w	r8, [r3]
 8002e9a:	6803      	ldr	r3, [r0, #0]
              ti.buffer_size = INPUT_SIZE;
 8002e9c:	9705      	str	r7, [sp, #20]
              publish( subscribers[i]->getEndpointType(), &ti );
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	4798      	blx	r3
 8002ea2:	466a      	mov	r2, sp
 8002ea4:	4601      	mov	r1, r0
 8002ea6:	4628      	mov	r0, r5
 8002ea8:	47c0      	blx	r8
 8002eaa:	3404      	adds	r4, #4
      for(i = 0; i < MAX_SUBSCRIBERS; i++)
 8002eac:	42a6      	cmp	r6, r4
 8002eae:	d1e0      	bne.n	8002e72 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE15negotiateTopicsEv+0x66>
      configured_ = true;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	f885 32d0 	strb.w	r3, [r5, #720]	; 0x2d0
    }
 8002eb6:	b006      	add	sp, #24
 8002eb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002ebc:	08008cd8 	.word	0x08008cd8
 8002ec0:	08008fb6 	.word	0x08008fb6

08002ec4 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8syncTimeEPh>:
    void syncTime(uint8_t * data)
 8002ec4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8002ec6:	4b1c      	ldr	r3, [pc, #112]	; (8002f38 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8syncTimeEPh+0x74>)
 8002ec8:	9301      	str	r3, [sp, #4]
 8002eca:	4604      	mov	r4, r0
 8002ecc:	2300      	movs	r3, #0
 8002ece:	9302      	str	r3, [sp, #8]
 8002ed0:	9303      	str	r3, [sp, #12]
 8002ed2:	460d      	mov	r5, r1
 8002ed4:	f001 f8e6 	bl	80040a4 <HAL_GetTick>
      uint32_t offset = hardware_.time() - rt_time;
 8002ed8:	6922      	ldr	r2, [r4, #16]
      t.deserialize(data);
 8002eda:	4629      	mov	r1, r5
      uint32_t offset = hardware_.time() - rt_time;
 8002edc:	1a86      	subs	r6, r0, r2
      t.deserialize(data);
 8002ede:	a801      	add	r0, sp, #4
 8002ee0:	f7fe fbb2 	bl	8001648 <_ZN8std_msgs4Time11deserializeEPh>
      t.data.sec += offset/1000;
 8002ee4:	9b02      	ldr	r3, [sp, #8]
 8002ee6:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8002eea:	fbb6 f2f5 	udiv	r2, r6, r5
 8002eee:	4413      	add	r3, r2
 8002ef0:	9302      	str	r3, [sp, #8]
      t.data.nsec += (offset%1000)*1000000UL;
 8002ef2:	fb05 6212 	mls	r2, r5, r2, r6
 8002ef6:	9b03      	ldr	r3, [sp, #12]
 8002ef8:	4e10      	ldr	r6, [pc, #64]	; (8002f3c <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8syncTimeEPh+0x78>)
 8002efa:	fb06 3202 	mla	r2, r6, r2, r3
 8002efe:	9203      	str	r2, [sp, #12]
 8002f00:	f001 f8d0 	bl	80040a4 <HAL_GetTick>
      sec_offset = new_now.sec - ms/1000 - 1;
 8002f04:	9a02      	ldr	r2, [sp, #8]
 8002f06:	fbb0 f3f5 	udiv	r3, r0, r5
 8002f0a:	3a01      	subs	r2, #1
 8002f0c:	1ad2      	subs	r2, r2, r3
 8002f0e:	6162      	str	r2, [r4, #20]
      nsec_offset = new_now.nsec - (ms%1000)*1000000UL + 1000000000UL;
 8002f10:	9903      	ldr	r1, [sp, #12]
 8002f12:	4a0b      	ldr	r2, [pc, #44]	; (8002f40 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8syncTimeEPh+0x7c>)
 8002f14:	fb05 0313 	mls	r3, r5, r3, r0
 8002f18:	440a      	add	r2, r1
 8002f1a:	4621      	mov	r1, r4
 8002f1c:	fb06 2313 	mls	r3, r6, r3, r2
 8002f20:	f841 3f18 	str.w	r3, [r1, #24]!
      normalizeSecNSec(sec_offset, nsec_offset);
 8002f24:	f104 0014 	add.w	r0, r4, #20
 8002f28:	f001 f852 	bl	8003fd0 <_ZN3ros16normalizeSecNSecERmS0_>
 8002f2c:	f001 f8ba 	bl	80040a4 <HAL_GetTick>
      last_sync_receive_time = hardware_.time();
 8002f30:	f8c4 02d8 	str.w	r0, [r4, #728]	; 0x2d8
    }
 8002f34:	b004      	add	sp, #16
 8002f36:	bd70      	pop	{r4, r5, r6, pc}
 8002f38:	08008cc0 	.word	0x08008cc0
 8002f3c:	000f4240 	.word	0x000f4240
 8002f40:	3b9aca00 	.word	0x3b9aca00

08002f44 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv>:
    virtual int spinOnce(){
 8002f44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f48:	4604      	mov	r4, r0
 8002f4a:	f001 f8ab 	bl	80040a4 <HAL_GetTick>
      if( (c_time - last_sync_receive_time) > (SYNC_SECONDS*2200) ){
 8002f4e:	f8d4 32d8 	ldr.w	r3, [r4, #728]	; 0x2d8
 8002f52:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8002f56:	1ac3      	subs	r3, r0, r3
 8002f58:	4293      	cmp	r3, r2
        configured_ = false;
 8002f5a:	bf84      	itt	hi
 8002f5c:	2300      	movhi	r3, #0
 8002f5e:	f884 32d0 	strbhi.w	r3, [r4, #720]	; 0x2d0
      if ( mode_ != MODE_FIRST_FF){
 8002f62:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8002f66:	4607      	mov	r7, r0
 8002f68:	b133      	cbz	r3, 8002f78 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x34>
        if (c_time > last_msg_timeout_time){
 8002f6a:	f8d4 32dc 	ldr.w	r3, [r4, #732]	; 0x2dc
 8002f6e:	4283      	cmp	r3, r0
          mode_ = MODE_FIRST_FF;
 8002f70:	bf3c      	itt	cc
 8002f72:	2300      	movcc	r3, #0
 8002f74:	f8c4 32bc 	strcc.w	r3, [r4, #700]	; 0x2bc
  bool available() { return ring_buf_->length(); }
 8002f78:	f8df a1dc 	ldr.w	sl, [pc, #476]	; 8003158 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x214>
          byte_in_progress_ = 0;
 8002f7c:	f04f 0800 	mov.w	r8, #0
                  subscribers[topic_-100]->callback( message_in );
 8002f80:	f104 091c 	add.w	r9, r4, #28
  bool available() { return ring_buf_->length(); }
 8002f84:	f8da 2000 	ldr.w	r2, [sl]
    if(byte_to_add_ - byte_in_progress_ >= 0)
 8002f88:	f9b2 1192 	ldrsh.w	r1, [r2, #402]	; 0x192
 8002f8c:	f9b2 3190 	ldrsh.w	r3, [r2, #400]	; 0x190
 8002f90:	1acd      	subs	r5, r1, r3
      return (byte_to_add_ - (buffer_length_ - byte_in_progress_));
 8002f92:	bf42      	ittt	mi
 8002f94:	f8b2 0194 	ldrhmi.w	r0, [r2, #404]	; 0x194
 8002f98:	18cd      	addmi	r5, r1, r3
 8002f9a:	1a2d      	submi	r5, r5, r0
 8002f9c:	b2ad      	uxth	r5, r5
    if(!available()) return -1;
 8002f9e:	2d00      	cmp	r5, #0
 8002fa0:	f000 80c7 	beq.w	8003132 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x1ee>
    if (byte_in_progress_ != byte_to_add_)
 8002fa4:	4299      	cmp	r1, r3
 8002fa6:	d00a      	beq.n	8002fbe <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x7a>
        pop_value =  buf_[byte_in_progress_];
 8002fa8:	5cd6      	ldrb	r6, [r2, r3]
        if (byte_in_progress_ == buffer_length_)
 8002faa:	f8b2 1194 	ldrh.w	r1, [r2, #404]	; 0x194
        byte_in_progress_++;
 8002fae:	3301      	adds	r3, #1
 8002fb0:	b21b      	sxth	r3, r3
        if (byte_in_progress_ == buffer_length_)
 8002fb2:	428b      	cmp	r3, r1
        byte_in_progress_++;
 8002fb4:	f8a2 3190 	strh.w	r3, [r2, #400]	; 0x190
          byte_in_progress_ = 0;
 8002fb8:	bf08      	it	eq
 8002fba:	f8a2 8190 	strheq.w	r8, [r2, #400]	; 0x190
          checksum_ += data;
 8002fbe:	f8d4 32cc 	ldr.w	r3, [r4, #716]	; 0x2cc
          if( mode_ == MODE_MESSAGE ){        /* message data being recieved */
 8002fc2:	f8d4 52bc 	ldr.w	r5, [r4, #700]	; 0x2bc
          checksum_ += data;
 8002fc6:	4433      	add	r3, r6
          if( mode_ == MODE_MESSAGE ){        /* message data being recieved */
 8002fc8:	2d07      	cmp	r5, #7
          checksum_ += data;
 8002fca:	f8c4 32cc 	str.w	r3, [r4, #716]	; 0x2cc
          if( mode_ == MODE_MESSAGE ){        /* message data being recieved */
 8002fce:	d111      	bne.n	8002ff4 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0xb0>
            message_in[index_++] = data;
 8002fd0:	f8d4 32c8 	ldr.w	r3, [r4, #712]	; 0x2c8
 8002fd4:	1c5a      	adds	r2, r3, #1
 8002fd6:	4423      	add	r3, r4
 8002fd8:	f8c4 22c8 	str.w	r2, [r4, #712]	; 0x2c8
 8002fdc:	771e      	strb	r6, [r3, #28]
            bytes_--;
 8002fde:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 8002fe2:	3b01      	subs	r3, #1
 8002fe4:	f8c4 32c0 	str.w	r3, [r4, #704]	; 0x2c0
            if(bytes_ == 0)                  /* is message complete? if so, checksum */
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d1cb      	bne.n	8002f84 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x40>
              mode_ = MODE_MSG_CHECKSUM;
 8002fec:	2308      	movs	r3, #8
              mode_++;
 8002fee:	f8c4 32bc 	str.w	r3, [r4, #700]	; 0x2bc
 8002ff2:	e7c7      	b.n	8002f84 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x40>
          }else if( mode_ == MODE_FIRST_FF ){
 8002ff4:	b9ad      	cbnz	r5, 8003022 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0xde>
            if(data == 0xff){
 8002ff6:	2eff      	cmp	r6, #255	; 0xff
 8002ff8:	d107      	bne.n	800300a <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0xc6>
              mode_++;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	f8c4 32bc 	str.w	r3, [r4, #700]	; 0x2bc
              last_msg_timeout_time = c_time + MSG_TIMEOUT;
 8003000:	f107 0314 	add.w	r3, r7, #20
 8003004:	f8c4 32dc 	str.w	r3, [r4, #732]	; 0x2dc
 8003008:	e7bc      	b.n	8002f84 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x40>
  uint32_t time(){return HAL_GetTick();}
 800300a:	f001 f84b 	bl	80040a4 <HAL_GetTick>
            else if( hardware_.time() - c_time > (SYNC_SECONDS)){
 800300e:	1bc0      	subs	r0, r0, r7
 8003010:	2805      	cmp	r0, #5
 8003012:	d9b7      	bls.n	8002f84 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x40>
              configured_=false;
 8003014:	f884 52d0 	strb.w	r5, [r4, #720]	; 0x2d0
              return -2;
 8003018:	f06f 0501 	mvn.w	r5, #1
    }
 800301c:	4628      	mov	r0, r5
 800301e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          }else if( mode_ == MODE_PROTOCOL_VER ){
 8003022:	2d01      	cmp	r5, #1
 8003024:	d10d      	bne.n	8003042 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0xfe>
            if(data == PROTOCOL_VER){
 8003026:	2efe      	cmp	r6, #254	; 0xfe
 8003028:	d101      	bne.n	800302e <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0xea>
              mode_++;
 800302a:	2302      	movs	r3, #2
 800302c:	e7df      	b.n	8002fee <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0xaa>
              if (configured_ == false)
 800302e:	f894 32d0 	ldrb.w	r3, [r4, #720]	; 0x2d0
              mode_ = MODE_FIRST_FF;
 8003032:	f8c4 82bc 	str.w	r8, [r4, #700]	; 0x2bc
              if (configured_ == false)
 8003036:	2b00      	cmp	r3, #0
 8003038:	d1a4      	bne.n	8002f84 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x40>
                requestSyncTime(); 	/* send a msg back showing our protocol version */
 800303a:	4620      	mov	r0, r4
 800303c:	f7ff fed2 	bl	8002de4 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE15requestSyncTimeEv>
 8003040:	e7a0      	b.n	8002f84 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x40>
          }else if( mode_ == MODE_SIZE_L ){   /* bottom half of message size */
 8003042:	2d02      	cmp	r5, #2
 8003044:	d109      	bne.n	800305a <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x116>
            bytes_ = data;
 8003046:	f8c4 62c0 	str.w	r6, [r4, #704]	; 0x2c0
            index_ = 0;
 800304a:	f8c4 82c8 	str.w	r8, [r4, #712]	; 0x2c8
            mode_++;
 800304e:	2303      	movs	r3, #3
            mode_++;
 8003050:	f8c4 32bc 	str.w	r3, [r4, #700]	; 0x2bc
            checksum_ = data;               /* first byte included in checksum */
 8003054:	f8c4 62cc 	str.w	r6, [r4, #716]	; 0x2cc
 8003058:	e794      	b.n	8002f84 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x40>
          }else if( mode_ == MODE_SIZE_H ){   /* top half of message size */
 800305a:	2d03      	cmp	r5, #3
 800305c:	d107      	bne.n	800306e <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x12a>
            bytes_ += data<<8;
 800305e:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 8003062:	eb03 2306 	add.w	r3, r3, r6, lsl #8
 8003066:	f8c4 32c0 	str.w	r3, [r4, #704]	; 0x2c0
            mode_++;
 800306a:	2304      	movs	r3, #4
 800306c:	e7bf      	b.n	8002fee <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0xaa>
          }else if( mode_ == MODE_SIZE_CHECKSUM ){
 800306e:	2d04      	cmp	r5, #4
 8003070:	d10b      	bne.n	800308a <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x146>
            if( (checksum_%256) == 255)
 8003072:	425a      	negs	r2, r3
 8003074:	b2d2      	uxtb	r2, r2
 8003076:	b2db      	uxtb	r3, r3
 8003078:	bf58      	it	pl
 800307a:	4253      	negpl	r3, r2
 800307c:	2bff      	cmp	r3, #255	; 0xff
 800307e:	d101      	bne.n	8003084 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x140>
              mode_++;
 8003080:	2305      	movs	r3, #5
 8003082:	e7b4      	b.n	8002fee <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0xaa>
              mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8003084:	f8c4 82bc 	str.w	r8, [r4, #700]	; 0x2bc
 8003088:	e77c      	b.n	8002f84 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x40>
          }else if( mode_ == MODE_TOPIC_L ){  /* bottom half of topic id */
 800308a:	2d05      	cmp	r5, #5
 800308c:	d103      	bne.n	8003096 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x152>
            topic_ = data;
 800308e:	f8c4 62c4 	str.w	r6, [r4, #708]	; 0x2c4
            mode_++;
 8003092:	2306      	movs	r3, #6
 8003094:	e7dc      	b.n	8003050 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x10c>
          }else if( mode_ == MODE_TOPIC_H ){  /* top half of topic id */
 8003096:	2d06      	cmp	r5, #6
 8003098:	d10b      	bne.n	80030b2 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x16e>
            topic_ += data<<8;
 800309a:	f8d4 32c4 	ldr.w	r3, [r4, #708]	; 0x2c4
 800309e:	eb03 2306 	add.w	r3, r3, r6, lsl #8
 80030a2:	f8c4 32c4 	str.w	r3, [r4, #708]	; 0x2c4
            mode_ = MODE_MESSAGE;
 80030a6:	2307      	movs	r3, #7
 80030a8:	f8c4 32bc 	str.w	r3, [r4, #700]	; 0x2bc
            if(bytes_ == 0)
 80030ac:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 80030b0:	e79a      	b.n	8002fe8 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0xa4>
          }else if( mode_ == MODE_MSG_CHECKSUM ){ /* do checksum */
 80030b2:	2d08      	cmp	r5, #8
 80030b4:	f47f af66 	bne.w	8002f84 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x40>
            if( (checksum_%256) == 255){
 80030b8:	425a      	negs	r2, r3
 80030ba:	b2d2      	uxtb	r2, r2
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	bf58      	it	pl
 80030c0:	4253      	negpl	r3, r2
 80030c2:	2bff      	cmp	r3, #255	; 0xff
            mode_ = MODE_FIRST_FF;
 80030c4:	f8c4 82bc 	str.w	r8, [r4, #700]	; 0x2bc
            if( (checksum_%256) == 255){
 80030c8:	f47f af5c 	bne.w	8002f84 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x40>
              if(topic_ == TopicInfo::ID_PUBLISHER){
 80030cc:	f8d4 32c4 	ldr.w	r3, [r4, #708]	; 0x2c4
 80030d0:	b963      	cbnz	r3, 80030ec <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x1a8>
                requestSyncTime();
 80030d2:	4620      	mov	r0, r4
 80030d4:	f7ff fe86 	bl	8002de4 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE15requestSyncTimeEv>
                negotiateTopics();
 80030d8:	4620      	mov	r0, r4
 80030da:	f7ff fe97 	bl	8002e0c <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE15negotiateTopicsEv>
                return -1;
 80030de:	f04f 35ff 	mov.w	r5, #4294967295
                last_sync_time = c_time;
 80030e2:	f8c4 72d4 	str.w	r7, [r4, #724]	; 0x2d4
                last_sync_receive_time = c_time;
 80030e6:	f8c4 72d8 	str.w	r7, [r4, #728]	; 0x2d8
                return -1;
 80030ea:	e797      	b.n	800301c <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0xd8>
              }else if(topic_ == TopicInfo::ID_TIME){
 80030ec:	2b0a      	cmp	r3, #10
 80030ee:	d104      	bne.n	80030fa <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x1b6>
                syncTime(message_in);
 80030f0:	4649      	mov	r1, r9
 80030f2:	4620      	mov	r0, r4
 80030f4:	f7ff fee6 	bl	8002ec4 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8syncTimeEPh>
 80030f8:	e744      	b.n	8002f84 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x40>
              }else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST){
 80030fa:	2b06      	cmp	r3, #6
 80030fc:	d108      	bne.n	8003110 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x1cc>
                req_param_resp.deserialize(message_in);
 80030fe:	4649      	mov	r1, r9
 8003100:	f504 7039 	add.w	r0, r4, #740	; 0x2e4
 8003104:	f7fe ffa0 	bl	8002048 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
                param_recieved= true;
 8003108:	2301      	movs	r3, #1
 800310a:	f884 32e0 	strb.w	r3, [r4, #736]	; 0x2e0
 800310e:	e739      	b.n	8002f84 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x40>
              }else if(topic_ == TopicInfo::ID_TX_STOP){
 8003110:	2b0b      	cmp	r3, #11
 8003112:	d102      	bne.n	800311a <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x1d6>
                configured_ = false;
 8003114:	f884 82d0 	strb.w	r8, [r4, #720]	; 0x2d0
 8003118:	e734      	b.n	8002f84 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x40>
                if(subscribers[topic_-100])
 800311a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800311e:	f8d3 00dc 	ldr.w	r0, [r3, #220]	; 0xdc
 8003122:	2800      	cmp	r0, #0
 8003124:	f43f af2e 	beq.w	8002f84 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x40>
                  subscribers[topic_-100]->callback( message_in );
 8003128:	6803      	ldr	r3, [r0, #0]
 800312a:	4649      	mov	r1, r9
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4798      	blx	r3
 8003130:	e728      	b.n	8002f84 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x40>
      if( configured_ && ((c_time-last_sync_time) > (SYNC_SECONDS*500) )){
 8003132:	f894 32d0 	ldrb.w	r3, [r4, #720]	; 0x2d0
 8003136:	2b00      	cmp	r3, #0
 8003138:	f43f af70 	beq.w	800301c <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0xd8>
 800313c:	f8d4 32d4 	ldr.w	r3, [r4, #724]	; 0x2d4
 8003140:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8003144:	1afb      	subs	r3, r7, r3
 8003146:	4293      	cmp	r3, r2
 8003148:	f67f af68 	bls.w	800301c <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0xd8>
        requestSyncTime();
 800314c:	4620      	mov	r0, r4
 800314e:	f7ff fe49 	bl	8002de4 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE15requestSyncTimeEv>
        last_sync_time = c_time;
 8003152:	f8c4 72d4 	str.w	r7, [r4, #724]	; 0x2d4
 8003156:	e761      	b.n	800301c <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0xd8>
 8003158:	20003b80 	.word	0x20003b80

0800315c <HAL_SYSTICK_Callback>:
{
 800315c:	b510      	push	{r4, lr}
	static uint32_t last_time = HAL_GetTick();
 800315e:	4c14      	ldr	r4, [pc, #80]	; (80031b0 <HAL_SYSTICK_Callback+0x54>)
 8003160:	f8d4 34e4 	ldr.w	r3, [r4, #1252]	; 0x4e4
 8003164:	07db      	lsls	r3, r3, #31
 8003166:	d404      	bmi.n	8003172 <HAL_SYSTICK_Callback+0x16>
 8003168:	f000 ff9c 	bl	80040a4 <HAL_GetTick>
 800316c:	2301      	movs	r3, #1
 800316e:	f8c4 34e4 	str.w	r3, [r4, #1252]	; 0x4e4
	uint32_t now_time = HAL_GetTick();
 8003172:	f000 ff97 	bl	80040a4 <HAL_GetTick>
	nh_.spinOnce();
 8003176:	480e      	ldr	r0, [pc, #56]	; (80031b0 <HAL_SYSTICK_Callback+0x54>)
 8003178:	f7ff fee4 	bl	8002f44 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv>
	if(!start_process_flag_)
 800317c:	f894 34e0 	ldrb.w	r3, [r4, #1248]	; 0x4e0
 8003180:	b1a3      	cbz	r3, 80031ac <HAL_SYSTICK_Callback+0x50>
	if(nh_.connected())
 8003182:	f894 32d0 	ldrb.w	r3, [r4, #720]	; 0x2d0
 8003186:	b18b      	cbz	r3, 80031ac <HAL_SYSTICK_Callback+0x50>
		if(counter++>8)
 8003188:	f8d4 34e8 	ldr.w	r3, [r4, #1256]	; 0x4e8
 800318c:	2b08      	cmp	r3, #8
 800318e:	dc03      	bgt.n	8003198 <HAL_SYSTICK_Callback+0x3c>
 8003190:	3301      	adds	r3, #1
 8003192:	f8c4 34e8 	str.w	r3, [r4, #1256]	; 0x4e8
 8003196:	bd10      	pop	{r4, pc}
			counter = 0;
 8003198:	2300      	movs	r3, #0
			imu_.update();
 800319a:	210a      	movs	r1, #10
 800319c:	4805      	ldr	r0, [pc, #20]	; (80031b4 <HAL_SYSTICK_Callback+0x58>)
			counter = 0;
 800319e:	f8c4 34e8 	str.w	r3, [r4, #1256]	; 0x4e8
			imu_.update();
 80031a2:	f000 fefb 	bl	8003f9c <_ZN3IMU6updateEt>
			estimator_.update();
 80031a6:	4804      	ldr	r0, [pc, #16]	; (80031b8 <HAL_SYSTICK_Callback+0x5c>)
 80031a8:	f7ff fc1d 	bl	80029e6 <_ZN13StateEstimate6updateEv>
 80031ac:	bd10      	pop	{r4, pc}
 80031ae:	bf00      	nop
 80031b0:	20000534 	.word	0x20000534
 80031b4:	20000840 	.word	0x20000840
 80031b8:	20000954 	.word	0x20000954

080031bc <_GLOBAL__sub_I_nh_>:
    NodeHandle_() : configured_(false) {
 80031bc:	4b5f      	ldr	r3, [pc, #380]	; (800333c <_GLOBAL__sub_I_nh_+0x180>)
 80031be:	4a60      	ldr	r2, [pc, #384]	; (8003340 <_GLOBAL__sub_I_nh_+0x184>)
      strings_length(0), strings(NULL)
 80031c0:	4960      	ldr	r1, [pc, #384]	; (8003344 <_GLOBAL__sub_I_nh_+0x188>)
  /* User can add his own implementation to report the HAL error return state */
  while(1) 
  {
  }
  /* USER CODE END Error_Handler_Debug */ 
}
 80031c2:	b510      	push	{r4, lr}
 80031c4:	601a      	str	r2, [r3, #0]
    baud_ = 961200;
 80031c6:	4a60      	ldr	r2, [pc, #384]	; (8003348 <_GLOBAL__sub_I_nh_+0x18c>)
 80031c8:	60da      	str	r2, [r3, #12]
 80031ca:	2200      	movs	r2, #0
 80031cc:	f883 22d0 	strb.w	r2, [r3, #720]	; 0x2d0
 80031d0:	f8c3 12e4 	str.w	r1, [r3, #740]	; 0x2e4
 80031d4:	f883 22e8 	strb.w	r2, [r3, #744]	; 0x2e8
 80031d8:	f8c3 22f0 	str.w	r2, [r3, #752]	; 0x2f0
 80031dc:	f883 22f4 	strb.w	r2, [r3, #756]	; 0x2f4
 80031e0:	f8c3 22fc 	str.w	r2, [r3, #764]	; 0x2fc
 80031e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 80031e8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        publishers[i] = 0;
 80031ec:	4610      	mov	r0, r2
 80031ee:	1899      	adds	r1, r3, r2
 80031f0:	3204      	adds	r2, #4
      for(unsigned int i=0; i< MAX_PUBLISHERS; i++)
 80031f2:	2a50      	cmp	r2, #80	; 0x50
        publishers[i] = 0;
 80031f4:	f8c1 021c 	str.w	r0, [r1, #540]	; 0x21c
      for(unsigned int i=0; i< MAX_PUBLISHERS; i++)
 80031f8:	d1f9      	bne.n	80031ee <_GLOBAL__sub_I_nh_+0x32>
 80031fa:	2200      	movs	r2, #0
        subscribers[i] = 0;
 80031fc:	4610      	mov	r0, r2
 80031fe:	1899      	adds	r1, r3, r2
 8003200:	3204      	adds	r2, #4
      for(unsigned int i=0; i< MAX_SUBSCRIBERS; i++)
 8003202:	2a50      	cmp	r2, #80	; 0x50
        subscribers[i] = 0;
 8003204:	f8c1 026c 	str.w	r0, [r1, #620]	; 0x26c
      for(unsigned int i=0; i< MAX_SUBSCRIBERS; i++)
 8003208:	d1f9      	bne.n	80031fe <_GLOBAL__sub_I_nh_+0x42>
 800320a:	2200      	movs	r2, #0
        message_in[i] = 0;
 800320c:	4610      	mov	r0, r2
 800320e:	1899      	adds	r1, r3, r2
      for(unsigned int i=0; i< INPUT_SIZE; i++)
 8003210:	3201      	adds	r2, #1
 8003212:	2aff      	cmp	r2, #255	; 0xff
        message_in[i] = 0;
 8003214:	7708      	strb	r0, [r1, #28]
      for(unsigned int i=0; i< INPUT_SIZE; i++)
 8003216:	d1fa      	bne.n	800320e <_GLOBAL__sub_I_nh_+0x52>
 8003218:	2100      	movs	r1, #0
        message_out[i] = 0;
 800321a:	460a      	mov	r2, r1
 800321c:	1858      	adds	r0, r3, r1
      for(unsigned int i=0; i< OUTPUT_SIZE; i++)
 800321e:	3101      	adds	r1, #1
 8003220:	29ff      	cmp	r1, #255	; 0xff
        message_out[i] = 0;
 8003222:	f880 211b 	strb.w	r2, [r0, #283]	; 0x11b
      for(unsigned int i=0; i< OUTPUT_SIZE; i++)
 8003226:	d1f9      	bne.n	800321c <_GLOBAL__sub_I_nh_+0x60>
 8003228:	4c48      	ldr	r4, [pc, #288]	; (800334c <_GLOBAL__sub_I_nh_+0x190>)
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 800322a:	f8c3 230c 	str.w	r2, [r3, #780]	; 0x30c
 800322e:	f8c3 2310 	str.w	r2, [r3, #784]	; 0x310
 8003232:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
 8003236:	f8c3 2318 	str.w	r2, [r3, #792]	; 0x318
 800323a:	f8c3 231c 	str.w	r2, [r3, #796]	; 0x31c
 800323e:	f8c3 2320 	str.w	r2, [r3, #800]	; 0x320
 8003242:	2200      	movs	r2, #0
 8003244:	f8c3 232c 	str.w	r2, [r3, #812]	; 0x32c
 8003248:	f8c3 2328 	str.w	r2, [r3, #808]	; 0x328
 800324c:	f8c3 2324 	str.w	r2, [r3, #804]	; 0x324
 8003250:	f8c3 2338 	str.w	r2, [r3, #824]	; 0x338
 8003254:	f8c3 2334 	str.w	r2, [r3, #820]	; 0x334
 8003258:	f8c3 2330 	str.w	r2, [r3, #816]	; 0x330
 800325c:	f8c3 2354 	str.w	r2, [r3, #852]	; 0x354
 8003260:	f8c3 2350 	str.w	r2, [r3, #848]	; 0x350
 8003264:	f8c3 234c 	str.w	r2, [r3, #844]	; 0x34c
 8003268:	f8c3 2360 	str.w	r2, [r3, #864]	; 0x360
 800326c:	f8c3 235c 	str.w	r2, [r3, #860]	; 0x35c
 8003270:	f8c3 2358 	str.w	r2, [r3, #856]	; 0x358
 8003274:	f8c3 236c 	str.w	r2, [r3, #876]	; 0x36c
 8003278:	f8c3 2368 	str.w	r2, [r3, #872]	; 0x368
 800327c:	f8c3 2364 	str.w	r2, [r3, #868]	; 0x364
 8003280:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
 8003284:	f8c3 2374 	str.w	r2, [r3, #884]	; 0x374
 8003288:	f8c3 2370 	str.w	r2, [r3, #880]	; 0x370
 800328c:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
 8003290:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380
 8003294:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
 8003298:	f8c3 2390 	str.w	r2, [r3, #912]	; 0x390
 800329c:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c
 80032a0:	f8c3 2388 	str.w	r2, [r3, #904]	; 0x388
 80032a4:	f8c3 239c 	str.w	r2, [r3, #924]	; 0x39c
 80032a8:	f8c3 2398 	str.w	r2, [r3, #920]	; 0x398
 80032ac:	f8c3 2394 	str.w	r2, [r3, #916]	; 0x394
 80032b0:	f8c3 23a8 	str.w	r2, [r3, #936]	; 0x3a8
 80032b4:	f8c3 23a4 	str.w	r2, [r3, #932]	; 0x3a4
 80032b8:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
 80032bc:	f8c3 23b4 	str.w	r2, [r3, #948]	; 0x3b4
 80032c0:	f8c3 23b0 	str.w	r2, [r3, #944]	; 0x3b0
 80032c4:	f8c3 23ac 	str.w	r2, [r3, #940]	; 0x3ac
 80032c8:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0
 80032cc:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
 80032d0:	f8c3 23b8 	str.w	r2, [r3, #952]	; 0x3b8
 80032d4:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
 80032d8:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
 80032dc:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
 80032e0:	f8c3 23e4 	str.w	r2, [r3, #996]	; 0x3e4
 80032e4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
 80032e8:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
 80032ec:	f8c3 23f0 	str.w	r2, [r3, #1008]	; 0x3f0
 80032f0:	f8c3 23ec 	str.w	r2, [r3, #1004]	; 0x3ec
 80032f4:	f8c3 23e8 	str.w	r2, [r3, #1000]	; 0x3e8
 80032f8:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
 80032fc:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8
 8003300:	f8c3 23f4 	str.w	r2, [r3, #1012]	; 0x3f4
 8003304:	4623      	mov	r3, r4
 8003306:	f844 2c08 	str.w	r2, [r4, #-8]
 800330a:	f843 2904 	str.w	r2, [r3], #-4
 800330e:	60e2      	str	r2, [r4, #12]
 8003310:	601a      	str	r2, [r3, #0]
 8003312:	60a2      	str	r2, [r4, #8]
 8003314:	6062      	str	r2, [r4, #4]
//ros node  ugvnode
static RosNode *testnode;

/* sensors */
#if IMU_FLAG
IMU imu_;
 8003316:	490e      	ldr	r1, [pc, #56]	; (8003350 <_GLOBAL__sub_I_nh_+0x194>)
 8003318:	4a0e      	ldr	r2, [pc, #56]	; (8003354 <_GLOBAL__sub_I_nh_+0x198>)
 800331a:	f1a4 00fc 	sub.w	r0, r4, #252	; 0xfc
 800331e:	f003 f9a8 	bl	8006672 <__aeabi_atexit>
#if GPS_FLAG
GPS gps_;
#endif
//
#if ATTITUDE_ESTIMATE_FLAG || HEIGHT_ESTIMATE_FLAG || POS_ESTIMATE_FLAG
StateEstimate estimator_;
 8003322:	f104 0018 	add.w	r0, r4, #24
 8003326:	f7ff f877 	bl	8002418 <_ZN13StateEstimateC1Ev>
 800332a:	f104 0018 	add.w	r0, r4, #24
 800332e:	4a09      	ldr	r2, [pc, #36]	; (8003354 <_GLOBAL__sub_I_nh_+0x198>)
 8003330:	4909      	ldr	r1, [pc, #36]	; (8003358 <_GLOBAL__sub_I_nh_+0x19c>)
 8003332:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003336:	f003 b99c 	b.w	8006672 <__aeabi_atexit>
 800333a:	bf00      	nop
 800333c:	20000534 	.word	0x20000534
 8003340:	08008d68 	.word	0x08008d68
 8003344:	08008d08 	.word	0x08008d08
 8003348:	000eaab0 	.word	0x000eaab0
 800334c:	2000093c 	.word	0x2000093c
 8003350:	080023e9 	.word	0x080023e9
 8003354:	20000000 	.word	0x20000000
 8003358:	08001cc9 	.word	0x08001cc9

0800335c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800335c:	b508      	push	{r3, lr}

  hspi1.Instance = SPI1;
 800335e:	480f      	ldr	r0, [pc, #60]	; (800339c <MX_SPI1_Init+0x40>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003360:	4b0f      	ldr	r3, [pc, #60]	; (80033a0 <MX_SPI1_Init+0x44>)
 8003362:	f44f 7e82 	mov.w	lr, #260	; 0x104
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003366:	f44f 7200 	mov.w	r2, #512	; 0x200
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800336a:	e880 4008 	stmia.w	r0, {r3, lr}
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800336e:	2300      	movs	r3, #0
 8003370:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003372:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003374:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003376:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003378:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800337a:	6203      	str	r3, [r0, #32]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800337c:	2230      	movs	r2, #48	; 0x30
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800337e:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003380:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 15;
 8003382:	230f      	movs	r3, #15
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8003384:	61c2      	str	r2, [r0, #28]
  hspi1.Init.CRCPolynomial = 15;
 8003386:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003388:	f001 ff2a 	bl	80051e0 <HAL_SPI_Init>
 800338c:	b128      	cbz	r0, 800339a <MX_SPI1_Init+0x3e>
  {
    _Error_Handler(__FILE__, __LINE__);
 800338e:	2145      	movs	r1, #69	; 0x45
 8003390:	4804      	ldr	r0, [pc, #16]	; (80033a4 <MX_SPI1_Init+0x48>)
  }

}
 8003392:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8003396:	f7ff b8cb 	b.w	8002530 <_Error_Handler>
 800339a:	bd08      	pop	{r3, pc}
 800339c:	20003b88 	.word	0x20003b88
 80033a0:	40013000 	.word	0x40013000
 80033a4:	0800908c 	.word	0x0800908c

080033a8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80033a8:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(spiHandle->Instance==SPI1)
 80033aa:	6802      	ldr	r2, [r0, #0]
 80033ac:	4b13      	ldr	r3, [pc, #76]	; (80033fc <HAL_SPI_MspInit+0x54>)
 80033ae:	429a      	cmp	r2, r3
{
 80033b0:	b086      	sub	sp, #24
  if(spiHandle->Instance==SPI1)
 80033b2:	d120      	bne.n	80033f6 <HAL_SPI_MspInit+0x4e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80033b4:	2400      	movs	r4, #0
 80033b6:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 80033ba:	9400      	str	r4, [sp, #0]
 80033bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033be:	4810      	ldr	r0, [pc, #64]	; (8003400 <HAL_SPI_MspInit+0x58>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 80033c0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80033c4:	645a      	str	r2, [r3, #68]	; 0x44
 80033c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033c8:	9403      	str	r4, [sp, #12]
    __HAL_RCC_SPI1_CLK_ENABLE();
 80033ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033ce:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80033d0:	2338      	movs	r3, #56	; 0x38
 80033d2:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033d4:	2302      	movs	r3, #2
 80033d6:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033d8:	2303      	movs	r3, #3
 80033da:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033dc:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80033de:	2305      	movs	r3, #5
 80033e0:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033e2:	f001 fb81 	bl	8004ae8 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80033e6:	2023      	movs	r0, #35	; 0x23
 80033e8:	4622      	mov	r2, r4
 80033ea:	4621      	mov	r1, r4
 80033ec:	f000 ffba 	bl	8004364 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80033f0:	2023      	movs	r0, #35	; 0x23
 80033f2:	f000 ffeb 	bl	80043cc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80033f6:	b006      	add	sp, #24
 80033f8:	bd10      	pop	{r4, pc}
 80033fa:	bf00      	nop
 80033fc:	40013000 	.word	0x40013000
 8003400:	40020400 	.word	0x40020400

08003404 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003404:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8003406:	2005      	movs	r0, #5
 8003408:	f000 ff9a 	bl	8004340 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800340c:	2200      	movs	r2, #0
 800340e:	4611      	mov	r1, r2
 8003410:	f06f 000b 	mvn.w	r0, #11
 8003414:	f000 ffa6 	bl	8004364 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8003418:	2200      	movs	r2, #0
 800341a:	4611      	mov	r1, r2
 800341c:	f06f 000a 	mvn.w	r0, #10
 8003420:	f000 ffa0 	bl	8004364 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8003424:	2200      	movs	r2, #0
 8003426:	4611      	mov	r1, r2
 8003428:	f06f 0009 	mvn.w	r0, #9
 800342c:	f000 ff9a 	bl	8004364 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8003430:	2200      	movs	r2, #0
 8003432:	4611      	mov	r1, r2
 8003434:	f06f 0004 	mvn.w	r0, #4
 8003438:	f000 ff94 	bl	8004364 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 800343c:	2200      	movs	r2, #0
 800343e:	4611      	mov	r1, r2
 8003440:	f06f 0003 	mvn.w	r0, #3
 8003444:	f000 ff8e 	bl	8004364 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8003448:	2200      	movs	r2, #0
 800344a:	4611      	mov	r1, r2
 800344c:	f06f 0001 	mvn.w	r0, #1
 8003450:	f000 ff88 	bl	8004364 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 1);
 8003454:	2201      	movs	r2, #1
 8003456:	2100      	movs	r1, #0
 8003458:	f04f 30ff 	mov.w	r0, #4294967295

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800345c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 1);
 8003460:	f000 bf80 	b.w	8004364 <HAL_NVIC_SetPriority>

08003464 <NMI_Handler>:
 8003464:	4770      	bx	lr

08003466 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8003466:	e7fe      	b.n	8003466 <HardFault_Handler>

08003468 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8003468:	e7fe      	b.n	8003468 <MemManage_Handler>

0800346a <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 800346a:	e7fe      	b.n	800346a <BusFault_Handler>

0800346c <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 800346c:	e7fe      	b.n	800346c <UsageFault_Handler>

0800346e <SVC_Handler>:
 800346e:	4770      	bx	lr

08003470 <DebugMon_Handler>:
 8003470:	4770      	bx	lr

08003472 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8003472:	4770      	bx	lr

08003474 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8003474:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003476:	f000 fe0d 	bl	8004094 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800347a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 800347e:	f000 bfd3 	b.w	8004428 <HAL_SYSTICK_IRQHandler>
	...

08003484 <SPI1_IRQHandler>:
void SPI1_IRQHandler(void)
{
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8003484:	4801      	ldr	r0, [pc, #4]	; (800348c <SPI1_IRQHandler+0x8>)
 8003486:	f002 b935 	b.w	80056f4 <HAL_SPI_IRQHandler>
 800348a:	bf00      	nop
 800348c:	20003b88 	.word	0x20003b88

08003490 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003490:	4801      	ldr	r0, [pc, #4]	; (8003498 <USART1_IRQHandler+0x8>)
 8003492:	f002 bc23 	b.w	8005cdc <HAL_UART_IRQHandler>
 8003496:	bf00      	nop
 8003498:	20003ca0 	.word	0x20003ca0

0800349c <DMA2_Stream2_IRQHandler>:
void DMA2_Stream2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800349c:	4801      	ldr	r0, [pc, #4]	; (80034a4 <DMA2_Stream2_IRQHandler+0x8>)
 800349e:	f001 b8ab 	b.w	80045f8 <HAL_DMA_IRQHandler>
 80034a2:	bf00      	nop
 80034a4:	20003be0 	.word	0x20003be0

080034a8 <DMA2_Stream7_IRQHandler>:
void DMA2_Stream7_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80034a8:	4801      	ldr	r0, [pc, #4]	; (80034b0 <DMA2_Stream7_IRQHandler+0x8>)
 80034aa:	f001 b8a5 	b.w	80045f8 <HAL_DMA_IRQHandler>
 80034ae:	bf00      	nop
 80034b0:	20003c40 	.word	0x20003c40

080034b4 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80034b4:	b508      	push	{r3, lr}

  huart1.Instance = USART1;
 80034b6:	480c      	ldr	r0, [pc, #48]	; (80034e8 <MX_USART1_UART_Init+0x34>)
  huart1.Init.BaudRate = 921600;
 80034b8:	4b0c      	ldr	r3, [pc, #48]	; (80034ec <MX_USART1_UART_Init+0x38>)
 80034ba:	f44f 2e61 	mov.w	lr, #921600	; 0xe1000
 80034be:	e880 4008 	stmia.w	r0, {r3, lr}
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 80034c2:	220c      	movs	r2, #12
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80034c4:	2300      	movs	r3, #0
 80034c6:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80034c8:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80034ca:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80034cc:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80034ce:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80034d0:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80034d2:	f002 faaf 	bl	8005a34 <HAL_UART_Init>
 80034d6:	b128      	cbz	r0, 80034e4 <MX_USART1_UART_Init+0x30>
  {
    _Error_Handler(__FILE__, __LINE__);
 80034d8:	2145      	movs	r1, #69	; 0x45
 80034da:	4805      	ldr	r0, [pc, #20]	; (80034f0 <MX_USART1_UART_Init+0x3c>)
  }

}
 80034dc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 80034e0:	f7ff b826 	b.w	8002530 <_Error_Handler>
 80034e4:	bd08      	pop	{r3, pc}
 80034e6:	bf00      	nop
 80034e8:	20003ca0 	.word	0x20003ca0
 80034ec:	40011000 	.word	0x40011000
 80034f0:	0800909f 	.word	0x0800909f

080034f4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80034f4:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==USART1)
 80034f6:	6802      	ldr	r2, [r0, #0]
 80034f8:	4b36      	ldr	r3, [pc, #216]	; (80035d4 <HAL_UART_MspInit+0xe0>)
 80034fa:	429a      	cmp	r2, r3
{
 80034fc:	b087      	sub	sp, #28
 80034fe:	4606      	mov	r6, r0
  if(uartHandle->Instance==USART1)
 8003500:	d165      	bne.n	80035ce <HAL_UART_MspInit+0xda>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003502:	2500      	movs	r5, #0
 8003504:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 8003508:	9500      	str	r5, [sp, #0]
 800350a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800350c:	4832      	ldr	r0, [pc, #200]	; (80035d8 <HAL_UART_MspInit+0xe4>)

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 800350e:	4c33      	ldr	r4, [pc, #204]	; (80035dc <HAL_UART_MspInit+0xe8>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8003510:	f042 0210 	orr.w	r2, r2, #16
 8003514:	645a      	str	r2, [r3, #68]	; 0x44
 8003516:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003518:	f003 0310 	and.w	r3, r3, #16
 800351c:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800351e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003522:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003524:	2302      	movs	r3, #2
 8003526:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003528:	2303      	movs	r3, #3
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800352a:	2701      	movs	r7, #1
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800352c:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800352e:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003530:	2307      	movs	r3, #7
 8003532:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003534:	9703      	str	r7, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003536:	f001 fad7 	bl	8004ae8 <HAL_GPIO_Init>
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800353a:	4b29      	ldr	r3, [pc, #164]	; (80035e0 <HAL_UART_MspInit+0xec>)
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800353c:	60a5      	str	r5, [r4, #8]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800353e:	f04f 6e00 	mov.w	lr, #134217728	; 0x8000000
 8003542:	e884 4008 	stmia.w	r4, {r3, lr}
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003546:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800354a:	6123      	str	r3, [r4, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800354c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003550:	61e3      	str	r3, [r4, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003552:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8003556:	6223      	str	r3, [r4, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003558:	2304      	movs	r3, #4
 800355a:	6263      	str	r3, [r4, #36]	; 0x24
    hdma_usart1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
    hdma_usart1_rx.Init.MemBurst = DMA_MBURST_INC8;
    hdma_usart1_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800355c:	4620      	mov	r0, r4
    hdma_usart1_rx.Init.MemBurst = DMA_MBURST_INC8;
 800355e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003562:	60e5      	str	r5, [r4, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003564:	6165      	str	r5, [r4, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003566:	61a5      	str	r5, [r4, #24]
    hdma_usart1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 8003568:	62a7      	str	r7, [r4, #40]	; 0x28
    hdma_usart1_rx.Init.MemBurst = DMA_MBURST_INC8;
 800356a:	62e3      	str	r3, [r4, #44]	; 0x2c
    hdma_usart1_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800356c:	6325      	str	r5, [r4, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800356e:	f000 ff75 	bl	800445c <HAL_DMA_Init>
 8003572:	b118      	cbz	r0, 800357c <HAL_UART_MspInit+0x88>
    {
      _Error_Handler(__FILE__, __LINE__);
 8003574:	2172      	movs	r1, #114	; 0x72
 8003576:	481b      	ldr	r0, [pc, #108]	; (80035e4 <HAL_UART_MspInit+0xf0>)
 8003578:	f7fe ffda 	bl	8002530 <_Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800357c:	6374      	str	r4, [r6, #52]	; 0x34
 800357e:	63a6      	str	r6, [r4, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8003580:	4c19      	ldr	r4, [pc, #100]	; (80035e8 <HAL_UART_MspInit+0xf4>)
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003582:	4b1a      	ldr	r3, [pc, #104]	; (80035ec <HAL_UART_MspInit+0xf8>)
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003584:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003588:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
 800358c:	2740      	movs	r7, #64	; 0x40
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800358e:	6122      	str	r2, [r4, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart1_tx.Init.Mode = DMA_CIRCULAR;
 8003590:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003594:	e884 00a8 	stmia.w	r4, {r3, r5, r7}
    hdma_usart1_tx.Init.Mode = DMA_CIRCULAR;
 8003598:	61e2      	str	r2, [r4, #28]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800359a:	2300      	movs	r3, #0
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800359c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80035a0:	4620      	mov	r0, r4
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80035a2:	60e3      	str	r3, [r4, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80035a4:	6163      	str	r3, [r4, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80035a6:	61a3      	str	r3, [r4, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80035a8:	6222      	str	r2, [r4, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80035aa:	6263      	str	r3, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80035ac:	f000 ff56 	bl	800445c <HAL_DMA_Init>
 80035b0:	b118      	cbz	r0, 80035ba <HAL_UART_MspInit+0xc6>
    {
      _Error_Handler(__FILE__, __LINE__);
 80035b2:	2184      	movs	r1, #132	; 0x84
 80035b4:	480b      	ldr	r0, [pc, #44]	; (80035e4 <HAL_UART_MspInit+0xf0>)
 80035b6:	f7fe ffbb 	bl	8002530 <_Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80035ba:	2200      	movs	r2, #0
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80035bc:	6334      	str	r4, [r6, #48]	; 0x30
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80035be:	2025      	movs	r0, #37	; 0x25
 80035c0:	4611      	mov	r1, r2
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80035c2:	63a6      	str	r6, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80035c4:	f000 fece 	bl	8004364 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80035c8:	2025      	movs	r0, #37	; 0x25
 80035ca:	f000 feff 	bl	80043cc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80035ce:	b007      	add	sp, #28
 80035d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80035d2:	bf00      	nop
 80035d4:	40011000 	.word	0x40011000
 80035d8:	40020000 	.word	0x40020000
 80035dc:	20003be0 	.word	0x20003be0
 80035e0:	40026440 	.word	0x40026440
 80035e4:	0800909f 	.word	0x0800909f
 80035e8:	20003c40 	.word	0x20003c40
 80035ec:	400264b8 	.word	0x400264b8

080035f0 <_ZNK8std_msgs5UInt89serializeEPh>:
    }

    virtual int serialize(unsigned char *outbuffer) const
    {
      int offset = 0;
      *(outbuffer + offset + 0) = (this->data >> (8 * 0)) & 0xFF;
 80035f0:	7903      	ldrb	r3, [r0, #4]
 80035f2:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->data);
      return offset;
    }
 80035f4:	2001      	movs	r0, #1
 80035f6:	4770      	bx	lr

080035f8 <_ZN8std_msgs5UInt811deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
    {
      int offset = 0;
      this->data =  ((uint8_t) (*(inbuffer + offset)));
 80035f8:	780b      	ldrb	r3, [r1, #0]
 80035fa:	7103      	strb	r3, [r0, #4]
      offset += sizeof(this->data);
     return offset;
    }
 80035fc:	2001      	movs	r0, #1
 80035fe:	4770      	bx	lr

08003600 <_ZN8std_msgs5UInt87getTypeEv>:

    const char * getType(){ return "std_msgs/UInt8"; };
 8003600:	4800      	ldr	r0, [pc, #0]	; (8003604 <_ZN8std_msgs5UInt87getTypeEv+0x4>)
 8003602:	4770      	bx	lr
 8003604:	0800915d 	.word	0x0800915d

08003608 <_ZN8std_msgs5UInt86getMD5Ev>:
    const char * getMD5(){ return "7c8164229e7d2c17eb95e9231617fdee"; };
 8003608:	4800      	ldr	r0, [pc, #0]	; (800360c <_ZN8std_msgs5UInt86getMD5Ev+0x4>)
 800360a:	4770      	bx	lr
 800360c:	0800913c 	.word	0x0800913c

08003610 <_ZN3ros11Subscriber2IN8std_msgs5UInt8E3IMUE15getEndpointTypeEv>:
      virtual int getEndpointType(){ return endpoint_; }
 8003610:	6a00      	ldr	r0, [r0, #32]
 8003612:	4770      	bx	lr

08003614 <_ZN3ros11Subscriber2IN8std_msgs5UInt8E3IMUE10getMsgTypeEv>:
      virtual const char * getMsgType(){ return this->msg.getType(); }
 8003614:	4800      	ldr	r0, [pc, #0]	; (8003618 <_ZN3ros11Subscriber2IN8std_msgs5UInt8E3IMUE10getMsgTypeEv+0x4>)
 8003616:	4770      	bx	lr
 8003618:	0800915d 	.word	0x0800915d

0800361c <_ZN3ros11Subscriber2IN8std_msgs5UInt8E3IMUE9getMsgMD5Ev>:
      virtual const char * getMsgMD5(){ return this->msg.getMD5(); }
 800361c:	4800      	ldr	r0, [pc, #0]	; (8003620 <_ZN3ros11Subscriber2IN8std_msgs5UInt8E3IMUE9getMsgMD5Ev+0x4>)
 800361e:	4770      	bx	lr
 8003620:	0800913c 	.word	0x0800913c

08003624 <_ZN3ros11Subscriber2IN8std_msgs5UInt8E3IMUE8callbackEPh>:
      virtual void callback(unsigned char* data){
 8003624:	b410      	push	{r4}
      { return (__p->*_M_f)(__x); }
 8003626:	69c2      	ldr	r2, [r0, #28]
      this->data =  ((uint8_t) (*(inbuffer + offset)));
 8003628:	780b      	ldrb	r3, [r1, #0]
        this->fun_obj_(obj_, msg);
 800362a:	6944      	ldr	r4, [r0, #20]
 800362c:	7403      	strb	r3, [r0, #16]
 800362e:	f012 0f01 	tst.w	r2, #1
 8003632:	ea4f 0262 	mov.w	r2, r2, asr #1
 8003636:	6983      	ldr	r3, [r0, #24]
 8003638:	f100 010c 	add.w	r1, r0, #12
 800363c:	bf1c      	itt	ne
 800363e:	58a0      	ldrne	r0, [r4, r2]
 8003640:	58c3      	ldrne	r3, [r0, r3]
 8003642:	18a0      	adds	r0, r4, r2
      }
 8003644:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003648:	4718      	bx	r3

0800364a <_ZN3IMU17imuConfigCallbackERKN8std_msgs5UInt8E>:
	}
}

void IMU::imuConfigCallback(const std_msgs::UInt8& config_msg)
{
	switch(config_msg.data)
 800364a:	790b      	ldrb	r3, [r1, #4]
 800364c:	2b01      	cmp	r3, #1
 800364e:	d011      	beq.n	8003674 <_ZN3IMU17imuConfigCallbackERKN8std_msgs5UInt8E+0x2a>
 8003650:	d302      	bcc.n	8003658 <_ZN3IMU17imuConfigCallbackERKN8std_msgs5UInt8E+0xe>
 8003652:	2b02      	cmp	r3, #2
 8003654:	d015      	beq.n	8003682 <_ZN3IMU17imuConfigCallbackERKN8std_msgs5UInt8E+0x38>
 8003656:	4770      	bx	lr
    }

    // zero the vector
    void zero()
    {
        x = y = z = 0;
 8003658:	2300      	movs	r3, #0
 800365a:	f8c0 30d8 	str.w	r3, [r0, #216]	; 0xd8
 800365e:	f8c0 30d4 	str.w	r3, [r0, #212]	; 0xd4
 8003662:	f8c0 30d0 	str.w	r3, [r0, #208]	; 0xd0
 8003666:	f8c0 30f0 	str.w	r3, [r0, #240]	; 0xf0
 800366a:	f8c0 30ec 	str.w	r3, [r0, #236]	; 0xec
 800366e:	f8c0 30e8 	str.w	r3, [r0, #232]	; 0xe8
 8003672:	4770      	bx	lr
		acc_offset_.zero();
		mag_offset_.zero();
		//writeCalibData(); //no need?
		break;
	case MPU_ACC_GYRO_CALIB_CMD:
		calibrate_gyro_ = CALIBRATING_STEP;
 8003674:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003678:	f8c0 30c8 	str.w	r3, [r0, #200]	; 0xc8
		calibrate_acc_ = CALIBRATING_STEP;
 800367c:	f8c0 30c4 	str.w	r3, [r0, #196]	; 0xc4
		break;
 8003680:	4770      	bx	lr
	case MPU_MAG_CALIB_CMD:
		calibrate_mag_ = CALIBRATING_MAG_STEP;
 8003682:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8003686:	f8c0 30cc 	str.w	r3, [r0, #204]	; 0xcc
 800368a:	4770      	bx	lr

0800368c <_ZN3IMU13getCalibratedEv>:
	if(!calibrate_acc_ && !calibrate_gyro_ && !calibrate_mag_) return true;
 800368c:	f8d0 30c4 	ldr.w	r3, [r0, #196]	; 0xc4
 8003690:	b943      	cbnz	r3, 80036a4 <_ZN3IMU13getCalibratedEv+0x18>
 8003692:	f8d0 20c8 	ldr.w	r2, [r0, #200]	; 0xc8
 8003696:	b92a      	cbnz	r2, 80036a4 <_ZN3IMU13getCalibratedEv+0x18>
 8003698:	f8d0 00cc 	ldr.w	r0, [r0, #204]	; 0xcc
 800369c:	fab0 f080 	clz	r0, r0
 80036a0:	0940      	lsrs	r0, r0, #5
 80036a2:	4770      	bx	lr
	else return false;
 80036a4:	2000      	movs	r0, #0
 80036a6:	4770      	bx	lr

080036a8 <_ZN3IMU13readCalibDataEv>:
{
 80036a8:	b510      	push	{r4, lr}
 80036aa:	4604      	mov	r4, r0
	status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80036ac:	f24c 3050 	movw	r0, #50000	; 0xc350
 80036b0:	f001 f8f6 	bl	80048a0 <FLASH_WaitForLastOperation>
	if(status == HAL_OK)
 80036b4:	b9e0      	cbnz	r0, 80036f0 <_ZN3IMU13readCalibDataEv+0x48>
			acc_offset_[i] = (*(__IO float*)(CALIB_DATA_ADDRESS + CALIB_ACC_ADDRESS + 4 * i));
 80036b6:	4b0f      	ldr	r3, [pc, #60]	; (80036f4 <_ZN3IMU13readCalibDataEv+0x4c>)
		FLASH->CR &= (~FLASH_CR_PG);
 80036b8:	4a0f      	ldr	r2, [pc, #60]	; (80036f8 <_ZN3IMU13readCalibDataEv+0x50>)
			acc_offset_[i] = (*(__IO float*)(CALIB_DATA_ADDRESS + CALIB_ACC_ADDRESS + 4 * i));
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
			mag_offset_[i] = (*(__IO float*)(CALIB_DATA_ADDRESS + CALIB_MAG_ADDRESS + 4 * i));
 80036c0:	4b0e      	ldr	r3, [pc, #56]	; (80036fc <_ZN3IMU13readCalibDataEv+0x54>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
			acc_offset_[i] = (*(__IO float*)(CALIB_DATA_ADDRESS + CALIB_ACC_ADDRESS + 4 * i));
 80036c8:	4b0d      	ldr	r3, [pc, #52]	; (8003700 <_ZN3IMU13readCalibDataEv+0x58>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
			mag_offset_[i] = (*(__IO float*)(CALIB_DATA_ADDRESS + CALIB_MAG_ADDRESS + 4 * i));
 80036d0:	4b0c      	ldr	r3, [pc, #48]	; (8003704 <_ZN3IMU13readCalibDataEv+0x5c>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
			acc_offset_[i] = (*(__IO float*)(CALIB_DATA_ADDRESS + CALIB_ACC_ADDRESS + 4 * i));
 80036d8:	4b0b      	ldr	r3, [pc, #44]	; (8003708 <_ZN3IMU13readCalibDataEv+0x60>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
			mag_offset_[i] = (*(__IO float*)(CALIB_DATA_ADDRESS + CALIB_MAG_ADDRESS + 4 * i));
 80036e0:	4b0a      	ldr	r3, [pc, #40]	; (800370c <_ZN3IMU13readCalibDataEv+0x64>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0
		FLASH->CR &= (~FLASH_CR_PG);
 80036e8:	6913      	ldr	r3, [r2, #16]
 80036ea:	f023 0301 	bic.w	r3, r3, #1
 80036ee:	6113      	str	r3, [r2, #16]
 80036f0:	bd10      	pop	{r4, pc}
 80036f2:	bf00      	nop
 80036f4:	08010000 	.word	0x08010000
 80036f8:	40023c00 	.word	0x40023c00
 80036fc:	0801000c 	.word	0x0801000c
 8003700:	08010004 	.word	0x08010004
 8003704:	08010010 	.word	0x08010010
 8003708:	08010008 	.word	0x08010008
 800370c:	08010014 	.word	0x08010014

08003710 <_ZN3IMU14writeCalibDataEv>:
{
 8003710:	b570      	push	{r4, r5, r6, lr}
 8003712:	b086      	sub	sp, #24
 8003714:	4604      	mov	r4, r0
	r = HAL_FLASH_Unlock();
 8003716:	f001 f8a7 	bl	8004868 <HAL_FLASH_Unlock>
	if( r != HAL_OK ) return;
 800371a:	bb18      	cbnz	r0, 8003764 <_ZN3IMU14writeCalibDataEv+0x54>
	EraseInitStruct.Sector = CALIB_DATA_SECTOR ;
 800371c:	2304      	movs	r3, #4
 800371e:	9303      	str	r3, [sp, #12]
	EraseInitStruct.NbSectors = 1;
 8003720:	2301      	movs	r3, #1
	uint32_t SectorError = 0;
 8003722:	9000      	str	r0, [sp, #0]
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 8003724:	9001      	str	r0, [sp, #4]
	EraseInitStruct.NbSectors = 1;
 8003726:	9304      	str	r3, [sp, #16]
	r = HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError);
 8003728:	4669      	mov	r1, sp
	EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 800372a:	2302      	movs	r3, #2
	r = HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError);
 800372c:	a801      	add	r0, sp, #4
	EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 800372e:	9305      	str	r3, [sp, #20]
	r = HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError);
 8003730:	f001 f98c 	bl	8004a4c <HAL_FLASHEx_Erase>
	if ( r != HAL_OK )
 8003734:	b9b0      	cbnz	r0, 8003764 <_ZN3IMU14writeCalibDataEv+0x54>
 8003736:	4d0c      	ldr	r5, [pc, #48]	; (8003768 <_ZN3IMU14writeCalibDataEv+0x58>)
	for(int i = 0; i < 3; i++)
 8003738:	4e0c      	ldr	r6, [pc, #48]	; (800376c <_ZN3IMU14writeCalibDataEv+0x5c>)
 800373a:	34d0      	adds	r4, #208	; 0xd0
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, CALIB_DATA_ADDRESS + CALIB_ACC_ADDRESS + 4 * i, (*(__IO uint64_t*)(&acc_offset_[i])));
 800373c:	e9d4 2300 	ldrd	r2, r3, [r4]
 8003740:	4629      	mov	r1, r5
 8003742:	2002      	movs	r0, #2
 8003744:	f001 f8d6 	bl	80048f4 <HAL_FLASH_Program>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, CALIB_DATA_ADDRESS + CALIB_MAG_ADDRESS + 4 * i, (*(__IO uint64_t*)(&mag_offset_[i])));
 8003748:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 800374c:	f105 010c 	add.w	r1, r5, #12
 8003750:	2002      	movs	r0, #2
 8003752:	3504      	adds	r5, #4
 8003754:	f001 f8ce 	bl	80048f4 <HAL_FLASH_Program>
	for(int i = 0; i < 3; i++)
 8003758:	42b5      	cmp	r5, r6
 800375a:	f104 0404 	add.w	r4, r4, #4
 800375e:	d1ed      	bne.n	800373c <_ZN3IMU14writeCalibDataEv+0x2c>
	r = HAL_FLASH_Lock();
 8003760:	f001 f894 	bl	800488c <HAL_FLASH_Lock>
}
 8003764:	b006      	add	sp, #24
 8003766:	bd70      	pop	{r4, r5, r6, pc}
 8003768:	08010000 	.word	0x08010000
 800376c:	0801000c 	.word	0x0801000c

08003770 <_ZN3IMU8mpuWriteEhh>:
{
 8003770:	b537      	push	{r0, r1, r2, r4, r5, lr}
	IMU_SPI_CS_L;
 8003772:	4c11      	ldr	r4, [pc, #68]	; (80037b8 <_ZN3IMU8mpuWriteEhh+0x48>)
{
 8003774:	f88d 1007 	strb.w	r1, [sp, #7]
 8003778:	4605      	mov	r5, r0
 800377a:	f88d 2006 	strb.w	r2, [sp, #6]
	IMU_SPI_CS_L;
 800377e:	4620      	mov	r0, r4
 8003780:	2200      	movs	r2, #0
 8003782:	2140      	movs	r1, #64	; 0x40
 8003784:	f001 fa6a 	bl	8004c5c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi_, &address, 1, 1000);
 8003788:	f10d 0107 	add.w	r1, sp, #7
 800378c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003790:	2201      	movs	r2, #1
 8003792:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8003794:	f001 fd61 	bl	800525a <HAL_SPI_Transmit>
	HAL_SPI_Transmit(hspi_, &value, 1, 1000);
 8003798:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800379c:	f10d 0106 	add.w	r1, sp, #6
 80037a0:	2201      	movs	r2, #1
 80037a2:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80037a4:	f001 fd59 	bl	800525a <HAL_SPI_Transmit>
	IMU_SPI_CS_H;
 80037a8:	2201      	movs	r2, #1
 80037aa:	2140      	movs	r1, #64	; 0x40
 80037ac:	4620      	mov	r0, r4
 80037ae:	f001 fa55 	bl	8004c5c <HAL_GPIO_WritePin>
}
 80037b2:	b003      	add	sp, #12
 80037b4:	bd30      	pop	{r4, r5, pc}
 80037b6:	bf00      	nop
 80037b8:	40020400 	.word	0x40020400

080037bc <_ZN3IMU8gyroInitEv>:
{
 80037bc:	b510      	push	{r4, lr}
 80037be:	4604      	mov	r4, r0
	HAL_Delay(100);
 80037c0:	2064      	movs	r0, #100	; 0x64
 80037c2:	f000 fc75 	bl	80040b0 <HAL_Delay>
	mpuWrite( 0x6B, 0x80);             //PWR_MGMT_1    -- DEVICE_RESET 1
 80037c6:	2280      	movs	r2, #128	; 0x80
 80037c8:	216b      	movs	r1, #107	; 0x6b
 80037ca:	4620      	mov	r0, r4
 80037cc:	f7ff ffd0 	bl	8003770 <_ZN3IMU8mpuWriteEhh>
	HAL_Delay(10);
 80037d0:	200a      	movs	r0, #10
 80037d2:	f000 fc6d 	bl	80040b0 <HAL_Delay>
	HAL_Delay(1); //very important!, some duration for process the setting
 80037d6:	2001      	movs	r0, #1
 80037d8:	f000 fc6a 	bl	80040b0 <HAL_Delay>
	mpuWrite( 0x6A, 0x10);             //disable i2c communication
 80037dc:	2210      	movs	r2, #16
 80037de:	216a      	movs	r1, #106	; 0x6a
 80037e0:	4620      	mov	r0, r4
 80037e2:	f7ff ffc5 	bl	8003770 <_ZN3IMU8mpuWriteEhh>
	HAL_Delay(1); //very importnat! between gyro and acc
 80037e6:	2001      	movs	r0, #1
 80037e8:	f000 fc62 	bl	80040b0 <HAL_Delay>
	mpuWrite( 0x1A, GYRO_DLPF_CFG); //CONFIG        -- EXT_SYNC_SET 0 (disable input pin for data sync) ; default DLPF_CFG = 0 => ACC bandwidth = 260Hz  GYRO bandwidth = 256Hz)
 80037ec:	2201      	movs	r2, #1
 80037ee:	211a      	movs	r1, #26
 80037f0:	4620      	mov	r0, r4
 80037f2:	f7ff ffbd 	bl	8003770 <_ZN3IMU8mpuWriteEhh>
	HAL_Delay(1); //very importnat! between gyro and acc
 80037f6:	2001      	movs	r0, #1
 80037f8:	f000 fc5a 	bl	80040b0 <HAL_Delay>
	mpuWrite( 0x1B, 0x18);             //GYRO_CONFIG   -- FS_SEL = 3: Full scale set to 2000 deg/sec
 80037fc:	2218      	movs	r2, #24
 80037fe:	211b      	movs	r1, #27
 8003800:	4620      	mov	r0, r4
 8003802:	f7ff ffb5 	bl	8003770 <_ZN3IMU8mpuWriteEhh>
	HAL_Delay(10); //very importnat! between gyro and acc
 8003806:	200a      	movs	r0, #10
 8003808:	f000 fc52 	bl	80040b0 <HAL_Delay>
	calibrate_gyro_ = 10;//CALIBRATING_STEP;
 800380c:	230a      	movs	r3, #10
 800380e:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
 8003812:	2300      	movs	r3, #0
 8003814:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
 8003818:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
 800381c:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
 8003820:	bd10      	pop	{r4, pc}

08003822 <_ZN3IMU7accInitEv>:
void IMU::accInit (void) {
 8003822:	b510      	push	{r4, lr}
	mpuWrite( 0x1C, 0x10); //ACCEL_CONFIG  -- AFS_SEL=2 (Full Scale = +/-8G)  ; ACCELL_HPF=0   //note something is wrong in the spec.
 8003824:	2210      	movs	r2, #16
 8003826:	211c      	movs	r1, #28
void IMU::accInit (void) {
 8003828:	4604      	mov	r4, r0
	mpuWrite( 0x1C, 0x10); //ACCEL_CONFIG  -- AFS_SEL=2 (Full Scale = +/-8G)  ; ACCELL_HPF=0   //note something is wrong in the spec.
 800382a:	f7ff ffa1 	bl	8003770 <_ZN3IMU8mpuWriteEhh>
	HAL_Delay(1);
 800382e:	2001      	movs	r0, #1
 8003830:	f000 fc3e 	bl	80040b0 <HAL_Delay>
	mpuWrite( 0x1D, ACC_DLPF_CFG);
 8003834:	2203      	movs	r2, #3
 8003836:	211d      	movs	r1, #29
 8003838:	4620      	mov	r0, r4
 800383a:	f7ff ff99 	bl	8003770 <_ZN3IMU8mpuWriteEhh>
	HAL_Delay(10);
 800383e:	200a      	movs	r0, #10
 8003840:	f000 fc36 	bl	80040b0 <HAL_Delay>
	calibrate_acc_ = 0;
 8003844:	2300      	movs	r3, #0
 8003846:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
 800384a:	2300      	movs	r3, #0
 800384c:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
 8003850:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
 8003854:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
 8003858:	bd10      	pop	{r4, pc}

0800385a <_ZN3IMU7magInitEv>:
{
 800385a:	b510      	push	{r4, lr}
 800385c:	4604      	mov	r4, r0
	HAL_Delay(10);
 800385e:	200a      	movs	r0, #10
 8003860:	f000 fc26 	bl	80040b0 <HAL_Delay>
	mpuWrite( 0x6A, 0x20); //USER_CTRL -- DMP_EN=0 ; FIFO_EN=0 ; I2C_MST_EN=1 (I2C master mode) ; I2C_IF_DIS=0 ; FIFO_RESET=0 ; I2C_MST_RESET=0 ; SIG_COND_RESET=0
 8003864:	2220      	movs	r2, #32
 8003866:	216a      	movs	r1, #106	; 0x6a
 8003868:	4620      	mov	r0, r4
 800386a:	f7ff ff81 	bl	8003770 <_ZN3IMU8mpuWriteEhh>
	HAL_Delay(10);
 800386e:	200a      	movs	r0, #10
 8003870:	f000 fc1e 	bl	80040b0 <HAL_Delay>
	mpuWrite( 0x37, 0x00); //INT_PIN_CFG -- INT_LEVEL=0 ; INT_OPEN=0 ; LATCH_INT_EN=0 ; INT_RD_CLEAR=0 ; FSYNC_INT_LEVEL=0 ; FSYNC_INT_EN=0 ; I2C_BYPASS_EN=0 ; CLKOUT_EN=0
 8003874:	2200      	movs	r2, #0
 8003876:	2137      	movs	r1, #55	; 0x37
 8003878:	4620      	mov	r0, r4
 800387a:	f7ff ff79 	bl	8003770 <_ZN3IMU8mpuWriteEhh>
	HAL_Delay(1);
 800387e:	2001      	movs	r0, #1
 8003880:	f000 fc16 	bl	80040b0 <HAL_Delay>
	mpuWrite( 0x24, 0x0D); //I2C_MST_CTRL -- MULT_MST_EN=0 ; WAIT_FOR_ES=0 ; SLV_3_FIFO_EN=0 ; I2C_MST_P_NSR=0 ; I2C_MST_CLK=13 (I2C slave speed bus = 400kHz)
 8003884:	220d      	movs	r2, #13
 8003886:	2124      	movs	r1, #36	; 0x24
 8003888:	4620      	mov	r0, r4
 800388a:	f7ff ff71 	bl	8003770 <_ZN3IMU8mpuWriteEhh>
	HAL_Delay(1);
 800388e:	2001      	movs	r0, #1
 8003890:	f000 fc0e 	bl	80040b0 <HAL_Delay>
	mpuWrite( 0x25, MAG_ADDRESS);
 8003894:	220c      	movs	r2, #12
 8003896:	2125      	movs	r1, #37	; 0x25
 8003898:	4620      	mov	r0, r4
 800389a:	f7ff ff69 	bl	8003770 <_ZN3IMU8mpuWriteEhh>
	HAL_Delay(1);
 800389e:	2001      	movs	r0, #1
 80038a0:	f000 fc06 	bl	80040b0 <HAL_Delay>
	mpuWrite( 0x26, 0x0B);
 80038a4:	220b      	movs	r2, #11
 80038a6:	2126      	movs	r1, #38	; 0x26
 80038a8:	4620      	mov	r0, r4
 80038aa:	f7ff ff61 	bl	8003770 <_ZN3IMU8mpuWriteEhh>
	HAL_Delay(1);
 80038ae:	2001      	movs	r0, #1
 80038b0:	f000 fbfe 	bl	80040b0 <HAL_Delay>
	mpuWrite( 0x63, 0x01);
 80038b4:	2201      	movs	r2, #1
 80038b6:	2163      	movs	r1, #99	; 0x63
 80038b8:	4620      	mov	r0, r4
 80038ba:	f7ff ff59 	bl	8003770 <_ZN3IMU8mpuWriteEhh>
	HAL_Delay(1);
 80038be:	2001      	movs	r0, #1
 80038c0:	f000 fbf6 	bl	80040b0 <HAL_Delay>
	mpuWrite( 0x27, 0x81);
 80038c4:	2281      	movs	r2, #129	; 0x81
 80038c6:	2127      	movs	r1, #39	; 0x27
 80038c8:	4620      	mov	r0, r4
 80038ca:	f7ff ff51 	bl	8003770 <_ZN3IMU8mpuWriteEhh>
	HAL_Delay(1);
 80038ce:	2001      	movs	r0, #1
 80038d0:	f000 fbee 	bl	80040b0 <HAL_Delay>
	mpuWrite( 0x26, 0x0A);
 80038d4:	220a      	movs	r2, #10
 80038d6:	2126      	movs	r1, #38	; 0x26
 80038d8:	4620      	mov	r0, r4
 80038da:	f7ff ff49 	bl	8003770 <_ZN3IMU8mpuWriteEhh>
	HAL_Delay(1);
 80038de:	2001      	movs	r0, #1
 80038e0:	f000 fbe6 	bl	80040b0 <HAL_Delay>
	mpuWrite( 0x63, 0x16);
 80038e4:	2216      	movs	r2, #22
 80038e6:	2163      	movs	r1, #99	; 0x63
 80038e8:	4620      	mov	r0, r4
 80038ea:	f7ff ff41 	bl	8003770 <_ZN3IMU8mpuWriteEhh>
	HAL_Delay(1);
 80038ee:	2001      	movs	r0, #1
 80038f0:	f000 fbde 	bl	80040b0 <HAL_Delay>
	mpuWrite( 0x27, 0x81);
 80038f4:	2281      	movs	r2, #129	; 0x81
 80038f6:	2127      	movs	r1, #39	; 0x27
 80038f8:	4620      	mov	r0, r4
 80038fa:	f7ff ff39 	bl	8003770 <_ZN3IMU8mpuWriteEhh>
	HAL_Delay(1);
 80038fe:	2001      	movs	r0, #1
 8003900:	f000 fbd6 	bl	80040b0 <HAL_Delay>
	mpuWrite( 0x25, 0x80|MAG_ADDRESS);//I2C_SLV0_ADDR -- I2C_SLV4_RW=1 (read operation) ; I2C_SLV4_ADDR=MAG_ADDRESS
 8003904:	228c      	movs	r2, #140	; 0x8c
 8003906:	2125      	movs	r1, #37	; 0x25
 8003908:	4620      	mov	r0, r4
 800390a:	f7ff ff31 	bl	8003770 <_ZN3IMU8mpuWriteEhh>
	HAL_Delay(1);
 800390e:	2001      	movs	r0, #1
 8003910:	f000 fbce 	bl	80040b0 <HAL_Delay>
	mpuWrite( 0x26, MAG_DATA_REGISTER);//I2C_SLV0_REG -- 6 data bytes of MAG are stored in 6 registers. First register address is MAG_DATA_REGISTER
 8003914:	2203      	movs	r2, #3
 8003916:	2126      	movs	r1, #38	; 0x26
 8003918:	4620      	mov	r0, r4
 800391a:	f7ff ff29 	bl	8003770 <_ZN3IMU8mpuWriteEhh>
	HAL_Delay(1);
 800391e:	2001      	movs	r0, #1
 8003920:	f000 fbc6 	bl	80040b0 <HAL_Delay>
	mpuWrite( 0x27, 0x87);
 8003924:	2287      	movs	r2, #135	; 0x87
 8003926:	2127      	movs	r1, #39	; 0x27
 8003928:	4620      	mov	r0, r4
 800392a:	f7ff ff21 	bl	8003770 <_ZN3IMU8mpuWriteEhh>
	HAL_Delay(1);
 800392e:	2001      	movs	r0, #1
 8003930:	f000 fbbe 	bl	80040b0 <HAL_Delay>
	calibrate_mag_ = 0;
 8003934:	2300      	movs	r3, #0
 8003936:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
 800393a:	bd10      	pop	{r4, pc}

0800393c <_ZN3IMU4initEP19__SPI_HandleTypeDefPN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EEE>:
{
 800393c:	b570      	push	{r4, r5, r6, lr}
 800393e:	2300      	movs	r3, #0
	reset_calib_flag_  = 0;
 8003940:	2500      	movs	r5, #0
{
 8003942:	4604      	mov	r4, r0
 8003944:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
 8003948:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
 800394c:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
 8003950:	f8c0 309c 	str.w	r3, [r0, #156]	; 0x9c
 8003954:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98
 8003958:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
 800395c:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
 8003960:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
 8003964:	f8c0 30a0 	str.w	r3, [r0, #160]	; 0xa0
	nh_ = nh;
 8003968:	6342      	str	r2, [r0, #52]	; 0x34
	reset_calib_flag_  = 0;
 800396a:	f880 503e 	strb.w	r5, [r0, #62]	; 0x3e
	imu_config_sub_ = new ros::Subscriber2<std_msgs::UInt8, IMU> ("/imu_config_cmd", &IMU::imuConfigCallback, this );
 800396e:	2024      	movs	r0, #36	; 0x24
{
 8003970:	460e      	mov	r6, r1
	imu_config_sub_ = new ros::Subscriber2<std_msgs::UInt8, IMU> ("/imu_config_cmd", &IMU::imuConfigCallback, this );
 8003972:	f002 fe83 	bl	800667c <_Znwj>
        obj_(obj), fun_obj_(cb), endpoint_(endpoint)
 8003976:	4b1f      	ldr	r3, [pc, #124]	; (80039f4 <_ZN3IMU4initEP19__SPI_HandleTypeDefPN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EEE+0xb8>)
 8003978:	6003      	str	r3, [r0, #0]
      data(0)
 800397a:	4b1f      	ldr	r3, [pc, #124]	; (80039f8 <_ZN3IMU4initEP19__SPI_HandleTypeDefPN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EEE+0xbc>)
 800397c:	60c3      	str	r3, [r0, #12]
      : _M_f(__pf) { }
 800397e:	4b1f      	ldr	r3, [pc, #124]	; (80039fc <_ZN3IMU4initEP19__SPI_HandleTypeDefPN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EEE+0xc0>)
 8003980:	6183      	str	r3, [r0, #24]
	nh_->subscribe<std_msgs::UInt8, IMU>(*imu_config_sub_);
 8003982:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8003984:	7405      	strb	r5, [r0, #16]
 8003986:	2301      	movs	r3, #1
 8003988:	6203      	str	r3, [r0, #32]
        topic_ = topic_name;
 800398a:	4b1d      	ldr	r3, [pc, #116]	; (8003a00 <_ZN3IMU4initEP19__SPI_HandleTypeDefPN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EEE+0xc4>)
 800398c:	6083      	str	r3, [r0, #8]
        obj_(obj), fun_obj_(cb), endpoint_(endpoint)
 800398e:	6144      	str	r4, [r0, #20]
 8003990:	61c5      	str	r5, [r0, #28]
	imu_config_sub_ = new ros::Subscriber2<std_msgs::UInt8, IMU> ("/imu_config_cmd", &IMU::imuConfigCallback, this );
 8003992:	63a0      	str	r0, [r4, #56]	; 0x38
 8003994:	f502 711b 	add.w	r1, r2, #620	; 0x26c
      for(int i = 0; i < MAX_SUBSCRIBERS; i++){
 8003998:	462b      	mov	r3, r5
        if(subscribers[i] == 0){ // empty slot
 800399a:	f851 5b04 	ldr.w	r5, [r1], #4
 800399e:	bb2d      	cbnz	r5, 80039ec <_ZN3IMU4initEP19__SPI_HandleTypeDefPN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EEE+0xb0>
          subscribers[i] = (Subscriber_*) &s;
 80039a0:	eb02 0283 	add.w	r2, r2, r3, lsl #2
          s.id_ = i+100;
 80039a4:	3364      	adds	r3, #100	; 0x64
          subscribers[i] = (Subscriber_*) &s;
 80039a6:	f8c2 026c 	str.w	r0, [r2, #620]	; 0x26c
          s.id_ = i+100;
 80039aa:	6043      	str	r3, [r0, #4]
	ahb_suspend_flag_ = false;
 80039ac:	2300      	movs	r3, #0
	mag_filtering_flag_ = true;
 80039ae:	2201      	movs	r2, #1
	ahb_suspend_flag_ = false;
 80039b0:	f884 3111 	strb.w	r3, [r4, #273]	; 0x111
	mag_filtering_flag_ = true;
 80039b4:	f884 210c 	strb.w	r2, [r4, #268]	; 0x10c
	mag_outlier_counter_ = 0;
 80039b8:	f8a4 310e 	strh.w	r3, [r4, #270]	; 0x10e
	readCalibData();
 80039bc:	4620      	mov	r0, r4
	hspi_ = hspi;
 80039be:	6326      	str	r6, [r4, #48]	; 0x30
	readCalibData();
 80039c0:	f7ff fe72 	bl	80036a8 <_ZN3IMU13readCalibDataEv>
	gyroInit();
 80039c4:	4620      	mov	r0, r4
 80039c6:	f7ff fef9 	bl	80037bc <_ZN3IMU8gyroInitEv>
	accInit();
 80039ca:	4620      	mov	r0, r4
 80039cc:	f7ff ff29 	bl	8003822 <_ZN3IMU7accInitEv>
	magInit();
 80039d0:	4620      	mov	r0, r4
 80039d2:	f7ff ff42 	bl	800385a <_ZN3IMU7magInitEv>
	hspi_->Instance->CR1 &= (uint32_t)(~SPI_BAUDRATEPRESCALER_256); //reset
 80039d6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 80039e0:	601a      	str	r2, [r3, #0]
	hspi_->Instance->CR1 |= (uint32_t)(SPI_BAUDRATEPRESCALER_8); //8 = 13.5Mhz
 80039e2:	681a      	ldr	r2, [r3, #0]
 80039e4:	f042 0210 	orr.w	r2, r2, #16
 80039e8:	601a      	str	r2, [r3, #0]
 80039ea:	bd70      	pop	{r4, r5, r6, pc}
      for(int i = 0; i < MAX_SUBSCRIBERS; i++){
 80039ec:	3301      	adds	r3, #1
 80039ee:	2b14      	cmp	r3, #20
 80039f0:	d1d3      	bne.n	800399a <_ZN3IMU4initEP19__SPI_HandleTypeDefPN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EEE+0x5e>
 80039f2:	e7db      	b.n	80039ac <_ZN3IMU4initEP19__SPI_HandleTypeDefPN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EEE+0x70>
 80039f4:	0800912c 	.word	0x0800912c
 80039f8:	08009114 	.word	0x08009114
 80039fc:	0800364b 	.word	0x0800364b
 8003a00:	0800916c 	.word	0x0800916c

08003a04 <_ZN3IMU4readEv>:
{
 8003a04:	b570      	push	{r4, r5, r6, lr}
 8003a06:	b088      	sub	sp, #32
	t_data[0] = 0x43 | 0x80;
 8003a08:	ad08      	add	r5, sp, #32
 8003a0a:	23c3      	movs	r3, #195	; 0xc3
{
 8003a0c:	4604      	mov	r4, r0
	t_data[0] = 0x43 | 0x80;
 8003a0e:	f805 3d1c 	strb.w	r3, [r5, #-28]!
	IMU_SPI_CS_L;
 8003a12:	2200      	movs	r2, #0
 8003a14:	2140      	movs	r1, #64	; 0x40
 8003a16:	4890      	ldr	r0, [pc, #576]	; (8003c58 <_ZN3IMU4readEv+0x254>)
	if(i == MAG_PRESCALER)
 8003a18:	4e90      	ldr	r6, [pc, #576]	; (8003c5c <_ZN3IMU4readEv+0x258>)
	IMU_SPI_CS_L;
 8003a1a:	f001 f91f 	bl	8004c5c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi_, t_data, 1, 1000);
 8003a1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003a22:	2201      	movs	r2, #1
 8003a24:	4629      	mov	r1, r5
 8003a26:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8003a28:	f001 fc17 	bl	800525a <HAL_SPI_Transmit>
	HAL_SPI_Receive(hspi_, adc_gyro, 6, 1000);
 8003a2c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003a30:	2206      	movs	r2, #6
 8003a32:	a902      	add	r1, sp, #8
 8003a34:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8003a36:	f001 fdbc 	bl	80055b2 <HAL_SPI_Receive>
	IMU_SPI_CS_H;
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	2140      	movs	r1, #64	; 0x40
 8003a3e:	4886      	ldr	r0, [pc, #536]	; (8003c58 <_ZN3IMU4readEv+0x254>)
 8003a40:	f001 f90c 	bl	8004c5c <HAL_GPIO_WritePin>
	raw_gyro_adc_[0] = (int16_t)(adc_gyro[0] << 8 | adc_gyro[1]) * 2000.0f / 32767.0f * M_PI / 180.0f  ;
 8003a44:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8003a48:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8003a4c:	ed9f 5a84 	vldr	s10, [pc, #528]	; 8003c60 <_ZN3IMU4readEv+0x25c>
 8003a50:	eddf 5a84 	vldr	s11, [pc, #528]	; 8003c64 <_ZN3IMU4readEv+0x260>
 8003a54:	ed9f 6a84 	vldr	s12, [pc, #528]	; 8003c68 <_ZN3IMU4readEv+0x264>
 8003a58:	eddf 6a84 	vldr	s13, [pc, #528]	; 8003c6c <_ZN3IMU4readEv+0x268>
	IMU_SPI_CS_L;
 8003a5c:	487e      	ldr	r0, [pc, #504]	; (8003c58 <_ZN3IMU4readEv+0x254>)
	raw_gyro_adc_[0] = (int16_t)(adc_gyro[0] << 8 | adc_gyro[1]) * 2000.0f / 32767.0f * M_PI / 180.0f  ;
 8003a5e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003a62:	b21b      	sxth	r3, r3
 8003a64:	ee07 3a10 	vmov	s14, r3
 8003a68:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	raw_gyro_adc_[1] = (int16_t)(adc_gyro[2] << 8 | adc_gyro[3]) * 2000.0f / 32767.0f * M_PI / 180.0f  ;
 8003a6c:	f89d 200a 	ldrb.w	r2, [sp, #10]
 8003a70:	f89d 300b 	ldrb.w	r3, [sp, #11]
	raw_gyro_adc_[0] = (int16_t)(adc_gyro[0] << 8 | adc_gyro[1]) * 2000.0f / 32767.0f * M_PI / 180.0f  ;
 8003a74:	ee27 7a05 	vmul.f32	s14, s14, s10
	raw_gyro_adc_[1] = (int16_t)(adc_gyro[2] << 8 | adc_gyro[3]) * 2000.0f / 32767.0f * M_PI / 180.0f  ;
 8003a78:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	raw_gyro_adc_[0] = (int16_t)(adc_gyro[0] << 8 | adc_gyro[1]) * 2000.0f / 32767.0f * M_PI / 180.0f  ;
 8003a7c:	eec7 7a25 	vdiv.f32	s15, s14, s11
	raw_gyro_adc_[1] = (int16_t)(adc_gyro[2] << 8 | adc_gyro[3]) * 2000.0f / 32767.0f * M_PI / 180.0f  ;
 8003a80:	b21b      	sxth	r3, r3
	raw_gyro_adc_[2] = (int16_t)(adc_gyro[4] << 8 | adc_gyro[5]) * 2000.0f / 32767.0f * M_PI / 180.0f  ;
 8003a82:	f89d 200c 	ldrb.w	r2, [sp, #12]
	IMU_SPI_CS_L;
 8003a86:	2140      	movs	r1, #64	; 0x40
	raw_gyro_adc_[0] = (int16_t)(adc_gyro[0] << 8 | adc_gyro[1]) * 2000.0f / 32767.0f * M_PI / 180.0f  ;
 8003a88:	ee67 7a86 	vmul.f32	s15, s15, s12
 8003a8c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003a90:	ed84 7a10 	vstr	s14, [r4, #64]	; 0x40
	raw_gyro_adc_[1] = (int16_t)(adc_gyro[2] << 8 | adc_gyro[3]) * 2000.0f / 32767.0f * M_PI / 180.0f  ;
 8003a94:	ee07 3a10 	vmov	s14, r3
 8003a98:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	raw_gyro_adc_[2] = (int16_t)(adc_gyro[4] << 8 | adc_gyro[5]) * 2000.0f / 32767.0f * M_PI / 180.0f  ;
 8003a9c:	f89d 300d 	ldrb.w	r3, [sp, #13]
	raw_gyro_adc_[1] = (int16_t)(adc_gyro[2] << 8 | adc_gyro[3]) * 2000.0f / 32767.0f * M_PI / 180.0f  ;
 8003aa0:	ee27 7a05 	vmul.f32	s14, s14, s10
	raw_gyro_adc_[2] = (int16_t)(adc_gyro[4] << 8 | adc_gyro[5]) * 2000.0f / 32767.0f * M_PI / 180.0f  ;
 8003aa4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	raw_gyro_adc_[1] = (int16_t)(adc_gyro[2] << 8 | adc_gyro[3]) * 2000.0f / 32767.0f * M_PI / 180.0f  ;
 8003aa8:	eec7 7a25 	vdiv.f32	s15, s14, s11
	raw_gyro_adc_[2] = (int16_t)(adc_gyro[4] << 8 | adc_gyro[5]) * 2000.0f / 32767.0f * M_PI / 180.0f  ;
 8003aac:	b21b      	sxth	r3, r3
	IMU_SPI_CS_L;
 8003aae:	2200      	movs	r2, #0
	raw_gyro_adc_[1] = (int16_t)(adc_gyro[2] << 8 | adc_gyro[3]) * 2000.0f / 32767.0f * M_PI / 180.0f  ;
 8003ab0:	ee67 7a86 	vmul.f32	s15, s15, s12
 8003ab4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
	raw_gyro_adc_[2] = (int16_t)(adc_gyro[4] << 8 | adc_gyro[5]) * 2000.0f / 32767.0f * M_PI / 180.0f  ;
 8003ab8:	ee07 3a90 	vmov	s15, r3
 8003abc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	raw_gyro_adc_[1] = (int16_t)(adc_gyro[2] << 8 | adc_gyro[3]) * 2000.0f / 32767.0f * M_PI / 180.0f  ;
 8003ac0:	ed84 7a11 	vstr	s14, [r4, #68]	; 0x44
	raw_gyro_adc_[2] = (int16_t)(adc_gyro[4] << 8 | adc_gyro[5]) * 2000.0f / 32767.0f * M_PI / 180.0f  ;
 8003ac4:	ee67 7a85 	vmul.f32	s15, s15, s10
	t_data[0] = 0x3B | 0x80;
 8003ac8:	23bb      	movs	r3, #187	; 0xbb
	raw_gyro_adc_[2] = (int16_t)(adc_gyro[4] << 8 | adc_gyro[5]) * 2000.0f / 32767.0f * M_PI / 180.0f  ;
 8003aca:	ee87 7aa5 	vdiv.f32	s14, s15, s11
	t_data[0] = 0x3B | 0x80;
 8003ace:	f88d 3004 	strb.w	r3, [sp, #4]
	raw_gyro_adc_[2] = (int16_t)(adc_gyro[4] << 8 | adc_gyro[5]) * 2000.0f / 32767.0f * M_PI / 180.0f  ;
 8003ad2:	ee67 7a06 	vmul.f32	s15, s14, s12
 8003ad6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003ada:	ed84 7a12 	vstr	s14, [r4, #72]	; 0x48
	IMU_SPI_CS_L;
 8003ade:	f001 f8bd 	bl	8004c5c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi_, t_data, 1, 1000);
 8003ae2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	4629      	mov	r1, r5
 8003aea:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8003aec:	f001 fbb5 	bl	800525a <HAL_SPI_Transmit>
	HAL_SPI_Receive(hspi_, adc_acc, 6, 1000);
 8003af0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003af4:	2206      	movs	r2, #6
 8003af6:	a904      	add	r1, sp, #16
 8003af8:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8003afa:	f001 fd5a 	bl	80055b2 <HAL_SPI_Receive>
	IMU_SPI_CS_H;
 8003afe:	2201      	movs	r2, #1
 8003b00:	2140      	movs	r1, #64	; 0x40
 8003b02:	4855      	ldr	r0, [pc, #340]	; (8003c58 <_ZN3IMU4readEv+0x254>)
 8003b04:	f001 f8aa 	bl	8004c5c <HAL_GPIO_WritePin>
	raw_acc_adc_[0] = (int16_t)(adc_acc[0] << 8 | adc_acc[1]) / 4096.0f * GRAVITY_MSS;
 8003b08:	f89d 2010 	ldrb.w	r2, [sp, #16]
 8003b0c:	f89d 3011 	ldrb.w	r3, [sp, #17]
 8003b10:	ed9f 6a57 	vldr	s12, [pc, #348]	; 8003c70 <_ZN3IMU4readEv+0x26c>
 8003b14:	eddf 6a57 	vldr	s13, [pc, #348]	; 8003c74 <_ZN3IMU4readEv+0x270>
 8003b18:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003b1c:	b21b      	sxth	r3, r3
 8003b1e:	ee07 3a10 	vmov	s14, r3
 8003b22:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	raw_acc_adc_[1] = (int16_t)(adc_acc[2] << 8 | adc_acc[3]) / 4096.0f * GRAVITY_MSS;
 8003b26:	f89d 2012 	ldrb.w	r2, [sp, #18]
 8003b2a:	f89d 3013 	ldrb.w	r3, [sp, #19]
	raw_acc_adc_[0] = (int16_t)(adc_acc[0] << 8 | adc_acc[1]) / 4096.0f * GRAVITY_MSS;
 8003b2e:	ee27 7a06 	vmul.f32	s14, s14, s12
	raw_acc_adc_[1] = (int16_t)(adc_acc[2] << 8 | adc_acc[3]) / 4096.0f * GRAVITY_MSS;
 8003b32:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	raw_acc_adc_[0] = (int16_t)(adc_acc[0] << 8 | adc_acc[1]) / 4096.0f * GRAVITY_MSS;
 8003b36:	ee27 7a26 	vmul.f32	s14, s14, s13
	raw_acc_adc_[1] = (int16_t)(adc_acc[2] << 8 | adc_acc[3]) / 4096.0f * GRAVITY_MSS;
 8003b3a:	b21b      	sxth	r3, r3
	raw_acc_adc_[0] = (int16_t)(adc_acc[0] << 8 | adc_acc[1]) / 4096.0f * GRAVITY_MSS;
 8003b3c:	ed84 7a13 	vstr	s14, [r4, #76]	; 0x4c
	raw_acc_adc_[2] = (int16_t)(adc_acc[4] << 8 | adc_acc[5]) / 4096.0f * GRAVITY_MSS;
 8003b40:	f89d 2014 	ldrb.w	r2, [sp, #20]
	raw_acc_adc_[1] = (int16_t)(adc_acc[2] << 8 | adc_acc[3]) / 4096.0f * GRAVITY_MSS;
 8003b44:	ee07 3a10 	vmov	s14, r3
	raw_acc_adc_[2] = (int16_t)(adc_acc[4] << 8 | adc_acc[5]) / 4096.0f * GRAVITY_MSS;
 8003b48:	f89d 3015 	ldrb.w	r3, [sp, #21]
 8003b4c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003b50:	b21b      	sxth	r3, r3
 8003b52:	ee07 3a90 	vmov	s15, r3
	raw_acc_adc_[1] = (int16_t)(adc_acc[2] << 8 | adc_acc[3]) / 4096.0f * GRAVITY_MSS;
 8003b56:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	raw_acc_adc_[2] = (int16_t)(adc_acc[4] << 8 | adc_acc[5]) / 4096.0f * GRAVITY_MSS;
 8003b5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	raw_acc_adc_[1] = (int16_t)(adc_acc[2] << 8 | adc_acc[3]) / 4096.0f * GRAVITY_MSS;
 8003b5e:	ee27 7a06 	vmul.f32	s14, s14, s12
	raw_acc_adc_[2] = (int16_t)(adc_acc[4] << 8 | adc_acc[5]) / 4096.0f * GRAVITY_MSS;
 8003b62:	ee67 7a86 	vmul.f32	s15, s15, s12
	if(i == MAG_PRESCALER)
 8003b66:	6833      	ldr	r3, [r6, #0]
	raw_acc_adc_[1] = (int16_t)(adc_acc[2] << 8 | adc_acc[3]) / 4096.0f * GRAVITY_MSS;
 8003b68:	ee27 7a26 	vmul.f32	s14, s14, s13
	raw_acc_adc_[2] = (int16_t)(adc_acc[4] << 8 | adc_acc[5]) / 4096.0f * GRAVITY_MSS;
 8003b6c:	ee67 7aa6 	vmul.f32	s15, s15, s13
	if(i == MAG_PRESCALER)
 8003b70:	2b04      	cmp	r3, #4
	raw_acc_adc_[1] = (int16_t)(adc_acc[2] << 8 | adc_acc[3]) / 4096.0f * GRAVITY_MSS;
 8003b72:	ed84 7a14 	vstr	s14, [r4, #80]	; 0x50
	raw_acc_adc_[2] = (int16_t)(adc_acc[4] << 8 | adc_acc[5]) / 4096.0f * GRAVITY_MSS;
 8003b76:	edc4 7a15 	vstr	s15, [r4, #84]	; 0x54
	if(i == MAG_PRESCALER)
 8003b7a:	d165      	bne.n	8003c48 <_ZN3IMU4readEv+0x244>
		hspi_->Instance->CR1 &= (uint32_t)(~SPI_BAUDRATEPRESCALER_256); //reset
 8003b7c:	6b23      	ldr	r3, [r4, #48]	; 0x30
		IMU_SPI_CS_L;
 8003b7e:	4836      	ldr	r0, [pc, #216]	; (8003c58 <_ZN3IMU4readEv+0x254>)
		hspi_->Instance->CR1 &= (uint32_t)(~SPI_BAUDRATEPRESCALER_256); //reset
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 8003b88:	601a      	str	r2, [r3, #0]
		hspi_->Instance->CR1 |= (uint32_t)(SPI_BAUDRATEPRESCALER_64); //128 = 0.8Mhz
 8003b8a:	681a      	ldr	r2, [r3, #0]
 8003b8c:	f042 0228 	orr.w	r2, r2, #40	; 0x28
 8003b90:	601a      	str	r2, [r3, #0]
		IMU_SPI_CS_L;
 8003b92:	2140      	movs	r1, #64	; 0x40
		t_data[0] = 0x49 | 0x80;
 8003b94:	23c9      	movs	r3, #201	; 0xc9
		IMU_SPI_CS_L;
 8003b96:	2200      	movs	r2, #0
		t_data[0] = 0x49 | 0x80;
 8003b98:	f88d 3004 	strb.w	r3, [sp, #4]
		IMU_SPI_CS_L;
 8003b9c:	f001 f85e 	bl	8004c5c <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(hspi_, t_data, 1, 1000);
 8003ba0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	4629      	mov	r1, r5
 8003ba8:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8003baa:	f001 fb56 	bl	800525a <HAL_SPI_Transmit>
		HAL_SPI_Receive(hspi_, adc_mag, 7, 1000);
 8003bae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003bb2:	2207      	movs	r2, #7
 8003bb4:	a906      	add	r1, sp, #24
 8003bb6:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8003bb8:	f001 fcfb 	bl	80055b2 <HAL_SPI_Receive>
		IMU_SPI_CS_H;
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	2140      	movs	r1, #64	; 0x40
 8003bc0:	4825      	ldr	r0, [pc, #148]	; (8003c58 <_ZN3IMU4readEv+0x254>)
 8003bc2:	f001 f84b 	bl	8004c5c <HAL_GPIO_WritePin>
		hspi_->Instance->CR1 &= (uint32_t)(~SPI_BAUDRATEPRESCALER_256); //reset
 8003bc6:	6b23      	ldr	r3, [r4, #48]	; 0x30
		raw_mag_adc_[0] = (int16_t)(adc_mag[1] << 8 | adc_mag[0]) * 4912.0f / 32760.0f;
 8003bc8:	ed9f 6a2b 	vldr	s12, [pc, #172]	; 8003c78 <_ZN3IMU4readEv+0x274>
		hspi_->Instance->CR1 &= (uint32_t)(~SPI_BAUDRATEPRESCALER_256); //reset
 8003bcc:	681b      	ldr	r3, [r3, #0]
		raw_mag_adc_[0] = (int16_t)(adc_mag[1] << 8 | adc_mag[0]) * 4912.0f / 32760.0f;
 8003bce:	eddf 6a2b 	vldr	s13, [pc, #172]	; 8003c7c <_ZN3IMU4readEv+0x278>
		hspi_->Instance->CR1 &= (uint32_t)(~SPI_BAUDRATEPRESCALER_256); //reset
 8003bd2:	681a      	ldr	r2, [r3, #0]
 8003bd4:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 8003bd8:	601a      	str	r2, [r3, #0]
		hspi_->Instance->CR1 |= (uint32_t)(SPI_BAUDRATEPRESCALER_8); //8 = 13.5Mhz
 8003bda:	681a      	ldr	r2, [r3, #0]
 8003bdc:	f042 0210 	orr.w	r2, r2, #16
 8003be0:	601a      	str	r2, [r3, #0]
		raw_mag_adc_[0] = (int16_t)(adc_mag[1] << 8 | adc_mag[0]) * 4912.0f / 32760.0f;
 8003be2:	f89d 2019 	ldrb.w	r2, [sp, #25]
 8003be6:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8003bea:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003bee:	b21b      	sxth	r3, r3
 8003bf0:	ee07 3a10 	vmov	s14, r3
 8003bf4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
		raw_mag_adc_[1] = (int16_t)(adc_mag[3] << 8 | adc_mag[2]) * 4912.0f / 32760.0f;
 8003bf8:	f89d 201b 	ldrb.w	r2, [sp, #27]
 8003bfc:	f89d 301a 	ldrb.w	r3, [sp, #26]
		raw_mag_adc_[0] = (int16_t)(adc_mag[1] << 8 | adc_mag[0]) * 4912.0f / 32760.0f;
 8003c00:	ee27 7a06 	vmul.f32	s14, s14, s12
		raw_mag_adc_[1] = (int16_t)(adc_mag[3] << 8 | adc_mag[2]) * 4912.0f / 32760.0f;
 8003c04:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		raw_mag_adc_[0] = (int16_t)(adc_mag[1] << 8 | adc_mag[0]) * 4912.0f / 32760.0f;
 8003c08:	eec7 7a26 	vdiv.f32	s15, s14, s13
		raw_mag_adc_[1] = (int16_t)(adc_mag[3] << 8 | adc_mag[2]) * 4912.0f / 32760.0f;
 8003c0c:	b21b      	sxth	r3, r3
		raw_mag_adc_[2] = (int16_t)(adc_mag[5] << 8 | adc_mag[4]) * 4912.0f / 32760.0f;
 8003c0e:	f89d 201d 	ldrb.w	r2, [sp, #29]
		raw_mag_adc_[1] = (int16_t)(adc_mag[3] << 8 | adc_mag[2]) * 4912.0f / 32760.0f;
 8003c12:	ee07 3a10 	vmov	s14, r3
 8003c16:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
		raw_mag_adc_[0] = (int16_t)(adc_mag[1] << 8 | adc_mag[0]) * 4912.0f / 32760.0f;
 8003c1a:	edc4 7a16 	vstr	s15, [r4, #88]	; 0x58
		raw_mag_adc_[1] = (int16_t)(adc_mag[3] << 8 | adc_mag[2]) * 4912.0f / 32760.0f;
 8003c1e:	ee27 7a06 	vmul.f32	s14, s14, s12
		raw_mag_adc_[2] = (int16_t)(adc_mag[5] << 8 | adc_mag[4]) * 4912.0f / 32760.0f;
 8003c22:	f89d 301c 	ldrb.w	r3, [sp, #28]
		raw_mag_adc_[1] = (int16_t)(adc_mag[3] << 8 | adc_mag[2]) * 4912.0f / 32760.0f;
 8003c26:	eec7 7a26 	vdiv.f32	s15, s14, s13
		raw_mag_adc_[2] = (int16_t)(adc_mag[5] << 8 | adc_mag[4]) * 4912.0f / 32760.0f;
 8003c2a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003c2e:	b21b      	sxth	r3, r3
		raw_mag_adc_[1] = (int16_t)(adc_mag[3] << 8 | adc_mag[2]) * 4912.0f / 32760.0f;
 8003c30:	edc4 7a17 	vstr	s15, [r4, #92]	; 0x5c
		raw_mag_adc_[2] = (int16_t)(adc_mag[5] << 8 | adc_mag[4]) * 4912.0f / 32760.0f;
 8003c34:	ee07 3a90 	vmov	s15, r3
 8003c38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c3c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8003c40:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003c44:	ed84 7a18 	vstr	s14, [r4, #96]	; 0x60
	if(i == MAG_PRESCALER) i =0;
 8003c48:	6833      	ldr	r3, [r6, #0]
 8003c4a:	2b04      	cmp	r3, #4
 8003c4c:	bf0c      	ite	eq
 8003c4e:	2300      	moveq	r3, #0
	else i++;
 8003c50:	3301      	addne	r3, #1
 8003c52:	6033      	str	r3, [r6, #0]
}
 8003c54:	b008      	add	sp, #32
 8003c56:	bd70      	pop	{r4, r5, r6, pc}
 8003c58:	40020400 	.word	0x40020400
 8003c5c:	20000a20 	.word	0x20000a20
 8003c60:	44fa0000 	.word	0x44fa0000
 8003c64:	46fffe00 	.word	0x46fffe00
 8003c68:	40490fdb 	.word	0x40490fdb
 8003c6c:	43340000 	.word	0x43340000
 8003c70:	39800000 	.word	0x39800000
 8003c74:	411ce80a 	.word	0x411ce80a
 8003c78:	45998000 	.word	0x45998000
 8003c7c:	46fff000 	.word	0x46fff000

08003c80 <_ZN3IMU7processEv>:
{
 8003c80:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (calibrate_gyro_ > 0)
 8003c82:	f8d0 30c8 	ldr.w	r3, [r0, #200]	; 0xc8
 8003c86:	2b00      	cmp	r3, #0
{
 8003c88:	4604      	mov	r4, r0
 8003c8a:	f100 05dc 	add.w	r5, r0, #220	; 0xdc
 8003c8e:	f100 0040 	add.w	r0, r0, #64	; 0x40
	if (calibrate_gyro_ > 0)
 8003c92:	f340 80af 	ble.w	8003df4 <_ZN3IMU7processEv+0x174>
		if (calibrate_gyro_ == CALIBRATING_STEP)
 8003c96:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003c9a:	bf01      	itttt	eq
 8003c9c:	2300      	moveq	r3, #0
 8003c9e:	f8c4 30e4 	streq.w	r3, [r4, #228]	; 0xe4
 8003ca2:	f8c4 30e0 	streq.w	r3, [r4, #224]	; 0xe0
 8003ca6:	f8c4 30dc 	streq.w	r3, [r4, #220]	; 0xdc
		gyro_offset_ += raw_gyro_adc_;
 8003caa:	4601      	mov	r1, r0
 8003cac:	4628      	mov	r0, r5
 8003cae:	f002 f9a3 	bl	8005ff8 <_ZN7Vector3IfEpLERKS0_>
		if (calibrate_gyro_ == 1)
 8003cb2:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d104      	bne.n	8003cc4 <_ZN3IMU7processEv+0x44>
			gyro_offset_ /= (float)CALIBRATING_STEP;
 8003cba:	ed9f 0ab4 	vldr	s0, [pc, #720]	; 8003f8c <_ZN3IMU7processEv+0x30c>
 8003cbe:	4628      	mov	r0, r5
 8003cc0:	f002 f940 	bl	8005f44 <_ZN7Vector3IfEdVEf>
		calibrate_gyro_--;
 8003cc4:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
 8003cc8:	3b01      	subs	r3, #1
 8003cca:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
	if (calibrate_acc_ > 0) {
 8003cce:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 8003cd8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003cdc:	f340 80b5 	ble.w	8003e4a <_ZN3IMU7processEv+0x1ca>
		if (calibrate_acc_ == CALIBRATING_STEP) acc_offset_.zero();
 8003ce0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003ce4:	bf01      	itttt	eq
 8003ce6:	2300      	moveq	r3, #0
 8003ce8:	f8c4 30d8 	streq.w	r3, [r4, #216]	; 0xd8
 8003cec:	f8c4 30d4 	streq.w	r3, [r4, #212]	; 0xd4
 8003cf0:	f8c4 30d0 	streq.w	r3, [r4, #208]	; 0xd0
		acc_offset_ += raw_acc_adc_;
 8003cf4:	4611      	mov	r1, r2
 8003cf6:	f002 f97f 	bl	8005ff8 <_ZN7Vector3IfEpLERKS0_>
		if (calibrate_acc_ == 1) {
 8003cfa:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
 8003cfe:	2b01      	cmp	r3, #1
 8003d00:	d11a      	bne.n	8003d38 <_ZN3IMU7processEv+0xb8>
			acc_offset_[0] /= (float)CALIBRATING_STEP;
 8003d02:	ed9f 7aa2 	vldr	s14, [pc, #648]	; 8003f8c <_ZN3IMU7processEv+0x30c>
 8003d06:	edd4 6a34 	vldr	s13, [r4, #208]	; 0xd0
 8003d0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
			writeCalibData();
 8003d0e:	4620      	mov	r0, r4
			acc_offset_[1] /= (float)CALIBRATING_STEP;
 8003d10:	edd4 6a35 	vldr	s13, [r4, #212]	; 0xd4
			acc_offset_[0] /= (float)CALIBRATING_STEP;
 8003d14:	edc4 7a34 	vstr	s15, [r4, #208]	; 0xd0
			acc_offset_[1] /= (float)CALIBRATING_STEP;
 8003d18:	eec6 7a87 	vdiv.f32	s15, s13, s14
			acc_offset_[2] =  acc_offset_[2]/(float)CALIBRATING_STEP - GRAVITY_MSS;
 8003d1c:	edd4 6a36 	vldr	s13, [r4, #216]	; 0xd8
			acc_offset_[1] /= (float)CALIBRATING_STEP;
 8003d20:	edc4 7a35 	vstr	s15, [r4, #212]	; 0xd4
			acc_offset_[2] =  acc_offset_[2]/(float)CALIBRATING_STEP - GRAVITY_MSS;
 8003d24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d28:	ed9f 7a99 	vldr	s14, [pc, #612]	; 8003f90 <_ZN3IMU7processEv+0x310>
 8003d2c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003d30:	edc4 7a36 	vstr	s15, [r4, #216]	; 0xd8
			writeCalibData();
 8003d34:	f7ff fcec 	bl	8003710 <_ZN3IMU14writeCalibDataEv>
		calibrate_acc_--;
 8003d38:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
 8003d3c:	3b01      	subs	r3, #1
 8003d3e:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
	if (calibrate_mag_ > 0)
 8003d42:	f8d4 60cc 	ldr.w	r6, [r4, #204]	; 0xcc
 8003d46:	2e00      	cmp	r6, #0
 8003d48:	f340 80ab 	ble.w	8003ea2 <_ZN3IMU7processEv+0x222>
		if(calibrate_mag_  == CALIBRATING_MAG_STEP)
 8003d4c:	f5b6 6f96 	cmp.w	r6, #1200	; 0x4b0
 8003d50:	f104 0358 	add.w	r3, r4, #88	; 0x58
 8003d54:	d112      	bne.n	8003d7c <_ZN3IMU7processEv+0xfc>
 8003d56:	2200      	movs	r2, #0
 8003d58:	f8c4 20f0 	str.w	r2, [r4, #240]	; 0xf0
 8003d5c:	f8c4 20ec 	str.w	r2, [r4, #236]	; 0xec
 8003d60:	f8c4 20e8 	str.w	r2, [r4, #232]	; 0xe8
			mag_min_ = raw_mag_adc_;
 8003d64:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003d68:	f504 7580 	add.w	r5, r4, #256	; 0x100
 8003d6c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
			mag_max_ = raw_mag_adc_;
 8003d70:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003d74:	f104 05f4 	add.w	r5, r4, #244	; 0xf4
 8003d78:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8003d7c:	f104 0264 	add.w	r2, r4, #100	; 0x64
			if (raw_mag_adc_[i] < mag_min_[i]) mag_min_[i] = raw_mag_adc_[i];
 8003d80:	edd3 7a00 	vldr	s15, [r3]
 8003d84:	ed93 7a2a 	vldr	s14, [r3, #168]	; 0xa8
 8003d88:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003d8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d90:	bf48      	it	mi
 8003d92:	edc3 7a2a 	vstrmi	s15, [r3, #168]	; 0xa8
 8003d96:	3304      	adds	r3, #4
			if (raw_mag_adc_[i] > mag_max_[i]) mag_max_[i] = raw_mag_adc_[i];
 8003d98:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 8003d9c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003da0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003da4:	bfc8      	it	gt
 8003da6:	edc3 7a26 	vstrgt	s15, [r3, #152]	; 0x98
		for (int i = 0; i < 3; i++)
 8003daa:	429a      	cmp	r2, r3
 8003dac:	d1e8      	bne.n	8003d80 <_ZN3IMU7processEv+0x100>
		if(calibrate_mag_ == 1)
 8003dae:	2e01      	cmp	r6, #1
 8003db0:	f504 7080 	add.w	r0, r4, #256	; 0x100
 8003db4:	f104 01f4 	add.w	r1, r4, #244	; 0xf4
 8003db8:	d115      	bne.n	8003de6 <_ZN3IMU7processEv+0x166>
			mag_offset_ = (mag_min_ + mag_max_) /2 ;
 8003dba:	f002 f9cb 	bl	8006154 <_ZNK7Vector3IfEplERKS0_>
 8003dbe:	a801      	add	r0, sp, #4
 8003dc0:	ed8d 0a01 	vstr	s0, [sp, #4]
 8003dc4:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8003dc8:	edcd 0a02 	vstr	s1, [sp, #8]
 8003dcc:	ed8d 1a03 	vstr	s2, [sp, #12]
 8003dd0:	f002 f940 	bl	8006054 <_ZNK7Vector3IfEdvEf>
			writeCalibData();
 8003dd4:	4620      	mov	r0, r4
			mag_offset_ = (mag_min_ + mag_max_) /2 ;
 8003dd6:	ed84 0a3a 	vstr	s0, [r4, #232]	; 0xe8
 8003dda:	edc4 0a3b 	vstr	s1, [r4, #236]	; 0xec
 8003dde:	ed84 1a3c 	vstr	s2, [r4, #240]	; 0xf0
			writeCalibData();
 8003de2:	f7ff fc95 	bl	8003710 <_ZN3IMU14writeCalibDataEv>
		calibrate_mag_ --;
 8003de6:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
 8003dea:	3b01      	subs	r3, #1
 8003dec:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
}
 8003df0:	b004      	add	sp, #16
 8003df2:	bd70      	pop	{r4, r5, r6, pc}
		raw_gyro_= raw_gyro_adc_ - gyro_offset_;
 8003df4:	4629      	mov	r1, r5
 8003df6:	f002 f9ef 	bl	80061d8 <_ZNK7Vector3IfEmiERKS0_>
		raw_gyro_p_  -= (raw_gyro_p_/GYRO_LPF_FACTOR);
 8003dfa:	f104 05ac 	add.w	r5, r4, #172	; 0xac
		raw_gyro_= raw_gyro_adc_ - gyro_offset_;
 8003dfe:	edc4 0a1d 	vstr	s1, [r4, #116]	; 0x74
 8003e02:	ed84 1a1e 	vstr	s2, [r4, #120]	; 0x78
 8003e06:	ed84 0a1c 	vstr	s0, [r4, #112]	; 0x70
		raw_gyro_p_  -= (raw_gyro_p_/GYRO_LPF_FACTOR);
 8003e0a:	4628      	mov	r0, r5
 8003e0c:	eeb2 0a08 	vmov.f32	s0, #40	; 0x41400000  12.0
 8003e10:	f002 f920 	bl	8006054 <_ZNK7Vector3IfEdvEf>
 8003e14:	a901      	add	r1, sp, #4
 8003e16:	4628      	mov	r0, r5
 8003e18:	ed8d 0a01 	vstr	s0, [sp, #4]
 8003e1c:	edcd 0a02 	vstr	s1, [sp, #8]
 8003e20:	ed8d 1a03 	vstr	s2, [sp, #12]
 8003e24:	f002 f8ba 	bl	8005f9c <_ZN7Vector3IfEmIERKS0_>
		raw_gyro_p_   += raw_gyro_;
 8003e28:	f104 0170 	add.w	r1, r4, #112	; 0x70
 8003e2c:	4628      	mov	r0, r5
 8003e2e:	f002 f8e3 	bl	8005ff8 <_ZN7Vector3IfEpLERKS0_>
		gyro_  = (raw_gyro_p_/GYRO_LPF_FACTOR);
 8003e32:	eeb2 0a08 	vmov.f32	s0, #40	; 0x41400000  12.0
 8003e36:	4628      	mov	r0, r5
 8003e38:	f002 f90c 	bl	8006054 <_ZNK7Vector3IfEdvEf>
 8003e3c:	ed84 0a25 	vstr	s0, [r4, #148]	; 0x94
 8003e40:	edc4 0a26 	vstr	s1, [r4, #152]	; 0x98
 8003e44:	ed84 1a27 	vstr	s2, [r4, #156]	; 0x9c
 8003e48:	e741      	b.n	8003cce <_ZN3IMU7processEv+0x4e>
		raw_acc_ = raw_acc_adc_ - acc_offset_;
 8003e4a:	4601      	mov	r1, r0
 8003e4c:	4610      	mov	r0, r2
 8003e4e:	f002 f9c3 	bl	80061d8 <_ZNK7Vector3IfEmiERKS0_>
		raw_acc_p_    -= (raw_acc_p_/ACC_LPF_FACTOR);
 8003e52:	f104 05b8 	add.w	r5, r4, #184	; 0xb8
		raw_acc_ = raw_acc_adc_ - acc_offset_;
 8003e56:	edc4 0a1a 	vstr	s1, [r4, #104]	; 0x68
 8003e5a:	ed84 1a1b 	vstr	s2, [r4, #108]	; 0x6c
 8003e5e:	ed84 0a19 	vstr	s0, [r4, #100]	; 0x64
		raw_acc_p_    -= (raw_acc_p_/ACC_LPF_FACTOR);
 8003e62:	4628      	mov	r0, r5
 8003e64:	ed9f 0a4b 	vldr	s0, [pc, #300]	; 8003f94 <_ZN3IMU7processEv+0x314>
 8003e68:	f002 f8f4 	bl	8006054 <_ZNK7Vector3IfEdvEf>
 8003e6c:	a901      	add	r1, sp, #4
 8003e6e:	4628      	mov	r0, r5
 8003e70:	ed8d 0a01 	vstr	s0, [sp, #4]
 8003e74:	edcd 0a02 	vstr	s1, [sp, #8]
 8003e78:	ed8d 1a03 	vstr	s2, [sp, #12]
 8003e7c:	f002 f88e 	bl	8005f9c <_ZN7Vector3IfEmIERKS0_>
		raw_acc_p_    += raw_acc_;
 8003e80:	f104 0164 	add.w	r1, r4, #100	; 0x64
 8003e84:	4628      	mov	r0, r5
 8003e86:	f002 f8b7 	bl	8005ff8 <_ZN7Vector3IfEpLERKS0_>
		acc_  = (raw_acc_p_/ACC_LPF_FACTOR);
 8003e8a:	ed9f 0a42 	vldr	s0, [pc, #264]	; 8003f94 <_ZN3IMU7processEv+0x314>
 8003e8e:	4628      	mov	r0, r5
 8003e90:	f002 f8e0 	bl	8006054 <_ZNK7Vector3IfEdvEf>
 8003e94:	ed84 0a22 	vstr	s0, [r4, #136]	; 0x88
 8003e98:	edc4 0a23 	vstr	s1, [r4, #140]	; 0x8c
 8003e9c:	ed84 1a24 	vstr	s2, [r4, #144]	; 0x90
 8003ea0:	e74f      	b.n	8003d42 <_ZN3IMU7processEv+0xc2>
		raw_mag_[0] = raw_mag_adc_[1] - mag_offset_[1];
 8003ea2:	edd4 6a17 	vldr	s13, [r4, #92]	; 0x5c
 8003ea6:	edd4 7a3b 	vldr	s15, [r4, #236]	; 0xec
		raw_mag_[1] = raw_mag_adc_[0]  - mag_offset_[0];
 8003eaa:	ed94 6a16 	vldr	s12, [r4, #88]	; 0x58
		raw_mag_[2] = -(raw_mag_adc_[2] - mag_offset_[2]);
 8003eae:	ed94 7a18 	vldr	s14, [r4, #96]	; 0x60
		if(mag_filtering_flag_)
 8003eb2:	f894 110c 	ldrb.w	r1, [r4, #268]	; 0x10c
		raw_mag_[0] = raw_mag_adc_[1] - mag_offset_[1];
 8003eb6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003eba:	edc4 7a1f 	vstr	s15, [r4, #124]	; 0x7c
		raw_mag_[1] = raw_mag_adc_[0]  - mag_offset_[0];
 8003ebe:	edd4 7a3a 	vldr	s15, [r4, #232]	; 0xe8
 8003ec2:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003ec6:	edc4 7a20 	vstr	s15, [r4, #128]	; 0x80
		raw_mag_[2] = -(raw_mag_adc_[2] - mag_offset_[2]);
 8003eca:	edd4 7a3c 	vldr	s15, [r4, #240]	; 0xf0
 8003ece:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ed2:	eef1 7a67 	vneg.f32	s15, s15
 8003ed6:	edc4 7a21 	vstr	s15, [r4, #132]	; 0x84
		if(mag_filtering_flag_)
 8003eda:	b3a1      	cbz	r1, 8003f46 <_ZN3IMU7processEv+0x2c6>
 8003edc:	f104 027c 	add.w	r2, r4, #124	; 0x7c
 8003ee0:	f104 0088 	add.w	r0, r4, #136	; 0x88
 8003ee4:	2500      	movs	r5, #0
 8003ee6:	4613      	mov	r3, r2
				if(fabs(raw_mag_[i] - mag_[i]) > MAG_GENERAL_THRESH) mag_outlier_flag = true;
 8003ee8:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8003eec:	ecf2 7a01 	vldmia	r2!, {s15}
 8003ef0:	edd2 6a08 	vldr	s13, [r2, #32]
 8003ef4:	ee77 7ae6 	vsub.f32	s15, s15, s13
  using ::fabs;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  fabs(float __x)
  { return __builtin_fabsf(__x); }
 8003ef8:	eef0 7ae7 	vabs.f32	s15, s15
 8003efc:	eef4 7a47 	vcmp.f32	s15, s14
 8003f00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f04:	bfc8      	it	gt
 8003f06:	460d      	movgt	r5, r1
			for(int i = 0; i < 3; i++)
 8003f08:	4282      	cmp	r2, r0
 8003f0a:	d1ef      	bne.n	8003eec <_ZN3IMU7processEv+0x26c>
			if(!mag_outlier_flag)
 8003f0c:	b945      	cbnz	r5, 8003f20 <_ZN3IMU7processEv+0x2a0>
				mag_ = raw_mag_;
 8003f0e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003f12:	f104 06a0 	add.w	r6, r4, #160	; 0xa0
 8003f16:	e886 0007 	stmia.w	r6, {r0, r1, r2}
				mag_outlier_counter_ = 0;
 8003f1a:	f8a4 510e 	strh.w	r5, [r4, #270]	; 0x10e
 8003f1e:	e767      	b.n	8003df0 <_ZN3IMU7processEv+0x170>
				if(++mag_outlier_counter_ > MAG_OUTLIER_MAX_COUNT)
 8003f20:	f8b4 210e 	ldrh.w	r2, [r4, #270]	; 0x10e
 8003f24:	3201      	adds	r2, #1
 8003f26:	b292      	uxth	r2, r2
 8003f28:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
					mag_outlier_counter_ = 0;
 8003f2c:	bf81      	itttt	hi
 8003f2e:	2200      	movhi	r2, #0
 8003f30:	f8a4 210e 	strhhi.w	r2, [r4, #270]	; 0x10e
					mag_ = raw_mag_;
 8003f34:	e893 0007 	ldmiahi.w	r3, {r0, r1, r2}
 8003f38:	34a0      	addhi	r4, #160	; 0xa0
				if(++mag_outlier_counter_ > MAG_OUTLIER_MAX_COUNT)
 8003f3a:	bf94      	ite	ls
 8003f3c:	f8a4 210e 	strhls.w	r2, [r4, #270]	; 0x10e
					mag_ = raw_mag_;
 8003f40:	e884 0007 	stmiahi.w	r4, {r0, r1, r2}
 8003f44:	e754      	b.n	8003df0 <_ZN3IMU7processEv+0x170>
    bool is_zero(void) const { return (fabsf(x) < FLT_EPSILON) && (fabsf(y) < FLT_EPSILON) && (fabsf(z) < FLT_EPSILON); }
 8003f46:	eddf 7a14 	vldr	s15, [pc, #80]	; 8003f98 <_ZN3IMU7processEv+0x318>
 8003f4a:	eeb0 6ac6 	vabs.f32	s12, s12
 8003f4e:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8003f52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f56:	d50e      	bpl.n	8003f76 <_ZN3IMU7processEv+0x2f6>
 8003f58:	eef0 6ae6 	vabs.f32	s13, s13
 8003f5c:	eef4 6ae7 	vcmpe.f32	s13, s15
 8003f60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f64:	d507      	bpl.n	8003f76 <_ZN3IMU7processEv+0x2f6>
 8003f66:	eeb0 7ac7 	vabs.f32	s14, s14
 8003f6a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003f6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f72:	f53f af3d 	bmi.w	8003df0 <_ZN3IMU7processEv+0x170>
				mag_ = raw_mag_;
 8003f76:	f104 027c 	add.w	r2, r4, #124	; 0x7c
 8003f7a:	ca07      	ldmia	r2, {r0, r1, r2}
 8003f7c:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
 8003f80:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			mag_filtering_flag_  = true;
 8003f84:	2301      	movs	r3, #1
 8003f86:	f884 310c 	strb.w	r3, [r4, #268]	; 0x10c
 8003f8a:	e731      	b.n	8003df0 <_ZN3IMU7processEv+0x170>
 8003f8c:	447a0000 	.word	0x447a0000
 8003f90:	411ce80a 	.word	0x411ce80a
 8003f94:	42280000 	.word	0x42280000
 8003f98:	34000000 	.word	0x34000000

08003f9c <_ZN3IMU6updateEt>:
{
 8003f9c:	b510      	push	{r4, lr}
 8003f9e:	4604      	mov	r4, r0
	if(nh_->connected() && (!nh_->getHardware()->getUartDriver()->getTx()->idleFlag()))
 8003fa0:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8003fa2:	6803      	ldr	r3, [r0, #0]
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	4798      	blx	r3
 8003fa8:	b128      	cbz	r0, 8003fb6 <_ZN3IMU6updateEt+0x1a>
  bool idleFlag(){return idle_flag_;}
 8003faa:	4b08      	ldr	r3, [pc, #32]	; (8003fcc <_ZN3IMU6updateEt+0x30>)
 8003fac:	781b      	ldrb	r3, [r3, #0]
 8003fae:	b913      	cbnz	r3, 8003fb6 <_ZN3IMU6updateEt+0x1a>
		ahb_suspend_flag_ = true; //should suspend USART1 of DMA(ros) for a while
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	f884 3111 	strb.w	r3, [r4, #273]	; 0x111
	read(); //read from SPI
 8003fb6:	4620      	mov	r0, r4
 8003fb8:	f7ff fd24 	bl	8003a04 <_ZN3IMU4readEv>
	process();
 8003fbc:	4620      	mov	r0, r4
 8003fbe:	f7ff fe5f 	bl	8003c80 <_ZN3IMU7processEv>
	update_ = true;
 8003fc2:	2001      	movs	r0, #1
 8003fc4:	f884 0110 	strb.w	r0, [r4, #272]	; 0x110
}
 8003fc8:	bd10      	pop	{r4, pc}
 8003fca:	bf00      	nop
 8003fcc:	20000a6c 	.word	0x20000a6c

08003fd0 <_ZN3ros16normalizeSecNSecERmS0_>:

#include "ros/time.h"

namespace ros
{
  void normalizeSecNSec(uint32_t& sec, uint32_t& nsec){
 8003fd0:	b530      	push	{r4, r5, lr}
    uint32_t nsec_part= nsec % 1000000000UL;
    uint32_t sec_part = nsec / 1000000000UL;
    sec += sec_part;
 8003fd2:	6802      	ldr	r2, [r0, #0]
    uint32_t nsec_part= nsec % 1000000000UL;
 8003fd4:	680d      	ldr	r5, [r1, #0]
    uint32_t sec_part = nsec / 1000000000UL;
 8003fd6:	4c04      	ldr	r4, [pc, #16]	; (8003fe8 <_ZN3ros16normalizeSecNSecERmS0_+0x18>)
 8003fd8:	fbb5 f3f4 	udiv	r3, r5, r4
    sec += sec_part;
 8003fdc:	441a      	add	r2, r3
    uint32_t nsec_part= nsec % 1000000000UL;
 8003fde:	fb04 5313 	mls	r3, r4, r3, r5
    sec += sec_part;
 8003fe2:	6002      	str	r2, [r0, #0]
    nsec = nsec_part;
 8003fe4:	600b      	str	r3, [r1, #0]
 8003fe6:	bd30      	pop	{r4, r5, pc}
 8003fe8:	3b9aca00 	.word	0x3b9aca00

08003fec <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003fec:	490f      	ldr	r1, [pc, #60]	; (800402c <SystemInit+0x40>)
 8003fee:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8003ff2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003ff6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003ffa:	4b0d      	ldr	r3, [pc, #52]	; (8004030 <SystemInit+0x44>)
 8003ffc:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003ffe:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8004000:	f042 0201 	orr.w	r2, r2, #1
 8004004:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8004006:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800400e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004012:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8004014:	4a07      	ldr	r2, [pc, #28]	; (8004034 <SystemInit+0x48>)
 8004016:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004018:	681a      	ldr	r2, [r3, #0]
 800401a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800401e:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8004020:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004022:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004026:	608b      	str	r3, [r1, #8]
 8004028:	4770      	bx	lr
 800402a:	bf00      	nop
 800402c:	e000ed00 	.word	0xe000ed00
 8004030:	40023800 	.word	0x40023800
 8004034:	24003010 	.word	0x24003010

08004038 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004038:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 800403a:	4b08      	ldr	r3, [pc, #32]	; (800405c <HAL_InitTick+0x24>)
{
 800403c:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 800403e:	6818      	ldr	r0, [r3, #0]
 8004040:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004044:	fbb0 f0f3 	udiv	r0, r0, r3
 8004048:	f000 f9cc 	bl	80043e4 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800404c:	2200      	movs	r2, #0
 800404e:	4621      	mov	r1, r4
 8004050:	f04f 30ff 	mov.w	r0, #4294967295
 8004054:	f000 f986 	bl	8004364 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 8004058:	2000      	movs	r0, #0
 800405a:	bd10      	pop	{r4, pc}
 800405c:	20000004 	.word	0x20000004

08004060 <HAL_Init>:
{
 8004060:	b508      	push	{r3, lr}
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004062:	4b0b      	ldr	r3, [pc, #44]	; (8004090 <HAL_Init+0x30>)
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800406a:	601a      	str	r2, [r3, #0]
   __HAL_FLASH_DATA_CACHE_ENABLE();
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004072:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800407a:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800407c:	2003      	movs	r0, #3
 800407e:	f000 f95f 	bl	8004340 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8004082:	2000      	movs	r0, #0
 8004084:	f7ff ffd8 	bl	8004038 <HAL_InitTick>
  HAL_MspInit();
 8004088:	f7ff f9bc 	bl	8003404 <HAL_MspInit>
}
 800408c:	2000      	movs	r0, #0
 800408e:	bd08      	pop	{r3, pc}
 8004090:	40023c00 	.word	0x40023c00

08004094 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8004094:	4a02      	ldr	r2, [pc, #8]	; (80040a0 <HAL_IncTick+0xc>)
 8004096:	6813      	ldr	r3, [r2, #0]
 8004098:	3301      	adds	r3, #1
 800409a:	6013      	str	r3, [r2, #0]
 800409c:	4770      	bx	lr
 800409e:	bf00      	nop
 80040a0:	20003ce0 	.word	0x20003ce0

080040a4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80040a4:	4b01      	ldr	r3, [pc, #4]	; (80040ac <HAL_GetTick+0x8>)
 80040a6:	6818      	ldr	r0, [r3, #0]
}
 80040a8:	4770      	bx	lr
 80040aa:	bf00      	nop
 80040ac:	20003ce0 	.word	0x20003ce0

080040b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80040b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80040b2:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 80040b4:	f7ff fff6 	bl	80040a4 <HAL_GetTick>
  uint32_t wait = Delay;
 80040b8:	9c01      	ldr	r4, [sp, #4]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80040ba:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 80040bc:	4605      	mov	r5, r0
  {
     wait++;
 80040be:	bf18      	it	ne
 80040c0:	3401      	addne	r4, #1
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80040c2:	f7ff ffef 	bl	80040a4 <HAL_GetTick>
 80040c6:	1b40      	subs	r0, r0, r5
 80040c8:	42a0      	cmp	r0, r4
 80040ca:	d3fa      	bcc.n	80040c2 <HAL_Delay+0x12>
  {
  }
}
 80040cc:	b003      	add	sp, #12
 80040ce:	bd30      	pop	{r4, r5, pc}

080040d0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80040d0:	b510      	push	{r4, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 80040d2:	4604      	mov	r4, r0
 80040d4:	2800      	cmp	r0, #0
 80040d6:	f000 8099 	beq.w	800420c <HAL_ADC_Init+0x13c>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80040da:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80040dc:	b923      	cbnz	r3, 80040e8 <HAL_ADC_Init+0x18>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80040de:	6443      	str	r3, [r0, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80040e0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80040e4:	f7fd fa04 	bl	80014f0 <HAL_ADC_MspInit>
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80040e8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80040ea:	06db      	lsls	r3, r3, #27
 80040ec:	f100 808c 	bmi.w	8004208 <HAL_ADC_Init+0x138>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80040f0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80040f2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80040f6:	f023 0302 	bic.w	r3, r3, #2
 80040fa:	f043 0302 	orr.w	r3, r3, #2
 80040fe:	6423      	str	r3, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004100:	4b43      	ldr	r3, [pc, #268]	; (8004210 <HAL_ADC_Init+0x140>)
 8004102:	685a      	ldr	r2, [r3, #4]
 8004104:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8004108:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800410a:	685a      	ldr	r2, [r3, #4]
 800410c:	6861      	ldr	r1, [r4, #4]
 800410e:	430a      	orrs	r2, r1
 8004110:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004112:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004114:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004116:	685a      	ldr	r2, [r3, #4]
 8004118:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800411c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800411e:	685a      	ldr	r2, [r3, #4]
 8004120:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004124:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004126:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004128:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800412a:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800412e:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004130:	685a      	ldr	r2, [r3, #4]
 8004132:	430a      	orrs	r2, r1
 8004134:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004136:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004138:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800413a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800413e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004140:	689a      	ldr	r2, [r3, #8]
 8004142:	430a      	orrs	r2, r1
 8004144:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004146:	4933      	ldr	r1, [pc, #204]	; (8004214 <HAL_ADC_Init+0x144>)
 8004148:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800414a:	428a      	cmp	r2, r1
 800414c:	d050      	beq.n	80041f0 <HAL_ADC_Init+0x120>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800414e:	6899      	ldr	r1, [r3, #8]
 8004150:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 8004154:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004156:	6899      	ldr	r1, [r3, #8]
 8004158:	430a      	orrs	r2, r1
 800415a:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800415c:	689a      	ldr	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800415e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004160:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004164:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004166:	689a      	ldr	r2, [r3, #8]
 8004168:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800416a:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800416c:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 800416e:	69a1      	ldr	r1, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004170:	f022 0202 	bic.w	r2, r2, #2
 8004174:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 8004176:	689a      	ldr	r2, [r3, #8]
 8004178:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 800417c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800417e:	6a22      	ldr	r2, [r4, #32]
 8004180:	2a00      	cmp	r2, #0
 8004182:	d03d      	beq.n	8004200 <HAL_ADC_Init+0x130>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004184:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004186:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004188:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800418c:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800418e:	685a      	ldr	r2, [r3, #4]
 8004190:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004194:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004196:	685a      	ldr	r2, [r3, #4]
 8004198:	3901      	subs	r1, #1
 800419a:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800419e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80041a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80041a2:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80041a4:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80041a8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80041aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041ac:	3901      	subs	r1, #1
 80041ae:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 80041b2:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80041b4:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 80041b6:	6b21      	ldr	r1, [r4, #48]	; 0x30
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80041b8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80041bc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 80041be:	689a      	ldr	r2, [r3, #8]
 80041c0:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 80041c4:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80041c6:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80041c8:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80041ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041ce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80041d0:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 80041d2:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80041d4:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 80041d8:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 80041da:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 80041dc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80041de:	f023 0303 	bic.w	r3, r3, #3
 80041e2:	f043 0301 	orr.w	r3, r3, #1
 80041e6:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 80041e8:	2300      	movs	r3, #0
 80041ea:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  return tmp_hal_status;
 80041ee:	bd10      	pop	{r4, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80041f0:	689a      	ldr	r2, [r3, #8]
 80041f2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80041f6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80041f8:	689a      	ldr	r2, [r3, #8]
 80041fa:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80041fe:	e7b4      	b.n	800416a <HAL_ADC_Init+0x9a>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004200:	685a      	ldr	r2, [r3, #4]
 8004202:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004206:	e7ca      	b.n	800419e <HAL_ADC_Init+0xce>
    tmp_hal_status = HAL_ERROR;
 8004208:	2001      	movs	r0, #1
 800420a:	e7ed      	b.n	80041e8 <HAL_ADC_Init+0x118>
    return HAL_ERROR;
 800420c:	2001      	movs	r0, #1
}
 800420e:	bd10      	pop	{r4, pc}
 8004210:	40012300 	.word	0x40012300
 8004214:	0f000001 	.word	0x0f000001

08004218 <HAL_ADC_ConfigChannel>:
{
 8004218:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0U;
 800421a:	2300      	movs	r3, #0
 800421c:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 800421e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004222:	2b01      	cmp	r3, #1
 8004224:	f000 8082 	beq.w	800432c <HAL_ADC_ConfigChannel+0x114>
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004228:	680d      	ldr	r5, [r1, #0]
 800422a:	6804      	ldr	r4, [r0, #0]
 800422c:	688a      	ldr	r2, [r1, #8]
  __HAL_LOCK(hadc);
 800422e:	2301      	movs	r3, #1
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004230:	2d09      	cmp	r5, #9
  __HAL_LOCK(hadc);
 8004232:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 8004236:	b2ae      	uxth	r6, r5
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004238:	d943      	bls.n	80042c2 <HAL_ADC_ConfigChannel+0xaa>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800423a:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 800423e:	68e7      	ldr	r7, [r4, #12]
 8004240:	3b1e      	subs	r3, #30
 8004242:	f04f 0e07 	mov.w	lr, #7
 8004246:	fa0e fe03 	lsl.w	lr, lr, r3
 800424a:	ea27 070e 	bic.w	r7, r7, lr
 800424e:	60e7      	str	r7, [r4, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004250:	68e7      	ldr	r7, [r4, #12]
 8004252:	fa02 f303 	lsl.w	r3, r2, r3
 8004256:	433b      	orrs	r3, r7
 8004258:	60e3      	str	r3, [r4, #12]
  if (sConfig->Rank < 7U)
 800425a:	684a      	ldr	r2, [r1, #4]
 800425c:	2a06      	cmp	r2, #6
 800425e:	ea4f 0382 	mov.w	r3, r2, lsl #2
 8004262:	d83e      	bhi.n	80042e2 <HAL_ADC_ConfigChannel+0xca>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004264:	4413      	add	r3, r2
 8004266:	6b67      	ldr	r7, [r4, #52]	; 0x34
 8004268:	1f59      	subs	r1, r3, #5
 800426a:	231f      	movs	r3, #31
 800426c:	408b      	lsls	r3, r1
 800426e:	ea27 0303 	bic.w	r3, r7, r3
 8004272:	6363      	str	r3, [r4, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004274:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8004276:	fa06 f101 	lsl.w	r1, r6, r1
 800427a:	4311      	orrs	r1, r2
 800427c:	6361      	str	r1, [r4, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800427e:	4b2c      	ldr	r3, [pc, #176]	; (8004330 <HAL_ADC_ConfigChannel+0x118>)
 8004280:	429c      	cmp	r4, r3
 8004282:	d14d      	bne.n	8004320 <HAL_ADC_ConfigChannel+0x108>
 8004284:	2d12      	cmp	r5, #18
 8004286:	d104      	bne.n	8004292 <HAL_ADC_ConfigChannel+0x7a>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004288:	4a2a      	ldr	r2, [pc, #168]	; (8004334 <HAL_ADC_ConfigChannel+0x11c>)
 800428a:	6853      	ldr	r3, [r2, #4]
 800428c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004290:	6053      	str	r3, [r2, #4]
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004292:	f1a5 0310 	sub.w	r3, r5, #16
 8004296:	2b01      	cmp	r3, #1
 8004298:	d842      	bhi.n	8004320 <HAL_ADC_ConfigChannel+0x108>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800429a:	4a26      	ldr	r2, [pc, #152]	; (8004334 <HAL_ADC_ConfigChannel+0x11c>)
 800429c:	6853      	ldr	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800429e:	2d10      	cmp	r5, #16
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80042a0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80042a4:	6053      	str	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80042a6:	d13b      	bne.n	8004320 <HAL_ADC_ConfigChannel+0x108>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80042a8:	4b23      	ldr	r3, [pc, #140]	; (8004338 <HAL_ADC_ConfigChannel+0x120>)
 80042aa:	4a24      	ldr	r2, [pc, #144]	; (800433c <HAL_ADC_ConfigChannel+0x124>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	fbb3 f2f2 	udiv	r2, r3, r2
 80042b2:	230a      	movs	r3, #10
 80042b4:	4353      	muls	r3, r2
 80042b6:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 80042b8:	9b01      	ldr	r3, [sp, #4]
 80042ba:	b38b      	cbz	r3, 8004320 <HAL_ADC_ConfigChannel+0x108>
        counter--;
 80042bc:	9b01      	ldr	r3, [sp, #4]
 80042be:	3b01      	subs	r3, #1
 80042c0:	e7f9      	b.n	80042b6 <HAL_ADC_ConfigChannel+0x9e>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80042c2:	6927      	ldr	r7, [r4, #16]
 80042c4:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 80042c8:	f04f 0e07 	mov.w	lr, #7
 80042cc:	fa0e fe03 	lsl.w	lr, lr, r3
 80042d0:	ea27 070e 	bic.w	r7, r7, lr
 80042d4:	6127      	str	r7, [r4, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80042d6:	6927      	ldr	r7, [r4, #16]
 80042d8:	fa02 f303 	lsl.w	r3, r2, r3
 80042dc:	433b      	orrs	r3, r7
 80042de:	6123      	str	r3, [r4, #16]
 80042e0:	e7bb      	b.n	800425a <HAL_ADC_ConfigChannel+0x42>
  else if (sConfig->Rank < 13U)
 80042e2:	2a0c      	cmp	r2, #12
 80042e4:	d80e      	bhi.n	8004304 <HAL_ADC_ConfigChannel+0xec>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80042e6:	4413      	add	r3, r2
 80042e8:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80042ea:	f1a3 0223 	sub.w	r2, r3, #35	; 0x23
 80042ee:	231f      	movs	r3, #31
 80042f0:	4093      	lsls	r3, r2
 80042f2:	ea21 0303 	bic.w	r3, r1, r3
 80042f6:	6323      	str	r3, [r4, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80042f8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80042fa:	fa06 f202 	lsl.w	r2, r6, r2
 80042fe:	431a      	orrs	r2, r3
 8004300:	6322      	str	r2, [r4, #48]	; 0x30
 8004302:	e7bc      	b.n	800427e <HAL_ADC_ConfigChannel+0x66>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004304:	4413      	add	r3, r2
 8004306:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004308:	3b41      	subs	r3, #65	; 0x41
 800430a:	221f      	movs	r2, #31
 800430c:	409a      	lsls	r2, r3
 800430e:	ea21 0202 	bic.w	r2, r1, r2
 8004312:	62e2      	str	r2, [r4, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004314:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004316:	fa06 f103 	lsl.w	r1, r6, r3
 800431a:	4311      	orrs	r1, r2
 800431c:	62e1      	str	r1, [r4, #44]	; 0x2c
 800431e:	e7ae      	b.n	800427e <HAL_ADC_ConfigChannel+0x66>
  __HAL_UNLOCK(hadc);
 8004320:	2300      	movs	r3, #0
 8004322:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8004326:	4618      	mov	r0, r3
}
 8004328:	b003      	add	sp, #12
 800432a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(hadc);
 800432c:	2002      	movs	r0, #2
 800432e:	e7fb      	b.n	8004328 <HAL_ADC_ConfigChannel+0x110>
 8004330:	40012000 	.word	0x40012000
 8004334:	40012300 	.word	0x40012300
 8004338:	20000004 	.word	0x20000004
 800433c:	000f4240 	.word	0x000f4240

08004340 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004340:	4a07      	ldr	r2, [pc, #28]	; (8004360 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8004342:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004344:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004348:	041b      	lsls	r3, r3, #16
 800434a:	0c1b      	lsrs	r3, r3, #16
 800434c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8004350:	0200      	lsls	r0, r0, #8
 8004352:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004356:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800435a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800435c:	60d3      	str	r3, [r2, #12]
 800435e:	4770      	bx	lr
 8004360:	e000ed00 	.word	0xe000ed00

08004364 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004364:	4b17      	ldr	r3, [pc, #92]	; (80043c4 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004366:	b530      	push	{r4, r5, lr}
 8004368:	68dc      	ldr	r4, [r3, #12]
 800436a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800436e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004372:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004374:	2b04      	cmp	r3, #4
 8004376:	bf28      	it	cs
 8004378:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800437a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800437c:	f04f 0501 	mov.w	r5, #1
 8004380:	fa05 f303 	lsl.w	r3, r5, r3
 8004384:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004388:	bf8c      	ite	hi
 800438a:	3c03      	subhi	r4, #3
 800438c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800438e:	4019      	ands	r1, r3
 8004390:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004392:	fa05 f404 	lsl.w	r4, r5, r4
 8004396:	3c01      	subs	r4, #1
 8004398:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 800439a:	2800      	cmp	r0, #0
         );
 800439c:	ea42 0201 	orr.w	r2, r2, r1
 80043a0:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043a4:	bfaf      	iteee	ge
 80043a6:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043aa:	f000 000f 	andlt.w	r0, r0, #15
 80043ae:	4b06      	ldrlt	r3, [pc, #24]	; (80043c8 <HAL_NVIC_SetPriority+0x64>)
 80043b0:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043b2:	bfa5      	ittet	ge
 80043b4:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80043b8:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043ba:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043bc:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80043c0:	bd30      	pop	{r4, r5, pc}
 80043c2:	bf00      	nop
 80043c4:	e000ed00 	.word	0xe000ed00
 80043c8:	e000ed14 	.word	0xe000ed14

080043cc <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80043cc:	0942      	lsrs	r2, r0, #5
 80043ce:	2301      	movs	r3, #1
 80043d0:	f000 001f 	and.w	r0, r0, #31
 80043d4:	fa03 f000 	lsl.w	r0, r3, r0
 80043d8:	4b01      	ldr	r3, [pc, #4]	; (80043e0 <HAL_NVIC_EnableIRQ+0x14>)
 80043da:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80043de:	4770      	bx	lr
 80043e0:	e000e100 	.word	0xe000e100

080043e4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80043e4:	3801      	subs	r0, #1
 80043e6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80043ea:	d20a      	bcs.n	8004402 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80043ec:	4b06      	ldr	r3, [pc, #24]	; (8004408 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043ee:	4a07      	ldr	r2, [pc, #28]	; (800440c <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80043f0:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043f2:	21f0      	movs	r1, #240	; 0xf0
 80043f4:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80043f8:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80043fa:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80043fc:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80043fe:	601a      	str	r2, [r3, #0]
 8004400:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8004402:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8004404:	4770      	bx	lr
 8004406:	bf00      	nop
 8004408:	e000e010 	.word	0xe000e010
 800440c:	e000ed00 	.word	0xe000ed00

08004410 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8004410:	4b04      	ldr	r3, [pc, #16]	; (8004424 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8004412:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8004414:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8004416:	bf0c      	ite	eq
 8004418:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800441c:	f022 0204 	bicne.w	r2, r2, #4
 8004420:	601a      	str	r2, [r3, #0]
 8004422:	4770      	bx	lr
 8004424:	e000e010 	.word	0xe000e010

08004428 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8004428:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 800442a:	f7fe fe97 	bl	800315c <HAL_SYSTICK_Callback>
 800442e:	bd08      	pop	{r3, pc}

08004430 <_ZL23DMA_CalcBaseAndBitshiftP19__DMA_HandleTypeDef>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004430:	6803      	ldr	r3, [r0, #0]
 8004432:	b2da      	uxtb	r2, r3
 8004434:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004438:	f023 0303 	bic.w	r3, r3, #3
 800443c:	2118      	movs	r1, #24
 800443e:	3a10      	subs	r2, #16
 8004440:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004444:	4904      	ldr	r1, [pc, #16]	; (8004458 <_ZL23DMA_CalcBaseAndBitshiftP19__DMA_HandleTypeDef+0x28>)
  
  if (stream_number > 3U)
 8004446:	2a03      	cmp	r2, #3
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004448:	bf88      	it	hi
 800444a:	3304      	addhi	r3, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800444c:	5c89      	ldrb	r1, [r1, r2]
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800444e:	6583      	str	r3, [r0, #88]	; 0x58
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004450:	65c1      	str	r1, [r0, #92]	; 0x5c
  }
  
  return hdma->StreamBaseAddress;
}
 8004452:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8004454:	4770      	bx	lr
 8004456:	bf00      	nop
 8004458:	08009194 	.word	0x08009194

0800445c <HAL_DMA_Init>:
{
 800445c:	b570      	push	{r4, r5, r6, lr}
 800445e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8004460:	f7ff fe20 	bl	80040a4 <HAL_GetTick>
 8004464:	4605      	mov	r5, r0
  if(hdma == NULL)
 8004466:	2c00      	cmp	r4, #0
 8004468:	d071      	beq.n	800454e <HAL_DMA_Init+0xf2>
  __HAL_UNLOCK(hdma);
 800446a:	2300      	movs	r3, #0
 800446c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 8004470:	6822      	ldr	r2, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 8004472:	2302      	movs	r3, #2
 8004474:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8004478:	6813      	ldr	r3, [r2, #0]
 800447a:	f023 0301 	bic.w	r3, r3, #1
 800447e:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004480:	6821      	ldr	r1, [r4, #0]
 8004482:	680b      	ldr	r3, [r1, #0]
 8004484:	07d8      	lsls	r0, r3, #31
 8004486:	d50a      	bpl.n	800449e <HAL_DMA_Init+0x42>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004488:	f7ff fe0c 	bl	80040a4 <HAL_GetTick>
 800448c:	1b40      	subs	r0, r0, r5
 800448e:	2805      	cmp	r0, #5
 8004490:	d9f6      	bls.n	8004480 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004492:	2320      	movs	r3, #32
 8004494:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004496:	2003      	movs	r0, #3
        hdma->State = HAL_DMA_STATE_READY;
 8004498:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 800449c:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 800449e:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80044a0:	4d2c      	ldr	r5, [pc, #176]	; (8004554 <HAL_DMA_Init+0xf8>)
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80044a2:	6862      	ldr	r2, [r4, #4]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044a4:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80044a6:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80044a8:	68a3      	ldr	r3, [r4, #8]
 80044aa:	4313      	orrs	r3, r2
 80044ac:	68e2      	ldr	r2, [r4, #12]
 80044ae:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80044b0:	6922      	ldr	r2, [r4, #16]
 80044b2:	4313      	orrs	r3, r2
 80044b4:	6962      	ldr	r2, [r4, #20]
 80044b6:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044b8:	69e2      	ldr	r2, [r4, #28]
 80044ba:	4303      	orrs	r3, r0
 80044bc:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 80044be:	6a22      	ldr	r2, [r4, #32]
 80044c0:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80044c2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80044c4:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80044c6:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80044ca:	bf01      	itttt	eq
 80044cc:	6b26      	ldreq	r6, [r4, #48]	; 0x30
 80044ce:	6ae5      	ldreq	r5, [r4, #44]	; 0x2c
 80044d0:	4335      	orreq	r5, r6
 80044d2:	432b      	orreq	r3, r5
  hdma->Instance->CR = tmp;  
 80044d4:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 80044d6:	694b      	ldr	r3, [r1, #20]
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80044d8:	2a04      	cmp	r2, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80044da:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 80044de:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80044e2:	d10b      	bne.n	80044fc <HAL_DMA_Init+0xa0>
    tmp |= hdma->Init.FIFOThreshold;
 80044e4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80044e6:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 80044e8:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80044ea:	b13d      	cbz	r5, 80044fc <HAL_DMA_Init+0xa0>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80044ec:	b9a0      	cbnz	r0, 8004518 <HAL_DMA_Init+0xbc>
  {
    switch (tmp)
 80044ee:	2a01      	cmp	r2, #1
 80044f0:	d022      	beq.n	8004538 <HAL_DMA_Init+0xdc>
 80044f2:	d301      	bcc.n	80044f8 <HAL_DMA_Init+0x9c>
 80044f4:	2a02      	cmp	r2, #2
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80044f6:	d101      	bne.n	80044fc <HAL_DMA_Init+0xa0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80044f8:	01ea      	lsls	r2, r5, #7
 80044fa:	d420      	bmi.n	800453e <HAL_DMA_Init+0xe2>
  hdma->Instance->FCR = tmp;
 80044fc:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80044fe:	4620      	mov	r0, r4
 8004500:	f7ff ff96 	bl	8004430 <_ZL23DMA_CalcBaseAndBitshiftP19__DMA_HandleTypeDef>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004504:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004506:	233f      	movs	r3, #63	; 0x3f
 8004508:	4093      	lsls	r3, r2
 800450a:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800450c:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 800450e:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004510:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8004512:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8004516:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004518:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 800451c:	d113      	bne.n	8004546 <HAL_DMA_Init+0xea>
    switch (tmp)
 800451e:	2a03      	cmp	r2, #3
 8004520:	d8ec      	bhi.n	80044fc <HAL_DMA_Init+0xa0>
 8004522:	a001      	add	r0, pc, #4	; (adr r0, 8004528 <HAL_DMA_Init+0xcc>)
 8004524:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8004528:	0800453f 	.word	0x0800453f
 800452c:	080044f9 	.word	0x080044f9
 8004530:	0800453f 	.word	0x0800453f
 8004534:	08004539 	.word	0x08004539
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004538:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 800453c:	d1de      	bne.n	80044fc <HAL_DMA_Init+0xa0>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800453e:	2340      	movs	r3, #64	; 0x40
 8004540:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8004542:	2001      	movs	r0, #1
 8004544:	e7a8      	b.n	8004498 <HAL_DMA_Init+0x3c>
    switch (tmp)
 8004546:	2a02      	cmp	r2, #2
 8004548:	d9f9      	bls.n	800453e <HAL_DMA_Init+0xe2>
 800454a:	2a03      	cmp	r2, #3
 800454c:	e7d3      	b.n	80044f6 <HAL_DMA_Init+0x9a>
    return HAL_ERROR;
 800454e:	2001      	movs	r0, #1
 8004550:	bd70      	pop	{r4, r5, r6, pc}
 8004552:	bf00      	nop
 8004554:	f010803f 	.word	0xf010803f

08004558 <HAL_DMA_Start_IT>:
{
 8004558:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 800455a:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 800455e:	2c01      	cmp	r4, #1
 8004560:	d036      	beq.n	80045d0 <HAL_DMA_Start_IT+0x78>
 8004562:	2401      	movs	r4, #1
 8004564:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8004568:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800456c:	6d86      	ldr	r6, [r0, #88]	; 0x58
  if(HAL_DMA_STATE_READY == hdma->State)
 800456e:	2c01      	cmp	r4, #1
 8004570:	f04f 0500 	mov.w	r5, #0
 8004574:	f04f 0402 	mov.w	r4, #2
 8004578:	d128      	bne.n	80045cc <HAL_DMA_Start_IT+0x74>
    hdma->State = HAL_DMA_STATE_BUSY;
 800457a:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800457e:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004580:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004582:	6825      	ldr	r5, [r4, #0]
 8004584:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 8004588:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 800458a:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800458c:	6883      	ldr	r3, [r0, #8]
 800458e:	2b40      	cmp	r3, #64	; 0x40
    hdma->Instance->PAR = DstAddress;
 8004590:	bf0e      	itee	eq
 8004592:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->PAR = SrcAddress;
 8004594:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 8004596:	60e2      	strne	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004598:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
    hdma->Instance->M0AR = SrcAddress;
 800459a:	bf08      	it	eq
 800459c:	60e1      	streq	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800459e:	233f      	movs	r3, #63	; 0x3f
 80045a0:	4093      	lsls	r3, r2
 80045a2:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80045a4:	6823      	ldr	r3, [r4, #0]
 80045a6:	f043 0316 	orr.w	r3, r3, #22
 80045aa:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80045ac:	6963      	ldr	r3, [r4, #20]
 80045ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045b2:	6163      	str	r3, [r4, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 80045b4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80045b6:	b11b      	cbz	r3, 80045c0 <HAL_DMA_Start_IT+0x68>
      hdma->Instance->CR  |= DMA_IT_HT;
 80045b8:	6823      	ldr	r3, [r4, #0]
 80045ba:	f043 0308 	orr.w	r3, r3, #8
 80045be:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 80045c0:	6823      	ldr	r3, [r4, #0]
 80045c2:	f043 0301 	orr.w	r3, r3, #1
 80045c6:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80045c8:	2000      	movs	r0, #0
 80045ca:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hdma);	  
 80045cc:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  __HAL_LOCK(hdma);
 80045d0:	2002      	movs	r0, #2
}
 80045d2:	bd70      	pop	{r4, r5, r6, pc}

080045d4 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80045d4:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80045d8:	2b02      	cmp	r3, #2
 80045da:	d003      	beq.n	80045e4 <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80045dc:	2380      	movs	r3, #128	; 0x80
 80045de:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 80045e0:	2001      	movs	r0, #1
 80045e2:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 80045e4:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 80045e6:	2305      	movs	r3, #5
 80045e8:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 80045ec:	6813      	ldr	r3, [r2, #0]
 80045ee:	f023 0301 	bic.w	r3, r3, #1
 80045f2:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 80045f4:	2000      	movs	r0, #0
}
 80045f6:	4770      	bx	lr

080045f8 <HAL_DMA_IRQHandler>:
{
 80045f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
 80045fa:	2300      	movs	r3, #0
 80045fc:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 80045fe:	4b5a      	ldr	r3, [pc, #360]	; (8004768 <HAL_DMA_IRQHandler+0x170>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004600:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 8004602:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004604:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 8004606:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004608:	2208      	movs	r2, #8
 800460a:	409a      	lsls	r2, r3
 800460c:	4216      	tst	r6, r2
{
 800460e:	4604      	mov	r4, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004610:	d00c      	beq.n	800462c <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004612:	6801      	ldr	r1, [r0, #0]
 8004614:	6808      	ldr	r0, [r1, #0]
 8004616:	0740      	lsls	r0, r0, #29
 8004618:	d508      	bpl.n	800462c <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800461a:	6808      	ldr	r0, [r1, #0]
 800461c:	f020 0004 	bic.w	r0, r0, #4
 8004620:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004622:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004624:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8004626:	f042 0201 	orr.w	r2, r2, #1
 800462a:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800462c:	2201      	movs	r2, #1
 800462e:	409a      	lsls	r2, r3
 8004630:	4216      	tst	r6, r2
 8004632:	d008      	beq.n	8004646 <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004634:	6821      	ldr	r1, [r4, #0]
 8004636:	6949      	ldr	r1, [r1, #20]
 8004638:	0609      	lsls	r1, r1, #24
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800463a:	bf41      	itttt	mi
 800463c:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800463e:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 8004640:	f042 0202 	orrmi.w	r2, r2, #2
 8004644:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004646:	2204      	movs	r2, #4
 8004648:	409a      	lsls	r2, r3
 800464a:	4216      	tst	r6, r2
 800464c:	d008      	beq.n	8004660 <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800464e:	6821      	ldr	r1, [r4, #0]
 8004650:	6809      	ldr	r1, [r1, #0]
 8004652:	0788      	lsls	r0, r1, #30
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004654:	bf41      	itttt	mi
 8004656:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004658:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 800465a:	f042 0204 	orrmi.w	r2, r2, #4
 800465e:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004660:	2210      	movs	r2, #16
 8004662:	409a      	lsls	r2, r3
 8004664:	4216      	tst	r6, r2
 8004666:	d010      	beq.n	800468a <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004668:	6823      	ldr	r3, [r4, #0]
 800466a:	6819      	ldr	r1, [r3, #0]
 800466c:	0709      	lsls	r1, r1, #28
 800466e:	d50c      	bpl.n	800468a <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004670:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004672:	681a      	ldr	r2, [r3, #0]
 8004674:	0350      	lsls	r0, r2, #13
 8004676:	d535      	bpl.n	80046e4 <HAL_DMA_IRQHandler+0xec>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	0319      	lsls	r1, r3, #12
 800467c:	d401      	bmi.n	8004682 <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 800467e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004680:	e000      	b.n	8004684 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004682:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 8004684:	b10b      	cbz	r3, 800468a <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 8004686:	4620      	mov	r0, r4
 8004688:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800468a:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800468c:	2220      	movs	r2, #32
 800468e:	408a      	lsls	r2, r1
 8004690:	4216      	tst	r6, r2
 8004692:	d038      	beq.n	8004706 <HAL_DMA_IRQHandler+0x10e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004694:	6823      	ldr	r3, [r4, #0]
 8004696:	6818      	ldr	r0, [r3, #0]
 8004698:	06c6      	lsls	r6, r0, #27
 800469a:	d534      	bpl.n	8004706 <HAL_DMA_IRQHandler+0x10e>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800469c:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800469e:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 80046a2:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80046a4:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80046a6:	d125      	bne.n	80046f4 <HAL_DMA_IRQHandler+0xfc>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80046a8:	f022 0216 	bic.w	r2, r2, #22
 80046ac:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80046ae:	695a      	ldr	r2, [r3, #20]
 80046b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80046b4:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80046b6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80046b8:	b90a      	cbnz	r2, 80046be <HAL_DMA_IRQHandler+0xc6>
 80046ba:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80046bc:	b11a      	cbz	r2, 80046c6 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80046be:	681a      	ldr	r2, [r3, #0]
 80046c0:	f022 0208 	bic.w	r2, r2, #8
 80046c4:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80046c6:	233f      	movs	r3, #63	; 0x3f
 80046c8:	408b      	lsls	r3, r1
 80046ca:	60ab      	str	r3, [r5, #8]
        __HAL_UNLOCK(hdma);
 80046cc:	2300      	movs	r3, #0
 80046ce:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 80046d2:	2301      	movs	r3, #1
 80046d4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 80046d8:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 80046da:	b10b      	cbz	r3, 80046e0 <HAL_DMA_IRQHandler+0xe8>
      hdma->XferErrorCallback(hdma);
 80046dc:	4620      	mov	r0, r4
 80046de:	4798      	blx	r3
}
 80046e0:	b003      	add	sp, #12
 80046e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	05d2      	lsls	r2, r2, #23
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80046e8:	bf5e      	ittt	pl
 80046ea:	681a      	ldrpl	r2, [r3, #0]
 80046ec:	f022 0208 	bicpl.w	r2, r2, #8
 80046f0:	601a      	strpl	r2, [r3, #0]
 80046f2:	e7c4      	b.n	800467e <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80046f4:	0350      	lsls	r0, r2, #13
 80046f6:	d528      	bpl.n	800474a <HAL_DMA_IRQHandler+0x152>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	0319      	lsls	r1, r3, #12
 80046fc:	d432      	bmi.n	8004764 <HAL_DMA_IRQHandler+0x16c>
          if(hdma->XferM1CpltCallback != NULL)
 80046fe:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 8004700:	b10b      	cbz	r3, 8004706 <HAL_DMA_IRQHandler+0x10e>
          hdma->XferCpltCallback(hdma);
 8004702:	4620      	mov	r0, r4
 8004704:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004706:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004708:	2b00      	cmp	r3, #0
 800470a:	d0e9      	beq.n	80046e0 <HAL_DMA_IRQHandler+0xe8>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800470c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800470e:	07da      	lsls	r2, r3, #31
 8004710:	d519      	bpl.n	8004746 <HAL_DMA_IRQHandler+0x14e>
      hdma->State = HAL_DMA_STATE_ABORT;
 8004712:	2305      	movs	r3, #5
      __HAL_DMA_DISABLE(hdma);
 8004714:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 8004716:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 800471a:	6813      	ldr	r3, [r2, #0]
 800471c:	f023 0301 	bic.w	r3, r3, #1
 8004720:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004722:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8004726:	fbb7 f7f3 	udiv	r7, r7, r3
        if (++count > timeout)
 800472a:	9b01      	ldr	r3, [sp, #4]
 800472c:	3301      	adds	r3, #1
 800472e:	429f      	cmp	r7, r3
 8004730:	9301      	str	r3, [sp, #4]
 8004732:	d302      	bcc.n	800473a <HAL_DMA_IRQHandler+0x142>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004734:	6813      	ldr	r3, [r2, #0]
      do
 8004736:	07db      	lsls	r3, r3, #31
 8004738:	d4f7      	bmi.n	800472a <HAL_DMA_IRQHandler+0x132>
      __HAL_UNLOCK(hdma);
 800473a:	2300      	movs	r3, #0
 800473c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8004740:	2301      	movs	r3, #1
 8004742:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8004746:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8004748:	e7c7      	b.n	80046da <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800474a:	681a      	ldr	r2, [r3, #0]
 800474c:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8004750:	d108      	bne.n	8004764 <HAL_DMA_IRQHandler+0x16c>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004752:	6819      	ldr	r1, [r3, #0]
 8004754:	f021 0110 	bic.w	r1, r1, #16
 8004758:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 800475a:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 800475c:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8004760:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8004764:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004766:	e7cb      	b.n	8004700 <HAL_DMA_IRQHandler+0x108>
 8004768:	20000004 	.word	0x20000004

0800476c <_ZL24FLASH_Program_DoubleWordmy>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800476c:	4908      	ldr	r1, [pc, #32]	; (8004790 <_ZL24FLASH_Program_DoubleWordmy+0x24>)
{
 800476e:	b510      	push	{r4, lr}
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004770:	690c      	ldr	r4, [r1, #16]
 8004772:	f424 7440 	bic.w	r4, r4, #768	; 0x300
 8004776:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8004778:	690c      	ldr	r4, [r1, #16]
 800477a:	f444 7440 	orr.w	r4, r4, #768	; 0x300
 800477e:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004780:	690c      	ldr	r4, [r1, #16]
 8004782:	f044 0401 	orr.w	r4, r4, #1
 8004786:	610c      	str	r4, [r1, #16]

  /* Program the double-word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8004788:	6002      	str	r2, [r0, #0]
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 800478a:	6043      	str	r3, [r0, #4]
 800478c:	bd10      	pop	{r4, pc}
 800478e:	bf00      	nop
 8004790:	40023c00 	.word	0x40023c00

08004794 <_ZL18FLASH_Program_Wordmm>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004794:	4b07      	ldr	r3, [pc, #28]	; (80047b4 <_ZL18FLASH_Program_Wordmm+0x20>)
 8004796:	691a      	ldr	r2, [r3, #16]
 8004798:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800479c:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800479e:	691a      	ldr	r2, [r3, #16]
 80047a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047a4:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 80047a6:	691a      	ldr	r2, [r3, #16]
 80047a8:	f042 0201 	orr.w	r2, r2, #1
 80047ac:	611a      	str	r2, [r3, #16]

  *(__IO uint32_t*)Address = Data;
 80047ae:	6001      	str	r1, [r0, #0]
 80047b0:	4770      	bx	lr
 80047b2:	bf00      	nop
 80047b4:	40023c00 	.word	0x40023c00

080047b8 <_ZL22FLASH_Program_HalfWordmt>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80047b8:	4b07      	ldr	r3, [pc, #28]	; (80047d8 <_ZL22FLASH_Program_HalfWordmt+0x20>)
 80047ba:	691a      	ldr	r2, [r3, #16]
 80047bc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80047c0:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80047c2:	691a      	ldr	r2, [r3, #16]
 80047c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047c8:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 80047ca:	691a      	ldr	r2, [r3, #16]
 80047cc:	f042 0201 	orr.w	r2, r2, #1
 80047d0:	611a      	str	r2, [r3, #16]

  *(__IO uint16_t*)Address = Data;
 80047d2:	8001      	strh	r1, [r0, #0]
 80047d4:	4770      	bx	lr
 80047d6:	bf00      	nop
 80047d8:	40023c00 	.word	0x40023c00

080047dc <_ZL18FLASH_SetErrorCodev>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80047dc:	4b20      	ldr	r3, [pc, #128]	; (8004860 <_ZL18FLASH_SetErrorCodev+0x84>)
 80047de:	68da      	ldr	r2, [r3, #12]
 80047e0:	06d0      	lsls	r0, r2, #27
 80047e2:	d506      	bpl.n	80047f2 <_ZL18FLASH_SetErrorCodev+0x16>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80047e4:	491f      	ldr	r1, [pc, #124]	; (8004864 <_ZL18FLASH_SetErrorCodev+0x88>)
 80047e6:	69ca      	ldr	r2, [r1, #28]
 80047e8:	f042 0210 	orr.w	r2, r2, #16
 80047ec:	61ca      	str	r2, [r1, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80047ee:	2210      	movs	r2, #16
 80047f0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80047f2:	68da      	ldr	r2, [r3, #12]
 80047f4:	0691      	lsls	r1, r2, #26
 80047f6:	d506      	bpl.n	8004806 <_ZL18FLASH_SetErrorCodev+0x2a>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80047f8:	491a      	ldr	r1, [pc, #104]	; (8004864 <_ZL18FLASH_SetErrorCodev+0x88>)
 80047fa:	69ca      	ldr	r2, [r1, #28]
 80047fc:	f042 0208 	orr.w	r2, r2, #8
 8004800:	61ca      	str	r2, [r1, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8004802:	2220      	movs	r2, #32
 8004804:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8004806:	4b16      	ldr	r3, [pc, #88]	; (8004860 <_ZL18FLASH_SetErrorCodev+0x84>)
 8004808:	68da      	ldr	r2, [r3, #12]
 800480a:	0652      	lsls	r2, r2, #25
 800480c:	d506      	bpl.n	800481c <_ZL18FLASH_SetErrorCodev+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800480e:	4915      	ldr	r1, [pc, #84]	; (8004864 <_ZL18FLASH_SetErrorCodev+0x88>)
 8004810:	69ca      	ldr	r2, [r1, #28]
 8004812:	f042 0204 	orr.w	r2, r2, #4
 8004816:	61ca      	str	r2, [r1, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8004818:	2240      	movs	r2, #64	; 0x40
 800481a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800481c:	68da      	ldr	r2, [r3, #12]
 800481e:	0610      	lsls	r0, r2, #24
 8004820:	d506      	bpl.n	8004830 <_ZL18FLASH_SetErrorCodev+0x54>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8004822:	4910      	ldr	r1, [pc, #64]	; (8004864 <_ZL18FLASH_SetErrorCodev+0x88>)
 8004824:	69ca      	ldr	r2, [r1, #28]
 8004826:	f042 0202 	orr.w	r2, r2, #2
 800482a:	61ca      	str	r2, [r1, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800482c:	2280      	movs	r2, #128	; 0x80
 800482e:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8004830:	4b0b      	ldr	r3, [pc, #44]	; (8004860 <_ZL18FLASH_SetErrorCodev+0x84>)
 8004832:	68da      	ldr	r2, [r3, #12]
 8004834:	05d1      	lsls	r1, r2, #23
 8004836:	d507      	bpl.n	8004848 <_ZL18FLASH_SetErrorCodev+0x6c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8004838:	490a      	ldr	r1, [pc, #40]	; (8004864 <_ZL18FLASH_SetErrorCodev+0x88>)
 800483a:	69ca      	ldr	r2, [r1, #28]
 800483c:	f042 0201 	orr.w	r2, r2, #1
 8004840:	61ca      	str	r2, [r1, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8004842:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004846:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8004848:	68da      	ldr	r2, [r3, #12]
 800484a:	0792      	lsls	r2, r2, #30
 800484c:	d506      	bpl.n	800485c <_ZL18FLASH_SetErrorCodev+0x80>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800484e:	4905      	ldr	r1, [pc, #20]	; (8004864 <_ZL18FLASH_SetErrorCodev+0x88>)
 8004850:	69ca      	ldr	r2, [r1, #28]
 8004852:	f042 0220 	orr.w	r2, r2, #32
 8004856:	61ca      	str	r2, [r1, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8004858:	2202      	movs	r2, #2
 800485a:	60da      	str	r2, [r3, #12]
 800485c:	4770      	bx	lr
 800485e:	bf00      	nop
 8004860:	40023c00 	.word	0x40023c00
 8004864:	20003ce4 	.word	0x20003ce4

08004868 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004868:	4b06      	ldr	r3, [pc, #24]	; (8004884 <HAL_FLASH_Unlock+0x1c>)
 800486a:	691a      	ldr	r2, [r3, #16]
 800486c:	2a00      	cmp	r2, #0
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800486e:	bfbf      	itttt	lt
 8004870:	4a05      	ldrlt	r2, [pc, #20]	; (8004888 <HAL_FLASH_Unlock+0x20>)
 8004872:	605a      	strlt	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004874:	f102 3288 	addlt.w	r2, r2, #2290649224	; 0x88888888
 8004878:	605a      	strlt	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800487a:	bfba      	itte	lt
 800487c:	6918      	ldrlt	r0, [r3, #16]
  HAL_StatusTypeDef status = HAL_OK;
 800487e:	0fc0      	lsrlt	r0, r0, #31
 8004880:	2000      	movge	r0, #0
}
 8004882:	4770      	bx	lr
 8004884:	40023c00 	.word	0x40023c00
 8004888:	45670123 	.word	0x45670123

0800488c <HAL_FLASH_Lock>:
  FLASH->CR |= FLASH_CR_LOCK;
 800488c:	4a03      	ldr	r2, [pc, #12]	; (800489c <HAL_FLASH_Lock+0x10>)
 800488e:	6913      	ldr	r3, [r2, #16]
 8004890:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004894:	6113      	str	r3, [r2, #16]
}
 8004896:	2000      	movs	r0, #0
 8004898:	4770      	bx	lr
 800489a:	bf00      	nop
 800489c:	40023c00 	.word	0x40023c00

080048a0 <FLASH_WaitForLastOperation>:
{ 
 80048a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80048a2:	4b12      	ldr	r3, [pc, #72]	; (80048ec <FLASH_WaitForLastOperation+0x4c>)
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80048a4:	4c12      	ldr	r4, [pc, #72]	; (80048f0 <FLASH_WaitForLastOperation+0x50>)
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80048a6:	2200      	movs	r2, #0
{ 
 80048a8:	4605      	mov	r5, r0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80048aa:	61da      	str	r2, [r3, #28]
  tickstart = HAL_GetTick();
 80048ac:	f7ff fbfa 	bl	80040a4 <HAL_GetTick>
 80048b0:	4626      	mov	r6, r4
 80048b2:	4607      	mov	r7, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80048b4:	68e3      	ldr	r3, [r4, #12]
 80048b6:	03d9      	lsls	r1, r3, #15
 80048b8:	d50a      	bpl.n	80048d0 <FLASH_WaitForLastOperation+0x30>
    if(Timeout != HAL_MAX_DELAY)
 80048ba:	1c6a      	adds	r2, r5, #1
 80048bc:	d0fa      	beq.n	80048b4 <FLASH_WaitForLastOperation+0x14>
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80048be:	b90d      	cbnz	r5, 80048c4 <FLASH_WaitForLastOperation+0x24>
        return HAL_TIMEOUT;
 80048c0:	2003      	movs	r0, #3
 80048c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80048c4:	f7ff fbee 	bl	80040a4 <HAL_GetTick>
 80048c8:	1bc0      	subs	r0, r0, r7
 80048ca:	4285      	cmp	r5, r0
 80048cc:	d3f8      	bcc.n	80048c0 <FLASH_WaitForLastOperation+0x20>
 80048ce:	e7f1      	b.n	80048b4 <FLASH_WaitForLastOperation+0x14>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80048d0:	68e3      	ldr	r3, [r4, #12]
 80048d2:	07db      	lsls	r3, r3, #31
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80048d4:	bf44      	itt	mi
 80048d6:	2301      	movmi	r3, #1
 80048d8:	60e3      	strmi	r3, [r4, #12]
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80048da:	68f0      	ldr	r0, [r6, #12]
 80048dc:	f410 70f9 	ands.w	r0, r0, #498	; 0x1f2
 80048e0:	d002      	beq.n	80048e8 <FLASH_WaitForLastOperation+0x48>
    FLASH_SetErrorCode();
 80048e2:	f7ff ff7b 	bl	80047dc <_ZL18FLASH_SetErrorCodev>
    return HAL_ERROR;
 80048e6:	2001      	movs	r0, #1
}  
 80048e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80048ea:	bf00      	nop
 80048ec:	20003ce4 	.word	0x20003ce4
 80048f0:	40023c00 	.word	0x40023c00

080048f4 <HAL_FLASH_Program>:
{
 80048f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(&pFlash);
 80048f8:	4d20      	ldr	r5, [pc, #128]	; (800497c <HAL_FLASH_Program+0x88>)
{
 80048fa:	4698      	mov	r8, r3
  __HAL_LOCK(&pFlash);
 80048fc:	7e2b      	ldrb	r3, [r5, #24]
 80048fe:	2b01      	cmp	r3, #1
{
 8004900:	4607      	mov	r7, r0
 8004902:	460e      	mov	r6, r1
 8004904:	4614      	mov	r4, r2
  __HAL_LOCK(&pFlash);
 8004906:	d035      	beq.n	8004974 <HAL_FLASH_Program+0x80>
 8004908:	2301      	movs	r3, #1
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800490a:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 800490e:	762b      	strb	r3, [r5, #24]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004910:	f7ff ffc6 	bl	80048a0 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8004914:	b9b0      	cbnz	r0, 8004944 <HAL_FLASH_Program+0x50>
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8004916:	b9cf      	cbnz	r7, 800494c <HAL_FLASH_Program+0x58>
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004918:	4b19      	ldr	r3, [pc, #100]	; (8004980 <HAL_FLASH_Program+0x8c>)
 800491a:	691a      	ldr	r2, [r3, #16]
 800491c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004920:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8004922:	691a      	ldr	r2, [r3, #16]
 8004924:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004926:	691a      	ldr	r2, [r3, #16]
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8004928:	b2e4      	uxtb	r4, r4
  FLASH->CR |= FLASH_CR_PG;
 800492a:	f042 0201 	orr.w	r2, r2, #1
 800492e:	611a      	str	r2, [r3, #16]
  *(__IO uint8_t*)Address = Data;
 8004930:	7034      	strb	r4, [r6, #0]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004932:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004936:	f7ff ffb3 	bl	80048a0 <FLASH_WaitForLastOperation>
    FLASH->CR &= (~FLASH_CR_PG);  
 800493a:	4a11      	ldr	r2, [pc, #68]	; (8004980 <HAL_FLASH_Program+0x8c>)
 800493c:	6913      	ldr	r3, [r2, #16]
 800493e:	f023 0301 	bic.w	r3, r3, #1
 8004942:	6113      	str	r3, [r2, #16]
  __HAL_UNLOCK(&pFlash);
 8004944:	2300      	movs	r3, #0
 8004946:	762b      	strb	r3, [r5, #24]
  return status;
 8004948:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800494c:	2f01      	cmp	r7, #1
 800494e:	d104      	bne.n	800495a <HAL_FLASH_Program+0x66>
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8004950:	b2a1      	uxth	r1, r4
 8004952:	4630      	mov	r0, r6
 8004954:	f7ff ff30 	bl	80047b8 <_ZL22FLASH_Program_HalfWordmt>
 8004958:	e7eb      	b.n	8004932 <HAL_FLASH_Program+0x3e>
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800495a:	2f02      	cmp	r7, #2
 800495c:	d104      	bne.n	8004968 <HAL_FLASH_Program+0x74>
      FLASH_Program_Word(Address, (uint32_t) Data);
 800495e:	4621      	mov	r1, r4
 8004960:	4630      	mov	r0, r6
 8004962:	f7ff ff17 	bl	8004794 <_ZL18FLASH_Program_Wordmm>
 8004966:	e7e4      	b.n	8004932 <HAL_FLASH_Program+0x3e>
      FLASH_Program_DoubleWord(Address, Data);
 8004968:	4622      	mov	r2, r4
 800496a:	4643      	mov	r3, r8
 800496c:	4630      	mov	r0, r6
 800496e:	f7ff fefd 	bl	800476c <_ZL24FLASH_Program_DoubleWordmy>
 8004972:	e7de      	b.n	8004932 <HAL_FLASH_Program+0x3e>
  __HAL_LOCK(&pFlash);
 8004974:	2002      	movs	r0, #2
}
 8004976:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800497a:	bf00      	nop
 800497c:	20003ce4 	.word	0x20003ce4
 8004980:	40023c00 	.word	0x40023c00

08004984 <_ZL15FLASH_MassErasehm.isra.0>:
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004984:	4b07      	ldr	r3, [pc, #28]	; (80049a4 <_ZL15FLASH_MassErasehm.isra.0+0x20>)
 8004986:	691a      	ldr	r2, [r3, #16]
 8004988:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800498c:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_MER;
 800498e:	691a      	ldr	r2, [r3, #16]
 8004990:	f042 0204 	orr.w	r2, r2, #4
 8004994:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8004996:	691a      	ldr	r2, [r3, #16]
 8004998:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800499c:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
 80049a0:	6118      	str	r0, [r3, #16]
 80049a2:	4770      	bx	lr
 80049a4:	40023c00 	.word	0x40023c00

080049a8 <FLASH_Erase_Sector>:

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80049a8:	b139      	cbz	r1, 80049ba <FLASH_Erase_Sector+0x12>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80049aa:	2901      	cmp	r1, #1
 80049ac:	d01c      	beq.n	80049e8 <FLASH_Erase_Sector+0x40>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80049ae:	2902      	cmp	r1, #2
  {
    tmp_psize = FLASH_PSIZE_WORD;
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80049b0:	bf0c      	ite	eq
 80049b2:	f44f 7100 	moveq.w	r1, #512	; 0x200
 80049b6:	f44f 7140 	movne.w	r1, #768	; 0x300
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80049ba:	4b0d      	ldr	r3, [pc, #52]	; (80049f0 <FLASH_Erase_Sector+0x48>)
 80049bc:	691a      	ldr	r2, [r3, #16]
 80049be:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80049c2:	611a      	str	r2, [r3, #16]
  FLASH->CR |= tmp_psize;
 80049c4:	691a      	ldr	r2, [r3, #16]
 80049c6:	4311      	orrs	r1, r2
 80049c8:	6119      	str	r1, [r3, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80049ca:	691a      	ldr	r2, [r3, #16]
 80049cc:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80049d0:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80049d2:	691a      	ldr	r2, [r3, #16]
 80049d4:	f042 0202 	orr.w	r2, r2, #2
 80049d8:	ea42 00c0 	orr.w	r0, r2, r0, lsl #3
 80049dc:	6118      	str	r0, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80049de:	691a      	ldr	r2, [r3, #16]
 80049e0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80049e4:	611a      	str	r2, [r3, #16]
 80049e6:	4770      	bx	lr
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80049e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80049ec:	e7e5      	b.n	80049ba <FLASH_Erase_Sector+0x12>
 80049ee:	bf00      	nop
 80049f0:	40023c00 	.word	0x40023c00

080049f4 <FLASH_FlushCaches>:
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 80049f4:	4b14      	ldr	r3, [pc, #80]	; (8004a48 <FLASH_FlushCaches+0x54>)
 80049f6:	681a      	ldr	r2, [r3, #0]
 80049f8:	0591      	lsls	r1, r2, #22
 80049fa:	d50f      	bpl.n	8004a1c <FLASH_FlushCaches+0x28>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80049fc:	681a      	ldr	r2, [r3, #0]
 80049fe:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004a02:	601a      	str	r2, [r3, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8004a04:	681a      	ldr	r2, [r3, #0]
 8004a06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a0a:	601a      	str	r2, [r3, #0]
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a12:	601a      	str	r2, [r3, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a1a:	601a      	str	r2, [r3, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8004a1c:	4b0a      	ldr	r3, [pc, #40]	; (8004a48 <FLASH_FlushCaches+0x54>)
 8004a1e:	681a      	ldr	r2, [r3, #0]
 8004a20:	0552      	lsls	r2, r2, #21
 8004a22:	d50f      	bpl.n	8004a44 <FLASH_FlushCaches+0x50>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8004a24:	681a      	ldr	r2, [r3, #0]
 8004a26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a2a:	601a      	str	r2, [r3, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8004a2c:	681a      	ldr	r2, [r3, #0]
 8004a2e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004a32:	601a      	str	r2, [r3, #0]
 8004a34:	681a      	ldr	r2, [r3, #0]
 8004a36:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004a3a:	601a      	str	r2, [r3, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004a42:	601a      	str	r2, [r3, #0]
 8004a44:	4770      	bx	lr
 8004a46:	bf00      	nop
 8004a48:	40023c00 	.word	0x40023c00

08004a4c <HAL_FLASHEx_Erase>:
{
 8004a4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  __HAL_LOCK(&pFlash);
 8004a50:	4e23      	ldr	r6, [pc, #140]	; (8004ae0 <HAL_FLASHEx_Erase+0x94>)
 8004a52:	7e33      	ldrb	r3, [r6, #24]
 8004a54:	2b01      	cmp	r3, #1
{
 8004a56:	4604      	mov	r4, r0
 8004a58:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 8004a5a:	d03f      	beq.n	8004adc <HAL_FLASHEx_Erase+0x90>
 8004a5c:	2301      	movs	r3, #1
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004a5e:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 8004a62:	7633      	strb	r3, [r6, #24]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004a64:	f7ff ff1c 	bl	80048a0 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8004a68:	4605      	mov	r5, r0
 8004a6a:	b9a8      	cbnz	r0, 8004a98 <HAL_FLASHEx_Erase+0x4c>
    *SectorError = 0xFFFFFFFFU;
 8004a6c:	f04f 33ff 	mov.w	r3, #4294967295
 8004a70:	f8c8 3000 	str.w	r3, [r8]
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8004a74:	6823      	ldr	r3, [r4, #0]
 8004a76:	2b01      	cmp	r3, #1
 8004a78:	d113      	bne.n	8004aa2 <HAL_FLASHEx_Erase+0x56>
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8004a7a:	7c20      	ldrb	r0, [r4, #16]
 8004a7c:	f7ff ff82 	bl	8004984 <_ZL15FLASH_MassErasehm.isra.0>
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004a80:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004a84:	f7ff ff0c 	bl	80048a0 <FLASH_WaitForLastOperation>
      FLASH->CR &= (~FLASH_MER_BIT);
 8004a88:	4a16      	ldr	r2, [pc, #88]	; (8004ae4 <HAL_FLASHEx_Erase+0x98>)
 8004a8a:	6913      	ldr	r3, [r2, #16]
 8004a8c:	f023 0304 	bic.w	r3, r3, #4
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004a90:	4605      	mov	r5, r0
      FLASH->CR &= (~FLASH_MER_BIT);
 8004a92:	6113      	str	r3, [r2, #16]
    FLASH_FlushCaches();    
 8004a94:	f7ff ffae 	bl	80049f4 <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 8004a98:	2300      	movs	r3, #0
 8004a9a:	7633      	strb	r3, [r6, #24]
}
 8004a9c:	4628      	mov	r0, r5
 8004a9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8004aa2:	68a7      	ldr	r7, [r4, #8]
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8004aa4:	f8df 903c 	ldr.w	r9, [pc, #60]	; 8004ae4 <HAL_FLASHEx_Erase+0x98>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8004aa8:	68e3      	ldr	r3, [r4, #12]
 8004aaa:	68a2      	ldr	r2, [r4, #8]
 8004aac:	4413      	add	r3, r2
 8004aae:	429f      	cmp	r7, r3
 8004ab0:	d2f0      	bcs.n	8004a94 <HAL_FLASHEx_Erase+0x48>
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8004ab2:	7c21      	ldrb	r1, [r4, #16]
 8004ab4:	4638      	mov	r0, r7
 8004ab6:	f7ff ff77 	bl	80049a8 <FLASH_Erase_Sector>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004aba:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004abe:	f7ff feef 	bl	80048a0 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8004ac2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8004ac6:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8004aca:	f8c9 3010 	str.w	r3, [r9, #16]
        if(status != HAL_OK) 
 8004ace:	b118      	cbz	r0, 8004ad8 <HAL_FLASHEx_Erase+0x8c>
          *SectorError = index;
 8004ad0:	f8c8 7000 	str.w	r7, [r8]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004ad4:	4605      	mov	r5, r0
          break;
 8004ad6:	e7dd      	b.n	8004a94 <HAL_FLASHEx_Erase+0x48>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8004ad8:	3701      	adds	r7, #1
 8004ada:	e7e5      	b.n	8004aa8 <HAL_FLASHEx_Erase+0x5c>
  __HAL_LOCK(&pFlash);
 8004adc:	2502      	movs	r5, #2
 8004ade:	e7dd      	b.n	8004a9c <HAL_FLASHEx_Erase+0x50>
 8004ae0:	20003ce4 	.word	0x20003ce4
 8004ae4:	40023c00 	.word	0x40023c00

08004ae8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004aec:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004aee:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004af0:	f8df 8164 	ldr.w	r8, [pc, #356]	; 8004c58 <HAL_GPIO_Init+0x170>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004af4:	4a56      	ldr	r2, [pc, #344]	; (8004c50 <HAL_GPIO_Init+0x168>)
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004af6:	9301      	str	r3, [sp, #4]
    ioposition = 0x01U << position;
 8004af8:	f04f 0901 	mov.w	r9, #1
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004afc:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004afe:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8004b00:	fa09 fa03 	lsl.w	sl, r9, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004b04:	ea0a 0504 	and.w	r5, sl, r4
    if(iocurrent == ioposition)
 8004b08:	45aa      	cmp	sl, r5
 8004b0a:	f040 8096 	bne.w	8004c3a <HAL_GPIO_Init+0x152>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004b0e:	684c      	ldr	r4, [r1, #4]
 8004b10:	f024 0b10 	bic.w	fp, r4, #16
 8004b14:	f1bb 0f02 	cmp.w	fp, #2
 8004b18:	d114      	bne.n	8004b44 <HAL_GPIO_Init+0x5c>
        temp = GPIOx->AFR[position >> 3U];
 8004b1a:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8004b1e:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004b22:	f003 0c07 	and.w	ip, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8004b26:	f8de 6020 	ldr.w	r6, [lr, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004b2a:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8004b2e:	270f      	movs	r7, #15
 8004b30:	fa07 f70c 	lsl.w	r7, r7, ip
 8004b34:	ea26 0707 	bic.w	r7, r6, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004b38:	690e      	ldr	r6, [r1, #16]
 8004b3a:	fa06 f60c 	lsl.w	r6, r6, ip
 8004b3e:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3U] = temp;
 8004b40:	f8ce 6020 	str.w	r6, [lr, #32]
 8004b44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004b48:	2703      	movs	r7, #3
      temp = GPIOx->MODER;
 8004b4a:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004b4c:	fa07 f70c 	lsl.w	r7, r7, ip
 8004b50:	43ff      	mvns	r7, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004b52:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004b56:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004b58:	fa0e fe0c 	lsl.w	lr, lr, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004b5c:	f10b 3bff 	add.w	fp, fp, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004b60:	ea4e 0606 	orr.w	r6, lr, r6
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004b64:	f1bb 0f01 	cmp.w	fp, #1
      GPIOx->MODER = temp;
 8004b68:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004b6a:	d811      	bhi.n	8004b90 <HAL_GPIO_Init+0xa8>
        temp = GPIOx->OSPEEDR; 
 8004b6c:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004b6e:	ea06 0b07 	and.w	fp, r6, r7
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004b72:	68ce      	ldr	r6, [r1, #12]
 8004b74:	fa06 fe0c 	lsl.w	lr, r6, ip
 8004b78:	ea4e 060b 	orr.w	r6, lr, fp
        GPIOx->OSPEEDR = temp;
 8004b7c:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8004b7e:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004b80:	ea26 0a0a 	bic.w	sl, r6, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004b84:	f3c4 1600 	ubfx	r6, r4, #4, #1
 8004b88:	409e      	lsls	r6, r3
 8004b8a:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OTYPER = temp;
 8004b8e:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 8004b90:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004b92:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004b94:	688e      	ldr	r6, [r1, #8]
 8004b96:	fa06 f60c 	lsl.w	r6, r6, ip
 8004b9a:	4337      	orrs	r7, r6
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004b9c:	00e6      	lsls	r6, r4, #3
      GPIOx->PUPDR = temp;
 8004b9e:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004ba0:	d54b      	bpl.n	8004c3a <HAL_GPIO_Init+0x152>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ba2:	2600      	movs	r6, #0
 8004ba4:	9603      	str	r6, [sp, #12]
 8004ba6:	f8d8 6044 	ldr.w	r6, [r8, #68]	; 0x44
 8004baa:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 8004bae:	f8c8 6044 	str.w	r6, [r8, #68]	; 0x44
 8004bb2:	f8d8 6044 	ldr.w	r6, [r8, #68]	; 0x44
 8004bb6:	f023 0703 	bic.w	r7, r3, #3
 8004bba:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8004bbe:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 8004bc2:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
 8004bc6:	9603      	str	r6, [sp, #12]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004bc8:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8004bcc:	68be      	ldr	r6, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004bce:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8004bd2:	f04f 0e0f 	mov.w	lr, #15
 8004bd6:	fa0e fe0c 	lsl.w	lr, lr, ip
 8004bda:	ea26 0e0e 	bic.w	lr, r6, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004bde:	4e1d      	ldr	r6, [pc, #116]	; (8004c54 <HAL_GPIO_Init+0x16c>)
 8004be0:	42b0      	cmp	r0, r6
 8004be2:	d031      	beq.n	8004c48 <HAL_GPIO_Init+0x160>
 8004be4:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8004be8:	42b0      	cmp	r0, r6
 8004bea:	d02f      	beq.n	8004c4c <HAL_GPIO_Init+0x164>
 8004bec:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8004bf0:	42b0      	cmp	r0, r6
 8004bf2:	bf14      	ite	ne
 8004bf4:	2607      	movne	r6, #7
 8004bf6:	2602      	moveq	r6, #2
 8004bf8:	fa06 f60c 	lsl.w	r6, r6, ip
 8004bfc:	ea46 060e 	orr.w	r6, r6, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004c00:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 8004c02:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8004c04:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004c06:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8004c0a:	bf0c      	ite	eq
 8004c0c:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8004c0e:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;
 8004c10:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 8004c12:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004c14:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8004c18:	bf0c      	ite	eq
 8004c1a:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8004c1c:	432e      	orrne	r6, r5
        }
        EXTI->EMR = temp;
 8004c1e:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004c20:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004c22:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8004c26:	bf0c      	ite	eq
 8004c28:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8004c2a:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;
 8004c2c:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 8004c2e:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004c30:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8004c32:	bf54      	ite	pl
 8004c34:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 8004c36:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 8004c38:	60d6      	str	r6, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004c3a:	3301      	adds	r3, #1
 8004c3c:	2b10      	cmp	r3, #16
 8004c3e:	f47f af5e 	bne.w	8004afe <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8004c42:	b005      	add	sp, #20
 8004c44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004c48:	2600      	movs	r6, #0
 8004c4a:	e7d5      	b.n	8004bf8 <HAL_GPIO_Init+0x110>
 8004c4c:	2601      	movs	r6, #1
 8004c4e:	e7d3      	b.n	8004bf8 <HAL_GPIO_Init+0x110>
 8004c50:	40013c00 	.word	0x40013c00
 8004c54:	40020000 	.word	0x40020000
 8004c58:	40023800 	.word	0x40023800

08004c5c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004c5c:	b10a      	cbz	r2, 8004c62 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004c5e:	6181      	str	r1, [r0, #24]
 8004c60:	4770      	bx	lr
 8004c62:	0409      	lsls	r1, r1, #16
 8004c64:	e7fb      	b.n	8004c5e <HAL_GPIO_WritePin+0x2>

08004c66 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8004c66:	6943      	ldr	r3, [r0, #20]
 8004c68:	4059      	eors	r1, r3
 8004c6a:	6141      	str	r1, [r0, #20]
 8004c6c:	4770      	bx	lr
	...

08004c70 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c70:	4913      	ldr	r1, [pc, #76]	; (8004cc0 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8004c72:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c74:	688b      	ldr	r3, [r1, #8]
 8004c76:	f003 030c 	and.w	r3, r3, #12
 8004c7a:	2b04      	cmp	r3, #4
 8004c7c:	d003      	beq.n	8004c86 <HAL_RCC_GetSysClockFreq+0x16>
 8004c7e:	2b08      	cmp	r3, #8
 8004c80:	d003      	beq.n	8004c8a <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004c82:	4810      	ldr	r0, [pc, #64]	; (8004cc4 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8004c84:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8004c86:	4810      	ldr	r0, [pc, #64]	; (8004cc8 <HAL_RCC_GetSysClockFreq+0x58>)
 8004c88:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c8a:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004c8c:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c8e:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004c90:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c94:	bf14      	ite	ne
 8004c96:	480c      	ldrne	r0, [pc, #48]	; (8004cc8 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c98:	480a      	ldreq	r0, [pc, #40]	; (8004cc4 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c9a:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8004c9e:	bf18      	it	ne
 8004ca0:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ca2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ca6:	fba1 0100 	umull	r0, r1, r1, r0
 8004caa:	f7fb fabf 	bl	800022c <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004cae:	4b04      	ldr	r3, [pc, #16]	; (8004cc0 <HAL_RCC_GetSysClockFreq+0x50>)
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8004cb6:	3301      	adds	r3, #1
 8004cb8:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8004cba:	fbb0 f0f3 	udiv	r0, r0, r3
 8004cbe:	bd08      	pop	{r3, pc}
 8004cc0:	40023800 	.word	0x40023800
 8004cc4:	00f42400 	.word	0x00f42400
 8004cc8:	007a1200 	.word	0x007a1200

08004ccc <HAL_RCC_ClockConfig>:
{
 8004ccc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004cd0:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8004cd2:	4604      	mov	r4, r0
 8004cd4:	b910      	cbnz	r0, 8004cdc <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8004cd6:	2001      	movs	r0, #1
 8004cd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004cdc:	4b44      	ldr	r3, [pc, #272]	; (8004df0 <HAL_RCC_ClockConfig+0x124>)
 8004cde:	681a      	ldr	r2, [r3, #0]
 8004ce0:	f002 020f 	and.w	r2, r2, #15
 8004ce4:	428a      	cmp	r2, r1
 8004ce6:	d327      	bcc.n	8004d38 <HAL_RCC_ClockConfig+0x6c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ce8:	6821      	ldr	r1, [r4, #0]
 8004cea:	078f      	lsls	r7, r1, #30
 8004cec:	d42c      	bmi.n	8004d48 <HAL_RCC_ClockConfig+0x7c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004cee:	07c8      	lsls	r0, r1, #31
 8004cf0:	d549      	bpl.n	8004d86 <HAL_RCC_ClockConfig+0xba>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004cf2:	6862      	ldr	r2, [r4, #4]
 8004cf4:	4b3f      	ldr	r3, [pc, #252]	; (8004df4 <HAL_RCC_ClockConfig+0x128>)
 8004cf6:	2a01      	cmp	r2, #1
 8004cf8:	d13b      	bne.n	8004d72 <HAL_RCC_ClockConfig+0xa6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d00:	d0e9      	beq.n	8004cd6 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d02:	4e3c      	ldr	r6, [pc, #240]	; (8004df4 <HAL_RCC_ClockConfig+0x128>)
 8004d04:	68b3      	ldr	r3, [r6, #8]
 8004d06:	f023 0303 	bic.w	r3, r3, #3
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8004d0e:	f7ff f9c9 	bl	80040a4 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d12:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8004d16:	4680      	mov	r8, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d18:	68b3      	ldr	r3, [r6, #8]
 8004d1a:	6862      	ldr	r2, [r4, #4]
 8004d1c:	f003 030c 	and.w	r3, r3, #12
 8004d20:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8004d24:	d02f      	beq.n	8004d86 <HAL_RCC_ClockConfig+0xba>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d26:	f7ff f9bd 	bl	80040a4 <HAL_GetTick>
 8004d2a:	eba0 0008 	sub.w	r0, r0, r8
 8004d2e:	42b8      	cmp	r0, r7
 8004d30:	d9f2      	bls.n	8004d18 <HAL_RCC_ClockConfig+0x4c>
        return HAL_TIMEOUT;
 8004d32:	2003      	movs	r0, #3
}
 8004d34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d38:	b2ca      	uxtb	r2, r1
 8004d3a:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f003 030f 	and.w	r3, r3, #15
 8004d42:	428b      	cmp	r3, r1
 8004d44:	d1c7      	bne.n	8004cd6 <HAL_RCC_ClockConfig+0xa>
 8004d46:	e7cf      	b.n	8004ce8 <HAL_RCC_ClockConfig+0x1c>
 8004d48:	4b2a      	ldr	r3, [pc, #168]	; (8004df4 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d4a:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d4e:	bf1e      	ittt	ne
 8004d50:	689a      	ldrne	r2, [r3, #8]
 8004d52:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8004d56:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d58:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004d5a:	bf42      	ittt	mi
 8004d5c:	689a      	ldrmi	r2, [r3, #8]
 8004d5e:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8004d62:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d64:	689a      	ldr	r2, [r3, #8]
 8004d66:	68a0      	ldr	r0, [r4, #8]
 8004d68:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004d6c:	4302      	orrs	r2, r0
 8004d6e:	609a      	str	r2, [r3, #8]
 8004d70:	e7bd      	b.n	8004cee <HAL_RCC_ClockConfig+0x22>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d72:	1e91      	subs	r1, r2, #2
 8004d74:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d76:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d78:	d802      	bhi.n	8004d80 <HAL_RCC_ClockConfig+0xb4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d7a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004d7e:	e7bf      	b.n	8004d00 <HAL_RCC_ClockConfig+0x34>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d80:	f013 0f02 	tst.w	r3, #2
 8004d84:	e7bc      	b.n	8004d00 <HAL_RCC_ClockConfig+0x34>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004d86:	4b1a      	ldr	r3, [pc, #104]	; (8004df0 <HAL_RCC_ClockConfig+0x124>)
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	f002 020f 	and.w	r2, r2, #15
 8004d8e:	42aa      	cmp	r2, r5
 8004d90:	d81d      	bhi.n	8004dce <HAL_RCC_ClockConfig+0x102>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d92:	6822      	ldr	r2, [r4, #0]
 8004d94:	0751      	lsls	r1, r2, #29
 8004d96:	d423      	bmi.n	8004de0 <HAL_RCC_ClockConfig+0x114>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d98:	0713      	lsls	r3, r2, #28
 8004d9a:	d507      	bpl.n	8004dac <HAL_RCC_ClockConfig+0xe0>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d9c:	4a15      	ldr	r2, [pc, #84]	; (8004df4 <HAL_RCC_ClockConfig+0x128>)
 8004d9e:	6921      	ldr	r1, [r4, #16]
 8004da0:	6893      	ldr	r3, [r2, #8]
 8004da2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8004da6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004daa:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004dac:	f7ff ff60 	bl	8004c70 <HAL_RCC_GetSysClockFreq>
 8004db0:	4b10      	ldr	r3, [pc, #64]	; (8004df4 <HAL_RCC_ClockConfig+0x128>)
 8004db2:	4a11      	ldr	r2, [pc, #68]	; (8004df8 <HAL_RCC_ClockConfig+0x12c>)
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004dba:	5cd3      	ldrb	r3, [r2, r3]
 8004dbc:	40d8      	lsrs	r0, r3
 8004dbe:	4b0f      	ldr	r3, [pc, #60]	; (8004dfc <HAL_RCC_ClockConfig+0x130>)
 8004dc0:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8004dc2:	2000      	movs	r0, #0
 8004dc4:	f7ff f938 	bl	8004038 <HAL_InitTick>
  return HAL_OK;
 8004dc8:	2000      	movs	r0, #0
 8004dca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dce:	b2ea      	uxtb	r2, r5
 8004dd0:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f003 030f 	and.w	r3, r3, #15
 8004dd8:	42ab      	cmp	r3, r5
 8004dda:	f47f af7c 	bne.w	8004cd6 <HAL_RCC_ClockConfig+0xa>
 8004dde:	e7d8      	b.n	8004d92 <HAL_RCC_ClockConfig+0xc6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004de0:	4904      	ldr	r1, [pc, #16]	; (8004df4 <HAL_RCC_ClockConfig+0x128>)
 8004de2:	68e0      	ldr	r0, [r4, #12]
 8004de4:	688b      	ldr	r3, [r1, #8]
 8004de6:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8004dea:	4303      	orrs	r3, r0
 8004dec:	608b      	str	r3, [r1, #8]
 8004dee:	e7d3      	b.n	8004d98 <HAL_RCC_ClockConfig+0xcc>
 8004df0:	40023c00 	.word	0x40023c00
 8004df4:	40023800 	.word	0x40023800
 8004df8:	0800917c 	.word	0x0800917c
 8004dfc:	20000004 	.word	0x20000004

08004e00 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8004e00:	4b01      	ldr	r3, [pc, #4]	; (8004e08 <HAL_RCC_GetHCLKFreq+0x8>)
 8004e02:	6818      	ldr	r0, [r3, #0]
 8004e04:	4770      	bx	lr
 8004e06:	bf00      	nop
 8004e08:	20000004 	.word	0x20000004

08004e0c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004e0c:	4b04      	ldr	r3, [pc, #16]	; (8004e20 <HAL_RCC_GetPCLK1Freq+0x14>)
 8004e0e:	4a05      	ldr	r2, [pc, #20]	; (8004e24 <HAL_RCC_GetPCLK1Freq+0x18>)
 8004e10:	689b      	ldr	r3, [r3, #8]
 8004e12:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8004e16:	5cd3      	ldrb	r3, [r2, r3]
 8004e18:	4a03      	ldr	r2, [pc, #12]	; (8004e28 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8004e1a:	6810      	ldr	r0, [r2, #0]
}
 8004e1c:	40d8      	lsrs	r0, r3
 8004e1e:	4770      	bx	lr
 8004e20:	40023800 	.word	0x40023800
 8004e24:	0800918c 	.word	0x0800918c
 8004e28:	20000004 	.word	0x20000004

08004e2c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004e2c:	4b04      	ldr	r3, [pc, #16]	; (8004e40 <HAL_RCC_GetPCLK2Freq+0x14>)
 8004e2e:	4a05      	ldr	r2, [pc, #20]	; (8004e44 <HAL_RCC_GetPCLK2Freq+0x18>)
 8004e30:	689b      	ldr	r3, [r3, #8]
 8004e32:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8004e36:	5cd3      	ldrb	r3, [r2, r3]
 8004e38:	4a03      	ldr	r2, [pc, #12]	; (8004e48 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8004e3a:	6810      	ldr	r0, [r2, #0]
}
 8004e3c:	40d8      	lsrs	r0, r3
 8004e3e:	4770      	bx	lr
 8004e40:	40023800 	.word	0x40023800
 8004e44:	0800918c 	.word	0x0800918c
 8004e48:	20000004 	.word	0x20000004

08004e4c <HAL_RCC_OscConfig>:
  uint32_t tickstart = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e4c:	6803      	ldr	r3, [r0, #0]
{
 8004e4e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e50:	07d9      	lsls	r1, r3, #31
{
 8004e52:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e54:	f140 812d 	bpl.w	80050b2 <HAL_RCC_OscConfig+0x266>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004e58:	4ba8      	ldr	r3, [pc, #672]	; (80050fc <HAL_RCC_OscConfig+0x2b0>)
 8004e5a:	689a      	ldr	r2, [r3, #8]
 8004e5c:	f002 020c 	and.w	r2, r2, #12
 8004e60:	2a04      	cmp	r2, #4
 8004e62:	f000 8121 	beq.w	80050a8 <HAL_RCC_OscConfig+0x25c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e66:	689a      	ldr	r2, [r3, #8]
 8004e68:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004e6c:	2a08      	cmp	r2, #8
 8004e6e:	d103      	bne.n	8004e78 <HAL_RCC_OscConfig+0x2c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e70:	685a      	ldr	r2, [r3, #4]
 8004e72:	0252      	lsls	r2, r2, #9
 8004e74:	f100 8118 	bmi.w	80050a8 <HAL_RCC_OscConfig+0x25c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e78:	6862      	ldr	r2, [r4, #4]
 8004e7a:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8004e7e:	d119      	bne.n	8004eb4 <HAL_RCC_OscConfig+0x68>
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004e86:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e88:	f7ff f90c 	bl	80040a4 <HAL_GetTick>

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e8c:	4e9b      	ldr	r6, [pc, #620]	; (80050fc <HAL_RCC_OscConfig+0x2b0>)
        tickstart = HAL_GetTick();
 8004e8e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e90:	6833      	ldr	r3, [r6, #0]
 8004e92:	039b      	lsls	r3, r3, #14
 8004e94:	f100 810d 	bmi.w	80050b2 <HAL_RCC_OscConfig+0x266>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e98:	f7ff f904 	bl	80040a4 <HAL_GetTick>
 8004e9c:	1b40      	subs	r0, r0, r5
 8004e9e:	2864      	cmp	r0, #100	; 0x64
 8004ea0:	d9f6      	bls.n	8004e90 <HAL_RCC_OscConfig+0x44>
          {
            return HAL_TIMEOUT;
 8004ea2:	2003      	movs	r0, #3
 8004ea4:	e004      	b.n	8004eb0 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ea6:	6863      	ldr	r3, [r4, #4]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	f040 8102 	bne.w	80050b2 <HAL_RCC_OscConfig+0x266>
        return HAL_ERROR;
 8004eae:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8004eb0:	b003      	add	sp, #12
 8004eb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004eb4:	4d91      	ldr	r5, [pc, #580]	; (80050fc <HAL_RCC_OscConfig+0x2b0>)
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004eb6:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8004eba:	682b      	ldr	r3, [r5, #0]
 8004ebc:	d107      	bne.n	8004ece <HAL_RCC_OscConfig+0x82>
 8004ebe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ec2:	602b      	str	r3, [r5, #0]
 8004ec4:	682b      	ldr	r3, [r5, #0]
 8004ec6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004eca:	602b      	str	r3, [r5, #0]
 8004ecc:	e7dc      	b.n	8004e88 <HAL_RCC_OscConfig+0x3c>
 8004ece:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ed2:	602b      	str	r3, [r5, #0]
 8004ed4:	682b      	ldr	r3, [r5, #0]
 8004ed6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004eda:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004edc:	2a00      	cmp	r2, #0
 8004ede:	d1d3      	bne.n	8004e88 <HAL_RCC_OscConfig+0x3c>
        tickstart = HAL_GetTick();
 8004ee0:	f7ff f8e0 	bl	80040a4 <HAL_GetTick>
 8004ee4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ee6:	682b      	ldr	r3, [r5, #0]
 8004ee8:	039f      	lsls	r7, r3, #14
 8004eea:	f140 80e2 	bpl.w	80050b2 <HAL_RCC_OscConfig+0x266>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004eee:	f7ff f8d9 	bl	80040a4 <HAL_GetTick>
 8004ef2:	1b80      	subs	r0, r0, r6
 8004ef4:	2864      	cmp	r0, #100	; 0x64
 8004ef6:	d9f6      	bls.n	8004ee6 <HAL_RCC_OscConfig+0x9a>
 8004ef8:	e7d3      	b.n	8004ea2 <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_ENABLE();
 8004efa:	2301      	movs	r3, #1
 8004efc:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004efe:	f7ff f8d1 	bl	80040a4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f02:	4d7e      	ldr	r5, [pc, #504]	; (80050fc <HAL_RCC_OscConfig+0x2b0>)
        tickstart = HAL_GetTick();
 8004f04:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f06:	682b      	ldr	r3, [r5, #0]
 8004f08:	0798      	lsls	r0, r3, #30
 8004f0a:	d405      	bmi.n	8004f18 <HAL_RCC_OscConfig+0xcc>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f0c:	f7ff f8ca 	bl	80040a4 <HAL_GetTick>
 8004f10:	1b80      	subs	r0, r0, r6
 8004f12:	2802      	cmp	r0, #2
 8004f14:	d9f7      	bls.n	8004f06 <HAL_RCC_OscConfig+0xba>
 8004f16:	e7c4      	b.n	8004ea2 <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f18:	682b      	ldr	r3, [r5, #0]
 8004f1a:	6922      	ldr	r2, [r4, #16]
 8004f1c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004f20:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8004f24:	602b      	str	r3, [r5, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f26:	6823      	ldr	r3, [r4, #0]
 8004f28:	071a      	lsls	r2, r3, #28
 8004f2a:	d51f      	bpl.n	8004f6c <HAL_RCC_OscConfig+0x120>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004f2c:	6962      	ldr	r2, [r4, #20]
 8004f2e:	4b74      	ldr	r3, [pc, #464]	; (8005100 <HAL_RCC_OscConfig+0x2b4>)
 8004f30:	b172      	cbz	r2, 8004f50 <HAL_RCC_OscConfig+0x104>
      __HAL_RCC_LSI_ENABLE();
 8004f32:	2201      	movs	r2, #1
 8004f34:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8004f36:	f7ff f8b5 	bl	80040a4 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f3a:	4e70      	ldr	r6, [pc, #448]	; (80050fc <HAL_RCC_OscConfig+0x2b0>)
      tickstart = HAL_GetTick();
 8004f3c:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f3e:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8004f40:	079b      	lsls	r3, r3, #30
 8004f42:	d413      	bmi.n	8004f6c <HAL_RCC_OscConfig+0x120>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f44:	f7ff f8ae 	bl	80040a4 <HAL_GetTick>
 8004f48:	1b40      	subs	r0, r0, r5
 8004f4a:	2802      	cmp	r0, #2
 8004f4c:	d9f7      	bls.n	8004f3e <HAL_RCC_OscConfig+0xf2>
 8004f4e:	e7a8      	b.n	8004ea2 <HAL_RCC_OscConfig+0x56>
      __HAL_RCC_LSI_DISABLE();
 8004f50:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8004f52:	f7ff f8a7 	bl	80040a4 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f56:	4e69      	ldr	r6, [pc, #420]	; (80050fc <HAL_RCC_OscConfig+0x2b0>)
      tickstart = HAL_GetTick();
 8004f58:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f5a:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8004f5c:	079f      	lsls	r7, r3, #30
 8004f5e:	d505      	bpl.n	8004f6c <HAL_RCC_OscConfig+0x120>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f60:	f7ff f8a0 	bl	80040a4 <HAL_GetTick>
 8004f64:	1b40      	subs	r0, r0, r5
 8004f66:	2802      	cmp	r0, #2
 8004f68:	d9f7      	bls.n	8004f5a <HAL_RCC_OscConfig+0x10e>
 8004f6a:	e79a      	b.n	8004ea2 <HAL_RCC_OscConfig+0x56>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f6c:	6823      	ldr	r3, [r4, #0]
 8004f6e:	075d      	lsls	r5, r3, #29
 8004f70:	d551      	bpl.n	8005016 <HAL_RCC_OscConfig+0x1ca>
    __HAL_RCC_PWR_CLK_ENABLE();
 8004f72:	2300      	movs	r3, #0
 8004f74:	9301      	str	r3, [sp, #4]
 8004f76:	4b61      	ldr	r3, [pc, #388]	; (80050fc <HAL_RCC_OscConfig+0x2b0>)
    PWR->CR |= PWR_CR_DBP;
 8004f78:	4d62      	ldr	r5, [pc, #392]	; (8005104 <HAL_RCC_OscConfig+0x2b8>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8004f7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f7c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004f80:	641a      	str	r2, [r3, #64]	; 0x40
 8004f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f88:	9301      	str	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8004f8a:	682b      	ldr	r3, [r5, #0]
 8004f8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f90:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8004f92:	f7ff f887 	bl	80040a4 <HAL_GetTick>
 8004f96:	4606      	mov	r6, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004f98:	682b      	ldr	r3, [r5, #0]
 8004f9a:	05d8      	lsls	r0, r3, #23
 8004f9c:	d405      	bmi.n	8004faa <HAL_RCC_OscConfig+0x15e>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004f9e:	f7ff f881 	bl	80040a4 <HAL_GetTick>
 8004fa2:	1b80      	subs	r0, r0, r6
 8004fa4:	2802      	cmp	r0, #2
 8004fa6:	d9f7      	bls.n	8004f98 <HAL_RCC_OscConfig+0x14c>
 8004fa8:	e77b      	b.n	8004ea2 <HAL_RCC_OscConfig+0x56>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004faa:	68a3      	ldr	r3, [r4, #8]
 8004fac:	4d53      	ldr	r5, [pc, #332]	; (80050fc <HAL_RCC_OscConfig+0x2b0>)
 8004fae:	2b01      	cmp	r3, #1
 8004fb0:	d112      	bne.n	8004fd8 <HAL_RCC_OscConfig+0x18c>
 8004fb2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8004fb4:	f043 0301 	orr.w	r3, r3, #1
 8004fb8:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8004fba:	f7ff f873 	bl	80040a4 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fbe:	4f4f      	ldr	r7, [pc, #316]	; (80050fc <HAL_RCC_OscConfig+0x2b0>)
      tickstart = HAL_GetTick();
 8004fc0:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004fc2:	f241 3588 	movw	r5, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fc6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004fc8:	0799      	lsls	r1, r3, #30
 8004fca:	d424      	bmi.n	8005016 <HAL_RCC_OscConfig+0x1ca>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004fcc:	f7ff f86a 	bl	80040a4 <HAL_GetTick>
 8004fd0:	1b80      	subs	r0, r0, r6
 8004fd2:	42a8      	cmp	r0, r5
 8004fd4:	d9f7      	bls.n	8004fc6 <HAL_RCC_OscConfig+0x17a>
 8004fd6:	e764      	b.n	8004ea2 <HAL_RCC_OscConfig+0x56>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004fd8:	2b05      	cmp	r3, #5
 8004fda:	d104      	bne.n	8004fe6 <HAL_RCC_OscConfig+0x19a>
 8004fdc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8004fde:	f043 0304 	orr.w	r3, r3, #4
 8004fe2:	672b      	str	r3, [r5, #112]	; 0x70
 8004fe4:	e7e5      	b.n	8004fb2 <HAL_RCC_OscConfig+0x166>
 8004fe6:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8004fe8:	f022 0201 	bic.w	r2, r2, #1
 8004fec:	672a      	str	r2, [r5, #112]	; 0x70
 8004fee:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8004ff0:	f022 0204 	bic.w	r2, r2, #4
 8004ff4:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d1df      	bne.n	8004fba <HAL_RCC_OscConfig+0x16e>
      tickstart = HAL_GetTick();
 8004ffa:	f7ff f853 	bl	80040a4 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ffe:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8005002:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005004:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8005006:	079a      	lsls	r2, r3, #30
 8005008:	d505      	bpl.n	8005016 <HAL_RCC_OscConfig+0x1ca>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800500a:	f7ff f84b 	bl	80040a4 <HAL_GetTick>
 800500e:	1bc0      	subs	r0, r0, r7
 8005010:	42b0      	cmp	r0, r6
 8005012:	d9f7      	bls.n	8005004 <HAL_RCC_OscConfig+0x1b8>
 8005014:	e745      	b.n	8004ea2 <HAL_RCC_OscConfig+0x56>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005016:	69a2      	ldr	r2, [r4, #24]
 8005018:	b90a      	cbnz	r2, 800501e <HAL_RCC_OscConfig+0x1d2>
  return HAL_OK;
 800501a:	2000      	movs	r0, #0
 800501c:	e748      	b.n	8004eb0 <HAL_RCC_OscConfig+0x64>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800501e:	4d37      	ldr	r5, [pc, #220]	; (80050fc <HAL_RCC_OscConfig+0x2b0>)
 8005020:	68ab      	ldr	r3, [r5, #8]
 8005022:	f003 030c 	and.w	r3, r3, #12
 8005026:	2b08      	cmp	r3, #8
 8005028:	f43f af41 	beq.w	8004eae <HAL_RCC_OscConfig+0x62>
 800502c:	4e36      	ldr	r6, [pc, #216]	; (8005108 <HAL_RCC_OscConfig+0x2bc>)
 800502e:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005030:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8005032:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005034:	d12c      	bne.n	8005090 <HAL_RCC_OscConfig+0x244>
        tickstart = HAL_GetTick();
 8005036:	f7ff f835 	bl	80040a4 <HAL_GetTick>
 800503a:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800503c:	682b      	ldr	r3, [r5, #0]
 800503e:	019b      	lsls	r3, r3, #6
 8005040:	d505      	bpl.n	800504e <HAL_RCC_OscConfig+0x202>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005042:	f7ff f82f 	bl	80040a4 <HAL_GetTick>
 8005046:	1bc0      	subs	r0, r0, r7
 8005048:	2802      	cmp	r0, #2
 800504a:	d9f7      	bls.n	800503c <HAL_RCC_OscConfig+0x1f0>
 800504c:	e729      	b.n	8004ea2 <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800504e:	6a22      	ldr	r2, [r4, #32]
 8005050:	69e3      	ldr	r3, [r4, #28]
 8005052:	4313      	orrs	r3, r2
 8005054:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005056:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800505a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800505c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005060:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8005062:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8005066:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8005068:	0852      	lsrs	r2, r2, #1
 800506a:	3a01      	subs	r2, #1
 800506c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005070:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8005072:	2301      	movs	r3, #1
 8005074:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8005076:	f7ff f815 	bl	80040a4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800507a:	4d20      	ldr	r5, [pc, #128]	; (80050fc <HAL_RCC_OscConfig+0x2b0>)
        tickstart = HAL_GetTick();
 800507c:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800507e:	682b      	ldr	r3, [r5, #0]
 8005080:	019e      	lsls	r6, r3, #6
 8005082:	d4ca      	bmi.n	800501a <HAL_RCC_OscConfig+0x1ce>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005084:	f7ff f80e 	bl	80040a4 <HAL_GetTick>
 8005088:	1b00      	subs	r0, r0, r4
 800508a:	2802      	cmp	r0, #2
 800508c:	d9f7      	bls.n	800507e <HAL_RCC_OscConfig+0x232>
 800508e:	e708      	b.n	8004ea2 <HAL_RCC_OscConfig+0x56>
        tickstart = HAL_GetTick();
 8005090:	f7ff f808 	bl	80040a4 <HAL_GetTick>
 8005094:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005096:	682b      	ldr	r3, [r5, #0]
 8005098:	0198      	lsls	r0, r3, #6
 800509a:	d5be      	bpl.n	800501a <HAL_RCC_OscConfig+0x1ce>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800509c:	f7ff f802 	bl	80040a4 <HAL_GetTick>
 80050a0:	1b00      	subs	r0, r0, r4
 80050a2:	2802      	cmp	r0, #2
 80050a4:	d9f7      	bls.n	8005096 <HAL_RCC_OscConfig+0x24a>
 80050a6:	e6fc      	b.n	8004ea2 <HAL_RCC_OscConfig+0x56>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050a8:	4b14      	ldr	r3, [pc, #80]	; (80050fc <HAL_RCC_OscConfig+0x2b0>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	0399      	lsls	r1, r3, #14
 80050ae:	f53f aefa 	bmi.w	8004ea6 <HAL_RCC_OscConfig+0x5a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80050b2:	6823      	ldr	r3, [r4, #0]
 80050b4:	079e      	lsls	r6, r3, #30
 80050b6:	f57f af36 	bpl.w	8004f26 <HAL_RCC_OscConfig+0xda>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80050ba:	4b10      	ldr	r3, [pc, #64]	; (80050fc <HAL_RCC_OscConfig+0x2b0>)
 80050bc:	689a      	ldr	r2, [r3, #8]
 80050be:	f012 0f0c 	tst.w	r2, #12
 80050c2:	d025      	beq.n	8005110 <HAL_RCC_OscConfig+0x2c4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80050c4:	689a      	ldr	r2, [r3, #8]
 80050c6:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80050ca:	2a08      	cmp	r2, #8
 80050cc:	d102      	bne.n	80050d4 <HAL_RCC_OscConfig+0x288>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	025d      	lsls	r5, r3, #9
 80050d2:	d51d      	bpl.n	8005110 <HAL_RCC_OscConfig+0x2c4>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80050d4:	68e3      	ldr	r3, [r4, #12]
 80050d6:	4a0d      	ldr	r2, [pc, #52]	; (800510c <HAL_RCC_OscConfig+0x2c0>)
 80050d8:	2b00      	cmp	r3, #0
 80050da:	f47f af0e 	bne.w	8004efa <HAL_RCC_OscConfig+0xae>
        __HAL_RCC_HSI_DISABLE();
 80050de:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80050e0:	f7fe ffe0 	bl	80040a4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050e4:	4e05      	ldr	r6, [pc, #20]	; (80050fc <HAL_RCC_OscConfig+0x2b0>)
        tickstart = HAL_GetTick();
 80050e6:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050e8:	6833      	ldr	r3, [r6, #0]
 80050ea:	0799      	lsls	r1, r3, #30
 80050ec:	f57f af1b 	bpl.w	8004f26 <HAL_RCC_OscConfig+0xda>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80050f0:	f7fe ffd8 	bl	80040a4 <HAL_GetTick>
 80050f4:	1b40      	subs	r0, r0, r5
 80050f6:	2802      	cmp	r0, #2
 80050f8:	d9f6      	bls.n	80050e8 <HAL_RCC_OscConfig+0x29c>
 80050fa:	e6d2      	b.n	8004ea2 <HAL_RCC_OscConfig+0x56>
 80050fc:	40023800 	.word	0x40023800
 8005100:	42470e80 	.word	0x42470e80
 8005104:	40007000 	.word	0x40007000
 8005108:	42470060 	.word	0x42470060
 800510c:	42470000 	.word	0x42470000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005110:	4b07      	ldr	r3, [pc, #28]	; (8005130 <HAL_RCC_OscConfig+0x2e4>)
 8005112:	681a      	ldr	r2, [r3, #0]
 8005114:	0792      	lsls	r2, r2, #30
 8005116:	d503      	bpl.n	8005120 <HAL_RCC_OscConfig+0x2d4>
 8005118:	68e2      	ldr	r2, [r4, #12]
 800511a:	2a01      	cmp	r2, #1
 800511c:	f47f aec7 	bne.w	8004eae <HAL_RCC_OscConfig+0x62>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005120:	681a      	ldr	r2, [r3, #0]
 8005122:	6921      	ldr	r1, [r4, #16]
 8005124:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8005128:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 800512c:	601a      	str	r2, [r3, #0]
 800512e:	e6fa      	b.n	8004f26 <HAL_RCC_OscConfig+0xda>
 8005130:	40023800 	.word	0x40023800

08005134 <_ZL29SPI_WaitFlagStateUntilTimeoutP19__SPI_HandleTypeDefmmmm>:
  * @param Timeout Timeout duration
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
 8005134:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005138:	9f06      	ldr	r7, [sp, #24]
 800513a:	4604      	mov	r4, r0
 800513c:	460e      	mov	r6, r1
 800513e:	4690      	mov	r8, r2
 8005140:	461d      	mov	r5, r3
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8005142:	6823      	ldr	r3, [r4, #0]
 8005144:	689a      	ldr	r2, [r3, #8]
 8005146:	ea36 0202 	bics.w	r2, r6, r2
 800514a:	bf0c      	ite	eq
 800514c:	2201      	moveq	r2, #1
 800514e:	2200      	movne	r2, #0
 8005150:	4590      	cmp	r8, r2
 8005152:	d032      	beq.n	80051ba <_ZL29SPI_WaitFlagStateUntilTimeoutP19__SPI_HandleTypeDefmmmm+0x86>
  {
    if(Timeout != HAL_MAX_DELAY)
 8005154:	1c6a      	adds	r2, r5, #1
 8005156:	d0f5      	beq.n	8005144 <_ZL29SPI_WaitFlagStateUntilTimeoutP19__SPI_HandleTypeDefmmmm+0x10>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 8005158:	b125      	cbz	r5, 8005164 <_ZL29SPI_WaitFlagStateUntilTimeoutP19__SPI_HandleTypeDefmmmm+0x30>
 800515a:	f7fe ffa3 	bl	80040a4 <HAL_GetTick>
 800515e:	1bc0      	subs	r0, r0, r7
 8005160:	4285      	cmp	r5, r0
 8005162:	d8ee      	bhi.n	8005142 <_ZL29SPI_WaitFlagStateUntilTimeoutP19__SPI_HandleTypeDefmmmm+0xe>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005164:	6823      	ldr	r3, [r4, #0]
 8005166:	685a      	ldr	r2, [r3, #4]
 8005168:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800516c:	605a      	str	r2, [r3, #4]

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800516e:	6862      	ldr	r2, [r4, #4]
 8005170:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8005174:	d10a      	bne.n	800518c <_ZL29SPI_WaitFlagStateUntilTimeoutP19__SPI_HandleTypeDefmmmm+0x58>
 8005176:	68a2      	ldr	r2, [r4, #8]
 8005178:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800517c:	d002      	beq.n	8005184 <_ZL29SPI_WaitFlagStateUntilTimeoutP19__SPI_HandleTypeDefmmmm+0x50>
 800517e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8005182:	d103      	bne.n	800518c <_ZL29SPI_WaitFlagStateUntilTimeoutP19__SPI_HandleTypeDefmmmm+0x58>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005184:	681a      	ldr	r2, [r3, #0]
 8005186:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800518a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800518c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800518e:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8005192:	d109      	bne.n	80051a8 <_ZL29SPI_WaitFlagStateUntilTimeoutP19__SPI_HandleTypeDefmmmm+0x74>
        {
          SPI_RESET_CRC(hspi);
 8005194:	681a      	ldr	r2, [r3, #0]
 8005196:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800519a:	0412      	lsls	r2, r2, #16
 800519c:	0c12      	lsrs	r2, r2, #16
 800519e:	601a      	str	r2, [r3, #0]
 80051a0:	681a      	ldr	r2, [r3, #0]
 80051a2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80051a6:	601a      	str	r2, [r3, #0]
        }

        hspi->State= HAL_SPI_STATE_READY;
 80051a8:	2301      	movs	r3, #1
 80051aa:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80051ae:	2300      	movs	r3, #0
 80051b0:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 80051b4:	2003      	movs	r0, #3
 80051b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 80051ba:	2000      	movs	r0, #0
 80051bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080051c0 <_ZL17SPI_CheckFlag_BSYP19__SPI_HandleTypeDefmm>:
  * @param Timeout Timeout duration
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80051c0:	b513      	push	{r0, r1, r4, lr}
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80051c2:	460b      	mov	r3, r1
 80051c4:	9200      	str	r2, [sp, #0]
 80051c6:	2180      	movs	r1, #128	; 0x80
 80051c8:	2200      	movs	r2, #0
{
 80051ca:	4604      	mov	r4, r0
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80051cc:	f7ff ffb2 	bl	8005134 <_ZL29SPI_WaitFlagStateUntilTimeoutP19__SPI_HandleTypeDefmmmm>
 80051d0:	b120      	cbz	r0, 80051dc <_ZL17SPI_CheckFlag_BSYP19__SPI_HandleTypeDefmm+0x1c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80051d2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80051d4:	f043 0320 	orr.w	r3, r3, #32
 80051d8:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_TIMEOUT;
 80051da:	2003      	movs	r0, #3
  }
  return HAL_OK;
}
 80051dc:	b002      	add	sp, #8
 80051de:	bd10      	pop	{r4, pc}

080051e0 <HAL_SPI_Init>:
{
 80051e0:	b510      	push	{r4, lr}
  if(hspi == NULL)
 80051e2:	4604      	mov	r4, r0
 80051e4:	2800      	cmp	r0, #0
 80051e6:	d036      	beq.n	8005256 <HAL_SPI_Init+0x76>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80051e8:	2300      	movs	r3, #0
 80051ea:	6283      	str	r3, [r0, #40]	; 0x28
  if(hspi->State == HAL_SPI_STATE_RESET)
 80051ec:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 80051f0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80051f4:	b91b      	cbnz	r3, 80051fe <HAL_SPI_Init+0x1e>
    hspi->Lock = HAL_UNLOCKED;
 80051f6:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 80051fa:	f7fe f8d5 	bl	80033a8 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 80051fe:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8005200:	68a0      	ldr	r0, [r4, #8]
 8005202:	69a2      	ldr	r2, [r4, #24]
  hspi->State = HAL_SPI_STATE_BUSY;
 8005204:	2302      	movs	r3, #2
 8005206:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 800520a:	680b      	ldr	r3, [r1, #0]
 800520c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005210:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8005212:	6863      	ldr	r3, [r4, #4]
 8005214:	4303      	orrs	r3, r0
 8005216:	68e0      	ldr	r0, [r4, #12]
 8005218:	4303      	orrs	r3, r0
 800521a:	6920      	ldr	r0, [r4, #16]
 800521c:	4303      	orrs	r3, r0
 800521e:	6960      	ldr	r0, [r4, #20]
 8005220:	4303      	orrs	r3, r0
 8005222:	69e0      	ldr	r0, [r4, #28]
 8005224:	4303      	orrs	r3, r0
 8005226:	6a20      	ldr	r0, [r4, #32]
 8005228:	4303      	orrs	r3, r0
 800522a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800522c:	4303      	orrs	r3, r0
 800522e:	f402 7000 	and.w	r0, r2, #512	; 0x200
 8005232:	4303      	orrs	r3, r0
 8005234:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8005236:	0c12      	lsrs	r2, r2, #16
 8005238:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800523a:	f002 0204 	and.w	r2, r2, #4
 800523e:	431a      	orrs	r2, r3
 8005240:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005242:	69cb      	ldr	r3, [r1, #28]
 8005244:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005248:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800524a:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 800524c:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800524e:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005250:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  return HAL_OK;
 8005254:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8005256:	2001      	movs	r0, #1
}
 8005258:	bd10      	pop	{r4, pc}

0800525a <HAL_SPI_Transmit>:
{
 800525a:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800525e:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8005260:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8005264:	2b01      	cmp	r3, #1
{
 8005266:	4604      	mov	r4, r0
 8005268:	460d      	mov	r5, r1
 800526a:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 800526c:	f000 809d 	beq.w	80053aa <HAL_SPI_Transmit+0x150>
 8005270:	2301      	movs	r3, #1
 8005272:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8005276:	f7fe ff15 	bl	80040a4 <HAL_GetTick>
 800527a:	4607      	mov	r7, r0
  if(hspi->State != HAL_SPI_STATE_READY)
 800527c:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8005280:	b2c0      	uxtb	r0, r0
 8005282:	2801      	cmp	r0, #1
 8005284:	f040 808f 	bne.w	80053a6 <HAL_SPI_Transmit+0x14c>
  if((pData == NULL ) || (Size == 0))
 8005288:	2d00      	cmp	r5, #0
 800528a:	d03d      	beq.n	8005308 <HAL_SPI_Transmit+0xae>
 800528c:	f1b8 0f00 	cmp.w	r8, #0
 8005290:	d03a      	beq.n	8005308 <HAL_SPI_Transmit+0xae>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005292:	2303      	movs	r3, #3
 8005294:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005298:	2300      	movs	r3, #0
 800529a:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800529c:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 800529e:	f8a4 8036 	strh.w	r8, [r4, #54]	; 0x36
  hspi->RxXferSize  = 0U;
 80052a2:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80052a4:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80052a6:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 80052a8:	6423      	str	r3, [r4, #64]	; 0x40
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80052aa:	68a3      	ldr	r3, [r4, #8]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80052ac:	6325      	str	r5, [r4, #48]	; 0x30
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80052ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052b2:	6823      	ldr	r3, [r4, #0]
  hspi->TxXferSize  = Size;
 80052b4:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
    SPI_1LINE_TX(hspi);
 80052b8:	bf02      	ittt	eq
 80052ba:	681a      	ldreq	r2, [r3, #0]
 80052bc:	f442 4280 	orreq.w	r2, r2, #16384	; 0x4000
 80052c0:	601a      	streq	r2, [r3, #0]
  if((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80052c2:	681a      	ldr	r2, [r3, #0]
 80052c4:	0652      	lsls	r2, r2, #25
    __HAL_SPI_ENABLE(hspi);
 80052c6:	bf5e      	ittt	pl
 80052c8:	681a      	ldrpl	r2, [r3, #0]
 80052ca:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 80052ce:	601a      	strpl	r2, [r3, #0]
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80052d0:	68e2      	ldr	r2, [r4, #12]
 80052d2:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 80052d6:	6862      	ldr	r2, [r4, #4]
 80052d8:	d127      	bne.n	800532a <HAL_SPI_Transmit+0xd0>
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 80052da:	b15a      	cbz	r2, 80052f4 <HAL_SPI_Transmit+0x9a>
 80052dc:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80052de:	b292      	uxth	r2, r2
 80052e0:	2a01      	cmp	r2, #1
 80052e2:	d007      	beq.n	80052f4 <HAL_SPI_Transmit+0x9a>
    while (hspi->TxXferCount > 0U)
 80052e4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80052e6:	b29b      	uxth	r3, r3
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d03c      	beq.n	8005366 <HAL_SPI_Transmit+0x10c>
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80052ec:	6823      	ldr	r3, [r4, #0]
 80052ee:	689a      	ldr	r2, [r3, #8]
 80052f0:	0790      	lsls	r0, r2, #30
 80052f2:	d507      	bpl.n	8005304 <HAL_SPI_Transmit+0xaa>
      hspi->Instance->DR = *((uint16_t *)pData);
 80052f4:	f835 2b02 	ldrh.w	r2, [r5], #2
 80052f8:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 80052fa:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80052fc:	3b01      	subs	r3, #1
 80052fe:	b29b      	uxth	r3, r3
 8005300:	86e3      	strh	r3, [r4, #54]	; 0x36
 8005302:	e7ef      	b.n	80052e4 <HAL_SPI_Transmit+0x8a>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8005304:	b94e      	cbnz	r6, 800531a <HAL_SPI_Transmit+0xc0>
          errorcode = HAL_TIMEOUT;
 8005306:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8005308:	2301      	movs	r3, #1
 800530a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800530e:	2300      	movs	r3, #0
 8005310:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8005314:	b004      	add	sp, #16
 8005316:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 800531a:	1c71      	adds	r1, r6, #1
 800531c:	d0e2      	beq.n	80052e4 <HAL_SPI_Transmit+0x8a>
 800531e:	f7fe fec1 	bl	80040a4 <HAL_GetTick>
 8005322:	1bc0      	subs	r0, r0, r7
 8005324:	4286      	cmp	r6, r0
 8005326:	d9ee      	bls.n	8005306 <HAL_SPI_Transmit+0xac>
 8005328:	e7dc      	b.n	80052e4 <HAL_SPI_Transmit+0x8a>
    if((hspi->Init.Mode == SPI_MODE_SLAVE)|| (hspi->TxXferCount == 0x01))
 800532a:	b152      	cbz	r2, 8005342 <HAL_SPI_Transmit+0xe8>
 800532c:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 800532e:	b292      	uxth	r2, r2
 8005330:	2a01      	cmp	r2, #1
 8005332:	d006      	beq.n	8005342 <HAL_SPI_Transmit+0xe8>
    while (hspi->TxXferCount > 0U)
 8005334:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005336:	b29b      	uxth	r3, r3
 8005338:	b1ab      	cbz	r3, 8005366 <HAL_SPI_Transmit+0x10c>
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800533a:	6823      	ldr	r3, [r4, #0]
 800533c:	689a      	ldr	r2, [r3, #8]
 800533e:	0792      	lsls	r2, r2, #30
 8005340:	d507      	bpl.n	8005352 <HAL_SPI_Transmit+0xf8>
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 8005342:	f815 2b01 	ldrb.w	r2, [r5], #1
 8005346:	731a      	strb	r2, [r3, #12]
      hspi->TxXferCount--;
 8005348:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800534a:	3b01      	subs	r3, #1
 800534c:	b29b      	uxth	r3, r3
 800534e:	86e3      	strh	r3, [r4, #54]	; 0x36
 8005350:	e7f0      	b.n	8005334 <HAL_SPI_Transmit+0xda>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8005352:	2e00      	cmp	r6, #0
 8005354:	d0d7      	beq.n	8005306 <HAL_SPI_Transmit+0xac>
 8005356:	1c73      	adds	r3, r6, #1
 8005358:	d0ec      	beq.n	8005334 <HAL_SPI_Transmit+0xda>
 800535a:	f7fe fea3 	bl	80040a4 <HAL_GetTick>
 800535e:	1bc0      	subs	r0, r0, r7
 8005360:	4286      	cmp	r6, r0
 8005362:	d9d0      	bls.n	8005306 <HAL_SPI_Transmit+0xac>
 8005364:	e7e6      	b.n	8005334 <HAL_SPI_Transmit+0xda>
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 8005366:	9700      	str	r7, [sp, #0]
 8005368:	4633      	mov	r3, r6
 800536a:	2201      	movs	r2, #1
 800536c:	2102      	movs	r1, #2
 800536e:	4620      	mov	r0, r4
 8005370:	f7ff fee0 	bl	8005134 <_ZL29SPI_WaitFlagStateUntilTimeoutP19__SPI_HandleTypeDefmmmm>
 8005374:	2800      	cmp	r0, #0
 8005376:	d1c6      	bne.n	8005306 <HAL_SPI_Transmit+0xac>
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 8005378:	463a      	mov	r2, r7
 800537a:	4631      	mov	r1, r6
 800537c:	4620      	mov	r0, r4
 800537e:	f7ff ff1f 	bl	80051c0 <_ZL17SPI_CheckFlag_BSYP19__SPI_HandleTypeDefmm>
 8005382:	b118      	cbz	r0, 800538c <HAL_SPI_Transmit+0x132>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005384:	2320      	movs	r3, #32
 8005386:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8005388:	2001      	movs	r0, #1
    goto error;
 800538a:	e7bd      	b.n	8005308 <HAL_SPI_Transmit+0xae>
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800538c:	68a3      	ldr	r3, [r4, #8]
 800538e:	b92b      	cbnz	r3, 800539c <HAL_SPI_Transmit+0x142>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005390:	9303      	str	r3, [sp, #12]
 8005392:	6823      	ldr	r3, [r4, #0]
 8005394:	68da      	ldr	r2, [r3, #12]
 8005396:	9203      	str	r2, [sp, #12]
 8005398:	689b      	ldr	r3, [r3, #8]
 800539a:	9303      	str	r3, [sp, #12]
  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800539c:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 800539e:	3000      	adds	r0, #0
 80053a0:	bf18      	it	ne
 80053a2:	2001      	movne	r0, #1
 80053a4:	e7b0      	b.n	8005308 <HAL_SPI_Transmit+0xae>
 80053a6:	2002      	movs	r0, #2
 80053a8:	e7ae      	b.n	8005308 <HAL_SPI_Transmit+0xae>
  __HAL_LOCK(hspi);
 80053aa:	2002      	movs	r0, #2
 80053ac:	e7b2      	b.n	8005314 <HAL_SPI_Transmit+0xba>

080053ae <HAL_SPI_TransmitReceive>:
{
 80053ae:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80053b2:	4699      	mov	r9, r3
  __HAL_LOCK(hspi);
 80053b4:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 80053b8:	b085      	sub	sp, #20
  __HAL_LOCK(hspi);
 80053ba:	2b01      	cmp	r3, #1
{
 80053bc:	4604      	mov	r4, r0
 80053be:	460d      	mov	r5, r1
 80053c0:	4616      	mov	r6, r2
 80053c2:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  __HAL_LOCK(hspi);
 80053c4:	f000 80a8 	beq.w	8005518 <HAL_SPI_TransmitReceive+0x16a>
 80053c8:	2301      	movs	r3, #1
 80053ca:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 80053ce:	f7fe fe69 	bl	80040a4 <HAL_GetTick>
  tmp  = hspi->State;
 80053d2:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tmp1 = hspi->Init.Mode;
 80053d6:	6861      	ldr	r1, [r4, #4]
  tmp  = hspi->State;
 80053d8:	b2db      	uxtb	r3, r3
  if(!((tmp == HAL_SPI_STATE_READY) || \
 80053da:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 80053dc:	4680      	mov	r8, r0
  if(!((tmp == HAL_SPI_STATE_READY) || \
 80053de:	d00a      	beq.n	80053f6 <HAL_SPI_TransmitReceive+0x48>
 80053e0:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 80053e4:	f040 8096 	bne.w	8005514 <HAL_SPI_TransmitReceive+0x166>
    ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 80053e8:	68a2      	ldr	r2, [r4, #8]
 80053ea:	2a00      	cmp	r2, #0
 80053ec:	f040 8092 	bne.w	8005514 <HAL_SPI_TransmitReceive+0x166>
 80053f0:	2b04      	cmp	r3, #4
 80053f2:	f040 808f 	bne.w	8005514 <HAL_SPI_TransmitReceive+0x166>
  if((pTxData == NULL) || (pRxData == NULL) || (Size == 0))
 80053f6:	2d00      	cmp	r5, #0
 80053f8:	d050      	beq.n	800549c <HAL_SPI_TransmitReceive+0xee>
 80053fa:	2e00      	cmp	r6, #0
 80053fc:	d04e      	beq.n	800549c <HAL_SPI_TransmitReceive+0xee>
 80053fe:	f1b9 0f00 	cmp.w	r9, #0
 8005402:	d04b      	beq.n	800549c <HAL_SPI_TransmitReceive+0xee>
  if(hspi->State == HAL_SPI_STATE_READY)
 8005404:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005408:	63a6      	str	r6, [r4, #56]	; 0x38
  if(hspi->State == HAL_SPI_STATE_READY)
 800540a:	2b01      	cmp	r3, #1
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800540c:	bf04      	itt	eq
 800540e:	2305      	moveq	r3, #5
 8005410:	f884 3051 	strbeq.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005414:	2300      	movs	r3, #0
 8005416:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxISR       = NULL;
 8005418:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 800541a:	6463      	str	r3, [r4, #68]	; 0x44
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 800541c:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 800541e:	f8a4 903e 	strh.w	r9, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 8005422:	f8a4 9036 	strh.w	r9, [r4, #54]	; 0x36
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8005426:	681a      	ldr	r2, [r3, #0]
  hspi->RxXferSize  = Size;
 8005428:	f8a4 903c 	strh.w	r9, [r4, #60]	; 0x3c
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 800542c:	0650      	lsls	r0, r2, #25
    __HAL_SPI_ENABLE(hspi);
 800542e:	bf58      	it	pl
 8005430:	681a      	ldrpl	r2, [r3, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005432:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_SPI_ENABLE(hspi);
 8005434:	bf58      	it	pl
 8005436:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
  hspi->TxXferSize  = Size;
 800543a:	f8a4 9034 	strh.w	r9, [r4, #52]	; 0x34
    __HAL_SPI_ENABLE(hspi);
 800543e:	bf58      	it	pl
 8005440:	601a      	strpl	r2, [r3, #0]
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005442:	68e2      	ldr	r2, [r4, #12]
 8005444:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8005448:	d12a      	bne.n	80054a0 <HAL_SPI_TransmitReceive+0xf2>
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 800544a:	b119      	cbz	r1, 8005454 <HAL_SPI_TransmitReceive+0xa6>
 800544c:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 800544e:	b292      	uxth	r2, r2
 8005450:	2a01      	cmp	r2, #1
 8005452:	d106      	bne.n	8005462 <HAL_SPI_TransmitReceive+0xb4>
      hspi->Instance->DR = *((uint16_t *)pTxData);
 8005454:	f835 2b02 	ldrh.w	r2, [r5], #2
 8005458:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 800545a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800545c:	3b01      	subs	r3, #1
 800545e:	b29b      	uxth	r3, r3
 8005460:	86e3      	strh	r3, [r4, #54]	; 0x36
{
 8005462:	f04f 0901 	mov.w	r9, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005466:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005468:	b29b      	uxth	r3, r3
 800546a:	2b00      	cmp	r3, #0
 800546c:	d156      	bne.n	800551c <HAL_SPI_TransmitReceive+0x16e>
 800546e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005470:	b29b      	uxth	r3, r3
 8005472:	2b00      	cmp	r3, #0
 8005474:	d152      	bne.n	800551c <HAL_SPI_TransmitReceive+0x16e>
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 8005476:	f8cd 8000 	str.w	r8, [sp]
 800547a:	463b      	mov	r3, r7
 800547c:	2201      	movs	r2, #1
 800547e:	2102      	movs	r1, #2
 8005480:	4620      	mov	r0, r4
 8005482:	f7ff fe57 	bl	8005134 <_ZL29SPI_WaitFlagStateUntilTimeoutP19__SPI_HandleTypeDefmmmm>
 8005486:	2800      	cmp	r0, #0
 8005488:	d161      	bne.n	800554e <HAL_SPI_TransmitReceive+0x1a0>
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 800548a:	4642      	mov	r2, r8
 800548c:	4639      	mov	r1, r7
 800548e:	4620      	mov	r0, r4
 8005490:	f7ff fe96 	bl	80051c0 <_ZL17SPI_CheckFlag_BSYP19__SPI_HandleTypeDefmm>
 8005494:	2800      	cmp	r0, #0
 8005496:	d033      	beq.n	8005500 <HAL_SPI_TransmitReceive+0x152>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005498:	2320      	movs	r3, #32
 800549a:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 800549c:	2001      	movs	r0, #1
 800549e:	e057      	b.n	8005550 <HAL_SPI_TransmitReceive+0x1a2>
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 80054a0:	b119      	cbz	r1, 80054aa <HAL_SPI_TransmitReceive+0xfc>
 80054a2:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80054a4:	b292      	uxth	r2, r2
 80054a6:	2a01      	cmp	r2, #1
 80054a8:	d106      	bne.n	80054b8 <HAL_SPI_TransmitReceive+0x10a>
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pTxData);
 80054aa:	f815 2b01 	ldrb.w	r2, [r5], #1
 80054ae:	731a      	strb	r2, [r3, #12]
      hspi->TxXferCount--;
 80054b0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80054b2:	3b01      	subs	r3, #1
 80054b4:	b29b      	uxth	r3, r3
 80054b6:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 80054b8:	f04f 0901 	mov.w	r9, #1
 80054bc:	e015      	b.n	80054ea <HAL_SPI_TransmitReceive+0x13c>
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 80054be:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80054c0:	b29b      	uxth	r3, r3
 80054c2:	b11b      	cbz	r3, 80054cc <HAL_SPI_TransmitReceive+0x11e>
 80054c4:	6823      	ldr	r3, [r4, #0]
 80054c6:	689a      	ldr	r2, [r3, #8]
 80054c8:	0791      	lsls	r1, r2, #30
 80054ca:	d45e      	bmi.n	800558a <HAL_SPI_TransmitReceive+0x1dc>
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 80054cc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80054ce:	b29b      	uxth	r3, r3
 80054d0:	b11b      	cbz	r3, 80054da <HAL_SPI_TransmitReceive+0x12c>
 80054d2:	6823      	ldr	r3, [r4, #0]
 80054d4:	689a      	ldr	r2, [r3, #8]
 80054d6:	07d2      	lsls	r2, r2, #31
 80054d8:	d461      	bmi.n	800559e <HAL_SPI_TransmitReceive+0x1f0>
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 80054da:	1c7b      	adds	r3, r7, #1
 80054dc:	d005      	beq.n	80054ea <HAL_SPI_TransmitReceive+0x13c>
 80054de:	f7fe fde1 	bl	80040a4 <HAL_GetTick>
 80054e2:	eba0 0008 	sub.w	r0, r0, r8
 80054e6:	4287      	cmp	r7, r0
 80054e8:	d931      	bls.n	800554e <HAL_SPI_TransmitReceive+0x1a0>
    while((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80054ea:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80054ec:	b29b      	uxth	r3, r3
 80054ee:	b91b      	cbnz	r3, 80054f8 <HAL_SPI_TransmitReceive+0x14a>
 80054f0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80054f2:	b29b      	uxth	r3, r3
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d0be      	beq.n	8005476 <HAL_SPI_TransmitReceive+0xc8>
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 80054f8:	f1b9 0f00 	cmp.w	r9, #0
 80054fc:	d1df      	bne.n	80054be <HAL_SPI_TransmitReceive+0x110>
 80054fe:	e7e5      	b.n	80054cc <HAL_SPI_TransmitReceive+0x11e>
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005500:	68a3      	ldr	r3, [r4, #8]
 8005502:	bb2b      	cbnz	r3, 8005550 <HAL_SPI_TransmitReceive+0x1a2>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005504:	6822      	ldr	r2, [r4, #0]
 8005506:	9303      	str	r3, [sp, #12]
 8005508:	68d1      	ldr	r1, [r2, #12]
 800550a:	9103      	str	r1, [sp, #12]
 800550c:	6892      	ldr	r2, [r2, #8]
 800550e:	9203      	str	r2, [sp, #12]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005510:	4618      	mov	r0, r3
 8005512:	e01d      	b.n	8005550 <HAL_SPI_TransmitReceive+0x1a2>
    errorcode = HAL_BUSY;
 8005514:	2002      	movs	r0, #2
 8005516:	e01b      	b.n	8005550 <HAL_SPI_TransmitReceive+0x1a2>
  __HAL_LOCK(hspi);
 8005518:	2002      	movs	r0, #2
 800551a:	e01f      	b.n	800555c <HAL_SPI_TransmitReceive+0x1ae>
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 800551c:	f1b9 0f00 	cmp.w	r9, #0
 8005520:	d006      	beq.n	8005530 <HAL_SPI_TransmitReceive+0x182>
 8005522:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005524:	b29b      	uxth	r3, r3
 8005526:	b11b      	cbz	r3, 8005530 <HAL_SPI_TransmitReceive+0x182>
 8005528:	6823      	ldr	r3, [r4, #0]
 800552a:	689a      	ldr	r2, [r3, #8]
 800552c:	0791      	lsls	r1, r2, #30
 800552e:	d418      	bmi.n	8005562 <HAL_SPI_TransmitReceive+0x1b4>
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8005530:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005532:	b29b      	uxth	r3, r3
 8005534:	b11b      	cbz	r3, 800553e <HAL_SPI_TransmitReceive+0x190>
 8005536:	6823      	ldr	r3, [r4, #0]
 8005538:	689a      	ldr	r2, [r3, #8]
 800553a:	07d2      	lsls	r2, r2, #31
 800553c:	d41b      	bmi.n	8005576 <HAL_SPI_TransmitReceive+0x1c8>
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 800553e:	1c78      	adds	r0, r7, #1
 8005540:	d091      	beq.n	8005466 <HAL_SPI_TransmitReceive+0xb8>
 8005542:	f7fe fdaf 	bl	80040a4 <HAL_GetTick>
 8005546:	eba0 0008 	sub.w	r0, r0, r8
 800554a:	4287      	cmp	r7, r0
 800554c:	d88b      	bhi.n	8005466 <HAL_SPI_TransmitReceive+0xb8>
        errorcode = HAL_TIMEOUT;
 800554e:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8005550:	2301      	movs	r3, #1
 8005552:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005556:	2300      	movs	r3, #0
 8005558:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 800555c:	b005      	add	sp, #20
 800555e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        hspi->Instance->DR = *((uint16_t *)pTxData);
 8005562:	f835 2b02 	ldrh.w	r2, [r5], #2
 8005566:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 8005568:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800556a:	3b01      	subs	r3, #1
 800556c:	b29b      	uxth	r3, r3
 800556e:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8005570:	f04f 0900 	mov.w	r9, #0
 8005574:	e7dc      	b.n	8005530 <HAL_SPI_TransmitReceive+0x182>
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 8005576:	68db      	ldr	r3, [r3, #12]
 8005578:	f826 3b02 	strh.w	r3, [r6], #2
        hspi->RxXferCount--;
 800557c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800557e:	3b01      	subs	r3, #1
 8005580:	b29b      	uxth	r3, r3
 8005582:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8005584:	f04f 0901 	mov.w	r9, #1
 8005588:	e7d9      	b.n	800553e <HAL_SPI_TransmitReceive+0x190>
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 800558a:	782a      	ldrb	r2, [r5, #0]
 800558c:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 800558e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005590:	3b01      	subs	r3, #1
 8005592:	b29b      	uxth	r3, r3
 8005594:	86e3      	strh	r3, [r4, #54]	; 0x36
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8005596:	3501      	adds	r5, #1
        txallowed = 0U;
 8005598:	f04f 0900 	mov.w	r9, #0
 800559c:	e796      	b.n	80054cc <HAL_SPI_TransmitReceive+0x11e>
        (*(uint8_t *)pRxData++) = hspi->Instance->DR;
 800559e:	68db      	ldr	r3, [r3, #12]
 80055a0:	7033      	strb	r3, [r6, #0]
        hspi->RxXferCount--;
 80055a2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80055a4:	3b01      	subs	r3, #1
 80055a6:	b29b      	uxth	r3, r3
 80055a8:	87e3      	strh	r3, [r4, #62]	; 0x3e
        (*(uint8_t *)pRxData++) = hspi->Instance->DR;
 80055aa:	3601      	adds	r6, #1
        txallowed = 1U;
 80055ac:	f04f 0901 	mov.w	r9, #1
 80055b0:	e793      	b.n	80054da <HAL_SPI_TransmitReceive+0x12c>

080055b2 <HAL_SPI_Receive>:
{
 80055b2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80055b6:	461e      	mov	r6, r3
  if((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80055b8:	6843      	ldr	r3, [r0, #4]
 80055ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
{
 80055be:	4604      	mov	r4, r0
 80055c0:	460d      	mov	r5, r1
 80055c2:	4690      	mov	r8, r2
  if((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80055c4:	d10c      	bne.n	80055e0 <HAL_SPI_Receive+0x2e>
 80055c6:	6883      	ldr	r3, [r0, #8]
 80055c8:	b953      	cbnz	r3, 80055e0 <HAL_SPI_Receive+0x2e>
     hspi->State = HAL_SPI_STATE_BUSY_RX;
 80055ca:	2304      	movs	r3, #4
 80055cc:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
    return HAL_SPI_TransmitReceive(hspi,pData,pData,Size,Timeout);
 80055d0:	4613      	mov	r3, r2
 80055d2:	9600      	str	r6, [sp, #0]
 80055d4:	460a      	mov	r2, r1
 80055d6:	f7ff feea 	bl	80053ae <HAL_SPI_TransmitReceive>
}
 80055da:	b002      	add	sp, #8
 80055dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hspi);
 80055e0:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 80055e4:	2b01      	cmp	r3, #1
 80055e6:	f000 8081 	beq.w	80056ec <HAL_SPI_Receive+0x13a>
 80055ea:	2301      	movs	r3, #1
 80055ec:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 80055f0:	f7fe fd58 	bl	80040a4 <HAL_GetTick>
 80055f4:	4607      	mov	r7, r0
  if(hspi->State != HAL_SPI_STATE_READY)
 80055f6:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 80055fa:	b2c0      	uxtb	r0, r0
 80055fc:	2801      	cmp	r0, #1
 80055fe:	d173      	bne.n	80056e8 <HAL_SPI_Receive+0x136>
  if((pData == NULL ) || (Size == 0))
 8005600:	2d00      	cmp	r5, #0
 8005602:	d035      	beq.n	8005670 <HAL_SPI_Receive+0xbe>
 8005604:	f1b8 0f00 	cmp.w	r8, #0
 8005608:	d032      	beq.n	8005670 <HAL_SPI_Receive+0xbe>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800560a:	2304      	movs	r3, #4
 800560c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005610:	2300      	movs	r3, #0
 8005612:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005614:	6323      	str	r3, [r4, #48]	; 0x30
  hspi->RxXferCount = Size;
 8005616:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e
  hspi->TxXferSize  = 0U;
 800561a:	86a3      	strh	r3, [r4, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800561c:	86e3      	strh	r3, [r4, #54]	; 0x36
  hspi->RxISR       = NULL;
 800561e:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005620:	6463      	str	r3, [r4, #68]	; 0x44
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005622:	68a3      	ldr	r3, [r4, #8]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005624:	63a5      	str	r5, [r4, #56]	; 0x38
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005626:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800562a:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferSize  = Size;
 800562c:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
    SPI_1LINE_RX(hspi);
 8005630:	bf02      	ittt	eq
 8005632:	681a      	ldreq	r2, [r3, #0]
 8005634:	f422 4280 	biceq.w	r2, r2, #16384	; 0x4000
 8005638:	601a      	streq	r2, [r3, #0]
  if((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800563a:	681a      	ldr	r2, [r3, #0]
 800563c:	0652      	lsls	r2, r2, #25
    __HAL_SPI_ENABLE(hspi);
 800563e:	bf5e      	ittt	pl
 8005640:	681a      	ldrpl	r2, [r3, #0]
 8005642:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 8005646:	601a      	strpl	r2, [r3, #0]
  if(hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005648:	68e3      	ldr	r3, [r4, #12]
 800564a:	bb4b      	cbnz	r3, 80056a0 <HAL_SPI_Receive+0xee>
    while(hspi->RxXferCount > 0U)
 800564c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800564e:	b29b      	uxth	r3, r3
 8005650:	2b00      	cmp	r3, #0
 8005652:	d034      	beq.n	80056be <HAL_SPI_Receive+0x10c>
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005654:	6823      	ldr	r3, [r4, #0]
 8005656:	689a      	ldr	r2, [r3, #8]
 8005658:	07d0      	lsls	r0, r2, #31
 800565a:	d507      	bpl.n	800566c <HAL_SPI_Receive+0xba>
        (* (uint8_t *)pData)= *(__IO uint8_t *)&hspi->Instance->DR;
 800565c:	7b1b      	ldrb	r3, [r3, #12]
 800565e:	f805 3b01 	strb.w	r3, [r5], #1
        hspi->RxXferCount--;
 8005662:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005664:	3b01      	subs	r3, #1
 8005666:	b29b      	uxth	r3, r3
 8005668:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800566a:	e7ef      	b.n	800564c <HAL_SPI_Receive+0x9a>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 800566c:	b93e      	cbnz	r6, 800567e <HAL_SPI_Receive+0xcc>
          errorcode = HAL_TIMEOUT;
 800566e:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8005670:	2301      	movs	r3, #1
 8005672:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005676:	2300      	movs	r3, #0
 8005678:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  return errorcode;
 800567c:	e7ad      	b.n	80055da <HAL_SPI_Receive+0x28>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 800567e:	1c71      	adds	r1, r6, #1
 8005680:	d0e4      	beq.n	800564c <HAL_SPI_Receive+0x9a>
 8005682:	f7fe fd0f 	bl	80040a4 <HAL_GetTick>
 8005686:	1bc0      	subs	r0, r0, r7
 8005688:	4286      	cmp	r6, r0
 800568a:	d9f0      	bls.n	800566e <HAL_SPI_Receive+0xbc>
 800568c:	e7de      	b.n	800564c <HAL_SPI_Receive+0x9a>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 800568e:	2e00      	cmp	r6, #0
 8005690:	d0ed      	beq.n	800566e <HAL_SPI_Receive+0xbc>
 8005692:	1c73      	adds	r3, r6, #1
 8005694:	d004      	beq.n	80056a0 <HAL_SPI_Receive+0xee>
 8005696:	f7fe fd05 	bl	80040a4 <HAL_GetTick>
 800569a:	1bc0      	subs	r0, r0, r7
 800569c:	4286      	cmp	r6, r0
 800569e:	d9e6      	bls.n	800566e <HAL_SPI_Receive+0xbc>
    while(hspi->RxXferCount > 0U)
 80056a0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80056a2:	b29b      	uxth	r3, r3
 80056a4:	b15b      	cbz	r3, 80056be <HAL_SPI_Receive+0x10c>
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80056a6:	6823      	ldr	r3, [r4, #0]
 80056a8:	689a      	ldr	r2, [r3, #8]
 80056aa:	07d2      	lsls	r2, r2, #31
 80056ac:	d5ef      	bpl.n	800568e <HAL_SPI_Receive+0xdc>
        *((uint16_t*)pData) = hspi->Instance->DR;
 80056ae:	68db      	ldr	r3, [r3, #12]
 80056b0:	f825 3b02 	strh.w	r3, [r5], #2
        hspi->RxXferCount--;
 80056b4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80056b6:	3b01      	subs	r3, #1
 80056b8:	b29b      	uxth	r3, r3
 80056ba:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80056bc:	e7f0      	b.n	80056a0 <HAL_SPI_Receive+0xee>
  if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80056be:	6863      	ldr	r3, [r4, #4]
 80056c0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80056c4:	d10b      	bne.n	80056de <HAL_SPI_Receive+0x12c>
 80056c6:	68a3      	ldr	r3, [r4, #8]
 80056c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056cc:	d002      	beq.n	80056d4 <HAL_SPI_Receive+0x122>
 80056ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056d2:	d104      	bne.n	80056de <HAL_SPI_Receive+0x12c>
    __HAL_SPI_DISABLE(hspi);
 80056d4:	6822      	ldr	r2, [r4, #0]
 80056d6:	6813      	ldr	r3, [r2, #0]
 80056d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056dc:	6013      	str	r3, [r2, #0]
  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80056de:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 80056e0:	3000      	adds	r0, #0
 80056e2:	bf18      	it	ne
 80056e4:	2001      	movne	r0, #1
 80056e6:	e7c3      	b.n	8005670 <HAL_SPI_Receive+0xbe>
 80056e8:	2002      	movs	r0, #2
 80056ea:	e7c1      	b.n	8005670 <HAL_SPI_Receive+0xbe>
  __HAL_LOCK(hspi);
 80056ec:	2002      	movs	r0, #2
 80056ee:	e774      	b.n	80055da <HAL_SPI_Receive+0x28>

080056f0 <HAL_SPI_ErrorCallback>:
 80056f0:	4770      	bx	lr
	...

080056f4 <HAL_SPI_IRQHandler>:
  uint32_t itsource = hspi->Instance->CR2;
 80056f4:	6803      	ldr	r3, [r0, #0]
{
 80056f6:	b530      	push	{r4, r5, lr}
  uint32_t itsource = hspi->Instance->CR2;
 80056f8:	6859      	ldr	r1, [r3, #4]
  uint32_t itflag   = hspi->Instance->SR;
 80056fa:	689a      	ldr	r2, [r3, #8]
  if(((itflag & SPI_FLAG_OVR) == RESET) &&
 80056fc:	f002 0541 	and.w	r5, r2, #65	; 0x41
 8005700:	2d01      	cmp	r5, #1
{
 8005702:	b085      	sub	sp, #20
 8005704:	4604      	mov	r4, r0
  if(((itflag & SPI_FLAG_OVR) == RESET) &&
 8005706:	d105      	bne.n	8005714 <HAL_SPI_IRQHandler+0x20>
     ((itflag & SPI_FLAG_RXNE) != RESET) && ((itsource & SPI_IT_RXNE) != RESET))
 8005708:	064d      	lsls	r5, r1, #25
 800570a:	d503      	bpl.n	8005714 <HAL_SPI_IRQHandler+0x20>
    hspi->RxISR(hspi);
 800570c:	6c03      	ldr	r3, [r0, #64]	; 0x40
    hspi->TxISR(hspi);
 800570e:	4798      	blx	r3
}
 8005710:	b005      	add	sp, #20
 8005712:	bd30      	pop	{r4, r5, pc}
  if(((itflag & SPI_FLAG_TXE) != RESET) && ((itsource & SPI_IT_TXE) != RESET))
 8005714:	0795      	lsls	r5, r2, #30
 8005716:	d504      	bpl.n	8005722 <HAL_SPI_IRQHandler+0x2e>
 8005718:	0608      	lsls	r0, r1, #24
 800571a:	d502      	bpl.n	8005722 <HAL_SPI_IRQHandler+0x2e>
    hspi->TxISR(hspi);
 800571c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800571e:	4620      	mov	r0, r4
 8005720:	e7f5      	b.n	800570e <HAL_SPI_IRQHandler+0x1a>
  if(((itflag & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE)) != RESET) && ((itsource & SPI_IT_ERR) != RESET))
 8005722:	f412 7fb0 	tst.w	r2, #352	; 0x160
 8005726:	d0f3      	beq.n	8005710 <HAL_SPI_IRQHandler+0x1c>
 8005728:	068d      	lsls	r5, r1, #26
 800572a:	d5f1      	bpl.n	8005710 <HAL_SPI_IRQHandler+0x1c>
    if((itflag & SPI_FLAG_OVR) != RESET)
 800572c:	0650      	lsls	r0, r2, #25
 800572e:	d50e      	bpl.n	800574e <HAL_SPI_IRQHandler+0x5a>
      if(hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005730:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8005734:	2803      	cmp	r0, #3
 8005736:	f04f 0500 	mov.w	r5, #0
 800573a:	d03e      	beq.n	80057ba <HAL_SPI_IRQHandler+0xc6>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800573c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800573e:	f040 0004 	orr.w	r0, r0, #4
 8005742:	6560      	str	r0, [r4, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005744:	9500      	str	r5, [sp, #0]
 8005746:	68d8      	ldr	r0, [r3, #12]
 8005748:	9000      	str	r0, [sp, #0]
 800574a:	6898      	ldr	r0, [r3, #8]
 800574c:	9000      	str	r0, [sp, #0]
    if((itflag & SPI_FLAG_MODF) != RESET)
 800574e:	0695      	lsls	r5, r2, #26
 8005750:	d50b      	bpl.n	800576a <HAL_SPI_IRQHandler+0x76>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005752:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005754:	f040 0001 	orr.w	r0, r0, #1
 8005758:	6560      	str	r0, [r4, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800575a:	2000      	movs	r0, #0
 800575c:	9002      	str	r0, [sp, #8]
 800575e:	6898      	ldr	r0, [r3, #8]
 8005760:	9002      	str	r0, [sp, #8]
 8005762:	6818      	ldr	r0, [r3, #0]
 8005764:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 8005768:	6018      	str	r0, [r3, #0]
    if((itflag & SPI_FLAG_FRE) != RESET)
 800576a:	05d0      	lsls	r0, r2, #23
 800576c:	d507      	bpl.n	800577e <HAL_SPI_IRQHandler+0x8a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800576e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8005770:	f042 0208 	orr.w	r2, r2, #8
 8005774:	6562      	str	r2, [r4, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005776:	2200      	movs	r2, #0
 8005778:	9203      	str	r2, [sp, #12]
 800577a:	689a      	ldr	r2, [r3, #8]
 800577c:	9203      	str	r2, [sp, #12]
    if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800577e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8005780:	2a00      	cmp	r2, #0
 8005782:	d0c5      	beq.n	8005710 <HAL_SPI_IRQHandler+0x1c>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005784:	685a      	ldr	r2, [r3, #4]
 8005786:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800578a:	605a      	str	r2, [r3, #4]
      hspi->State = HAL_SPI_STATE_READY;
 800578c:	2201      	movs	r2, #1
 800578e:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN))||(HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005792:	078a      	lsls	r2, r1, #30
 8005794:	d017      	beq.n	80057c6 <HAL_SPI_IRQHandler+0xd2>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005796:	685a      	ldr	r2, [r3, #4]
        if(hspi->hdmarx != NULL)
 8005798:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800579a:	f022 0203 	bic.w	r2, r2, #3
 800579e:	605a      	str	r2, [r3, #4]
        if(hspi->hdmarx != NULL)
 80057a0:	b118      	cbz	r0, 80057aa <HAL_SPI_IRQHandler+0xb6>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80057a2:	4b0b      	ldr	r3, [pc, #44]	; (80057d0 <HAL_SPI_IRQHandler+0xdc>)
 80057a4:	6503      	str	r3, [r0, #80]	; 0x50
          HAL_DMA_Abort_IT(hspi->hdmarx);
 80057a6:	f7fe ff15 	bl	80045d4 <HAL_DMA_Abort_IT>
        if(hspi->hdmatx != NULL)
 80057aa:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80057ac:	2800      	cmp	r0, #0
 80057ae:	d0af      	beq.n	8005710 <HAL_SPI_IRQHandler+0x1c>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80057b0:	4b07      	ldr	r3, [pc, #28]	; (80057d0 <HAL_SPI_IRQHandler+0xdc>)
 80057b2:	6503      	str	r3, [r0, #80]	; 0x50
          HAL_DMA_Abort_IT(hspi->hdmatx);
 80057b4:	f7fe ff0e 	bl	80045d4 <HAL_DMA_Abort_IT>
 80057b8:	e7aa      	b.n	8005710 <HAL_SPI_IRQHandler+0x1c>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80057ba:	9501      	str	r5, [sp, #4]
 80057bc:	68da      	ldr	r2, [r3, #12]
 80057be:	9201      	str	r2, [sp, #4]
 80057c0:	689b      	ldr	r3, [r3, #8]
 80057c2:	9301      	str	r3, [sp, #4]
        return;
 80057c4:	e7a4      	b.n	8005710 <HAL_SPI_IRQHandler+0x1c>
        HAL_SPI_ErrorCallback(hspi);
 80057c6:	4620      	mov	r0, r4
 80057c8:	f7ff ff92 	bl	80056f0 <HAL_SPI_ErrorCallback>
 80057cc:	e7a0      	b.n	8005710 <HAL_SPI_IRQHandler+0x1c>
 80057ce:	bf00      	nop
 80057d0:	080057d5 	.word	0x080057d5

080057d4 <_ZL19SPI_DMAAbortOnErrorP19__DMA_HandleTypeDef>:
{
 80057d4:	b508      	push	{r3, lr}
  SPI_HandleTypeDef* hspi = ( SPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80057d6:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hspi->RxXferCount = 0U;
 80057d8:	2300      	movs	r3, #0
 80057da:	87c3      	strh	r3, [r0, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80057dc:	86c3      	strh	r3, [r0, #54]	; 0x36
  HAL_SPI_ErrorCallback(hspi);
 80057de:	f7ff ff87 	bl	80056f0 <HAL_SPI_ErrorCallback>
 80057e2:	bd08      	pop	{r3, pc}

080057e4 <_ZL18UART_EndRxTransferP18UART_HandleTypeDef>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057e4:	6803      	ldr	r3, [r0, #0]
 80057e6:	68da      	ldr	r2, [r3, #12]
 80057e8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80057ec:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057ee:	695a      	ldr	r2, [r3, #20]
 80057f0:	f022 0201 	bic.w	r2, r2, #1
 80057f4:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80057f6:	2320      	movs	r3, #32
 80057f8:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 80057fc:	4770      	bx	lr
	...

08005800 <_ZL14UART_SetConfigP18UART_HandleTypeDef>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005800:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8005804:	6806      	ldr	r6, [r0, #0]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8005806:	68c2      	ldr	r2, [r0, #12]
  tmpreg = huart->Instance->CR2;
 8005808:	6933      	ldr	r3, [r6, #16]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800580a:	69c1      	ldr	r1, [r0, #28]
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 800580c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8005810:	4313      	orrs	r3, r2
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8005812:	6133      	str	r3, [r6, #16]
{
 8005814:	4604      	mov	r4, r0
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005816:	6883      	ldr	r3, [r0, #8]
 8005818:	6900      	ldr	r0, [r0, #16]
  tmpreg = huart->Instance->CR1;
 800581a:	68f2      	ldr	r2, [r6, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800581c:	4303      	orrs	r3, r0
 800581e:	6960      	ldr	r0, [r4, #20]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8005820:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005824:	4303      	orrs	r3, r0
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8005826:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800582a:	430b      	orrs	r3, r1
 800582c:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 800582e:	60f3      	str	r3, [r6, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8005830:	6973      	ldr	r3, [r6, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8005832:	69a2      	ldr	r2, [r4, #24]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8005834:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  tmpreg |= huart->Init.HwFlowCtl;
 8005838:	4313      	orrs	r3, r2
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800583a:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 800583e:	6173      	str	r3, [r6, #20]
 8005840:	4b7a      	ldr	r3, [pc, #488]	; (8005a2c <_ZL14UART_SetConfigP18UART_HandleTypeDef+0x22c>)
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005842:	d17c      	bne.n	800593e <_ZL14UART_SetConfigP18UART_HandleTypeDef+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8005844:	429e      	cmp	r6, r3
 8005846:	d003      	beq.n	8005850 <_ZL14UART_SetConfigP18UART_HandleTypeDef+0x50>
 8005848:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800584c:	429e      	cmp	r6, r3
 800584e:	d144      	bne.n	80058da <_ZL14UART_SetConfigP18UART_HandleTypeDef+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8005850:	f7ff faec 	bl	8004e2c <HAL_RCC_GetPCLK2Freq>
 8005854:	2519      	movs	r5, #25
 8005856:	fb05 f300 	mul.w	r3, r5, r0
 800585a:	6860      	ldr	r0, [r4, #4]
 800585c:	f04f 0964 	mov.w	r9, #100	; 0x64
 8005860:	0040      	lsls	r0, r0, #1
 8005862:	fbb3 f3f0 	udiv	r3, r3, r0
 8005866:	fbb3 f3f9 	udiv	r3, r3, r9
 800586a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800586e:	f7ff fadd 	bl	8004e2c <HAL_RCC_GetPCLK2Freq>
 8005872:	6863      	ldr	r3, [r4, #4]
 8005874:	4368      	muls	r0, r5
 8005876:	005b      	lsls	r3, r3, #1
 8005878:	fbb0 f7f3 	udiv	r7, r0, r3
 800587c:	f7ff fad6 	bl	8004e2c <HAL_RCC_GetPCLK2Freq>
 8005880:	6863      	ldr	r3, [r4, #4]
 8005882:	4368      	muls	r0, r5
 8005884:	005b      	lsls	r3, r3, #1
 8005886:	fbb0 f3f3 	udiv	r3, r0, r3
 800588a:	fbb3 f3f9 	udiv	r3, r3, r9
 800588e:	fb09 7313 	mls	r3, r9, r3, r7
 8005892:	00db      	lsls	r3, r3, #3
 8005894:	3332      	adds	r3, #50	; 0x32
 8005896:	fbb3 f3f9 	udiv	r3, r3, r9
 800589a:	005b      	lsls	r3, r3, #1
 800589c:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 80058a0:	f7ff fac4 	bl	8004e2c <HAL_RCC_GetPCLK2Freq>
 80058a4:	6862      	ldr	r2, [r4, #4]
 80058a6:	4368      	muls	r0, r5
 80058a8:	0052      	lsls	r2, r2, #1
 80058aa:	fbb0 faf2 	udiv	sl, r0, r2
 80058ae:	f7ff fabd 	bl	8004e2c <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80058b2:	6863      	ldr	r3, [r4, #4]
 80058b4:	4368      	muls	r0, r5
 80058b6:	005b      	lsls	r3, r3, #1
 80058b8:	fbb0 f3f3 	udiv	r3, r0, r3
 80058bc:	fbb3 f3f9 	udiv	r3, r3, r9
 80058c0:	fb09 a313 	mls	r3, r9, r3, sl
 80058c4:	00db      	lsls	r3, r3, #3
 80058c6:	3332      	adds	r3, #50	; 0x32
 80058c8:	fbb3 f3f9 	udiv	r3, r3, r9
 80058cc:	f003 0307 	and.w	r3, r3, #7
 80058d0:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80058d2:	443b      	add	r3, r7
 80058d4:	60b3      	str	r3, [r6, #8]
 80058d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80058da:	f7ff fa97 	bl	8004e0c <HAL_RCC_GetPCLK1Freq>
 80058de:	2519      	movs	r5, #25
 80058e0:	fb05 f300 	mul.w	r3, r5, r0
 80058e4:	6860      	ldr	r0, [r4, #4]
 80058e6:	f04f 0964 	mov.w	r9, #100	; 0x64
 80058ea:	0040      	lsls	r0, r0, #1
 80058ec:	fbb3 f3f0 	udiv	r3, r3, r0
 80058f0:	fbb3 f3f9 	udiv	r3, r3, r9
 80058f4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80058f8:	f7ff fa88 	bl	8004e0c <HAL_RCC_GetPCLK1Freq>
 80058fc:	6863      	ldr	r3, [r4, #4]
 80058fe:	4368      	muls	r0, r5
 8005900:	005b      	lsls	r3, r3, #1
 8005902:	fbb0 f7f3 	udiv	r7, r0, r3
 8005906:	f7ff fa81 	bl	8004e0c <HAL_RCC_GetPCLK1Freq>
 800590a:	6863      	ldr	r3, [r4, #4]
 800590c:	4368      	muls	r0, r5
 800590e:	005b      	lsls	r3, r3, #1
 8005910:	fbb0 f3f3 	udiv	r3, r0, r3
 8005914:	fbb3 f3f9 	udiv	r3, r3, r9
 8005918:	fb09 7313 	mls	r3, r9, r3, r7
 800591c:	00db      	lsls	r3, r3, #3
 800591e:	3332      	adds	r3, #50	; 0x32
 8005920:	fbb3 f3f9 	udiv	r3, r3, r9
 8005924:	005b      	lsls	r3, r3, #1
 8005926:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 800592a:	f7ff fa6f 	bl	8004e0c <HAL_RCC_GetPCLK1Freq>
 800592e:	6862      	ldr	r2, [r4, #4]
 8005930:	4368      	muls	r0, r5
 8005932:	0052      	lsls	r2, r2, #1
 8005934:	fbb0 faf2 	udiv	sl, r0, r2
 8005938:	f7ff fa68 	bl	8004e0c <HAL_RCC_GetPCLK1Freq>
 800593c:	e7b9      	b.n	80058b2 <_ZL14UART_SetConfigP18UART_HandleTypeDef+0xb2>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 800593e:	429e      	cmp	r6, r3
 8005940:	d002      	beq.n	8005948 <_ZL14UART_SetConfigP18UART_HandleTypeDef+0x148>
 8005942:	4b3b      	ldr	r3, [pc, #236]	; (8005a30 <_ZL14UART_SetConfigP18UART_HandleTypeDef+0x230>)
 8005944:	429e      	cmp	r6, r3
 8005946:	d140      	bne.n	80059ca <_ZL14UART_SetConfigP18UART_HandleTypeDef+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8005948:	f7ff fa70 	bl	8004e2c <HAL_RCC_GetPCLK2Freq>
 800594c:	6867      	ldr	r7, [r4, #4]
 800594e:	2519      	movs	r5, #25
 8005950:	f04f 0964 	mov.w	r9, #100	; 0x64
 8005954:	fb05 f300 	mul.w	r3, r5, r0
 8005958:	00bf      	lsls	r7, r7, #2
 800595a:	fbb3 f3f7 	udiv	r3, r3, r7
 800595e:	fbb3 f3f9 	udiv	r3, r3, r9
 8005962:	011f      	lsls	r7, r3, #4
 8005964:	f7ff fa62 	bl	8004e2c <HAL_RCC_GetPCLK2Freq>
 8005968:	6863      	ldr	r3, [r4, #4]
 800596a:	4368      	muls	r0, r5
 800596c:	009b      	lsls	r3, r3, #2
 800596e:	fbb0 f8f3 	udiv	r8, r0, r3
 8005972:	f7ff fa5b 	bl	8004e2c <HAL_RCC_GetPCLK2Freq>
 8005976:	6863      	ldr	r3, [r4, #4]
 8005978:	4368      	muls	r0, r5
 800597a:	009b      	lsls	r3, r3, #2
 800597c:	fbb0 f3f3 	udiv	r3, r0, r3
 8005980:	fbb3 f3f9 	udiv	r3, r3, r9
 8005984:	fb09 8313 	mls	r3, r9, r3, r8
 8005988:	011b      	lsls	r3, r3, #4
 800598a:	3332      	adds	r3, #50	; 0x32
 800598c:	fbb3 f3f9 	udiv	r3, r3, r9
 8005990:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8005994:	f7ff fa4a 	bl	8004e2c <HAL_RCC_GetPCLK2Freq>
 8005998:	6862      	ldr	r2, [r4, #4]
 800599a:	4368      	muls	r0, r5
 800599c:	0092      	lsls	r2, r2, #2
 800599e:	fbb0 faf2 	udiv	sl, r0, r2
 80059a2:	f7ff fa43 	bl	8004e2c <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80059a6:	6863      	ldr	r3, [r4, #4]
 80059a8:	4368      	muls	r0, r5
 80059aa:	009b      	lsls	r3, r3, #2
 80059ac:	fbb0 f3f3 	udiv	r3, r0, r3
 80059b0:	fbb3 f3f9 	udiv	r3, r3, r9
 80059b4:	fb09 a313 	mls	r3, r9, r3, sl
 80059b8:	011b      	lsls	r3, r3, #4
 80059ba:	3332      	adds	r3, #50	; 0x32
 80059bc:	fbb3 f3f9 	udiv	r3, r3, r9
 80059c0:	f003 030f 	and.w	r3, r3, #15
 80059c4:	ea43 0308 	orr.w	r3, r3, r8
 80059c8:	e783      	b.n	80058d2 <_ZL14UART_SetConfigP18UART_HandleTypeDef+0xd2>
 80059ca:	f7ff fa1f 	bl	8004e0c <HAL_RCC_GetPCLK1Freq>
 80059ce:	6867      	ldr	r7, [r4, #4]
 80059d0:	2519      	movs	r5, #25
 80059d2:	f04f 0964 	mov.w	r9, #100	; 0x64
 80059d6:	fb05 f300 	mul.w	r3, r5, r0
 80059da:	00bf      	lsls	r7, r7, #2
 80059dc:	fbb3 f3f7 	udiv	r3, r3, r7
 80059e0:	fbb3 f3f9 	udiv	r3, r3, r9
 80059e4:	011f      	lsls	r7, r3, #4
 80059e6:	f7ff fa11 	bl	8004e0c <HAL_RCC_GetPCLK1Freq>
 80059ea:	6863      	ldr	r3, [r4, #4]
 80059ec:	4368      	muls	r0, r5
 80059ee:	009b      	lsls	r3, r3, #2
 80059f0:	fbb0 f8f3 	udiv	r8, r0, r3
 80059f4:	f7ff fa0a 	bl	8004e0c <HAL_RCC_GetPCLK1Freq>
 80059f8:	6863      	ldr	r3, [r4, #4]
 80059fa:	4368      	muls	r0, r5
 80059fc:	009b      	lsls	r3, r3, #2
 80059fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a02:	fbb3 f3f9 	udiv	r3, r3, r9
 8005a06:	fb09 8313 	mls	r3, r9, r3, r8
 8005a0a:	011b      	lsls	r3, r3, #4
 8005a0c:	3332      	adds	r3, #50	; 0x32
 8005a0e:	fbb3 f3f9 	udiv	r3, r3, r9
 8005a12:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8005a16:	f7ff f9f9 	bl	8004e0c <HAL_RCC_GetPCLK1Freq>
 8005a1a:	6862      	ldr	r2, [r4, #4]
 8005a1c:	4368      	muls	r0, r5
 8005a1e:	0092      	lsls	r2, r2, #2
 8005a20:	fbb0 faf2 	udiv	sl, r0, r2
 8005a24:	f7ff f9f2 	bl	8004e0c <HAL_RCC_GetPCLK1Freq>
 8005a28:	e7bd      	b.n	80059a6 <_ZL14UART_SetConfigP18UART_HandleTypeDef+0x1a6>
 8005a2a:	bf00      	nop
 8005a2c:	40011000 	.word	0x40011000
 8005a30:	40011400 	.word	0x40011400

08005a34 <HAL_UART_Init>:
{
 8005a34:	b510      	push	{r4, lr}
  if(huart == NULL)
 8005a36:	4604      	mov	r4, r0
 8005a38:	b340      	cbz	r0, 8005a8c <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 8005a3a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8005a3e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005a42:	b91b      	cbnz	r3, 8005a4c <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8005a44:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8005a48:	f7fd fd54 	bl	80034f4 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8005a4c:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8005a4e:	2324      	movs	r3, #36	; 0x24
 8005a50:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8005a54:	68d3      	ldr	r3, [r2, #12]
 8005a56:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005a5a:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8005a5c:	4620      	mov	r0, r4
 8005a5e:	f7ff fecf 	bl	8005800 <_ZL14UART_SetConfigP18UART_HandleTypeDef>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a62:	6823      	ldr	r3, [r4, #0]
 8005a64:	691a      	ldr	r2, [r3, #16]
 8005a66:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a6a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a6c:	695a      	ldr	r2, [r3, #20]
 8005a6e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a72:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8005a74:	68da      	ldr	r2, [r3, #12]
 8005a76:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005a7a:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a7c:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 8005a7e:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a80:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8005a82:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8005a86:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8005a8a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8005a8c:	2001      	movs	r0, #1
}
 8005a8e:	bd10      	pop	{r4, pc}

08005a90 <HAL_UART_Transmit_DMA>:
{
 8005a90:	b538      	push	{r3, r4, r5, lr}
 8005a92:	4604      	mov	r4, r0
 8005a94:	4613      	mov	r3, r2
  if(huart->gState == HAL_UART_STATE_READY)
 8005a96:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8005a9a:	2a20      	cmp	r2, #32
 8005a9c:	d12a      	bne.n	8005af4 <HAL_UART_Transmit_DMA+0x64>
    if((pData == NULL ) || (Size == 0))
 8005a9e:	b339      	cbz	r1, 8005af0 <HAL_UART_Transmit_DMA+0x60>
 8005aa0:	b333      	cbz	r3, 8005af0 <HAL_UART_Transmit_DMA+0x60>
    __HAL_LOCK(huart);
 8005aa2:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 8005aa6:	2a01      	cmp	r2, #1
 8005aa8:	d024      	beq.n	8005af4 <HAL_UART_Transmit_DMA+0x64>
 8005aaa:	2201      	movs	r2, #1
 8005aac:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005ab0:	6b20      	ldr	r0, [r4, #48]	; 0x30
    huart->TxXferCount = Size;
 8005ab2:	84e3      	strh	r3, [r4, #38]	; 0x26
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ab4:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ab6:	2221      	movs	r2, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ab8:	63e5      	str	r5, [r4, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005aba:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005abe:	4a0e      	ldr	r2, [pc, #56]	; (8005af8 <HAL_UART_Transmit_DMA+0x68>)
    huart->TxXferSize = Size;
 8005ac0:	84a3      	strh	r3, [r4, #36]	; 0x24
    huart->pTxBuffPtr = pData;
 8005ac2:	6221      	str	r1, [r4, #32]
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005ac4:	63c2      	str	r2, [r0, #60]	; 0x3c
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005ac6:	4a0d      	ldr	r2, [pc, #52]	; (8005afc <HAL_UART_Transmit_DMA+0x6c>)
 8005ac8:	6402      	str	r2, [r0, #64]	; 0x40
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005aca:	4a0d      	ldr	r2, [pc, #52]	; (8005b00 <HAL_UART_Transmit_DMA+0x70>)
 8005acc:	64c2      	str	r2, [r0, #76]	; 0x4c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->DR, Size);
 8005ace:	6822      	ldr	r2, [r4, #0]
    huart->hdmatx->XferAbortCallback = NULL;
 8005ad0:	6505      	str	r5, [r0, #80]	; 0x50
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->DR, Size);
 8005ad2:	3204      	adds	r2, #4
 8005ad4:	f7fe fd40 	bl	8004558 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8005ad8:	6823      	ldr	r3, [r4, #0]
 8005ada:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005ade:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005ae0:	695a      	ldr	r2, [r3, #20]
    __HAL_UNLOCK(huart);
 8005ae2:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005ae6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005aea:	615a      	str	r2, [r3, #20]
    return HAL_OK;
 8005aec:	4628      	mov	r0, r5
 8005aee:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8005af0:	2001      	movs	r0, #1
 8005af2:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_BUSY;
 8005af4:	2002      	movs	r0, #2
}
 8005af6:	bd38      	pop	{r3, r4, r5, pc}
 8005af8:	08005b97 	.word	0x08005b97
 8005afc:	08005bc5 	.word	0x08005bc5
 8005b00:	08005c8b 	.word	0x08005c8b

08005b04 <HAL_UART_Receive_DMA>:
{  
 8005b04:	4613      	mov	r3, r2
  if(huart->RxState == HAL_UART_STATE_READY) 
 8005b06:	f890 203a 	ldrb.w	r2, [r0, #58]	; 0x3a
 8005b0a:	2a20      	cmp	r2, #32
{  
 8005b0c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005b0e:	4605      	mov	r5, r0
  if(huart->RxState == HAL_UART_STATE_READY) 
 8005b10:	d137      	bne.n	8005b82 <HAL_UART_Receive_DMA+0x7e>
    if((pData == NULL ) || (Size == 0)) 
 8005b12:	2900      	cmp	r1, #0
 8005b14:	d033      	beq.n	8005b7e <HAL_UART_Receive_DMA+0x7a>
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d031      	beq.n	8005b7e <HAL_UART_Receive_DMA+0x7a>
    __HAL_LOCK(huart);
 8005b1a:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 8005b1e:	2a01      	cmp	r2, #1
 8005b20:	d02f      	beq.n	8005b82 <HAL_UART_Receive_DMA+0x7e>
 8005b22:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b24:	2400      	movs	r4, #0
    __HAL_LOCK(huart);
 8005b26:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005b2a:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b2c:	63c4      	str	r4, [r0, #60]	; 0x3c
    huart->pRxBuffPtr = pData;
 8005b2e:	6281      	str	r1, [r0, #40]	; 0x28
    huart->RxXferSize = Size;
 8005b30:	8583      	strh	r3, [r0, #44]	; 0x2c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005b32:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005b36:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8005b38:	4a13      	ldr	r2, [pc, #76]	; (8005b88 <HAL_UART_Receive_DMA+0x84>)
 8005b3a:	63c2      	str	r2, [r0, #60]	; 0x3c
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t*)tmp, Size);
 8005b3c:	682e      	ldr	r6, [r5, #0]
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005b3e:	4a13      	ldr	r2, [pc, #76]	; (8005b8c <HAL_UART_Receive_DMA+0x88>)
 8005b40:	6402      	str	r2, [r0, #64]	; 0x40
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005b42:	4a13      	ldr	r2, [pc, #76]	; (8005b90 <HAL_UART_Receive_DMA+0x8c>)
 8005b44:	64c2      	str	r2, [r0, #76]	; 0x4c
    huart->hdmarx->XferAbortCallback = NULL;
 8005b46:	6504      	str	r4, [r0, #80]	; 0x50
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t*)tmp, Size);
 8005b48:	460a      	mov	r2, r1
 8005b4a:	1d31      	adds	r1, r6, #4
 8005b4c:	f7fe fd04 	bl	8004558 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_OREFLAG(huart);
 8005b50:	682b      	ldr	r3, [r5, #0]
 8005b52:	9401      	str	r4, [sp, #4]
 8005b54:	681a      	ldr	r2, [r3, #0]
 8005b56:	9201      	str	r2, [sp, #4]
 8005b58:	685a      	ldr	r2, [r3, #4]
 8005b5a:	9201      	str	r2, [sp, #4]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b5c:	68da      	ldr	r2, [r3, #12]
    __HAL_UNLOCK(huart);
 8005b5e:	f885 4038 	strb.w	r4, [r5, #56]	; 0x38
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b62:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b66:	60da      	str	r2, [r3, #12]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b68:	695a      	ldr	r2, [r3, #20]
 8005b6a:	f042 0201 	orr.w	r2, r2, #1
 8005b6e:	615a      	str	r2, [r3, #20]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b70:	695a      	ldr	r2, [r3, #20]
 8005b72:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b76:	615a      	str	r2, [r3, #20]
    return HAL_OK;
 8005b78:	4620      	mov	r0, r4
}
 8005b7a:	b002      	add	sp, #8
 8005b7c:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8005b7e:	2001      	movs	r0, #1
 8005b80:	e7fb      	b.n	8005b7a <HAL_UART_Receive_DMA+0x76>
    return HAL_BUSY; 
 8005b82:	2002      	movs	r0, #2
 8005b84:	e7f9      	b.n	8005b7a <HAL_UART_Receive_DMA+0x76>
 8005b86:	bf00      	nop
 8005b88:	08005bd1 	.word	0x08005bd1
 8005b8c:	08005c7f 	.word	0x08005c7f
 8005b90:	08005c8b 	.word	0x08005c8b

08005b94 <HAL_UART_TxCpltCallback>:
 8005b94:	4770      	bx	lr

08005b96 <_ZL20UART_DMATransmitCpltP19__DMA_HandleTypeDef>:
{
 8005b96:	b508      	push	{r3, lr}
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005b98:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005b9a:	6b82      	ldr	r2, [r0, #56]	; 0x38
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 8005ba2:	d10a      	bne.n	8005bba <_ZL20UART_DMATransmitCpltP19__DMA_HandleTypeDef+0x24>
    huart->TxXferCount = 0U;
 8005ba4:	84d3      	strh	r3, [r2, #38]	; 0x26
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005ba6:	6813      	ldr	r3, [r2, #0]
 8005ba8:	695a      	ldr	r2, [r3, #20]
 8005baa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005bae:	615a      	str	r2, [r3, #20]
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005bb0:	68da      	ldr	r2, [r3, #12]
 8005bb2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005bb6:	60da      	str	r2, [r3, #12]
 8005bb8:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8005bba:	4610      	mov	r0, r2
 8005bbc:	f7ff ffea 	bl	8005b94 <HAL_UART_TxCpltCallback>
 8005bc0:	bd08      	pop	{r3, pc}

08005bc2 <HAL_UART_TxHalfCpltCallback>:
 8005bc2:	4770      	bx	lr

08005bc4 <_ZL18UART_DMATxHalfCpltP19__DMA_HandleTypeDef>:
{
 8005bc4:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 8005bc6:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8005bc8:	f7ff fffb 	bl	8005bc2 <HAL_UART_TxHalfCpltCallback>
 8005bcc:	bd08      	pop	{r3, pc}

08005bce <HAL_UART_RxCpltCallback>:
 8005bce:	4770      	bx	lr

08005bd0 <_ZL19UART_DMAReceiveCpltP19__DMA_HandleTypeDef>:
{
 8005bd0:	b508      	push	{r3, lr}
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005bd2:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005bd4:	6b82      	ldr	r2, [r0, #56]	; 0x38
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 8005bdc:	d110      	bne.n	8005c00 <_ZL19UART_DMAReceiveCpltP19__DMA_HandleTypeDef+0x30>
    huart->RxXferCount = 0U;
 8005bde:	85d3      	strh	r3, [r2, #46]	; 0x2e
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005be0:	6813      	ldr	r3, [r2, #0]
 8005be2:	68d9      	ldr	r1, [r3, #12]
 8005be4:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8005be8:	60d9      	str	r1, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bea:	6959      	ldr	r1, [r3, #20]
 8005bec:	f021 0101 	bic.w	r1, r1, #1
 8005bf0:	6159      	str	r1, [r3, #20]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005bf2:	6959      	ldr	r1, [r3, #20]
 8005bf4:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8005bf8:	6159      	str	r1, [r3, #20]
    huart->RxState = HAL_UART_STATE_READY;
 8005bfa:	2320      	movs	r3, #32
 8005bfc:	f882 303a 	strb.w	r3, [r2, #58]	; 0x3a
  HAL_UART_RxCpltCallback(huart);
 8005c00:	4610      	mov	r0, r2
 8005c02:	f7ff ffe4 	bl	8005bce <HAL_UART_RxCpltCallback>
 8005c06:	bd08      	pop	{r3, pc}

08005c08 <_ZL15UART_Receive_ITP18UART_HandleTypeDef>:
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8005c08:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8005c0c:	2b22      	cmp	r3, #34	; 0x22
{
 8005c0e:	b510      	push	{r4, lr}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8005c10:	d132      	bne.n	8005c78 <_ZL15UART_Receive_ITP18UART_HandleTypeDef+0x70>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005c12:	6883      	ldr	r3, [r0, #8]
 8005c14:	6901      	ldr	r1, [r0, #16]
 8005c16:	6802      	ldr	r2, [r0, #0]
 8005c18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c1c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005c1e:	d11f      	bne.n	8005c60 <_ZL15UART_Receive_ITP18UART_HandleTypeDef+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005c20:	6852      	ldr	r2, [r2, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8005c22:	b9c9      	cbnz	r1, 8005c58 <_ZL15UART_Receive_ITP18UART_HandleTypeDef+0x50>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005c24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c28:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 8005c2c:	6283      	str	r3, [r0, #40]	; 0x28
    if(--huart->RxXferCount == 0U)
 8005c2e:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 8005c30:	3c01      	subs	r4, #1
 8005c32:	b2a4      	uxth	r4, r4
 8005c34:	85c4      	strh	r4, [r0, #46]	; 0x2e
 8005c36:	b96c      	cbnz	r4, 8005c54 <_ZL15UART_Receive_ITP18UART_HandleTypeDef+0x4c>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c38:	6803      	ldr	r3, [r0, #0]
 8005c3a:	68da      	ldr	r2, [r3, #12]
 8005c3c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005c40:	60da      	str	r2, [r3, #12]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c42:	695a      	ldr	r2, [r3, #20]
 8005c44:	f022 0201 	bic.w	r2, r2, #1
 8005c48:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8005c4a:	2320      	movs	r3, #32
 8005c4c:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8005c50:	f7ff ffbd 	bl	8005bce <HAL_UART_RxCpltCallback>
    if(--huart->RxXferCount == 0U)
 8005c54:	2000      	movs	r0, #0
}
 8005c56:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8005c58:	b2d2      	uxtb	r2, r2
 8005c5a:	f823 2b01 	strh.w	r2, [r3], #1
 8005c5e:	e7e5      	b.n	8005c2c <_ZL15UART_Receive_ITP18UART_HandleTypeDef+0x24>
      if(huart->Init.Parity == UART_PARITY_NONE)
 8005c60:	b921      	cbnz	r1, 8005c6c <_ZL15UART_Receive_ITP18UART_HandleTypeDef+0x64>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005c62:	1c59      	adds	r1, r3, #1
 8005c64:	6852      	ldr	r2, [r2, #4]
 8005c66:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005c68:	701a      	strb	r2, [r3, #0]
 8005c6a:	e7e0      	b.n	8005c2e <_ZL15UART_Receive_ITP18UART_HandleTypeDef+0x26>
 8005c6c:	6852      	ldr	r2, [r2, #4]
 8005c6e:	1c59      	adds	r1, r3, #1
 8005c70:	6281      	str	r1, [r0, #40]	; 0x28
 8005c72:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005c76:	e7f7      	b.n	8005c68 <_ZL15UART_Receive_ITP18UART_HandleTypeDef+0x60>
    return HAL_BUSY;
 8005c78:	2002      	movs	r0, #2
 8005c7a:	bd10      	pop	{r4, pc}

08005c7c <HAL_UART_RxHalfCpltCallback>:
 8005c7c:	4770      	bx	lr

08005c7e <_ZL18UART_DMARxHalfCpltP19__DMA_HandleTypeDef>:
{
 8005c7e:	b508      	push	{r3, lr}
  HAL_UART_RxHalfCpltCallback(huart); 
 8005c80:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8005c82:	f7ff fffb 	bl	8005c7c <HAL_UART_RxHalfCpltCallback>
 8005c86:	bd08      	pop	{r3, pc}

08005c88 <HAL_UART_ErrorCallback>:
 8005c88:	4770      	bx	lr

08005c8a <_ZL13UART_DMAErrorP19__DMA_HandleTypeDef>:
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005c8a:	6b81      	ldr	r1, [r0, #56]	; 0x38
{
 8005c8c:	b508      	push	{r3, lr}
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005c8e:	680b      	ldr	r3, [r1, #0]
 8005c90:	695a      	ldr	r2, [r3, #20]
  if((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005c92:	f891 0039 	ldrb.w	r0, [r1, #57]	; 0x39
 8005c96:	2821      	cmp	r0, #33	; 0x21
 8005c98:	d101      	bne.n	8005c9e <_ZL13UART_DMAErrorP19__DMA_HandleTypeDef+0x14>
 8005c9a:	0612      	lsls	r2, r2, #24
 8005c9c:	d40e      	bmi.n	8005cbc <_ZL13UART_DMAErrorP19__DMA_HandleTypeDef+0x32>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR); 
 8005c9e:	695b      	ldr	r3, [r3, #20]
  if((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005ca0:	f891 203a 	ldrb.w	r2, [r1, #58]	; 0x3a
 8005ca4:	2a22      	cmp	r2, #34	; 0x22
 8005ca6:	d101      	bne.n	8005cac <_ZL13UART_DMAErrorP19__DMA_HandleTypeDef+0x22>
 8005ca8:	065b      	lsls	r3, r3, #25
 8005caa:	d411      	bmi.n	8005cd0 <_ZL13UART_DMAErrorP19__DMA_HandleTypeDef+0x46>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005cac:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8005cae:	f043 0310 	orr.w	r3, r3, #16
 8005cb2:	63cb      	str	r3, [r1, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 8005cb4:	4608      	mov	r0, r1
 8005cb6:	f7ff ffe7 	bl	8005c88 <HAL_UART_ErrorCallback>
}
 8005cba:	bd08      	pop	{r3, pc}
    huart->TxXferCount = 0U;
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	84ca      	strh	r2, [r1, #38]	; 0x26
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005cc0:	68da      	ldr	r2, [r3, #12]
 8005cc2:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8005cc6:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8005cc8:	2220      	movs	r2, #32
 8005cca:	f881 2039 	strb.w	r2, [r1, #57]	; 0x39
 8005cce:	e7e6      	b.n	8005c9e <_ZL13UART_DMAErrorP19__DMA_HandleTypeDef+0x14>
    huart->RxXferCount = 0U;
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	85cb      	strh	r3, [r1, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005cd4:	4608      	mov	r0, r1
 8005cd6:	f7ff fd85 	bl	80057e4 <_ZL18UART_EndRxTransferP18UART_HandleTypeDef>
 8005cda:	e7e7      	b.n	8005cac <_ZL13UART_DMAErrorP19__DMA_HandleTypeDef+0x22>

08005cdc <HAL_UART_IRQHandler>:
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005cdc:	6803      	ldr	r3, [r0, #0]
 8005cde:	681a      	ldr	r2, [r3, #0]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005ce0:	68d9      	ldr	r1, [r3, #12]
{
 8005ce2:	b570      	push	{r4, r5, r6, lr}
  if(errorflags == RESET)
 8005ce4:	0716      	lsls	r6, r2, #28
{
 8005ce6:	4604      	mov	r4, r0
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005ce8:	695d      	ldr	r5, [r3, #20]
  if(errorflags == RESET)
 8005cea:	d107      	bne.n	8005cfc <HAL_UART_IRQHandler+0x20>
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005cec:	0696      	lsls	r6, r2, #26
 8005cee:	d551      	bpl.n	8005d94 <HAL_UART_IRQHandler+0xb8>
 8005cf0:	068d      	lsls	r5, r1, #26
 8005cf2:	d54f      	bpl.n	8005d94 <HAL_UART_IRQHandler+0xb8>
}
 8005cf4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8005cf8:	f7ff bf86 	b.w	8005c08 <_ZL15UART_Receive_ITP18UART_HandleTypeDef>
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005cfc:	f015 0501 	ands.w	r5, r5, #1
 8005d00:	d102      	bne.n	8005d08 <HAL_UART_IRQHandler+0x2c>
 8005d02:	f411 7f90 	tst.w	r1, #288	; 0x120
 8005d06:	d045      	beq.n	8005d94 <HAL_UART_IRQHandler+0xb8>
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005d08:	07d3      	lsls	r3, r2, #31
 8005d0a:	d505      	bpl.n	8005d18 <HAL_UART_IRQHandler+0x3c>
 8005d0c:	05ce      	lsls	r6, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005d0e:	bf42      	ittt	mi
 8005d10:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 8005d12:	f043 0301 	orrmi.w	r3, r3, #1
 8005d16:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005d18:	0750      	lsls	r0, r2, #29
 8005d1a:	d504      	bpl.n	8005d26 <HAL_UART_IRQHandler+0x4a>
 8005d1c:	b11d      	cbz	r5, 8005d26 <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005d1e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005d20:	f043 0302 	orr.w	r3, r3, #2
 8005d24:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005d26:	0793      	lsls	r3, r2, #30
 8005d28:	d504      	bpl.n	8005d34 <HAL_UART_IRQHandler+0x58>
 8005d2a:	b11d      	cbz	r5, 8005d34 <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005d2c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005d2e:	f043 0304 	orr.w	r3, r3, #4
 8005d32:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005d34:	0716      	lsls	r6, r2, #28
 8005d36:	d504      	bpl.n	8005d42 <HAL_UART_IRQHandler+0x66>
 8005d38:	b11d      	cbz	r5, 8005d42 <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005d3a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005d3c:	f043 0308 	orr.w	r3, r3, #8
 8005d40:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005d42:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d069      	beq.n	8005e1c <HAL_UART_IRQHandler+0x140>
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005d48:	0690      	lsls	r0, r2, #26
 8005d4a:	d504      	bpl.n	8005d56 <HAL_UART_IRQHandler+0x7a>
 8005d4c:	068a      	lsls	r2, r1, #26
 8005d4e:	d502      	bpl.n	8005d56 <HAL_UART_IRQHandler+0x7a>
        UART_Receive_IT(huart);
 8005d50:	4620      	mov	r0, r4
 8005d52:	f7ff ff59 	bl	8005c08 <_ZL15UART_Receive_ITP18UART_HandleTypeDef>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005d56:	6823      	ldr	r3, [r4, #0]
 8005d58:	695d      	ldr	r5, [r3, #20]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005d5a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8005d5c:	0713      	lsls	r3, r2, #28
 8005d5e:	d452      	bmi.n	8005e06 <HAL_UART_IRQHandler+0x12a>
 8005d60:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8005d64:	d14f      	bne.n	8005e06 <HAL_UART_IRQHandler+0x12a>
        HAL_UART_ErrorCallback(huart);
 8005d66:	4620      	mov	r0, r4
 8005d68:	f7ff ff8e 	bl	8005c88 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d6c:	63e5      	str	r5, [r4, #60]	; 0x3c
 8005d6e:	bd70      	pop	{r4, r5, r6, pc}
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d70:	695a      	ldr	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 8005d72:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d78:	615a      	str	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 8005d7a:	2800      	cmp	r0, #0
 8005d7c:	d04a      	beq.n	8005e14 <HAL_UART_IRQHandler+0x138>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005d7e:	4b28      	ldr	r3, [pc, #160]	; (8005e20 <HAL_UART_IRQHandler+0x144>)
 8005d80:	6503      	str	r3, [r0, #80]	; 0x50
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005d82:	f7fe fc27 	bl	80045d4 <HAL_DMA_Abort_IT>
 8005d86:	2800      	cmp	r0, #0
 8005d88:	d048      	beq.n	8005e1c <HAL_UART_IRQHandler+0x140>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005d8a:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 8005d8c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005d90:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8005d92:	4718      	bx	r3
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005d94:	0616      	lsls	r6, r2, #24
 8005d96:	d527      	bpl.n	8005de8 <HAL_UART_IRQHandler+0x10c>
 8005d98:	060d      	lsls	r5, r1, #24
 8005d9a:	d525      	bpl.n	8005de8 <HAL_UART_IRQHandler+0x10c>
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 8005d9c:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8005da0:	2a21      	cmp	r2, #33	; 0x21
 8005da2:	d13b      	bne.n	8005e1c <HAL_UART_IRQHandler+0x140>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005da4:	68a2      	ldr	r2, [r4, #8]
 8005da6:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8005daa:	6a22      	ldr	r2, [r4, #32]
 8005dac:	d117      	bne.n	8005dde <HAL_UART_IRQHandler+0x102>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005dae:	8811      	ldrh	r1, [r2, #0]
 8005db0:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8005db4:	6059      	str	r1, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8005db6:	6921      	ldr	r1, [r4, #16]
 8005db8:	b979      	cbnz	r1, 8005dda <HAL_UART_IRQHandler+0xfe>
        huart->pTxBuffPtr += 2U;
 8005dba:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 8005dbc:	6222      	str	r2, [r4, #32]
    if(--huart->TxXferCount == 0U)
 8005dbe:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8005dc0:	3a01      	subs	r2, #1
 8005dc2:	b292      	uxth	r2, r2
 8005dc4:	84e2      	strh	r2, [r4, #38]	; 0x26
 8005dc6:	bb4a      	cbnz	r2, 8005e1c <HAL_UART_IRQHandler+0x140>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005dc8:	68da      	ldr	r2, [r3, #12]
 8005dca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005dce:	60da      	str	r2, [r3, #12]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005dd0:	68da      	ldr	r2, [r3, #12]
 8005dd2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005dd6:	60da      	str	r2, [r3, #12]
 8005dd8:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 8005dda:	3201      	adds	r2, #1
 8005ddc:	e7ee      	b.n	8005dbc <HAL_UART_IRQHandler+0xe0>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005dde:	1c51      	adds	r1, r2, #1
 8005de0:	6221      	str	r1, [r4, #32]
 8005de2:	7812      	ldrb	r2, [r2, #0]
 8005de4:	605a      	str	r2, [r3, #4]
 8005de6:	e7ea      	b.n	8005dbe <HAL_UART_IRQHandler+0xe2>
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005de8:	0650      	lsls	r0, r2, #25
 8005dea:	d517      	bpl.n	8005e1c <HAL_UART_IRQHandler+0x140>
 8005dec:	0649      	lsls	r1, r1, #25
 8005dee:	d515      	bpl.n	8005e1c <HAL_UART_IRQHandler+0x140>
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005df0:	68da      	ldr	r2, [r3, #12]
 8005df2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005df6:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8005df8:	2320      	movs	r3, #32
 8005dfa:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8005dfe:	4620      	mov	r0, r4
 8005e00:	f7ff fec8 	bl	8005b94 <HAL_UART_TxCpltCallback>
 8005e04:	bd70      	pop	{r4, r5, r6, pc}
        UART_EndRxTransfer(huart);
 8005e06:	4620      	mov	r0, r4
 8005e08:	f7ff fcec 	bl	80057e4 <_ZL18UART_EndRxTransferP18UART_HandleTypeDef>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e0c:	6823      	ldr	r3, [r4, #0]
 8005e0e:	695a      	ldr	r2, [r3, #20]
 8005e10:	0652      	lsls	r2, r2, #25
 8005e12:	d4ad      	bmi.n	8005d70 <HAL_UART_IRQHandler+0x94>
            HAL_UART_ErrorCallback(huart);
 8005e14:	4620      	mov	r0, r4
 8005e16:	f7ff ff37 	bl	8005c88 <HAL_UART_ErrorCallback>
 8005e1a:	bd70      	pop	{r4, r5, r6, pc}
 8005e1c:	bd70      	pop	{r4, r5, r6, pc}
 8005e1e:	bf00      	nop
 8005e20:	08005e25 	.word	0x08005e25

08005e24 <_ZL20UART_DMAAbortOnErrorP19__DMA_HandleTypeDef>:
{
 8005e24:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005e26:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 8005e28:	2300      	movs	r3, #0
 8005e2a:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0U;
 8005e2c:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8005e2e:	f7ff ff2b 	bl	8005c88 <HAL_UART_ErrorCallback>
 8005e32:	bd08      	pop	{r3, pc}

08005e34 <_ZNK7Vector3IfErmERKS0_>:
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b08c      	sub	sp, #48	; 0x30
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6178      	str	r0, [r7, #20]
 8005e3c:	6139      	str	r1, [r7, #16]
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	ed93 7a01 	vldr	s14, [r3, #4]
 8005e44:	693b      	ldr	r3, [r7, #16]
 8005e46:	edd3 7a02 	vldr	s15, [r3, #8]
 8005e4a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	edd3 6a02 	vldr	s13, [r3, #8]
 8005e54:	693b      	ldr	r3, [r7, #16]
 8005e56:	edd3 7a01 	vldr	s15, [r3, #4]
 8005e5a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005e5e:	ee37 6a67 	vsub.f32	s12, s14, s15
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	ed93 7a02 	vldr	s14, [r3, #8]
 8005e68:	693b      	ldr	r3, [r7, #16]
 8005e6a:	edd3 7a00 	vldr	s15, [r3]
 8005e6e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005e72:	697b      	ldr	r3, [r7, #20]
 8005e74:	edd3 6a00 	vldr	s13, [r3]
 8005e78:	693b      	ldr	r3, [r7, #16]
 8005e7a:	edd3 7a02 	vldr	s15, [r3, #8]
 8005e7e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005e82:	ee77 5a67 	vsub.f32	s11, s14, s15
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	ed93 7a00 	vldr	s14, [r3]
 8005e8c:	693b      	ldr	r3, [r7, #16]
 8005e8e:	edd3 7a01 	vldr	s15, [r3, #4]
 8005e92:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	edd3 6a01 	vldr	s13, [r3, #4]
 8005e9c:	693b      	ldr	r3, [r7, #16]
 8005e9e:	edd3 7a00 	vldr	s15, [r3]
 8005ea2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005ea6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005eaa:	f107 0318 	add.w	r3, r7, #24
 8005eae:	eeb0 1a67 	vmov.f32	s2, s15
 8005eb2:	eef0 0a65 	vmov.f32	s1, s11
 8005eb6:	eeb0 0a46 	vmov.f32	s0, s12
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f000 f9ce 	bl	800625c <_ZN7Vector3IfEC1Efff>
 8005ec0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005ec4:	f107 0218 	add.w	r2, r7, #24
 8005ec8:	ca07      	ldmia	r2, {r0, r1, r2}
 8005eca:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8005ece:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005ed0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ed4:	ee06 1a90 	vmov	s13, r1
 8005ed8:	ee07 2a10 	vmov	s14, r2
 8005edc:	ee07 3a90 	vmov	s15, r3
 8005ee0:	eeb0 0a66 	vmov.f32	s0, s13
 8005ee4:	eef0 0a47 	vmov.f32	s1, s14
 8005ee8:	eeb0 1a67 	vmov.f32	s2, s15
 8005eec:	3730      	adds	r7, #48	; 0x30
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bd80      	pop	{r7, pc}
 8005ef2:	bf00      	nop

08005ef4 <_ZNK7Vector3IfEmlERKS0_>:
 8005ef4:	b480      	push	{r7}
 8005ef6:	b083      	sub	sp, #12
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
 8005efc:	6039      	str	r1, [r7, #0]
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	ed93 7a00 	vldr	s14, [r3]
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	edd3 7a00 	vldr	s15, [r3]
 8005f0a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	edd3 6a01 	vldr	s13, [r3, #4]
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	edd3 7a01 	vldr	s15, [r3, #4]
 8005f1a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005f1e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	edd3 6a02 	vldr	s13, [r3, #8]
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	edd3 7a02 	vldr	s15, [r3, #8]
 8005f2e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005f32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005f36:	eeb0 0a67 	vmov.f32	s0, s15
 8005f3a:	370c      	adds	r7, #12
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f42:	4770      	bx	lr

08005f44 <_ZN7Vector3IfEdVEf>:
 8005f44:	b480      	push	{r7}
 8005f46:	b083      	sub	sp, #12
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
 8005f4c:	ed87 0a00 	vstr	s0, [r7]
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	edd3 6a00 	vldr	s13, [r3]
 8005f56:	ed97 7a00 	vldr	s14, [r7]
 8005f5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	edc3 7a00 	vstr	s15, [r3]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	edd3 6a01 	vldr	s13, [r3, #4]
 8005f6a:	ed97 7a00 	vldr	s14, [r7]
 8005f6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	edc3 7a01 	vstr	s15, [r3, #4]
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	edd3 6a02 	vldr	s13, [r3, #8]
 8005f7e:	ed97 7a00 	vldr	s14, [r7]
 8005f82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	edc3 7a02 	vstr	s15, [r3, #8]
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	4618      	mov	r0, r3
 8005f90:	370c      	adds	r7, #12
 8005f92:	46bd      	mov	sp, r7
 8005f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f98:	4770      	bx	lr
 8005f9a:	bf00      	nop

08005f9c <_ZN7Vector3IfEmIERKS0_>:
 8005f9c:	b480      	push	{r7}
 8005f9e:	b083      	sub	sp, #12
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
 8005fa4:	6039      	str	r1, [r7, #0]
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	ed93 7a00 	vldr	s14, [r3]
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	edd3 7a00 	vldr	s15, [r3]
 8005fb2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	edc3 7a00 	vstr	s15, [r3]
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	ed93 7a01 	vldr	s14, [r3, #4]
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	edd3 7a01 	vldr	s15, [r3, #4]
 8005fc8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	edc3 7a01 	vstr	s15, [r3, #4]
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	ed93 7a02 	vldr	s14, [r3, #8]
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	edd3 7a02 	vldr	s15, [r3, #8]
 8005fde:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	edc3 7a02 	vstr	s15, [r3, #8]
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	4618      	mov	r0, r3
 8005fec:	370c      	adds	r7, #12
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff4:	4770      	bx	lr
 8005ff6:	bf00      	nop

08005ff8 <_ZN7Vector3IfEpLERKS0_>:
 8005ff8:	b480      	push	{r7}
 8005ffa:	b083      	sub	sp, #12
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
 8006000:	6039      	str	r1, [r7, #0]
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	ed93 7a00 	vldr	s14, [r3]
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	edd3 7a00 	vldr	s15, [r3]
 800600e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	edc3 7a00 	vstr	s15, [r3]
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	ed93 7a01 	vldr	s14, [r3, #4]
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	edd3 7a01 	vldr	s15, [r3, #4]
 8006024:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	edc3 7a01 	vstr	s15, [r3, #4]
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	ed93 7a02 	vldr	s14, [r3, #8]
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	edd3 7a02 	vldr	s15, [r3, #8]
 800603a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	edc3 7a02 	vstr	s15, [r3, #8]
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	4618      	mov	r0, r3
 8006048:	370c      	adds	r7, #12
 800604a:	46bd      	mov	sp, r7
 800604c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006050:	4770      	bx	lr
 8006052:	bf00      	nop

08006054 <_ZNK7Vector3IfEdvEf>:
 8006054:	b580      	push	{r7, lr}
 8006056:	b08c      	sub	sp, #48	; 0x30
 8006058:	af00      	add	r7, sp, #0
 800605a:	6178      	str	r0, [r7, #20]
 800605c:	ed87 0a04 	vstr	s0, [r7, #16]
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	ed93 7a00 	vldr	s14, [r3]
 8006066:	edd7 7a04 	vldr	s15, [r7, #16]
 800606a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800606e:	697b      	ldr	r3, [r7, #20]
 8006070:	ed93 7a01 	vldr	s14, [r3, #4]
 8006074:	edd7 7a04 	vldr	s15, [r7, #16]
 8006078:	ee87 6a27 	vdiv.f32	s12, s14, s15
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	ed93 7a02 	vldr	s14, [r3, #8]
 8006082:	edd7 7a04 	vldr	s15, [r7, #16]
 8006086:	eec7 5a27 	vdiv.f32	s11, s14, s15
 800608a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800608e:	eeb0 1a65 	vmov.f32	s2, s11
 8006092:	eef0 0a46 	vmov.f32	s1, s12
 8006096:	eeb0 0a66 	vmov.f32	s0, s13
 800609a:	4618      	mov	r0, r3
 800609c:	f000 f8de 	bl	800625c <_ZN7Vector3IfEC1Efff>
 80060a0:	f107 0318 	add.w	r3, r7, #24
 80060a4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80060a8:	ca07      	ldmia	r2, {r0, r1, r2}
 80060aa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80060ae:	69b9      	ldr	r1, [r7, #24]
 80060b0:	69fa      	ldr	r2, [r7, #28]
 80060b2:	6a3b      	ldr	r3, [r7, #32]
 80060b4:	ee06 1a90 	vmov	s13, r1
 80060b8:	ee07 2a10 	vmov	s14, r2
 80060bc:	ee07 3a90 	vmov	s15, r3
 80060c0:	eeb0 0a66 	vmov.f32	s0, s13
 80060c4:	eef0 0a47 	vmov.f32	s1, s14
 80060c8:	eeb0 1a67 	vmov.f32	s2, s15
 80060cc:	3730      	adds	r7, #48	; 0x30
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}
 80060d2:	bf00      	nop

080060d4 <_ZNK7Vector3IfEmlEf>:
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b08c      	sub	sp, #48	; 0x30
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6178      	str	r0, [r7, #20]
 80060dc:	ed87 0a04 	vstr	s0, [r7, #16]
 80060e0:	697b      	ldr	r3, [r7, #20]
 80060e2:	ed93 7a00 	vldr	s14, [r3]
 80060e6:	edd7 7a04 	vldr	s15, [r7, #16]
 80060ea:	ee67 6a27 	vmul.f32	s13, s14, s15
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	ed93 7a01 	vldr	s14, [r3, #4]
 80060f4:	edd7 7a04 	vldr	s15, [r7, #16]
 80060f8:	ee27 6a27 	vmul.f32	s12, s14, s15
 80060fc:	697b      	ldr	r3, [r7, #20]
 80060fe:	ed93 7a02 	vldr	s14, [r3, #8]
 8006102:	edd7 7a04 	vldr	s15, [r7, #16]
 8006106:	ee67 7a27 	vmul.f32	s15, s14, s15
 800610a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800610e:	eeb0 1a67 	vmov.f32	s2, s15
 8006112:	eef0 0a46 	vmov.f32	s1, s12
 8006116:	eeb0 0a66 	vmov.f32	s0, s13
 800611a:	4618      	mov	r0, r3
 800611c:	f000 f89e 	bl	800625c <_ZN7Vector3IfEC1Efff>
 8006120:	f107 0318 	add.w	r3, r7, #24
 8006124:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8006128:	ca07      	ldmia	r2, {r0, r1, r2}
 800612a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800612e:	69b9      	ldr	r1, [r7, #24]
 8006130:	69fa      	ldr	r2, [r7, #28]
 8006132:	6a3b      	ldr	r3, [r7, #32]
 8006134:	ee06 1a90 	vmov	s13, r1
 8006138:	ee07 2a10 	vmov	s14, r2
 800613c:	ee07 3a90 	vmov	s15, r3
 8006140:	eeb0 0a66 	vmov.f32	s0, s13
 8006144:	eef0 0a47 	vmov.f32	s1, s14
 8006148:	eeb0 1a67 	vmov.f32	s2, s15
 800614c:	3730      	adds	r7, #48	; 0x30
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}
 8006152:	bf00      	nop

08006154 <_ZNK7Vector3IfEplERKS0_>:
 8006154:	b580      	push	{r7, lr}
 8006156:	b08c      	sub	sp, #48	; 0x30
 8006158:	af00      	add	r7, sp, #0
 800615a:	6178      	str	r0, [r7, #20]
 800615c:	6139      	str	r1, [r7, #16]
 800615e:	697b      	ldr	r3, [r7, #20]
 8006160:	ed93 7a00 	vldr	s14, [r3]
 8006164:	693b      	ldr	r3, [r7, #16]
 8006166:	edd3 7a00 	vldr	s15, [r3]
 800616a:	ee77 6a27 	vadd.f32	s13, s14, s15
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	ed93 7a01 	vldr	s14, [r3, #4]
 8006174:	693b      	ldr	r3, [r7, #16]
 8006176:	edd3 7a01 	vldr	s15, [r3, #4]
 800617a:	ee37 6a27 	vadd.f32	s12, s14, s15
 800617e:	697b      	ldr	r3, [r7, #20]
 8006180:	ed93 7a02 	vldr	s14, [r3, #8]
 8006184:	693b      	ldr	r3, [r7, #16]
 8006186:	edd3 7a02 	vldr	s15, [r3, #8]
 800618a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800618e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006192:	eeb0 1a67 	vmov.f32	s2, s15
 8006196:	eef0 0a46 	vmov.f32	s1, s12
 800619a:	eeb0 0a66 	vmov.f32	s0, s13
 800619e:	4618      	mov	r0, r3
 80061a0:	f000 f85c 	bl	800625c <_ZN7Vector3IfEC1Efff>
 80061a4:	f107 0318 	add.w	r3, r7, #24
 80061a8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80061ac:	ca07      	ldmia	r2, {r0, r1, r2}
 80061ae:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80061b2:	69b9      	ldr	r1, [r7, #24]
 80061b4:	69fa      	ldr	r2, [r7, #28]
 80061b6:	6a3b      	ldr	r3, [r7, #32]
 80061b8:	ee06 1a90 	vmov	s13, r1
 80061bc:	ee07 2a10 	vmov	s14, r2
 80061c0:	ee07 3a90 	vmov	s15, r3
 80061c4:	eeb0 0a66 	vmov.f32	s0, s13
 80061c8:	eef0 0a47 	vmov.f32	s1, s14
 80061cc:	eeb0 1a67 	vmov.f32	s2, s15
 80061d0:	3730      	adds	r7, #48	; 0x30
 80061d2:	46bd      	mov	sp, r7
 80061d4:	bd80      	pop	{r7, pc}
 80061d6:	bf00      	nop

080061d8 <_ZNK7Vector3IfEmiERKS0_>:
 80061d8:	b580      	push	{r7, lr}
 80061da:	b08c      	sub	sp, #48	; 0x30
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6178      	str	r0, [r7, #20]
 80061e0:	6139      	str	r1, [r7, #16]
 80061e2:	697b      	ldr	r3, [r7, #20]
 80061e4:	ed93 7a00 	vldr	s14, [r3]
 80061e8:	693b      	ldr	r3, [r7, #16]
 80061ea:	edd3 7a00 	vldr	s15, [r3]
 80061ee:	ee77 6a67 	vsub.f32	s13, s14, s15
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	ed93 7a01 	vldr	s14, [r3, #4]
 80061f8:	693b      	ldr	r3, [r7, #16]
 80061fa:	edd3 7a01 	vldr	s15, [r3, #4]
 80061fe:	ee37 6a67 	vsub.f32	s12, s14, s15
 8006202:	697b      	ldr	r3, [r7, #20]
 8006204:	ed93 7a02 	vldr	s14, [r3, #8]
 8006208:	693b      	ldr	r3, [r7, #16]
 800620a:	edd3 7a02 	vldr	s15, [r3, #8]
 800620e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006212:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006216:	eeb0 1a67 	vmov.f32	s2, s15
 800621a:	eef0 0a46 	vmov.f32	s1, s12
 800621e:	eeb0 0a66 	vmov.f32	s0, s13
 8006222:	4618      	mov	r0, r3
 8006224:	f000 f81a 	bl	800625c <_ZN7Vector3IfEC1Efff>
 8006228:	f107 0318 	add.w	r3, r7, #24
 800622c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8006230:	ca07      	ldmia	r2, {r0, r1, r2}
 8006232:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8006236:	69b9      	ldr	r1, [r7, #24]
 8006238:	69fa      	ldr	r2, [r7, #28]
 800623a:	6a3b      	ldr	r3, [r7, #32]
 800623c:	ee06 1a90 	vmov	s13, r1
 8006240:	ee07 2a10 	vmov	s14, r2
 8006244:	ee07 3a90 	vmov	s15, r3
 8006248:	eeb0 0a66 	vmov.f32	s0, s13
 800624c:	eef0 0a47 	vmov.f32	s1, s14
 8006250:	eeb0 1a67 	vmov.f32	s2, s15
 8006254:	3730      	adds	r7, #48	; 0x30
 8006256:	46bd      	mov	sp, r7
 8006258:	bd80      	pop	{r7, pc}
 800625a:	bf00      	nop

0800625c <_ZN7Vector3IfEC1Efff>:
 800625c:	b480      	push	{r7}
 800625e:	b085      	sub	sp, #20
 8006260:	af00      	add	r7, sp, #0
 8006262:	60f8      	str	r0, [r7, #12]
 8006264:	ed87 0a02 	vstr	s0, [r7, #8]
 8006268:	edc7 0a01 	vstr	s1, [r7, #4]
 800626c:	ed87 1a00 	vstr	s2, [r7]
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	68ba      	ldr	r2, [r7, #8]
 8006274:	601a      	str	r2, [r3, #0]
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	687a      	ldr	r2, [r7, #4]
 800627a:	605a      	str	r2, [r3, #4]
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	683a      	ldr	r2, [r7, #0]
 8006280:	609a      	str	r2, [r3, #8]
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	4618      	mov	r0, r3
 8006286:	3714      	adds	r7, #20
 8006288:	46bd      	mov	sp, r7
 800628a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628e:	4770      	bx	lr

08006290 <_ZN7Matrix3IfE10from_eulerEfff>:
 8006290:	b580      	push	{r7, lr}
 8006292:	b08a      	sub	sp, #40	; 0x28
 8006294:	af00      	add	r7, sp, #0
 8006296:	60f8      	str	r0, [r7, #12]
 8006298:	ed87 0a02 	vstr	s0, [r7, #8]
 800629c:	edc7 0a01 	vstr	s1, [r7, #4]
 80062a0:	ed87 1a00 	vstr	s2, [r7]
 80062a4:	ed97 0a01 	vldr	s0, [r7, #4]
 80062a8:	f000 fe88 	bl	8006fbc <cosf>
 80062ac:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 80062b0:	ed97 0a01 	vldr	s0, [r7, #4]
 80062b4:	f000 fec2 	bl	800703c <sinf>
 80062b8:	ed87 0a08 	vstr	s0, [r7, #32]
 80062bc:	ed97 0a02 	vldr	s0, [r7, #8]
 80062c0:	f000 febc 	bl	800703c <sinf>
 80062c4:	ed87 0a07 	vstr	s0, [r7, #28]
 80062c8:	ed97 0a02 	vldr	s0, [r7, #8]
 80062cc:	f000 fe76 	bl	8006fbc <cosf>
 80062d0:	ed87 0a06 	vstr	s0, [r7, #24]
 80062d4:	ed97 0a00 	vldr	s0, [r7]
 80062d8:	f000 feb0 	bl	800703c <sinf>
 80062dc:	ed87 0a05 	vstr	s0, [r7, #20]
 80062e0:	ed97 0a00 	vldr	s0, [r7]
 80062e4:	f000 fe6a 	bl	8006fbc <cosf>
 80062e8:	ed87 0a04 	vstr	s0, [r7, #16]
 80062ec:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80062f0:	edd7 7a04 	vldr	s15, [r7, #16]
 80062f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	edc3 7a00 	vstr	s15, [r3]
 80062fe:	ed97 7a07 	vldr	s14, [r7, #28]
 8006302:	edd7 7a08 	vldr	s15, [r7, #32]
 8006306:	ee27 7a27 	vmul.f32	s14, s14, s15
 800630a:	edd7 7a04 	vldr	s15, [r7, #16]
 800630e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006312:	edd7 6a06 	vldr	s13, [r7, #24]
 8006316:	edd7 7a05 	vldr	s15, [r7, #20]
 800631a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800631e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	edc3 7a01 	vstr	s15, [r3, #4]
 8006328:	ed97 7a06 	vldr	s14, [r7, #24]
 800632c:	edd7 7a08 	vldr	s15, [r7, #32]
 8006330:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006334:	edd7 7a04 	vldr	s15, [r7, #16]
 8006338:	ee27 7a27 	vmul.f32	s14, s14, s15
 800633c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006340:	edd7 7a05 	vldr	s15, [r7, #20]
 8006344:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006348:	ee77 7a27 	vadd.f32	s15, s14, s15
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	edc3 7a02 	vstr	s15, [r3, #8]
 8006352:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8006356:	edd7 7a05 	vldr	s15, [r7, #20]
 800635a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	edc3 7a03 	vstr	s15, [r3, #12]
 8006364:	ed97 7a07 	vldr	s14, [r7, #28]
 8006368:	edd7 7a08 	vldr	s15, [r7, #32]
 800636c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006370:	edd7 7a05 	vldr	s15, [r7, #20]
 8006374:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006378:	edd7 6a06 	vldr	s13, [r7, #24]
 800637c:	edd7 7a04 	vldr	s15, [r7, #16]
 8006380:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006384:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	edc3 7a04 	vstr	s15, [r3, #16]
 800638e:	ed97 7a06 	vldr	s14, [r7, #24]
 8006392:	edd7 7a08 	vldr	s15, [r7, #32]
 8006396:	ee27 7a27 	vmul.f32	s14, s14, s15
 800639a:	edd7 7a05 	vldr	s15, [r7, #20]
 800639e:	ee27 7a27 	vmul.f32	s14, s14, s15
 80063a2:	edd7 6a07 	vldr	s13, [r7, #28]
 80063a6:	edd7 7a04 	vldr	s15, [r7, #16]
 80063aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80063ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	edc3 7a05 	vstr	s15, [r3, #20]
 80063b8:	edd7 7a08 	vldr	s15, [r7, #32]
 80063bc:	eef1 7a67 	vneg.f32	s15, s15
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	edc3 7a06 	vstr	s15, [r3, #24]
 80063c6:	ed97 7a07 	vldr	s14, [r7, #28]
 80063ca:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80063ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	edc3 7a07 	vstr	s15, [r3, #28]
 80063d8:	ed97 7a06 	vldr	s14, [r7, #24]
 80063dc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80063e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	edc3 7a08 	vstr	s15, [r3, #32]
 80063ea:	bf00      	nop
 80063ec:	3728      	adds	r7, #40	; 0x28
 80063ee:	46bd      	mov	sp, r7
 80063f0:	bd80      	pop	{r7, pc}
 80063f2:	bf00      	nop

080063f4 <_ZNK7Matrix3IfEmlERK7Vector3IfE>:
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b08c      	sub	sp, #48	; 0x30
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6178      	str	r0, [r7, #20]
 80063fc:	6139      	str	r1, [r7, #16]
 80063fe:	697b      	ldr	r3, [r7, #20]
 8006400:	ed93 7a00 	vldr	s14, [r3]
 8006404:	693b      	ldr	r3, [r7, #16]
 8006406:	edd3 7a00 	vldr	s15, [r3]
 800640a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800640e:	697b      	ldr	r3, [r7, #20]
 8006410:	edd3 6a01 	vldr	s13, [r3, #4]
 8006414:	693b      	ldr	r3, [r7, #16]
 8006416:	edd3 7a01 	vldr	s15, [r3, #4]
 800641a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800641e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006422:	697b      	ldr	r3, [r7, #20]
 8006424:	edd3 6a02 	vldr	s13, [r3, #8]
 8006428:	693b      	ldr	r3, [r7, #16]
 800642a:	edd3 7a02 	vldr	s15, [r3, #8]
 800642e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006432:	ee37 6a27 	vadd.f32	s12, s14, s15
 8006436:	697b      	ldr	r3, [r7, #20]
 8006438:	ed93 7a03 	vldr	s14, [r3, #12]
 800643c:	693b      	ldr	r3, [r7, #16]
 800643e:	edd3 7a00 	vldr	s15, [r3]
 8006442:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006446:	697b      	ldr	r3, [r7, #20]
 8006448:	edd3 6a04 	vldr	s13, [r3, #16]
 800644c:	693b      	ldr	r3, [r7, #16]
 800644e:	edd3 7a01 	vldr	s15, [r3, #4]
 8006452:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006456:	ee37 7a27 	vadd.f32	s14, s14, s15
 800645a:	697b      	ldr	r3, [r7, #20]
 800645c:	edd3 6a05 	vldr	s13, [r3, #20]
 8006460:	693b      	ldr	r3, [r7, #16]
 8006462:	edd3 7a02 	vldr	s15, [r3, #8]
 8006466:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800646a:	ee77 5a27 	vadd.f32	s11, s14, s15
 800646e:	697b      	ldr	r3, [r7, #20]
 8006470:	ed93 7a06 	vldr	s14, [r3, #24]
 8006474:	693b      	ldr	r3, [r7, #16]
 8006476:	edd3 7a00 	vldr	s15, [r3]
 800647a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800647e:	697b      	ldr	r3, [r7, #20]
 8006480:	edd3 6a07 	vldr	s13, [r3, #28]
 8006484:	693b      	ldr	r3, [r7, #16]
 8006486:	edd3 7a01 	vldr	s15, [r3, #4]
 800648a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800648e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006492:	697b      	ldr	r3, [r7, #20]
 8006494:	edd3 6a08 	vldr	s13, [r3, #32]
 8006498:	693b      	ldr	r3, [r7, #16]
 800649a:	edd3 7a02 	vldr	s15, [r3, #8]
 800649e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80064a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80064a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80064aa:	eeb0 1a67 	vmov.f32	s2, s15
 80064ae:	eef0 0a65 	vmov.f32	s1, s11
 80064b2:	eeb0 0a46 	vmov.f32	s0, s12
 80064b6:	4618      	mov	r0, r3
 80064b8:	f7ff fed0 	bl	800625c <_ZN7Vector3IfEC1Efff>
 80064bc:	f107 0318 	add.w	r3, r7, #24
 80064c0:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80064c4:	ca07      	ldmia	r2, {r0, r1, r2}
 80064c6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80064ca:	69b9      	ldr	r1, [r7, #24]
 80064cc:	69fa      	ldr	r2, [r7, #28]
 80064ce:	6a3b      	ldr	r3, [r7, #32]
 80064d0:	ee06 1a90 	vmov	s13, r1
 80064d4:	ee07 2a10 	vmov	s14, r2
 80064d8:	ee07 3a90 	vmov	s15, r3
 80064dc:	eeb0 0a66 	vmov.f32	s0, s13
 80064e0:	eef0 0a47 	vmov.f32	s1, s14
 80064e4:	eeb0 1a67 	vmov.f32	s2, s15
 80064e8:	3730      	adds	r7, #48	; 0x30
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bd80      	pop	{r7, pc}
 80064ee:	bf00      	nop

080064f0 <_Z8inv_sqrtf>:
 80064f0:	b480      	push	{r7}
 80064f2:	b087      	sub	sp, #28
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	ed87 0a01 	vstr	s0, [r7, #4]
 80064fa:	edd7 7a01 	vldr	s15, [r7, #4]
 80064fe:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8006502:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006506:	edc7 7a05 	vstr	s15, [r7, #20]
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	613b      	str	r3, [r7, #16]
 800650e:	f107 0310 	add.w	r3, r7, #16
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	60fb      	str	r3, [r7, #12]
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	105a      	asrs	r2, r3, #1
 800651a:	4b12      	ldr	r3, [pc, #72]	; (8006564 <_Z8inv_sqrtf+0x74>)
 800651c:	1a9b      	subs	r3, r3, r2
 800651e:	60fb      	str	r3, [r7, #12]
 8006520:	f107 030c 	add.w	r3, r7, #12
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	613b      	str	r3, [r7, #16]
 8006528:	ed97 7a04 	vldr	s14, [r7, #16]
 800652c:	edd7 7a05 	vldr	s15, [r7, #20]
 8006530:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006534:	edd7 7a04 	vldr	s15, [r7, #16]
 8006538:	ee67 7a27 	vmul.f32	s15, s14, s15
 800653c:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8006540:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006544:	edd7 7a04 	vldr	s15, [r7, #16]
 8006548:	ee67 7a27 	vmul.f32	s15, s14, s15
 800654c:	edc7 7a04 	vstr	s15, [r7, #16]
 8006550:	693b      	ldr	r3, [r7, #16]
 8006552:	ee07 3a90 	vmov	s15, r3
 8006556:	eeb0 0a67 	vmov.f32	s0, s15
 800655a:	371c      	adds	r7, #28
 800655c:	46bd      	mov	sp, r7
 800655e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006562:	4770      	bx	lr
 8006564:	5f3759df 	.word	0x5f3759df

08006568 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 8006568:	b510      	push	{r4, lr}
 800656a:	4b03      	ldr	r3, [pc, #12]	; (8006578 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 800656c:	6003      	str	r3, [r0, #0]
 800656e:	4604      	mov	r4, r0
 8006570:	f000 fc0a 	bl	8006d88 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8006574:	4620      	mov	r0, r4
 8006576:	bd10      	pop	{r4, pc}
 8006578:	080091d8 	.word	0x080091d8

0800657c <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 800657c:	b510      	push	{r4, lr}
 800657e:	4604      	mov	r4, r0
 8006580:	f7ff fff2 	bl	8006568 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 8006584:	4620      	mov	r0, r4
 8006586:	210c      	movs	r1, #12
 8006588:	f000 fbd4 	bl	8006d34 <_ZdlPvj>
 800658c:	4620      	mov	r0, r4
 800658e:	bd10      	pop	{r4, pc}

08006590 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 8006590:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006594:	9e06      	ldr	r6, [sp, #24]
 8006596:	4296      	cmp	r6, r2
 8006598:	4680      	mov	r8, r0
 800659a:	460f      	mov	r7, r1
 800659c:	4614      	mov	r4, r2
 800659e:	461d      	mov	r5, r3
 80065a0:	d103      	bne.n	80065aa <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x1a>
 80065a2:	4619      	mov	r1, r3
 80065a4:	f000 fc44 	bl	8006e30 <_ZNKSt9type_infoeqERKS_>
 80065a8:	b958      	cbnz	r0, 80065c2 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x32>
 80065aa:	f8d8 0008 	ldr.w	r0, [r8, #8]
 80065ae:	6803      	ldr	r3, [r0, #0]
 80065b0:	9606      	str	r6, [sp, #24]
 80065b2:	6a1e      	ldr	r6, [r3, #32]
 80065b4:	4622      	mov	r2, r4
 80065b6:	462b      	mov	r3, r5
 80065b8:	4639      	mov	r1, r7
 80065ba:	46b4      	mov	ip, r6
 80065bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80065c0:	4760      	bx	ip
 80065c2:	2006      	movs	r0, #6
 80065c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080065c8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 80065c8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065cc:	460e      	mov	r6, r1
 80065ce:	4619      	mov	r1, r3
 80065d0:	4683      	mov	fp, r0
 80065d2:	4617      	mov	r7, r2
 80065d4:	4699      	mov	r9, r3
 80065d6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80065d8:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 80065dc:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 80065e0:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80065e2:	f000 fc25 	bl	8006e30 <_ZNKSt9type_infoeqERKS_>
 80065e6:	b190      	cbz	r0, 800660e <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x46>
 80065e8:	2e00      	cmp	r6, #0
 80065ea:	602c      	str	r4, [r5, #0]
 80065ec:	712f      	strb	r7, [r5, #4]
 80065ee:	db09      	blt.n	8006604 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3c>
 80065f0:	4434      	add	r4, r6
 80065f2:	45a0      	cmp	r8, r4
 80065f4:	bf0c      	ite	eq
 80065f6:	2406      	moveq	r4, #6
 80065f8:	2401      	movne	r4, #1
 80065fa:	71ac      	strb	r4, [r5, #6]
 80065fc:	2000      	movs	r0, #0
 80065fe:	b001      	add	sp, #4
 8006600:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006604:	3602      	adds	r6, #2
 8006606:	d1f9      	bne.n	80065fc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x34>
 8006608:	2301      	movs	r3, #1
 800660a:	71ab      	strb	r3, [r5, #6]
 800660c:	e7f6      	b.n	80065fc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x34>
 800660e:	4544      	cmp	r4, r8
 8006610:	d104      	bne.n	800661c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 8006612:	4651      	mov	r1, sl
 8006614:	4658      	mov	r0, fp
 8006616:	f000 fc0b 	bl	8006e30 <_ZNKSt9type_infoeqERKS_>
 800661a:	b988      	cbnz	r0, 8006640 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x78>
 800661c:	f8db 0008 	ldr.w	r0, [fp, #8]
 8006620:	6803      	ldr	r3, [r0, #0]
 8006622:	950d      	str	r5, [sp, #52]	; 0x34
 8006624:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8006628:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 800662c:	940a      	str	r4, [sp, #40]	; 0x28
 800662e:	69dc      	ldr	r4, [r3, #28]
 8006630:	463a      	mov	r2, r7
 8006632:	464b      	mov	r3, r9
 8006634:	4631      	mov	r1, r6
 8006636:	46a4      	mov	ip, r4
 8006638:	b001      	add	sp, #4
 800663a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800663e:	4760      	bx	ip
 8006640:	716f      	strb	r7, [r5, #5]
 8006642:	e7db      	b.n	80065fc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x34>

08006644 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 8006644:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006648:	4604      	mov	r4, r0
 800664a:	460d      	mov	r5, r1
 800664c:	4616      	mov	r6, r2
 800664e:	461f      	mov	r7, r3
 8006650:	f000 fbae 	bl	8006db0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 8006654:	b948      	cbnz	r0, 800666a <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 8006656:	68a0      	ldr	r0, [r4, #8]
 8006658:	6803      	ldr	r3, [r0, #0]
 800665a:	699c      	ldr	r4, [r3, #24]
 800665c:	4632      	mov	r2, r6
 800665e:	463b      	mov	r3, r7
 8006660:	4629      	mov	r1, r5
 8006662:	46a4      	mov	ip, r4
 8006664:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006668:	4760      	bx	ip
 800666a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800666e <_ZdlPv>:
 800666e:	f001 bbc9 	b.w	8007e04 <free>

08006672 <__aeabi_atexit>:
 8006672:	460b      	mov	r3, r1
 8006674:	4601      	mov	r1, r0
 8006676:	4618      	mov	r0, r3
 8006678:	f001 bb91 	b.w	8007d9e <__cxa_atexit>

0800667c <_Znwj>:
 800667c:	b510      	push	{r4, lr}
 800667e:	2800      	cmp	r0, #0
 8006680:	bf14      	ite	ne
 8006682:	4604      	movne	r4, r0
 8006684:	2401      	moveq	r4, #1
 8006686:	4620      	mov	r0, r4
 8006688:	f001 fbb4 	bl	8007df4 <malloc>
 800668c:	b930      	cbnz	r0, 800669c <_Znwj+0x20>
 800668e:	f000 fb53 	bl	8006d38 <_ZSt15get_new_handlerv>
 8006692:	b908      	cbnz	r0, 8006698 <_Znwj+0x1c>
 8006694:	f001 fb7c 	bl	8007d90 <abort>
 8006698:	4780      	blx	r0
 800669a:	e7f4      	b.n	8006686 <_Znwj+0xa>
 800669c:	bd10      	pop	{r4, pc}

0800669e <__cxa_end_cleanup>:
 800669e:	b41e      	push	{r1, r2, r3, r4}
 80066a0:	f000 f89b 	bl	80067da <__gnu_end_cleanup>
 80066a4:	bc1e      	pop	{r1, r2, r3, r4}
 80066a6:	f7fa fcbb 	bl	8001020 <_Unwind_Resume>

080066aa <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 80066aa:	7803      	ldrb	r3, [r0, #0]
 80066ac:	2b47      	cmp	r3, #71	; 0x47
 80066ae:	d117      	bne.n	80066e0 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80066b0:	7843      	ldrb	r3, [r0, #1]
 80066b2:	2b4e      	cmp	r3, #78	; 0x4e
 80066b4:	d114      	bne.n	80066e0 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80066b6:	7883      	ldrb	r3, [r0, #2]
 80066b8:	2b55      	cmp	r3, #85	; 0x55
 80066ba:	d111      	bne.n	80066e0 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80066bc:	78c3      	ldrb	r3, [r0, #3]
 80066be:	2b43      	cmp	r3, #67	; 0x43
 80066c0:	d10e      	bne.n	80066e0 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80066c2:	7903      	ldrb	r3, [r0, #4]
 80066c4:	2b43      	cmp	r3, #67	; 0x43
 80066c6:	d10b      	bne.n	80066e0 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80066c8:	7943      	ldrb	r3, [r0, #5]
 80066ca:	2b2b      	cmp	r3, #43	; 0x2b
 80066cc:	d108      	bne.n	80066e0 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80066ce:	7983      	ldrb	r3, [r0, #6]
 80066d0:	2b2b      	cmp	r3, #43	; 0x2b
 80066d2:	d105      	bne.n	80066e0 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80066d4:	79c0      	ldrb	r0, [r0, #7]
 80066d6:	2801      	cmp	r0, #1
 80066d8:	bf8c      	ite	hi
 80066da:	2000      	movhi	r0, #0
 80066dc:	2001      	movls	r0, #1
 80066de:	4770      	bx	lr
 80066e0:	2000      	movs	r0, #0
 80066e2:	4770      	bx	lr

080066e4 <__cxa_type_match>:
 80066e4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80066e8:	461e      	mov	r6, r3
 80066ea:	7803      	ldrb	r3, [r0, #0]
 80066ec:	2b47      	cmp	r3, #71	; 0x47
 80066ee:	460d      	mov	r5, r1
 80066f0:	4602      	mov	r2, r0
 80066f2:	79c1      	ldrb	r1, [r0, #7]
 80066f4:	d148      	bne.n	8006788 <__cxa_type_match+0xa4>
 80066f6:	7843      	ldrb	r3, [r0, #1]
 80066f8:	2b4e      	cmp	r3, #78	; 0x4e
 80066fa:	d145      	bne.n	8006788 <__cxa_type_match+0xa4>
 80066fc:	7883      	ldrb	r3, [r0, #2]
 80066fe:	2b55      	cmp	r3, #85	; 0x55
 8006700:	d142      	bne.n	8006788 <__cxa_type_match+0xa4>
 8006702:	78c3      	ldrb	r3, [r0, #3]
 8006704:	2b43      	cmp	r3, #67	; 0x43
 8006706:	d13f      	bne.n	8006788 <__cxa_type_match+0xa4>
 8006708:	7903      	ldrb	r3, [r0, #4]
 800670a:	2b46      	cmp	r3, #70	; 0x46
 800670c:	d13c      	bne.n	8006788 <__cxa_type_match+0xa4>
 800670e:	7943      	ldrb	r3, [r0, #5]
 8006710:	2b4f      	cmp	r3, #79	; 0x4f
 8006712:	d139      	bne.n	8006788 <__cxa_type_match+0xa4>
 8006714:	7983      	ldrb	r3, [r0, #6]
 8006716:	2b52      	cmp	r3, #82	; 0x52
 8006718:	d136      	bne.n	8006788 <__cxa_type_match+0xa4>
 800671a:	2900      	cmp	r1, #0
 800671c:	d134      	bne.n	8006788 <__cxa_type_match+0xa4>
 800671e:	2301      	movs	r3, #1
 8006720:	4608      	mov	r0, r1
 8006722:	2400      	movs	r4, #0
 8006724:	9401      	str	r4, [sp, #4]
 8006726:	bb3b      	cbnz	r3, 8006778 <__cxa_type_match+0x94>
 8006728:	bb40      	cbnz	r0, 800677c <__cxa_type_match+0x98>
 800672a:	2901      	cmp	r1, #1
 800672c:	bf0a      	itet	eq
 800672e:	f852 3c20 	ldreq.w	r3, [r2, #-32]
 8006732:	f1a2 0320 	subne.w	r3, r2, #32
 8006736:	3b78      	subeq	r3, #120	; 0x78
 8006738:	2901      	cmp	r1, #1
 800673a:	bf08      	it	eq
 800673c:	f852 2c20 	ldreq.w	r2, [r2, #-32]
 8006740:	681c      	ldr	r4, [r3, #0]
 8006742:	bf18      	it	ne
 8006744:	3258      	addne	r2, #88	; 0x58
 8006746:	9201      	str	r2, [sp, #4]
 8006748:	6823      	ldr	r3, [r4, #0]
 800674a:	4620      	mov	r0, r4
 800674c:	689b      	ldr	r3, [r3, #8]
 800674e:	4798      	blx	r3
 8006750:	b1b0      	cbz	r0, 8006780 <__cxa_type_match+0x9c>
 8006752:	9b01      	ldr	r3, [sp, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	9301      	str	r3, [sp, #4]
 8006758:	2702      	movs	r7, #2
 800675a:	682b      	ldr	r3, [r5, #0]
 800675c:	aa01      	add	r2, sp, #4
 800675e:	f8d3 8010 	ldr.w	r8, [r3, #16]
 8006762:	4621      	mov	r1, r4
 8006764:	2301      	movs	r3, #1
 8006766:	4628      	mov	r0, r5
 8006768:	47c0      	blx	r8
 800676a:	b158      	cbz	r0, 8006784 <__cxa_type_match+0xa0>
 800676c:	9b01      	ldr	r3, [sp, #4]
 800676e:	6033      	str	r3, [r6, #0]
 8006770:	4638      	mov	r0, r7
 8006772:	b002      	add	sp, #8
 8006774:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006778:	4c07      	ldr	r4, [pc, #28]	; (8006798 <__cxa_type_match+0xb4>)
 800677a:	e7e5      	b.n	8006748 <__cxa_type_match+0x64>
 800677c:	4c07      	ldr	r4, [pc, #28]	; (800679c <__cxa_type_match+0xb8>)
 800677e:	e7e3      	b.n	8006748 <__cxa_type_match+0x64>
 8006780:	2701      	movs	r7, #1
 8006782:	e7ea      	b.n	800675a <__cxa_type_match+0x76>
 8006784:	4607      	mov	r7, r0
 8006786:	e7f3      	b.n	8006770 <__cxa_type_match+0x8c>
 8006788:	4610      	mov	r0, r2
 800678a:	f7ff ff8e 	bl	80066aa <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 800678e:	f080 0001 	eor.w	r0, r0, #1
 8006792:	b2c0      	uxtb	r0, r0
 8006794:	2300      	movs	r3, #0
 8006796:	e7c4      	b.n	8006722 <__cxa_type_match+0x3e>
 8006798:	08009270 	.word	0x08009270
 800679c:	08009278 	.word	0x08009278

080067a0 <__cxa_begin_cleanup>:
 80067a0:	b510      	push	{r4, lr}
 80067a2:	4604      	mov	r4, r0
 80067a4:	f000 fc06 	bl	8006fb4 <__cxa_get_globals>
 80067a8:	4602      	mov	r2, r0
 80067aa:	4620      	mov	r0, r4
 80067ac:	f1a4 0120 	sub.w	r1, r4, #32
 80067b0:	f7ff ff7b 	bl	80066aa <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 80067b4:	b160      	cbz	r0, 80067d0 <__cxa_begin_cleanup+0x30>
 80067b6:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80067ba:	3301      	adds	r3, #1
 80067bc:	2b01      	cmp	r3, #1
 80067be:	f844 3c04 	str.w	r3, [r4, #-4]
 80067c2:	d103      	bne.n	80067cc <__cxa_begin_cleanup+0x2c>
 80067c4:	6893      	ldr	r3, [r2, #8]
 80067c6:	f844 3c08 	str.w	r3, [r4, #-8]
 80067ca:	6091      	str	r1, [r2, #8]
 80067cc:	2001      	movs	r0, #1
 80067ce:	bd10      	pop	{r4, pc}
 80067d0:	6893      	ldr	r3, [r2, #8]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d0f9      	beq.n	80067ca <__cxa_begin_cleanup+0x2a>
 80067d6:	f000 fbd5 	bl	8006f84 <_ZSt9terminatev>

080067da <__gnu_end_cleanup>:
 80067da:	b510      	push	{r4, lr}
 80067dc:	f000 fbea 	bl	8006fb4 <__cxa_get_globals>
 80067e0:	6882      	ldr	r2, [r0, #8]
 80067e2:	4601      	mov	r1, r0
 80067e4:	b90a      	cbnz	r2, 80067ea <__gnu_end_cleanup+0x10>
 80067e6:	f000 fbcd 	bl	8006f84 <_ZSt9terminatev>
 80067ea:	f102 0420 	add.w	r4, r2, #32
 80067ee:	4620      	mov	r0, r4
 80067f0:	f7ff ff5b 	bl	80066aa <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 80067f4:	b140      	cbz	r0, 8006808 <__gnu_end_cleanup+0x2e>
 80067f6:	69d3      	ldr	r3, [r2, #28]
 80067f8:	3b01      	subs	r3, #1
 80067fa:	61d3      	str	r3, [r2, #28]
 80067fc:	b913      	cbnz	r3, 8006804 <__gnu_end_cleanup+0x2a>
 80067fe:	6990      	ldr	r0, [r2, #24]
 8006800:	6088      	str	r0, [r1, #8]
 8006802:	6193      	str	r3, [r2, #24]
 8006804:	4620      	mov	r0, r4
 8006806:	bd10      	pop	{r4, pc}
 8006808:	6088      	str	r0, [r1, #8]
 800680a:	e7fb      	b.n	8006804 <__gnu_end_cleanup+0x2a>

0800680c <_ZL12read_uleb128PKhPm>:
 800680c:	b570      	push	{r4, r5, r6, lr}
 800680e:	2300      	movs	r3, #0
 8006810:	eba0 06c0 	sub.w	r6, r0, r0, lsl #3
 8006814:	ebc0 02c0 	rsb	r2, r0, r0, lsl #3
 8006818:	f810 5b01 	ldrb.w	r5, [r0], #1
 800681c:	1994      	adds	r4, r2, r6
 800681e:	f005 027f 	and.w	r2, r5, #127	; 0x7f
 8006822:	40a2      	lsls	r2, r4
 8006824:	4313      	orrs	r3, r2
 8006826:	062a      	lsls	r2, r5, #24
 8006828:	d4f4      	bmi.n	8006814 <_ZL12read_uleb128PKhPm+0x8>
 800682a:	600b      	str	r3, [r1, #0]
 800682c:	bd70      	pop	{r4, r5, r6, pc}

0800682e <_ZL12read_sleb128PKhPl>:
 800682e:	b530      	push	{r4, r5, lr}
 8006830:	2300      	movs	r3, #0
 8006832:	461a      	mov	r2, r3
 8006834:	f810 4b01 	ldrb.w	r4, [r0], #1
 8006838:	f004 057f 	and.w	r5, r4, #127	; 0x7f
 800683c:	4095      	lsls	r5, r2
 800683e:	432b      	orrs	r3, r5
 8006840:	0625      	lsls	r5, r4, #24
 8006842:	f102 0207 	add.w	r2, r2, #7
 8006846:	d4f5      	bmi.n	8006834 <_ZL12read_sleb128PKhPl+0x6>
 8006848:	2a1f      	cmp	r2, #31
 800684a:	d806      	bhi.n	800685a <_ZL12read_sleb128PKhPl+0x2c>
 800684c:	0664      	lsls	r4, r4, #25
 800684e:	bf42      	ittt	mi
 8006850:	f04f 34ff 	movmi.w	r4, #4294967295
 8006854:	fa04 f202 	lslmi.w	r2, r4, r2
 8006858:	4313      	orrmi	r3, r2
 800685a:	600b      	str	r3, [r1, #0]
 800685c:	bd30      	pop	{r4, r5, pc}

0800685e <_ZL28read_encoded_value_with_basehjPKhPj>:
 800685e:	2850      	cmp	r0, #80	; 0x50
 8006860:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006862:	4605      	mov	r5, r0
 8006864:	460e      	mov	r6, r1
 8006866:	4614      	mov	r4, r2
 8006868:	461f      	mov	r7, r3
 800686a:	d107      	bne.n	800687c <_ZL28read_encoded_value_with_basehjPKhPj+0x1e>
 800686c:	1cd0      	adds	r0, r2, #3
 800686e:	f020 0003 	bic.w	r0, r0, #3
 8006872:	f850 3b04 	ldr.w	r3, [r0], #4
 8006876:	603b      	str	r3, [r7, #0]
 8006878:	b003      	add	sp, #12
 800687a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800687c:	f000 030f 	and.w	r3, r0, #15
 8006880:	2b0c      	cmp	r3, #12
 8006882:	d82e      	bhi.n	80068e2 <_ZL28read_encoded_value_with_basehjPKhPj+0x84>
 8006884:	e8df f003 	tbb	[pc, r3]
 8006888:	251d0725 	.word	0x251d0725
 800688c:	2d2d2d29 	.word	0x2d2d2d29
 8006890:	2521182d 	.word	0x2521182d
 8006894:	29          	.byte	0x29
 8006895:	00          	.byte	0x00
 8006896:	a901      	add	r1, sp, #4
 8006898:	4620      	mov	r0, r4
 800689a:	f7ff ffb7 	bl	800680c <_ZL12read_uleb128PKhPm>
 800689e:	9b01      	ldr	r3, [sp, #4]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d0e8      	beq.n	8006876 <_ZL28read_encoded_value_with_basehjPKhPj+0x18>
 80068a4:	f005 0270 	and.w	r2, r5, #112	; 0x70
 80068a8:	2a10      	cmp	r2, #16
 80068aa:	bf08      	it	eq
 80068ac:	4626      	moveq	r6, r4
 80068ae:	4433      	add	r3, r6
 80068b0:	062a      	lsls	r2, r5, #24
 80068b2:	bf48      	it	mi
 80068b4:	681b      	ldrmi	r3, [r3, #0]
 80068b6:	e7de      	b.n	8006876 <_ZL28read_encoded_value_with_basehjPKhPj+0x18>
 80068b8:	a901      	add	r1, sp, #4
 80068ba:	4620      	mov	r0, r4
 80068bc:	f7ff ffb7 	bl	800682e <_ZL12read_sleb128PKhPl>
 80068c0:	e7ed      	b.n	800689e <_ZL28read_encoded_value_with_basehjPKhPj+0x40>
 80068c2:	4620      	mov	r0, r4
 80068c4:	f830 3b02 	ldrh.w	r3, [r0], #2
 80068c8:	e7ea      	b.n	80068a0 <_ZL28read_encoded_value_with_basehjPKhPj+0x42>
 80068ca:	4620      	mov	r0, r4
 80068cc:	f930 3b02 	ldrsh.w	r3, [r0], #2
 80068d0:	e7e6      	b.n	80068a0 <_ZL28read_encoded_value_with_basehjPKhPj+0x42>
 80068d2:	4620      	mov	r0, r4
 80068d4:	f850 3b04 	ldr.w	r3, [r0], #4
 80068d8:	e7e2      	b.n	80068a0 <_ZL28read_encoded_value_with_basehjPKhPj+0x42>
 80068da:	4620      	mov	r0, r4
 80068dc:	f850 3b08 	ldr.w	r3, [r0], #8
 80068e0:	e7de      	b.n	80068a0 <_ZL28read_encoded_value_with_basehjPKhPj+0x42>
 80068e2:	f001 fa55 	bl	8007d90 <abort>

080068e6 <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
 80068e6:	b508      	push	{r3, lr}
 80068e8:	4603      	mov	r3, r0
 80068ea:	2bff      	cmp	r3, #255	; 0xff
 80068ec:	4608      	mov	r0, r1
 80068ee:	d007      	beq.n	8006900 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x1a>
 80068f0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80068f4:	2b20      	cmp	r3, #32
 80068f6:	d00d      	beq.n	8006914 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2e>
 80068f8:	d804      	bhi.n	8006904 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x1e>
 80068fa:	b10b      	cbz	r3, 8006900 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x1a>
 80068fc:	2b10      	cmp	r3, #16
 80068fe:	d107      	bne.n	8006910 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2a>
 8006900:	2000      	movs	r0, #0
 8006902:	bd08      	pop	{r3, pc}
 8006904:	2b40      	cmp	r3, #64	; 0x40
 8006906:	d00d      	beq.n	8006924 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x3e>
 8006908:	2b50      	cmp	r3, #80	; 0x50
 800690a:	d0f9      	beq.n	8006900 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x1a>
 800690c:	2b30      	cmp	r3, #48	; 0x30
 800690e:	d005      	beq.n	800691c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x36>
 8006910:	f001 fa3e 	bl	8007d90 <abort>
 8006914:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006918:	f7fa bd82 	b.w	8001420 <_Unwind_GetTextRelBase>
 800691c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006920:	f7fa bd82 	b.w	8001428 <_Unwind_GetDataRelBase>
 8006924:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006928:	f7fa bd6a 	b.w	8001400 <_Unwind_GetRegionStart>

0800692c <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>:
 800692c:	b570      	push	{r4, r5, r6, lr}
 800692e:	460c      	mov	r4, r1
 8006930:	4601      	mov	r1, r0
 8006932:	4620      	mov	r0, r4
 8006934:	4615      	mov	r5, r2
 8006936:	461e      	mov	r6, r3
 8006938:	f7ff ffd5 	bl	80068e6 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 800693c:	4633      	mov	r3, r6
 800693e:	462a      	mov	r2, r5
 8006940:	4601      	mov	r1, r0
 8006942:	4620      	mov	r0, r4
 8006944:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006948:	f7ff bf89 	b.w	800685e <_ZL28read_encoded_value_with_basehjPKhPj>

0800694c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
 800694c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800694e:	460e      	mov	r6, r1
 8006950:	4614      	mov	r4, r2
 8006952:	4605      	mov	r5, r0
 8006954:	b328      	cbz	r0, 80069a2 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x56>
 8006956:	f7fa fd53 	bl	8001400 <_Unwind_GetRegionStart>
 800695a:	6020      	str	r0, [r4, #0]
 800695c:	7831      	ldrb	r1, [r6, #0]
 800695e:	29ff      	cmp	r1, #255	; 0xff
 8006960:	f106 0201 	add.w	r2, r6, #1
 8006964:	d01e      	beq.n	80069a4 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x58>
 8006966:	1d23      	adds	r3, r4, #4
 8006968:	4628      	mov	r0, r5
 800696a:	f7ff ffdf 	bl	800692c <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 800696e:	4602      	mov	r2, r0
 8006970:	7813      	ldrb	r3, [r2, #0]
 8006972:	7523      	strb	r3, [r4, #20]
 8006974:	2bff      	cmp	r3, #255	; 0xff
 8006976:	f102 0001 	add.w	r0, r2, #1
 800697a:	d015      	beq.n	80069a8 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x5c>
 800697c:	2310      	movs	r3, #16
 800697e:	7523      	strb	r3, [r4, #20]
 8006980:	a901      	add	r1, sp, #4
 8006982:	f7ff ff43 	bl	800680c <_ZL12read_uleb128PKhPm>
 8006986:	9b01      	ldr	r3, [sp, #4]
 8006988:	4403      	add	r3, r0
 800698a:	60e3      	str	r3, [r4, #12]
 800698c:	7803      	ldrb	r3, [r0, #0]
 800698e:	7563      	strb	r3, [r4, #21]
 8006990:	a901      	add	r1, sp, #4
 8006992:	3001      	adds	r0, #1
 8006994:	f7ff ff3a 	bl	800680c <_ZL12read_uleb128PKhPm>
 8006998:	9b01      	ldr	r3, [sp, #4]
 800699a:	4403      	add	r3, r0
 800699c:	6123      	str	r3, [r4, #16]
 800699e:	b002      	add	sp, #8
 80069a0:	bd70      	pop	{r4, r5, r6, pc}
 80069a2:	e7da      	b.n	800695a <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0xe>
 80069a4:	6060      	str	r0, [r4, #4]
 80069a6:	e7e3      	b.n	8006970 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x24>
 80069a8:	2300      	movs	r3, #0
 80069aa:	e7ee      	b.n	800698a <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x3e>

080069ac <_Unwind_GetGR>:
 80069ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80069ae:	ab03      	add	r3, sp, #12
 80069b0:	9300      	str	r3, [sp, #0]
 80069b2:	2300      	movs	r3, #0
 80069b4:	460a      	mov	r2, r1
 80069b6:	4619      	mov	r1, r3
 80069b8:	f7f9 ff8c 	bl	80008d4 <_Unwind_VRS_Get>
 80069bc:	9803      	ldr	r0, [sp, #12]
 80069be:	b005      	add	sp, #20
 80069c0:	f85d fb04 	ldr.w	pc, [sp], #4

080069c4 <__gxx_personality_v0>:
 80069c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069c8:	b091      	sub	sp, #68	; 0x44
 80069ca:	2300      	movs	r3, #0
 80069cc:	9304      	str	r3, [sp, #16]
 80069ce:	f000 0303 	and.w	r3, r0, #3
 80069d2:	2b01      	cmp	r3, #1
 80069d4:	4607      	mov	r7, r0
 80069d6:	460c      	mov	r4, r1
 80069d8:	4616      	mov	r6, r2
 80069da:	d011      	beq.n	8006a00 <__gxx_personality_v0+0x3c>
 80069dc:	d303      	bcc.n	80069e6 <__gxx_personality_v0+0x22>
 80069de:	2b02      	cmp	r3, #2
 80069e0:	d003      	beq.n	80069ea <__gxx_personality_v0+0x26>
 80069e2:	f001 f9d5 	bl	8007d90 <abort>
 80069e6:	0702      	lsls	r2, r0, #28
 80069e8:	d51a      	bpl.n	8006a20 <__gxx_personality_v0+0x5c>
 80069ea:	4631      	mov	r1, r6
 80069ec:	4620      	mov	r0, r4
 80069ee:	f7fa fcf3 	bl	80013d8 <__gnu_unwind_frame>
 80069f2:	b118      	cbz	r0, 80069fc <__gxx_personality_v0+0x38>
 80069f4:	2009      	movs	r0, #9
 80069f6:	b011      	add	sp, #68	; 0x44
 80069f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069fc:	2008      	movs	r0, #8
 80069fe:	e7fa      	b.n	80069f6 <__gxx_personality_v0+0x32>
 8006a00:	f000 0508 	and.w	r5, r0, #8
 8006a04:	f005 08ff 	and.w	r8, r5, #255	; 0xff
 8006a08:	bb85      	cbnz	r5, 8006a6c <__gxx_personality_v0+0xa8>
 8006a0a:	f8d1 9020 	ldr.w	r9, [r1, #32]
 8006a0e:	4610      	mov	r0, r2
 8006a10:	210d      	movs	r1, #13
 8006a12:	f7ff ffcb 	bl	80069ac <_Unwind_GetGR>
 8006a16:	4581      	cmp	r9, r0
 8006a18:	f040 8140 	bne.w	8006c9c <__gxx_personality_v0+0x2d8>
 8006a1c:	2506      	movs	r5, #6
 8006a1e:	e000      	b.n	8006a22 <__gxx_personality_v0+0x5e>
 8006a20:	2501      	movs	r5, #1
 8006a22:	ab10      	add	r3, sp, #64	; 0x40
 8006a24:	f007 0708 	and.w	r7, r7, #8
 8006a28:	f843 4d2c 	str.w	r4, [r3, #-44]!
 8006a2c:	9300      	str	r3, [sp, #0]
 8006a2e:	2300      	movs	r3, #0
 8006a30:	433d      	orrs	r5, r7
 8006a32:	220c      	movs	r2, #12
 8006a34:	4619      	mov	r1, r3
 8006a36:	4630      	mov	r0, r6
 8006a38:	f7f9 ff72 	bl	8000920 <_Unwind_VRS_Set>
 8006a3c:	2d06      	cmp	r5, #6
 8006a3e:	f040 8139 	bne.w	8006cb4 <__gxx_personality_v0+0x2f0>
 8006a42:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
 8006a46:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8006a48:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8006a4a:	f1b8 0f00 	cmp.w	r8, #0
 8006a4e:	bf0c      	ite	eq
 8006a50:	f04f 0a01 	moveq.w	sl, #1
 8006a54:	f04f 0a03 	movne.w	sl, #3
 8006a58:	f015 0508 	ands.w	r5, r5, #8
 8006a5c:	f000 80ce 	beq.w	8006bfc <__gxx_personality_v0+0x238>
 8006a60:	f1ba 0f01 	cmp.w	sl, #1
 8006a64:	f040 80c6 	bne.w	8006bf4 <__gxx_personality_v0+0x230>
 8006a68:	f000 fa8c 	bl	8006f84 <_ZSt9terminatev>
 8006a6c:	2502      	movs	r5, #2
 8006a6e:	e7d8      	b.n	8006a22 <__gxx_personality_v0+0x5e>
 8006a70:	9a07      	ldr	r2, [sp, #28]
 8006a72:	4413      	add	r3, r2
 8006a74:	429f      	cmp	r7, r3
 8006a76:	f080 8137 	bcs.w	8006ce8 <__gxx_personality_v0+0x324>
 8006a7a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006a7e:	f1b8 0f00 	cmp.w	r8, #0
 8006a82:	d001      	beq.n	8006a88 <__gxx_personality_v0+0xc4>
 8006a84:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a86:	4498      	add	r8, r3
 8006a88:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006a8a:	b117      	cbz	r7, 8006a92 <__gxx_personality_v0+0xce>
 8006a8c:	1e78      	subs	r0, r7, #1
 8006a8e:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8006a90:	4407      	add	r7, r0
 8006a92:	f1b8 0f00 	cmp.w	r8, #0
 8006a96:	d0a8      	beq.n	80069ea <__gxx_personality_v0+0x26>
 8006a98:	2f00      	cmp	r7, #0
 8006a9a:	f000 80a1 	beq.w	8006be0 <__gxx_personality_v0+0x21c>
 8006a9e:	f015 0308 	ands.w	r3, r5, #8
 8006aa2:	9302      	str	r3, [sp, #8]
 8006aa4:	d036      	beq.n	8006b14 <__gxx_personality_v0+0x150>
 8006aa6:	2347      	movs	r3, #71	; 0x47
 8006aa8:	7023      	strb	r3, [r4, #0]
 8006aaa:	234e      	movs	r3, #78	; 0x4e
 8006aac:	7063      	strb	r3, [r4, #1]
 8006aae:	2355      	movs	r3, #85	; 0x55
 8006ab0:	70a3      	strb	r3, [r4, #2]
 8006ab2:	2343      	movs	r3, #67	; 0x43
 8006ab4:	70e3      	strb	r3, [r4, #3]
 8006ab6:	2346      	movs	r3, #70	; 0x46
 8006ab8:	7123      	strb	r3, [r4, #4]
 8006aba:	234f      	movs	r3, #79	; 0x4f
 8006abc:	7163      	strb	r3, [r4, #5]
 8006abe:	2352      	movs	r3, #82	; 0x52
 8006ac0:	71a3      	strb	r3, [r4, #6]
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	71e3      	strb	r3, [r4, #7]
 8006ac6:	f04f 0a00 	mov.w	sl, #0
 8006aca:	f06f 0b03 	mvn.w	fp, #3
 8006ace:	a907      	add	r1, sp, #28
 8006ad0:	4638      	mov	r0, r7
 8006ad2:	f7ff feac 	bl	800682e <_ZL12read_sleb128PKhPl>
 8006ad6:	a908      	add	r1, sp, #32
 8006ad8:	9003      	str	r0, [sp, #12]
 8006ada:	f7ff fea8 	bl	800682e <_ZL12read_sleb128PKhPl>
 8006ade:	9a07      	ldr	r2, [sp, #28]
 8006ae0:	2a00      	cmp	r2, #0
 8006ae2:	d076      	beq.n	8006bd2 <__gxx_personality_v0+0x20e>
 8006ae4:	dd3d      	ble.n	8006b62 <__gxx_personality_v0+0x19e>
 8006ae6:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 8006aea:	28ff      	cmp	r0, #255	; 0xff
 8006aec:	d035      	beq.n	8006b5a <__gxx_personality_v0+0x196>
 8006aee:	f000 0307 	and.w	r3, r0, #7
 8006af2:	2b04      	cmp	r3, #4
 8006af4:	f63f af75 	bhi.w	80069e2 <__gxx_personality_v0+0x1e>
 8006af8:	a101      	add	r1, pc, #4	; (adr r1, 8006b00 <__gxx_personality_v0+0x13c>)
 8006afa:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006afe:	bf00      	nop
 8006b00:	08006b5f 	.word	0x08006b5f
 8006b04:	080069e3 	.word	0x080069e3
 8006b08:	08006b27 	.word	0x08006b27
 8006b0c:	08006b5f 	.word	0x08006b5f
 8006b10:	08006b57 	.word	0x08006b57
 8006b14:	79e3      	ldrb	r3, [r4, #7]
 8006b16:	2b01      	cmp	r3, #1
 8006b18:	bf0c      	ite	eq
 8006b1a:	f854 3c20 	ldreq.w	r3, [r4, #-32]
 8006b1e:	f104 0358 	addne.w	r3, r4, #88	; 0x58
 8006b22:	9304      	str	r3, [sp, #16]
 8006b24:	e7cf      	b.n	8006ac6 <__gxx_personality_v0+0x102>
 8006b26:	2702      	movs	r7, #2
 8006b28:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006b2a:	ab09      	add	r3, sp, #36	; 0x24
 8006b2c:	fb07 1212 	mls	r2, r7, r2, r1
 8006b30:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006b32:	f7ff fe94 	bl	800685e <_ZL28read_encoded_value_with_basehjPKhPj>
 8006b36:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006b38:	b369      	cbz	r1, 8006b96 <__gxx_personality_v0+0x1d2>
 8006b3a:	b12c      	cbz	r4, 8006b48 <__gxx_personality_v0+0x184>
 8006b3c:	ab04      	add	r3, sp, #16
 8006b3e:	2200      	movs	r2, #0
 8006b40:	4620      	mov	r0, r4
 8006b42:	f7ff fdcf 	bl	80066e4 <__cxa_type_match>
 8006b46:	bb30      	cbnz	r0, 8006b96 <__gxx_personality_v0+0x1d2>
 8006b48:	9f08      	ldr	r7, [sp, #32]
 8006b4a:	2f00      	cmp	r7, #0
 8006b4c:	d044      	beq.n	8006bd8 <__gxx_personality_v0+0x214>
 8006b4e:	9b03      	ldr	r3, [sp, #12]
 8006b50:	443b      	add	r3, r7
 8006b52:	461f      	mov	r7, r3
 8006b54:	e7bb      	b.n	8006ace <__gxx_personality_v0+0x10a>
 8006b56:	2708      	movs	r7, #8
 8006b58:	e7e6      	b.n	8006b28 <__gxx_personality_v0+0x164>
 8006b5a:	2700      	movs	r7, #0
 8006b5c:	e7e4      	b.n	8006b28 <__gxx_personality_v0+0x164>
 8006b5e:	2704      	movs	r7, #4
 8006b60:	e7e2      	b.n	8006b28 <__gxx_personality_v0+0x164>
 8006b62:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8006b64:	3201      	adds	r2, #1
 8006b66:	b36c      	cbz	r4, 8006bc4 <__gxx_personality_v0+0x200>
 8006b68:	9b02      	ldr	r3, [sp, #8]
 8006b6a:	bb5b      	cbnz	r3, 8006bc4 <__gxx_personality_v0+0x200>
 8006b6c:	9b04      	ldr	r3, [sp, #16]
 8006b6e:	9306      	str	r3, [sp, #24]
 8006b70:	fb0b 7202 	mla	r2, fp, r2, r7
 8006b74:	1f17      	subs	r7, r2, #4
 8006b76:	f857 1f04 	ldr.w	r1, [r7, #4]!
 8006b7a:	b141      	cbz	r1, 8006b8e <__gxx_personality_v0+0x1ca>
 8006b7c:	ab06      	add	r3, sp, #24
 8006b7e:	2200      	movs	r2, #0
 8006b80:	4439      	add	r1, r7
 8006b82:	4620      	mov	r0, r4
 8006b84:	f7ff fdae 	bl	80066e4 <__cxa_type_match>
 8006b88:	2800      	cmp	r0, #0
 8006b8a:	d0f4      	beq.n	8006b76 <__gxx_personality_v0+0x1b2>
 8006b8c:	2101      	movs	r1, #1
 8006b8e:	f081 0101 	eor.w	r1, r1, #1
 8006b92:	2900      	cmp	r1, #0
 8006b94:	d0d8      	beq.n	8006b48 <__gxx_personality_v0+0x184>
 8006b96:	9f07      	ldr	r7, [sp, #28]
 8006b98:	f04f 0a03 	mov.w	sl, #3
 8006b9c:	07eb      	lsls	r3, r5, #31
 8006b9e:	d527      	bpl.n	8006bf0 <__gxx_personality_v0+0x22c>
 8006ba0:	f1ba 0f02 	cmp.w	sl, #2
 8006ba4:	f43f af21 	beq.w	80069ea <__gxx_personality_v0+0x26>
 8006ba8:	210d      	movs	r1, #13
 8006baa:	4630      	mov	r0, r6
 8006bac:	9d04      	ldr	r5, [sp, #16]
 8006bae:	f7ff fefd 	bl	80069ac <_Unwind_GetGR>
 8006bb2:	6265      	str	r5, [r4, #36]	; 0x24
 8006bb4:	6220      	str	r0, [r4, #32]
 8006bb6:	62a7      	str	r7, [r4, #40]	; 0x28
 8006bb8:	f8c4 902c 	str.w	r9, [r4, #44]	; 0x2c
 8006bbc:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
 8006bc0:	2006      	movs	r0, #6
 8006bc2:	e718      	b.n	80069f6 <__gxx_personality_v0+0x32>
 8006bc4:	fb0b f202 	mul.w	r2, fp, r2
 8006bc8:	58b9      	ldr	r1, [r7, r2]
 8006bca:	fab1 f181 	clz	r1, r1
 8006bce:	0949      	lsrs	r1, r1, #5
 8006bd0:	e7df      	b.n	8006b92 <__gxx_personality_v0+0x1ce>
 8006bd2:	f04f 0a01 	mov.w	sl, #1
 8006bd6:	e7b7      	b.n	8006b48 <__gxx_personality_v0+0x184>
 8006bd8:	f1ba 0f00 	cmp.w	sl, #0
 8006bdc:	f43f af05 	beq.w	80069ea <__gxx_personality_v0+0x26>
 8006be0:	f04f 0a02 	mov.w	sl, #2
 8006be4:	e7da      	b.n	8006b9c <__gxx_personality_v0+0x1d8>
 8006be6:	2700      	movs	r7, #0
 8006be8:	46b8      	mov	r8, r7
 8006bea:	f04f 0a01 	mov.w	sl, #1
 8006bee:	e7d5      	b.n	8006b9c <__gxx_personality_v0+0x1d8>
 8006bf0:	4649      	mov	r1, r9
 8006bf2:	e731      	b.n	8006a58 <__gxx_personality_v0+0x94>
 8006bf4:	2f00      	cmp	r7, #0
 8006bf6:	da23      	bge.n	8006c40 <__gxx_personality_v0+0x27c>
 8006bf8:	f000 f9d6 	bl	8006fa8 <_ZSt10unexpectedv>
 8006bfc:	f1ba 0f01 	cmp.w	sl, #1
 8006c00:	d102      	bne.n	8006c08 <__gxx_personality_v0+0x244>
 8006c02:	4620      	mov	r0, r4
 8006c04:	f000 f947 	bl	8006e96 <__cxa_call_terminate>
 8006c08:	2f00      	cmp	r7, #0
 8006c0a:	da19      	bge.n	8006c40 <__gxx_personality_v0+0x27c>
 8006c0c:	aa0a      	add	r2, sp, #40	; 0x28
 8006c0e:	4630      	mov	r0, r6
 8006c10:	f7ff fe9c 	bl	800694c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 8006c14:	4631      	mov	r1, r6
 8006c16:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 8006c1a:	f7ff fe64 	bl	80068e6 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 8006c1e:	f06f 0303 	mvn.w	r3, #3
 8006c22:	fb07 3203 	mla	r2, r7, r3, r3
 8006c26:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006c28:	900c      	str	r0, [sp, #48]	; 0x30
 8006c2a:	4413      	add	r3, r2
 8006c2c:	f853 2025 	ldr.w	r2, [r3, r5, lsl #2]
 8006c30:	b10a      	cbz	r2, 8006c36 <__gxx_personality_v0+0x272>
 8006c32:	3501      	adds	r5, #1
 8006c34:	e7fa      	b.n	8006c2c <__gxx_personality_v0+0x268>
 8006c36:	2204      	movs	r2, #4
 8006c38:	62a5      	str	r5, [r4, #40]	; 0x28
 8006c3a:	62e0      	str	r0, [r4, #44]	; 0x2c
 8006c3c:	6322      	str	r2, [r4, #48]	; 0x30
 8006c3e:	6363      	str	r3, [r4, #52]	; 0x34
 8006c40:	ab10      	add	r3, sp, #64	; 0x40
 8006c42:	4630      	mov	r0, r6
 8006c44:	f843 4d1c 	str.w	r4, [r3, #-28]!
 8006c48:	9300      	str	r3, [sp, #0]
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	461a      	mov	r2, r3
 8006c4e:	4619      	mov	r1, r3
 8006c50:	f7f9 fe66 	bl	8000920 <_Unwind_VRS_Set>
 8006c54:	ab10      	add	r3, sp, #64	; 0x40
 8006c56:	2201      	movs	r2, #1
 8006c58:	f843 7d20 	str.w	r7, [r3, #-32]!
 8006c5c:	9300      	str	r3, [sp, #0]
 8006c5e:	2300      	movs	r3, #0
 8006c60:	4619      	mov	r1, r3
 8006c62:	4630      	mov	r0, r6
 8006c64:	f7f9 fe5c 	bl	8000920 <_Unwind_VRS_Set>
 8006c68:	210f      	movs	r1, #15
 8006c6a:	4630      	mov	r0, r6
 8006c6c:	f7ff fe9e 	bl	80069ac <_Unwind_GetGR>
 8006c70:	ab10      	add	r3, sp, #64	; 0x40
 8006c72:	f000 0001 	and.w	r0, r0, #1
 8006c76:	ea40 0008 	orr.w	r0, r0, r8
 8006c7a:	f843 0d24 	str.w	r0, [r3, #-36]!
 8006c7e:	9300      	str	r3, [sp, #0]
 8006c80:	2300      	movs	r3, #0
 8006c82:	220f      	movs	r2, #15
 8006c84:	4619      	mov	r1, r3
 8006c86:	4630      	mov	r0, r6
 8006c88:	f7f9 fe4a 	bl	8000920 <_Unwind_VRS_Set>
 8006c8c:	f1ba 0f02 	cmp.w	sl, #2
 8006c90:	d102      	bne.n	8006c98 <__gxx_personality_v0+0x2d4>
 8006c92:	4620      	mov	r0, r4
 8006c94:	f7ff fd84 	bl	80067a0 <__cxa_begin_cleanup>
 8006c98:	2007      	movs	r0, #7
 8006c9a:	e6ac      	b.n	80069f6 <__gxx_personality_v0+0x32>
 8006c9c:	aa10      	add	r2, sp, #64	; 0x40
 8006c9e:	4643      	mov	r3, r8
 8006ca0:	f842 4d2c 	str.w	r4, [r2, #-44]!
 8006ca4:	4641      	mov	r1, r8
 8006ca6:	9200      	str	r2, [sp, #0]
 8006ca8:	4630      	mov	r0, r6
 8006caa:	220c      	movs	r2, #12
 8006cac:	f045 0502 	orr.w	r5, r5, #2
 8006cb0:	f7f9 fe36 	bl	8000920 <_Unwind_VRS_Set>
 8006cb4:	4630      	mov	r0, r6
 8006cb6:	f7fa fba9 	bl	800140c <_Unwind_GetLanguageSpecificData>
 8006cba:	4681      	mov	r9, r0
 8006cbc:	2800      	cmp	r0, #0
 8006cbe:	f43f ae94 	beq.w	80069ea <__gxx_personality_v0+0x26>
 8006cc2:	aa0a      	add	r2, sp, #40	; 0x28
 8006cc4:	4601      	mov	r1, r0
 8006cc6:	4630      	mov	r0, r6
 8006cc8:	f7ff fe40 	bl	800694c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 8006ccc:	4631      	mov	r1, r6
 8006cce:	4680      	mov	r8, r0
 8006cd0:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 8006cd4:	f7ff fe07 	bl	80068e6 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 8006cd8:	210f      	movs	r1, #15
 8006cda:	900c      	str	r0, [sp, #48]	; 0x30
 8006cdc:	4630      	mov	r0, r6
 8006cde:	f7ff fe65 	bl	80069ac <_Unwind_GetGR>
 8006ce2:	f020 0001 	bic.w	r0, r0, #1
 8006ce6:	1e47      	subs	r7, r0, #1
 8006ce8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006cea:	4598      	cmp	r8, r3
 8006cec:	f4bf af7b 	bcs.w	8006be6 <__gxx_personality_v0+0x222>
 8006cf0:	4642      	mov	r2, r8
 8006cf2:	ab06      	add	r3, sp, #24
 8006cf4:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 8006cf8:	2000      	movs	r0, #0
 8006cfa:	f7ff fe17 	bl	800692c <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 8006cfe:	ab07      	add	r3, sp, #28
 8006d00:	4602      	mov	r2, r0
 8006d02:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 8006d06:	2000      	movs	r0, #0
 8006d08:	f7ff fe10 	bl	800692c <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 8006d0c:	ab08      	add	r3, sp, #32
 8006d0e:	4602      	mov	r2, r0
 8006d10:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 8006d14:	2000      	movs	r0, #0
 8006d16:	f7ff fe09 	bl	800692c <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 8006d1a:	a909      	add	r1, sp, #36	; 0x24
 8006d1c:	f7ff fd76 	bl	800680c <_ZL12read_uleb128PKhPm>
 8006d20:	9a06      	ldr	r2, [sp, #24]
 8006d22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d24:	4413      	add	r3, r2
 8006d26:	429f      	cmp	r7, r3
 8006d28:	4680      	mov	r8, r0
 8006d2a:	f4bf aea1 	bcs.w	8006a70 <__gxx_personality_v0+0xac>
 8006d2e:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
 8006d32:	e7d9      	b.n	8006ce8 <__gxx_personality_v0+0x324>

08006d34 <_ZdlPvj>:
 8006d34:	f7ff bc9b 	b.w	800666e <_ZdlPv>

08006d38 <_ZSt15get_new_handlerv>:
 8006d38:	4b02      	ldr	r3, [pc, #8]	; (8006d44 <_ZSt15get_new_handlerv+0xc>)
 8006d3a:	6818      	ldr	r0, [r3, #0]
 8006d3c:	f3bf 8f5b 	dmb	ish
 8006d40:	4770      	bx	lr
 8006d42:	bf00      	nop
 8006d44:	20003d04 	.word	0x20003d04

08006d48 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 8006d48:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8006d4a:	2310      	movs	r3, #16
 8006d4c:	9302      	str	r3, [sp, #8]
 8006d4e:	6803      	ldr	r3, [r0, #0]
 8006d50:	2400      	movs	r4, #0
 8006d52:	4615      	mov	r5, r2
 8006d54:	699e      	ldr	r6, [r3, #24]
 8006d56:	9400      	str	r4, [sp, #0]
 8006d58:	466b      	mov	r3, sp
 8006d5a:	f88d 4004 	strb.w	r4, [sp, #4]
 8006d5e:	9403      	str	r4, [sp, #12]
 8006d60:	6812      	ldr	r2, [r2, #0]
 8006d62:	47b0      	blx	r6
 8006d64:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8006d68:	f003 0306 	and.w	r3, r3, #6
 8006d6c:	2b06      	cmp	r3, #6
 8006d6e:	bf03      	ittte	eq
 8006d70:	9b00      	ldreq	r3, [sp, #0]
 8006d72:	602b      	streq	r3, [r5, #0]
 8006d74:	2001      	moveq	r0, #1
 8006d76:	4620      	movne	r0, r4
 8006d78:	b004      	add	sp, #16
 8006d7a:	bd70      	pop	{r4, r5, r6, pc}

08006d7c <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 8006d7c:	9800      	ldr	r0, [sp, #0]
 8006d7e:	4290      	cmp	r0, r2
 8006d80:	bf0c      	ite	eq
 8006d82:	2006      	moveq	r0, #6
 8006d84:	2001      	movne	r0, #1
 8006d86:	4770      	bx	lr

08006d88 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 8006d88:	b510      	push	{r4, lr}
 8006d8a:	4b03      	ldr	r3, [pc, #12]	; (8006d98 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 8006d8c:	6003      	str	r3, [r0, #0]
 8006d8e:	4604      	mov	r4, r0
 8006d90:	f000 f84b 	bl	8006e2a <_ZNSt9type_infoD1Ev>
 8006d94:	4620      	mov	r0, r4
 8006d96:	bd10      	pop	{r4, pc}
 8006d98:	08009234 	.word	0x08009234

08006d9c <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 8006d9c:	b510      	push	{r4, lr}
 8006d9e:	4604      	mov	r4, r0
 8006da0:	f7ff fff2 	bl	8006d88 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8006da4:	4620      	mov	r0, r4
 8006da6:	2108      	movs	r1, #8
 8006da8:	f7ff ffc4 	bl	8006d34 <_ZdlPvj>
 8006dac:	4620      	mov	r0, r4
 8006dae:	bd10      	pop	{r4, pc}

08006db0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 8006db0:	b538      	push	{r3, r4, r5, lr}
 8006db2:	4615      	mov	r5, r2
 8006db4:	461c      	mov	r4, r3
 8006db6:	f000 f83b 	bl	8006e30 <_ZNKSt9type_infoeqERKS_>
 8006dba:	b120      	cbz	r0, 8006dc6 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 8006dbc:	2308      	movs	r3, #8
 8006dbe:	60e3      	str	r3, [r4, #12]
 8006dc0:	2306      	movs	r3, #6
 8006dc2:	6025      	str	r5, [r4, #0]
 8006dc4:	7123      	strb	r3, [r4, #4]
 8006dc6:	bd38      	pop	{r3, r4, r5, pc}

08006dc8 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 8006dc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006dcc:	4605      	mov	r5, r0
 8006dce:	460c      	mov	r4, r1
 8006dd0:	4616      	mov	r6, r2
 8006dd2:	461f      	mov	r7, r3
 8006dd4:	f000 f82c 	bl	8006e30 <_ZNKSt9type_infoeqERKS_>
 8006dd8:	b948      	cbnz	r0, 8006dee <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 8006dda:	2f03      	cmp	r7, #3
 8006ddc:	d807      	bhi.n	8006dee <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 8006dde:	6823      	ldr	r3, [r4, #0]
 8006de0:	4632      	mov	r2, r6
 8006de2:	4629      	mov	r1, r5
 8006de4:	4620      	mov	r0, r4
 8006de6:	695b      	ldr	r3, [r3, #20]
 8006de8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006dec:	4718      	bx	r3
 8006dee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006df2 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 8006df2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006df6:	9e06      	ldr	r6, [sp, #24]
 8006df8:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8006dfa:	4698      	mov	r8, r3
 8006dfc:	9b08      	ldr	r3, [sp, #32]
 8006dfe:	429e      	cmp	r6, r3
 8006e00:	4607      	mov	r7, r0
 8006e02:	4615      	mov	r5, r2
 8006e04:	d103      	bne.n	8006e0e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x1c>
 8006e06:	9907      	ldr	r1, [sp, #28]
 8006e08:	f000 f812 	bl	8006e30 <_ZNKSt9type_infoeqERKS_>
 8006e0c:	b958      	cbnz	r0, 8006e26 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x34>
 8006e0e:	4641      	mov	r1, r8
 8006e10:	4638      	mov	r0, r7
 8006e12:	f000 f80d 	bl	8006e30 <_ZNKSt9type_infoeqERKS_>
 8006e16:	b118      	cbz	r0, 8006e20 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x2e>
 8006e18:	2301      	movs	r3, #1
 8006e1a:	6026      	str	r6, [r4, #0]
 8006e1c:	7125      	strb	r5, [r4, #4]
 8006e1e:	71a3      	strb	r3, [r4, #6]
 8006e20:	2000      	movs	r0, #0
 8006e22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e26:	7165      	strb	r5, [r4, #5]
 8006e28:	e7fa      	b.n	8006e20 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x2e>

08006e2a <_ZNSt9type_infoD1Ev>:
 8006e2a:	4770      	bx	lr

08006e2c <_ZNKSt9type_info14__is_pointer_pEv>:
 8006e2c:	2000      	movs	r0, #0
 8006e2e:	4770      	bx	lr

08006e30 <_ZNKSt9type_infoeqERKS_>:
 8006e30:	4281      	cmp	r1, r0
 8006e32:	b508      	push	{r3, lr}
 8006e34:	d00e      	beq.n	8006e54 <_ZNKSt9type_infoeqERKS_+0x24>
 8006e36:	6840      	ldr	r0, [r0, #4]
 8006e38:	7803      	ldrb	r3, [r0, #0]
 8006e3a:	2b2a      	cmp	r3, #42	; 0x2a
 8006e3c:	d00c      	beq.n	8006e58 <_ZNKSt9type_infoeqERKS_+0x28>
 8006e3e:	6849      	ldr	r1, [r1, #4]
 8006e40:	780b      	ldrb	r3, [r1, #0]
 8006e42:	2b2a      	cmp	r3, #42	; 0x2a
 8006e44:	bf08      	it	eq
 8006e46:	3101      	addeq	r1, #1
 8006e48:	f7f9 f9de 	bl	8000208 <strcmp>
 8006e4c:	fab0 f080 	clz	r0, r0
 8006e50:	0940      	lsrs	r0, r0, #5
 8006e52:	bd08      	pop	{r3, pc}
 8006e54:	2001      	movs	r0, #1
 8006e56:	bd08      	pop	{r3, pc}
 8006e58:	2000      	movs	r0, #0
 8006e5a:	bd08      	pop	{r3, pc}

08006e5c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 8006e5c:	7803      	ldrb	r3, [r0, #0]
 8006e5e:	2b47      	cmp	r3, #71	; 0x47
 8006e60:	d117      	bne.n	8006e92 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8006e62:	7843      	ldrb	r3, [r0, #1]
 8006e64:	2b4e      	cmp	r3, #78	; 0x4e
 8006e66:	d114      	bne.n	8006e92 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8006e68:	7883      	ldrb	r3, [r0, #2]
 8006e6a:	2b55      	cmp	r3, #85	; 0x55
 8006e6c:	d111      	bne.n	8006e92 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8006e6e:	78c3      	ldrb	r3, [r0, #3]
 8006e70:	2b43      	cmp	r3, #67	; 0x43
 8006e72:	d10e      	bne.n	8006e92 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8006e74:	7903      	ldrb	r3, [r0, #4]
 8006e76:	2b43      	cmp	r3, #67	; 0x43
 8006e78:	d10b      	bne.n	8006e92 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8006e7a:	7943      	ldrb	r3, [r0, #5]
 8006e7c:	2b2b      	cmp	r3, #43	; 0x2b
 8006e7e:	d108      	bne.n	8006e92 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8006e80:	7983      	ldrb	r3, [r0, #6]
 8006e82:	2b2b      	cmp	r3, #43	; 0x2b
 8006e84:	d105      	bne.n	8006e92 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8006e86:	79c0      	ldrb	r0, [r0, #7]
 8006e88:	2801      	cmp	r0, #1
 8006e8a:	bf8c      	ite	hi
 8006e8c:	2000      	movhi	r0, #0
 8006e8e:	2001      	movls	r0, #1
 8006e90:	4770      	bx	lr
 8006e92:	2000      	movs	r0, #0
 8006e94:	4770      	bx	lr

08006e96 <__cxa_call_terminate>:
 8006e96:	b510      	push	{r4, lr}
 8006e98:	4604      	mov	r4, r0
 8006e9a:	b148      	cbz	r0, 8006eb0 <__cxa_call_terminate+0x1a>
 8006e9c:	f000 f83b 	bl	8006f16 <__cxa_begin_catch>
 8006ea0:	4620      	mov	r0, r4
 8006ea2:	f7ff ffdb 	bl	8006e5c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8006ea6:	b118      	cbz	r0, 8006eb0 <__cxa_call_terminate+0x1a>
 8006ea8:	f854 0c14 	ldr.w	r0, [r4, #-20]
 8006eac:	f000 f85d 	bl	8006f6a <_ZN10__cxxabiv111__terminateEPFvvE>
 8006eb0:	f000 f868 	bl	8006f84 <_ZSt9terminatev>

08006eb4 <__cxa_call_unexpected>:
 8006eb4:	b538      	push	{r3, r4, r5, lr}
 8006eb6:	4602      	mov	r2, r0
 8006eb8:	f7ff ffd0 	bl	8006e5c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8006ebc:	b140      	cbz	r0, 8006ed0 <__cxa_call_unexpected+0x1c>
 8006ebe:	f852 4c18 	ldr.w	r4, [r2, #-24]
 8006ec2:	2500      	movs	r5, #0
 8006ec4:	4610      	mov	r0, r2
 8006ec6:	f000 f826 	bl	8006f16 <__cxa_begin_catch>
 8006eca:	b125      	cbz	r5, 8006ed6 <__cxa_call_unexpected+0x22>
 8006ecc:	f000 f86c 	bl	8006fa8 <_ZSt10unexpectedv>
 8006ed0:	4604      	mov	r4, r0
 8006ed2:	2501      	movs	r5, #1
 8006ed4:	e7f6      	b.n	8006ec4 <__cxa_call_unexpected+0x10>
 8006ed6:	4620      	mov	r0, r4
 8006ed8:	f000 f859 	bl	8006f8e <_ZN10__cxxabiv112__unexpectedEPFvvE>

08006edc <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 8006edc:	7803      	ldrb	r3, [r0, #0]
 8006ede:	2b47      	cmp	r3, #71	; 0x47
 8006ee0:	d117      	bne.n	8006f12 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8006ee2:	7843      	ldrb	r3, [r0, #1]
 8006ee4:	2b4e      	cmp	r3, #78	; 0x4e
 8006ee6:	d114      	bne.n	8006f12 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8006ee8:	7883      	ldrb	r3, [r0, #2]
 8006eea:	2b55      	cmp	r3, #85	; 0x55
 8006eec:	d111      	bne.n	8006f12 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8006eee:	78c3      	ldrb	r3, [r0, #3]
 8006ef0:	2b43      	cmp	r3, #67	; 0x43
 8006ef2:	d10e      	bne.n	8006f12 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8006ef4:	7903      	ldrb	r3, [r0, #4]
 8006ef6:	2b43      	cmp	r3, #67	; 0x43
 8006ef8:	d10b      	bne.n	8006f12 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8006efa:	7943      	ldrb	r3, [r0, #5]
 8006efc:	2b2b      	cmp	r3, #43	; 0x2b
 8006efe:	d108      	bne.n	8006f12 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8006f00:	7983      	ldrb	r3, [r0, #6]
 8006f02:	2b2b      	cmp	r3, #43	; 0x2b
 8006f04:	d105      	bne.n	8006f12 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8006f06:	79c0      	ldrb	r0, [r0, #7]
 8006f08:	2801      	cmp	r0, #1
 8006f0a:	bf8c      	ite	hi
 8006f0c:	2000      	movhi	r0, #0
 8006f0e:	2001      	movls	r0, #1
 8006f10:	4770      	bx	lr
 8006f12:	2000      	movs	r0, #0
 8006f14:	4770      	bx	lr

08006f16 <__cxa_begin_catch>:
 8006f16:	b538      	push	{r3, r4, r5, lr}
 8006f18:	4605      	mov	r5, r0
 8006f1a:	f000 f84b 	bl	8006fb4 <__cxa_get_globals>
 8006f1e:	4601      	mov	r1, r0
 8006f20:	6802      	ldr	r2, [r0, #0]
 8006f22:	4628      	mov	r0, r5
 8006f24:	f1a5 0420 	sub.w	r4, r5, #32
 8006f28:	f7ff ffd8 	bl	8006edc <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8006f2c:	b930      	cbnz	r0, 8006f3c <__cxa_begin_catch+0x26>
 8006f2e:	b10a      	cbz	r2, 8006f34 <__cxa_begin_catch+0x1e>
 8006f30:	f000 f828 	bl	8006f84 <_ZSt9terminatev>
 8006f34:	600c      	str	r4, [r1, #0]
 8006f36:	4614      	mov	r4, r2
 8006f38:	4620      	mov	r0, r4
 8006f3a:	bd38      	pop	{r3, r4, r5, pc}
 8006f3c:	f855 3c0c 	ldr.w	r3, [r5, #-12]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	bfb4      	ite	lt
 8006f44:	f1c3 0301 	rsblt	r3, r3, #1
 8006f48:	3301      	addge	r3, #1
 8006f4a:	f845 3c0c 	str.w	r3, [r5, #-12]
 8006f4e:	684b      	ldr	r3, [r1, #4]
 8006f50:	42a2      	cmp	r2, r4
 8006f52:	f103 33ff 	add.w	r3, r3, #4294967295
 8006f56:	604b      	str	r3, [r1, #4]
 8006f58:	4628      	mov	r0, r5
 8006f5a:	bf1c      	itt	ne
 8006f5c:	f845 2c10 	strne.w	r2, [r5, #-16]
 8006f60:	600c      	strne	r4, [r1, #0]
 8006f62:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 8006f64:	f7f9 fcae 	bl	80008c4 <_Unwind_Complete>
 8006f68:	e7e6      	b.n	8006f38 <__cxa_begin_catch+0x22>

08006f6a <_ZN10__cxxabiv111__terminateEPFvvE>:
 8006f6a:	b508      	push	{r3, lr}
 8006f6c:	4780      	blx	r0
 8006f6e:	f000 ff0f 	bl	8007d90 <abort>
	...

08006f74 <_ZSt13get_terminatev>:
 8006f74:	4b02      	ldr	r3, [pc, #8]	; (8006f80 <_ZSt13get_terminatev+0xc>)
 8006f76:	6818      	ldr	r0, [r3, #0]
 8006f78:	f3bf 8f5b 	dmb	ish
 8006f7c:	4770      	bx	lr
 8006f7e:	bf00      	nop
 8006f80:	20000008 	.word	0x20000008

08006f84 <_ZSt9terminatev>:
 8006f84:	b508      	push	{r3, lr}
 8006f86:	f7ff fff5 	bl	8006f74 <_ZSt13get_terminatev>
 8006f8a:	f7ff ffee 	bl	8006f6a <_ZN10__cxxabiv111__terminateEPFvvE>

08006f8e <_ZN10__cxxabiv112__unexpectedEPFvvE>:
 8006f8e:	b508      	push	{r3, lr}
 8006f90:	4780      	blx	r0
 8006f92:	f7ff fff7 	bl	8006f84 <_ZSt9terminatev>
	...

08006f98 <_ZSt14get_unexpectedv>:
 8006f98:	4b02      	ldr	r3, [pc, #8]	; (8006fa4 <_ZSt14get_unexpectedv+0xc>)
 8006f9a:	6818      	ldr	r0, [r3, #0]
 8006f9c:	f3bf 8f5b 	dmb	ish
 8006fa0:	4770      	bx	lr
 8006fa2:	bf00      	nop
 8006fa4:	2000000c 	.word	0x2000000c

08006fa8 <_ZSt10unexpectedv>:
 8006fa8:	b508      	push	{r3, lr}
 8006faa:	f7ff fff5 	bl	8006f98 <_ZSt14get_unexpectedv>
 8006fae:	f7ff ffee 	bl	8006f8e <_ZN10__cxxabiv112__unexpectedEPFvvE>
	...

08006fb4 <__cxa_get_globals>:
 8006fb4:	4800      	ldr	r0, [pc, #0]	; (8006fb8 <__cxa_get_globals+0x4>)
 8006fb6:	4770      	bx	lr
 8006fb8:	20003d08 	.word	0x20003d08

08006fbc <cosf>:
 8006fbc:	ee10 3a10 	vmov	r3, s0
 8006fc0:	b507      	push	{r0, r1, r2, lr}
 8006fc2:	4a1c      	ldr	r2, [pc, #112]	; (8007034 <cosf+0x78>)
 8006fc4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	dc04      	bgt.n	8006fd6 <cosf+0x1a>
 8006fcc:	eddf 0a1a 	vldr	s1, [pc, #104]	; 8007038 <cosf+0x7c>
 8006fd0:	f000 fa52 	bl	8007478 <__kernel_cosf>
 8006fd4:	e004      	b.n	8006fe0 <cosf+0x24>
 8006fd6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8006fda:	db04      	blt.n	8006fe6 <cosf+0x2a>
 8006fdc:	ee30 0a40 	vsub.f32	s0, s0, s0
 8006fe0:	b003      	add	sp, #12
 8006fe2:	f85d fb04 	ldr.w	pc, [sp], #4
 8006fe6:	4668      	mov	r0, sp
 8006fe8:	f000 f91a 	bl	8007220 <__ieee754_rem_pio2f>
 8006fec:	f000 0003 	and.w	r0, r0, #3
 8006ff0:	2801      	cmp	r0, #1
 8006ff2:	d007      	beq.n	8007004 <cosf+0x48>
 8006ff4:	2802      	cmp	r0, #2
 8006ff6:	d00e      	beq.n	8007016 <cosf+0x5a>
 8006ff8:	b9a0      	cbnz	r0, 8007024 <cosf+0x68>
 8006ffa:	eddd 0a01 	vldr	s1, [sp, #4]
 8006ffe:	ed9d 0a00 	vldr	s0, [sp]
 8007002:	e7e5      	b.n	8006fd0 <cosf+0x14>
 8007004:	eddd 0a01 	vldr	s1, [sp, #4]
 8007008:	ed9d 0a00 	vldr	s0, [sp]
 800700c:	f000 fcf0 	bl	80079f0 <__kernel_sinf>
 8007010:	eeb1 0a40 	vneg.f32	s0, s0
 8007014:	e7e4      	b.n	8006fe0 <cosf+0x24>
 8007016:	eddd 0a01 	vldr	s1, [sp, #4]
 800701a:	ed9d 0a00 	vldr	s0, [sp]
 800701e:	f000 fa2b 	bl	8007478 <__kernel_cosf>
 8007022:	e7f5      	b.n	8007010 <cosf+0x54>
 8007024:	2001      	movs	r0, #1
 8007026:	eddd 0a01 	vldr	s1, [sp, #4]
 800702a:	ed9d 0a00 	vldr	s0, [sp]
 800702e:	f000 fcdf 	bl	80079f0 <__kernel_sinf>
 8007032:	e7d5      	b.n	8006fe0 <cosf+0x24>
 8007034:	3f490fd8 	.word	0x3f490fd8
 8007038:	00000000 	.word	0x00000000

0800703c <sinf>:
 800703c:	ee10 3a10 	vmov	r3, s0
 8007040:	b507      	push	{r0, r1, r2, lr}
 8007042:	4a1d      	ldr	r2, [pc, #116]	; (80070b8 <sinf+0x7c>)
 8007044:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007048:	4293      	cmp	r3, r2
 800704a:	dc05      	bgt.n	8007058 <sinf+0x1c>
 800704c:	eddf 0a1b 	vldr	s1, [pc, #108]	; 80070bc <sinf+0x80>
 8007050:	2000      	movs	r0, #0
 8007052:	f000 fccd 	bl	80079f0 <__kernel_sinf>
 8007056:	e004      	b.n	8007062 <sinf+0x26>
 8007058:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800705c:	db04      	blt.n	8007068 <sinf+0x2c>
 800705e:	ee30 0a40 	vsub.f32	s0, s0, s0
 8007062:	b003      	add	sp, #12
 8007064:	f85d fb04 	ldr.w	pc, [sp], #4
 8007068:	4668      	mov	r0, sp
 800706a:	f000 f8d9 	bl	8007220 <__ieee754_rem_pio2f>
 800706e:	f000 0003 	and.w	r0, r0, #3
 8007072:	2801      	cmp	r0, #1
 8007074:	d008      	beq.n	8007088 <sinf+0x4c>
 8007076:	2802      	cmp	r0, #2
 8007078:	d00d      	beq.n	8007096 <sinf+0x5a>
 800707a:	b9b0      	cbnz	r0, 80070aa <sinf+0x6e>
 800707c:	2001      	movs	r0, #1
 800707e:	eddd 0a01 	vldr	s1, [sp, #4]
 8007082:	ed9d 0a00 	vldr	s0, [sp]
 8007086:	e7e4      	b.n	8007052 <sinf+0x16>
 8007088:	eddd 0a01 	vldr	s1, [sp, #4]
 800708c:	ed9d 0a00 	vldr	s0, [sp]
 8007090:	f000 f9f2 	bl	8007478 <__kernel_cosf>
 8007094:	e7e5      	b.n	8007062 <sinf+0x26>
 8007096:	2001      	movs	r0, #1
 8007098:	eddd 0a01 	vldr	s1, [sp, #4]
 800709c:	ed9d 0a00 	vldr	s0, [sp]
 80070a0:	f000 fca6 	bl	80079f0 <__kernel_sinf>
 80070a4:	eeb1 0a40 	vneg.f32	s0, s0
 80070a8:	e7db      	b.n	8007062 <sinf+0x26>
 80070aa:	eddd 0a01 	vldr	s1, [sp, #4]
 80070ae:	ed9d 0a00 	vldr	s0, [sp]
 80070b2:	f000 f9e1 	bl	8007478 <__kernel_cosf>
 80070b6:	e7f5      	b.n	80070a4 <sinf+0x68>
 80070b8:	3f490fd8 	.word	0x3f490fd8
 80070bc:	00000000 	.word	0x00000000

080070c0 <atan2f>:
 80070c0:	f000 b800 	b.w	80070c4 <__ieee754_atan2f>

080070c4 <__ieee754_atan2f>:
 80070c4:	ee10 2a90 	vmov	r2, s1
 80070c8:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 80070cc:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80070d0:	b510      	push	{r4, lr}
 80070d2:	eef0 7a40 	vmov.f32	s15, s0
 80070d6:	dc06      	bgt.n	80070e6 <__ieee754_atan2f+0x22>
 80070d8:	ee10 0a10 	vmov	r0, s0
 80070dc:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 80070e0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80070e4:	dd04      	ble.n	80070f0 <__ieee754_atan2f+0x2c>
 80070e6:	ee77 7aa0 	vadd.f32	s15, s15, s1
 80070ea:	eeb0 0a67 	vmov.f32	s0, s15
 80070ee:	bd10      	pop	{r4, pc}
 80070f0:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 80070f4:	d103      	bne.n	80070fe <__ieee754_atan2f+0x3a>
 80070f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80070fa:	f000 bcc1 	b.w	8007a80 <atanf>
 80070fe:	1794      	asrs	r4, r2, #30
 8007100:	f004 0402 	and.w	r4, r4, #2
 8007104:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8007108:	b943      	cbnz	r3, 800711c <__ieee754_atan2f+0x58>
 800710a:	2c02      	cmp	r4, #2
 800710c:	d033      	beq.n	8007176 <__ieee754_atan2f+0xb2>
 800710e:	ed9f 7a39 	vldr	s14, [pc, #228]	; 80071f4 <__ieee754_atan2f+0x130>
 8007112:	2c03      	cmp	r4, #3
 8007114:	bf08      	it	eq
 8007116:	eef0 7a47 	vmoveq.f32	s15, s14
 800711a:	e7e6      	b.n	80070ea <__ieee754_atan2f+0x26>
 800711c:	b941      	cbnz	r1, 8007130 <__ieee754_atan2f+0x6c>
 800711e:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80071f8 <__ieee754_atan2f+0x134>
 8007122:	eddf 7a36 	vldr	s15, [pc, #216]	; 80071fc <__ieee754_atan2f+0x138>
 8007126:	2800      	cmp	r0, #0
 8007128:	bfb8      	it	lt
 800712a:	eef0 7a47 	vmovlt.f32	s15, s14
 800712e:	e7dc      	b.n	80070ea <__ieee754_atan2f+0x26>
 8007130:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8007134:	d125      	bne.n	8007182 <__ieee754_atan2f+0xbe>
 8007136:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800713a:	d112      	bne.n	8007162 <__ieee754_atan2f+0x9e>
 800713c:	2c02      	cmp	r4, #2
 800713e:	d00a      	beq.n	8007156 <__ieee754_atan2f+0x92>
 8007140:	2c03      	cmp	r4, #3
 8007142:	d00b      	beq.n	800715c <__ieee754_atan2f+0x98>
 8007144:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8007200 <__ieee754_atan2f+0x13c>
 8007148:	eddf 7a2e 	vldr	s15, [pc, #184]	; 8007204 <__ieee754_atan2f+0x140>
 800714c:	2c01      	cmp	r4, #1
 800714e:	bf18      	it	ne
 8007150:	eef0 7a47 	vmovne.f32	s15, s14
 8007154:	e7c9      	b.n	80070ea <__ieee754_atan2f+0x26>
 8007156:	eddf 7a2c 	vldr	s15, [pc, #176]	; 8007208 <__ieee754_atan2f+0x144>
 800715a:	e7c6      	b.n	80070ea <__ieee754_atan2f+0x26>
 800715c:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800720c <__ieee754_atan2f+0x148>
 8007160:	e7c3      	b.n	80070ea <__ieee754_atan2f+0x26>
 8007162:	2c02      	cmp	r4, #2
 8007164:	d007      	beq.n	8007176 <__ieee754_atan2f+0xb2>
 8007166:	2c03      	cmp	r4, #3
 8007168:	d008      	beq.n	800717c <__ieee754_atan2f+0xb8>
 800716a:	2c01      	cmp	r4, #1
 800716c:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8007210 <__ieee754_atan2f+0x14c>
 8007170:	eddf 7a28 	vldr	s15, [pc, #160]	; 8007214 <__ieee754_atan2f+0x150>
 8007174:	e7eb      	b.n	800714e <__ieee754_atan2f+0x8a>
 8007176:	eddf 7a28 	vldr	s15, [pc, #160]	; 8007218 <__ieee754_atan2f+0x154>
 800717a:	e7b6      	b.n	80070ea <__ieee754_atan2f+0x26>
 800717c:	eddf 7a1d 	vldr	s15, [pc, #116]	; 80071f4 <__ieee754_atan2f+0x130>
 8007180:	e7b3      	b.n	80070ea <__ieee754_atan2f+0x26>
 8007182:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8007186:	d0ca      	beq.n	800711e <__ieee754_atan2f+0x5a>
 8007188:	1a5b      	subs	r3, r3, r1
 800718a:	15db      	asrs	r3, r3, #23
 800718c:	2b3c      	cmp	r3, #60	; 0x3c
 800718e:	dc1a      	bgt.n	80071c6 <__ieee754_atan2f+0x102>
 8007190:	2a00      	cmp	r2, #0
 8007192:	da01      	bge.n	8007198 <__ieee754_atan2f+0xd4>
 8007194:	333c      	adds	r3, #60	; 0x3c
 8007196:	db19      	blt.n	80071cc <__ieee754_atan2f+0x108>
 8007198:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800719c:	f000 fd42 	bl	8007c24 <fabsf>
 80071a0:	f000 fc6e 	bl	8007a80 <atanf>
 80071a4:	eef0 7a40 	vmov.f32	s15, s0
 80071a8:	2c01      	cmp	r4, #1
 80071aa:	d012      	beq.n	80071d2 <__ieee754_atan2f+0x10e>
 80071ac:	2c02      	cmp	r4, #2
 80071ae:	d017      	beq.n	80071e0 <__ieee754_atan2f+0x11c>
 80071b0:	2c00      	cmp	r4, #0
 80071b2:	d09a      	beq.n	80070ea <__ieee754_atan2f+0x26>
 80071b4:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800721c <__ieee754_atan2f+0x158>
 80071b8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80071bc:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8007218 <__ieee754_atan2f+0x154>
 80071c0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80071c4:	e791      	b.n	80070ea <__ieee754_atan2f+0x26>
 80071c6:	eddf 7a0d 	vldr	s15, [pc, #52]	; 80071fc <__ieee754_atan2f+0x138>
 80071ca:	e7ed      	b.n	80071a8 <__ieee754_atan2f+0xe4>
 80071cc:	eddf 7a10 	vldr	s15, [pc, #64]	; 8007210 <__ieee754_atan2f+0x14c>
 80071d0:	e7ea      	b.n	80071a8 <__ieee754_atan2f+0xe4>
 80071d2:	ee17 3a90 	vmov	r3, s15
 80071d6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80071da:	ee07 3a90 	vmov	s15, r3
 80071de:	e784      	b.n	80070ea <__ieee754_atan2f+0x26>
 80071e0:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 800721c <__ieee754_atan2f+0x158>
 80071e4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80071e8:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8007218 <__ieee754_atan2f+0x154>
 80071ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80071f0:	e77b      	b.n	80070ea <__ieee754_atan2f+0x26>
 80071f2:	bf00      	nop
 80071f4:	c0490fdb 	.word	0xc0490fdb
 80071f8:	bfc90fdb 	.word	0xbfc90fdb
 80071fc:	3fc90fdb 	.word	0x3fc90fdb
 8007200:	3f490fdb 	.word	0x3f490fdb
 8007204:	bf490fdb 	.word	0xbf490fdb
 8007208:	4016cbe4 	.word	0x4016cbe4
 800720c:	c016cbe4 	.word	0xc016cbe4
 8007210:	00000000 	.word	0x00000000
 8007214:	80000000 	.word	0x80000000
 8007218:	40490fdb 	.word	0x40490fdb
 800721c:	33bbbd2e 	.word	0x33bbbd2e

08007220 <__ieee754_rem_pio2f>:
 8007220:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007222:	ee10 6a10 	vmov	r6, s0
 8007226:	4b86      	ldr	r3, [pc, #536]	; (8007440 <__ieee754_rem_pio2f+0x220>)
 8007228:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 800722c:	429c      	cmp	r4, r3
 800722e:	b087      	sub	sp, #28
 8007230:	4605      	mov	r5, r0
 8007232:	dc05      	bgt.n	8007240 <__ieee754_rem_pio2f+0x20>
 8007234:	2300      	movs	r3, #0
 8007236:	ed85 0a00 	vstr	s0, [r5]
 800723a:	6043      	str	r3, [r0, #4]
 800723c:	2000      	movs	r0, #0
 800723e:	e020      	b.n	8007282 <__ieee754_rem_pio2f+0x62>
 8007240:	4b80      	ldr	r3, [pc, #512]	; (8007444 <__ieee754_rem_pio2f+0x224>)
 8007242:	429c      	cmp	r4, r3
 8007244:	dc38      	bgt.n	80072b8 <__ieee754_rem_pio2f+0x98>
 8007246:	2e00      	cmp	r6, #0
 8007248:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8007448 <__ieee754_rem_pio2f+0x228>
 800724c:	4b7f      	ldr	r3, [pc, #508]	; (800744c <__ieee754_rem_pio2f+0x22c>)
 800724e:	f024 040f 	bic.w	r4, r4, #15
 8007252:	dd18      	ble.n	8007286 <__ieee754_rem_pio2f+0x66>
 8007254:	429c      	cmp	r4, r3
 8007256:	ee70 7a47 	vsub.f32	s15, s0, s14
 800725a:	bf09      	itett	eq
 800725c:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 8007450 <__ieee754_rem_pio2f+0x230>
 8007260:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 8007454 <__ieee754_rem_pio2f+0x234>
 8007264:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8007268:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 8007458 <__ieee754_rem_pio2f+0x238>
 800726c:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8007270:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007274:	edc0 6a00 	vstr	s13, [r0]
 8007278:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800727c:	edc0 7a01 	vstr	s15, [r0, #4]
 8007280:	2001      	movs	r0, #1
 8007282:	b007      	add	sp, #28
 8007284:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007286:	429c      	cmp	r4, r3
 8007288:	ee70 7a07 	vadd.f32	s15, s0, s14
 800728c:	bf09      	itett	eq
 800728e:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 8007450 <__ieee754_rem_pio2f+0x230>
 8007292:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 8007454 <__ieee754_rem_pio2f+0x234>
 8007296:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800729a:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 8007458 <__ieee754_rem_pio2f+0x238>
 800729e:	ee77 6a87 	vadd.f32	s13, s15, s14
 80072a2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80072a6:	edc0 6a00 	vstr	s13, [r0]
 80072aa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80072ae:	edc0 7a01 	vstr	s15, [r0, #4]
 80072b2:	f04f 30ff 	mov.w	r0, #4294967295
 80072b6:	e7e4      	b.n	8007282 <__ieee754_rem_pio2f+0x62>
 80072b8:	4b68      	ldr	r3, [pc, #416]	; (800745c <__ieee754_rem_pio2f+0x23c>)
 80072ba:	429c      	cmp	r4, r3
 80072bc:	dc71      	bgt.n	80073a2 <__ieee754_rem_pio2f+0x182>
 80072be:	f000 fcb1 	bl	8007c24 <fabsf>
 80072c2:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8007460 <__ieee754_rem_pio2f+0x240>
 80072c6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80072ca:	eee0 7a07 	vfma.f32	s15, s0, s14
 80072ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80072d2:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 80072d6:	ee17 0a90 	vmov	r0, s15
 80072da:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8007448 <__ieee754_rem_pio2f+0x228>
 80072de:	eeb1 7a46 	vneg.f32	s14, s12
 80072e2:	eea7 0a27 	vfma.f32	s0, s14, s15
 80072e6:	281f      	cmp	r0, #31
 80072e8:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8007454 <__ieee754_rem_pio2f+0x234>
 80072ec:	ee66 7a27 	vmul.f32	s15, s12, s15
 80072f0:	ee70 6a67 	vsub.f32	s13, s0, s15
 80072f4:	ee16 3a90 	vmov	r3, s13
 80072f8:	dc1c      	bgt.n	8007334 <__ieee754_rem_pio2f+0x114>
 80072fa:	1e47      	subs	r7, r0, #1
 80072fc:	4959      	ldr	r1, [pc, #356]	; (8007464 <__ieee754_rem_pio2f+0x244>)
 80072fe:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8007302:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 8007306:	428a      	cmp	r2, r1
 8007308:	d014      	beq.n	8007334 <__ieee754_rem_pio2f+0x114>
 800730a:	602b      	str	r3, [r5, #0]
 800730c:	ed95 7a00 	vldr	s14, [r5]
 8007310:	ee30 0a47 	vsub.f32	s0, s0, s14
 8007314:	2e00      	cmp	r6, #0
 8007316:	ee30 0a67 	vsub.f32	s0, s0, s15
 800731a:	ed85 0a01 	vstr	s0, [r5, #4]
 800731e:	dab0      	bge.n	8007282 <__ieee754_rem_pio2f+0x62>
 8007320:	eeb1 7a47 	vneg.f32	s14, s14
 8007324:	eeb1 0a40 	vneg.f32	s0, s0
 8007328:	ed85 7a00 	vstr	s14, [r5]
 800732c:	ed85 0a01 	vstr	s0, [r5, #4]
 8007330:	4240      	negs	r0, r0
 8007332:	e7a6      	b.n	8007282 <__ieee754_rem_pio2f+0x62>
 8007334:	15e4      	asrs	r4, r4, #23
 8007336:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800733a:	1aa2      	subs	r2, r4, r2
 800733c:	2a08      	cmp	r2, #8
 800733e:	dde4      	ble.n	800730a <__ieee754_rem_pio2f+0xea>
 8007340:	eddf 7a43 	vldr	s15, [pc, #268]	; 8007450 <__ieee754_rem_pio2f+0x230>
 8007344:	eef0 6a40 	vmov.f32	s13, s0
 8007348:	eee7 6a27 	vfma.f32	s13, s14, s15
 800734c:	ee30 0a66 	vsub.f32	s0, s0, s13
 8007350:	eea7 0a27 	vfma.f32	s0, s14, s15
 8007354:	eddf 7a40 	vldr	s15, [pc, #256]	; 8007458 <__ieee754_rem_pio2f+0x238>
 8007358:	ee96 0a27 	vfnms.f32	s0, s12, s15
 800735c:	ee76 5ac0 	vsub.f32	s11, s13, s0
 8007360:	eef0 7a40 	vmov.f32	s15, s0
 8007364:	ee15 3a90 	vmov	r3, s11
 8007368:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800736c:	1aa4      	subs	r4, r4, r2
 800736e:	2c19      	cmp	r4, #25
 8007370:	dc04      	bgt.n	800737c <__ieee754_rem_pio2f+0x15c>
 8007372:	edc5 5a00 	vstr	s11, [r5]
 8007376:	eeb0 0a66 	vmov.f32	s0, s13
 800737a:	e7c7      	b.n	800730c <__ieee754_rem_pio2f+0xec>
 800737c:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8007468 <__ieee754_rem_pio2f+0x248>
 8007380:	eeb0 0a66 	vmov.f32	s0, s13
 8007384:	eea7 0a25 	vfma.f32	s0, s14, s11
 8007388:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800738c:	eee7 7a25 	vfma.f32	s15, s14, s11
 8007390:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800746c <__ieee754_rem_pio2f+0x24c>
 8007394:	eed6 7a07 	vfnms.f32	s15, s12, s14
 8007398:	ee30 7a67 	vsub.f32	s14, s0, s15
 800739c:	ed85 7a00 	vstr	s14, [r5]
 80073a0:	e7b4      	b.n	800730c <__ieee754_rem_pio2f+0xec>
 80073a2:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80073a6:	db06      	blt.n	80073b6 <__ieee754_rem_pio2f+0x196>
 80073a8:	ee70 7a40 	vsub.f32	s15, s0, s0
 80073ac:	edc0 7a01 	vstr	s15, [r0, #4]
 80073b0:	edc0 7a00 	vstr	s15, [r0]
 80073b4:	e742      	b.n	800723c <__ieee754_rem_pio2f+0x1c>
 80073b6:	15e2      	asrs	r2, r4, #23
 80073b8:	3a86      	subs	r2, #134	; 0x86
 80073ba:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 80073be:	ee07 3a90 	vmov	s15, r3
 80073c2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80073c6:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8007470 <__ieee754_rem_pio2f+0x250>
 80073ca:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80073ce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80073d2:	ed8d 7a03 	vstr	s14, [sp, #12]
 80073d6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80073da:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80073de:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80073e2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80073e6:	ed8d 7a04 	vstr	s14, [sp, #16]
 80073ea:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80073ee:	eef5 7a40 	vcmp.f32	s15, #0.0
 80073f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073f6:	edcd 7a05 	vstr	s15, [sp, #20]
 80073fa:	d11e      	bne.n	800743a <__ieee754_rem_pio2f+0x21a>
 80073fc:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8007400:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007404:	bf14      	ite	ne
 8007406:	2302      	movne	r3, #2
 8007408:	2301      	moveq	r3, #1
 800740a:	491a      	ldr	r1, [pc, #104]	; (8007474 <__ieee754_rem_pio2f+0x254>)
 800740c:	9101      	str	r1, [sp, #4]
 800740e:	2102      	movs	r1, #2
 8007410:	9100      	str	r1, [sp, #0]
 8007412:	a803      	add	r0, sp, #12
 8007414:	4629      	mov	r1, r5
 8007416:	f000 f88d 	bl	8007534 <__kernel_rem_pio2f>
 800741a:	2e00      	cmp	r6, #0
 800741c:	f6bf af31 	bge.w	8007282 <__ieee754_rem_pio2f+0x62>
 8007420:	edd5 7a00 	vldr	s15, [r5]
 8007424:	eef1 7a67 	vneg.f32	s15, s15
 8007428:	edc5 7a00 	vstr	s15, [r5]
 800742c:	edd5 7a01 	vldr	s15, [r5, #4]
 8007430:	eef1 7a67 	vneg.f32	s15, s15
 8007434:	edc5 7a01 	vstr	s15, [r5, #4]
 8007438:	e77a      	b.n	8007330 <__ieee754_rem_pio2f+0x110>
 800743a:	2303      	movs	r3, #3
 800743c:	e7e5      	b.n	800740a <__ieee754_rem_pio2f+0x1ea>
 800743e:	bf00      	nop
 8007440:	3f490fd8 	.word	0x3f490fd8
 8007444:	4016cbe3 	.word	0x4016cbe3
 8007448:	3fc90f80 	.word	0x3fc90f80
 800744c:	3fc90fd0 	.word	0x3fc90fd0
 8007450:	37354400 	.word	0x37354400
 8007454:	37354443 	.word	0x37354443
 8007458:	2e85a308 	.word	0x2e85a308
 800745c:	43490f80 	.word	0x43490f80
 8007460:	3f22f984 	.word	0x3f22f984
 8007464:	080092c4 	.word	0x080092c4
 8007468:	2e85a300 	.word	0x2e85a300
 800746c:	248d3132 	.word	0x248d3132
 8007470:	43800000 	.word	0x43800000
 8007474:	08009344 	.word	0x08009344

08007478 <__kernel_cosf>:
 8007478:	ee10 3a10 	vmov	r3, s0
 800747c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007480:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8007484:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007488:	da05      	bge.n	8007496 <__kernel_cosf+0x1e>
 800748a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800748e:	ee17 2a90 	vmov	r2, s15
 8007492:	2a00      	cmp	r2, #0
 8007494:	d03b      	beq.n	800750e <__kernel_cosf+0x96>
 8007496:	ee20 7a00 	vmul.f32	s14, s0, s0
 800749a:	ed9f 6a1e 	vldr	s12, [pc, #120]	; 8007514 <__kernel_cosf+0x9c>
 800749e:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8007518 <__kernel_cosf+0xa0>
 80074a2:	eddf 5a1e 	vldr	s11, [pc, #120]	; 800751c <__kernel_cosf+0xa4>
 80074a6:	4a1e      	ldr	r2, [pc, #120]	; (8007520 <__kernel_cosf+0xa8>)
 80074a8:	eea7 6a27 	vfma.f32	s12, s14, s15
 80074ac:	4293      	cmp	r3, r2
 80074ae:	ee60 0a20 	vmul.f32	s1, s0, s1
 80074b2:	eee7 5a06 	vfma.f32	s11, s14, s12
 80074b6:	ed9f 6a1b 	vldr	s12, [pc, #108]	; 8007524 <__kernel_cosf+0xac>
 80074ba:	eea7 6a25 	vfma.f32	s12, s14, s11
 80074be:	eddf 5a1a 	vldr	s11, [pc, #104]	; 8007528 <__kernel_cosf+0xb0>
 80074c2:	eee7 5a06 	vfma.f32	s11, s14, s12
 80074c6:	ed9f 6a19 	vldr	s12, [pc, #100]	; 800752c <__kernel_cosf+0xb4>
 80074ca:	eea7 6a25 	vfma.f32	s12, s14, s11
 80074ce:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 80074d2:	ee26 6a07 	vmul.f32	s12, s12, s14
 80074d6:	dc06      	bgt.n	80074e6 <__kernel_cosf+0x6e>
 80074d8:	eed7 0a06 	vfnms.f32	s1, s14, s12
 80074dc:	eed7 0a25 	vfnms.f32	s1, s14, s11
 80074e0:	ee36 0ae0 	vsub.f32	s0, s13, s1
 80074e4:	4770      	bx	lr
 80074e6:	4a12      	ldr	r2, [pc, #72]	; (8007530 <__kernel_cosf+0xb8>)
 80074e8:	4293      	cmp	r3, r2
 80074ea:	bfda      	itte	le
 80074ec:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 80074f0:	ee07 3a90 	vmovle	s15, r3
 80074f4:	eef5 7a02 	vmovgt.f32	s15, #82	; 0x3e900000  0.2812500
 80074f8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80074fc:	eed7 0a06 	vfnms.f32	s1, s14, s12
 8007500:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8007504:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8007508:	ee36 0ae7 	vsub.f32	s0, s13, s15
 800750c:	4770      	bx	lr
 800750e:	eeb0 0a66 	vmov.f32	s0, s13
 8007512:	4770      	bx	lr
 8007514:	310f74f6 	.word	0x310f74f6
 8007518:	ad47d74e 	.word	0xad47d74e
 800751c:	b493f27c 	.word	0xb493f27c
 8007520:	3e999999 	.word	0x3e999999
 8007524:	37d00d01 	.word	0x37d00d01
 8007528:	bab60b61 	.word	0xbab60b61
 800752c:	3d2aaaab 	.word	0x3d2aaaab
 8007530:	3f480000 	.word	0x3f480000

08007534 <__kernel_rem_pio2f>:
 8007534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007538:	ed2d 8b04 	vpush	{d8-d9}
 800753c:	b0d7      	sub	sp, #348	; 0x15c
 800753e:	468b      	mov	fp, r1
 8007540:	9301      	str	r3, [sp, #4]
 8007542:	9964      	ldr	r1, [sp, #400]	; 0x190
 8007544:	4bcb      	ldr	r3, [pc, #812]	; (8007874 <__kernel_rem_pio2f+0x340>)
 8007546:	9002      	str	r0, [sp, #8]
 8007548:	f853 a021 	ldr.w	sl, [r3, r1, lsl #2]
 800754c:	9b01      	ldr	r3, [sp, #4]
 800754e:	9e65      	ldr	r6, [sp, #404]	; 0x194
 8007550:	ed9f 7acc 	vldr	s14, [pc, #816]	; 8007884 <__kernel_rem_pio2f+0x350>
 8007554:	3b01      	subs	r3, #1
 8007556:	1ed0      	subs	r0, r2, #3
 8007558:	2408      	movs	r4, #8
 800755a:	fb90 f0f4 	sdiv	r0, r0, r4
 800755e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8007562:	1c45      	adds	r5, r0, #1
 8007564:	1ac7      	subs	r7, r0, r3
 8007566:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 800756a:	eb0a 0e03 	add.w	lr, sl, r3
 800756e:	ac1a      	add	r4, sp, #104	; 0x68
 8007570:	eb06 0c87 	add.w	ip, r6, r7, lsl #2
 8007574:	2200      	movs	r2, #0
 8007576:	4572      	cmp	r2, lr
 8007578:	dd0f      	ble.n	800759a <__kernel_rem_pio2f+0x66>
 800757a:	f50d 7e84 	add.w	lr, sp, #264	; 0x108
 800757e:	2400      	movs	r4, #0
 8007580:	4554      	cmp	r4, sl
 8007582:	dc26      	bgt.n	80075d2 <__kernel_rem_pio2f+0x9e>
 8007584:	9a01      	ldr	r2, [sp, #4]
 8007586:	9f02      	ldr	r7, [sp, #8]
 8007588:	eddf 7abe 	vldr	s15, [pc, #760]	; 8007884 <__kernel_rem_pio2f+0x350>
 800758c:	4422      	add	r2, r4
 800758e:	a91a      	add	r1, sp, #104	; 0x68
 8007590:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8007594:	f04f 0c00 	mov.w	ip, #0
 8007598:	e015      	b.n	80075c6 <__kernel_rem_pio2f+0x92>
 800759a:	42d7      	cmn	r7, r2
 800759c:	bf5d      	ittte	pl
 800759e:	f85c 1022 	ldrpl.w	r1, [ip, r2, lsl #2]
 80075a2:	ee07 1a90 	vmovpl	s15, r1
 80075a6:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 80075aa:	eef0 7a47 	vmovmi.f32	s15, s14
 80075ae:	ece4 7a01 	vstmia	r4!, {s15}
 80075b2:	3201      	adds	r2, #1
 80075b4:	e7df      	b.n	8007576 <__kernel_rem_pio2f+0x42>
 80075b6:	ecf7 6a01 	vldmia	r7!, {s13}
 80075ba:	ed32 7a01 	vldmdb	r2!, {s14}
 80075be:	eee6 7a87 	vfma.f32	s15, s13, s14
 80075c2:	f10c 0c01 	add.w	ip, ip, #1
 80075c6:	459c      	cmp	ip, r3
 80075c8:	ddf5      	ble.n	80075b6 <__kernel_rem_pio2f+0x82>
 80075ca:	ecee 7a01 	vstmia	lr!, {s15}
 80075ce:	3401      	adds	r4, #1
 80075d0:	e7d6      	b.n	8007580 <__kernel_rem_pio2f+0x4c>
 80075d2:	aa06      	add	r2, sp, #24
 80075d4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80075d8:	9204      	str	r2, [sp, #16]
 80075da:	eddf 8aa7 	vldr	s17, [pc, #668]	; 8007878 <__kernel_rem_pio2f+0x344>
 80075de:	ed9f 9aa7 	vldr	s18, [pc, #668]	; 800787c <__kernel_rem_pio2f+0x348>
 80075e2:	eb06 0280 	add.w	r2, r6, r0, lsl #2
 80075e6:	9203      	str	r2, [sp, #12]
 80075e8:	4657      	mov	r7, sl
 80075ea:	aa56      	add	r2, sp, #344	; 0x158
 80075ec:	f107 4880 	add.w	r8, r7, #1073741824	; 0x40000000
 80075f0:	eb02 0287 	add.w	r2, r2, r7, lsl #2
 80075f4:	f108 38ff 	add.w	r8, r8, #4294967295
 80075f8:	ed12 0a14 	vldr	s0, [r2, #-80]	; 0xffffffb0
 80075fc:	ea4f 0888 	mov.w	r8, r8, lsl #2
 8007600:	aa56      	add	r2, sp, #344	; 0x158
 8007602:	eb02 0008 	add.w	r0, r2, r8
 8007606:	384c      	subs	r0, #76	; 0x4c
 8007608:	2200      	movs	r2, #0
 800760a:	1abc      	subs	r4, r7, r2
 800760c:	2c00      	cmp	r4, #0
 800760e:	dc4a      	bgt.n	80076a6 <__kernel_rem_pio2f+0x172>
 8007610:	4628      	mov	r0, r5
 8007612:	9305      	str	r3, [sp, #20]
 8007614:	f000 fb50 	bl	8007cb8 <scalbnf>
 8007618:	eeb0 8a40 	vmov.f32	s16, s0
 800761c:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8007620:	ee28 0a00 	vmul.f32	s0, s16, s0
 8007624:	f000 fb06 	bl	8007c34 <floorf>
 8007628:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800762c:	eea0 8a67 	vfms.f32	s16, s0, s15
 8007630:	2d00      	cmp	r5, #0
 8007632:	9b05      	ldr	r3, [sp, #20]
 8007634:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8007638:	ee17 9a90 	vmov	r9, s15
 800763c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007640:	ee38 8a67 	vsub.f32	s16, s16, s15
 8007644:	dd44      	ble.n	80076d0 <__kernel_rem_pio2f+0x19c>
 8007646:	1e78      	subs	r0, r7, #1
 8007648:	aa06      	add	r2, sp, #24
 800764a:	f1c5 0408 	rsb	r4, r5, #8
 800764e:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 8007652:	fa46 f204 	asr.w	r2, r6, r4
 8007656:	4491      	add	r9, r2
 8007658:	40a2      	lsls	r2, r4
 800765a:	1ab6      	subs	r6, r6, r2
 800765c:	aa06      	add	r2, sp, #24
 800765e:	f842 6020 	str.w	r6, [r2, r0, lsl #2]
 8007662:	f1c5 0207 	rsb	r2, r5, #7
 8007666:	4116      	asrs	r6, r2
 8007668:	2e00      	cmp	r6, #0
 800766a:	dd40      	ble.n	80076ee <__kernel_rem_pio2f+0x1ba>
 800766c:	2400      	movs	r4, #0
 800766e:	f109 0901 	add.w	r9, r9, #1
 8007672:	4620      	mov	r0, r4
 8007674:	42a7      	cmp	r7, r4
 8007676:	dc75      	bgt.n	8007764 <__kernel_rem_pio2f+0x230>
 8007678:	2d00      	cmp	r5, #0
 800767a:	dd05      	ble.n	8007688 <__kernel_rem_pio2f+0x154>
 800767c:	2d01      	cmp	r5, #1
 800767e:	f000 8086 	beq.w	800778e <__kernel_rem_pio2f+0x25a>
 8007682:	2d02      	cmp	r5, #2
 8007684:	f000 808d 	beq.w	80077a2 <__kernel_rem_pio2f+0x26e>
 8007688:	2e02      	cmp	r6, #2
 800768a:	d130      	bne.n	80076ee <__kernel_rem_pio2f+0x1ba>
 800768c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8007690:	ee30 8a48 	vsub.f32	s16, s0, s16
 8007694:	b358      	cbz	r0, 80076ee <__kernel_rem_pio2f+0x1ba>
 8007696:	4628      	mov	r0, r5
 8007698:	9305      	str	r3, [sp, #20]
 800769a:	f000 fb0d 	bl	8007cb8 <scalbnf>
 800769e:	9b05      	ldr	r3, [sp, #20]
 80076a0:	ee38 8a40 	vsub.f32	s16, s16, s0
 80076a4:	e023      	b.n	80076ee <__kernel_rem_pio2f+0x1ba>
 80076a6:	ee60 7a28 	vmul.f32	s15, s0, s17
 80076aa:	ac06      	add	r4, sp, #24
 80076ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80076b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80076b4:	eea7 0ac9 	vfms.f32	s0, s15, s18
 80076b8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80076bc:	ee10 1a10 	vmov	r1, s0
 80076c0:	ed30 0a01 	vldmdb	r0!, {s0}
 80076c4:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 80076c8:	ee37 0a80 	vadd.f32	s0, s15, s0
 80076cc:	3201      	adds	r2, #1
 80076ce:	e79c      	b.n	800760a <__kernel_rem_pio2f+0xd6>
 80076d0:	d105      	bne.n	80076de <__kernel_rem_pio2f+0x1aa>
 80076d2:	1e7a      	subs	r2, r7, #1
 80076d4:	a906      	add	r1, sp, #24
 80076d6:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 80076da:	1236      	asrs	r6, r6, #8
 80076dc:	e7c4      	b.n	8007668 <__kernel_rem_pio2f+0x134>
 80076de:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80076e2:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80076e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076ea:	da39      	bge.n	8007760 <__kernel_rem_pio2f+0x22c>
 80076ec:	2600      	movs	r6, #0
 80076ee:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80076f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076f6:	f040 808d 	bne.w	8007814 <__kernel_rem_pio2f+0x2e0>
 80076fa:	1e7c      	subs	r4, r7, #1
 80076fc:	4620      	mov	r0, r4
 80076fe:	2200      	movs	r2, #0
 8007700:	4550      	cmp	r0, sl
 8007702:	da55      	bge.n	80077b0 <__kernel_rem_pio2f+0x27c>
 8007704:	2a00      	cmp	r2, #0
 8007706:	d164      	bne.n	80077d2 <__kernel_rem_pio2f+0x29e>
 8007708:	2401      	movs	r4, #1
 800770a:	f06f 0003 	mvn.w	r0, #3
 800770e:	fb00 f204 	mul.w	r2, r0, r4
 8007712:	9904      	ldr	r1, [sp, #16]
 8007714:	588a      	ldr	r2, [r1, r2]
 8007716:	2a00      	cmp	r2, #0
 8007718:	d050      	beq.n	80077bc <__kernel_rem_pio2f+0x288>
 800771a:	aa56      	add	r2, sp, #344	; 0x158
 800771c:	4490      	add	r8, r2
 800771e:	9a01      	ldr	r2, [sp, #4]
 8007720:	a91a      	add	r1, sp, #104	; 0x68
 8007722:	443a      	add	r2, r7
 8007724:	1c78      	adds	r0, r7, #1
 8007726:	f1a8 0848 	sub.w	r8, r8, #72	; 0x48
 800772a:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800772e:	4427      	add	r7, r4
 8007730:	42b8      	cmp	r0, r7
 8007732:	f73f af5a 	bgt.w	80075ea <__kernel_rem_pio2f+0xb6>
 8007736:	9903      	ldr	r1, [sp, #12]
 8007738:	9e02      	ldr	r6, [sp, #8]
 800773a:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800773e:	9105      	str	r1, [sp, #20]
 8007740:	ee07 1a90 	vmov	s15, r1
 8007744:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007748:	2400      	movs	r4, #0
 800774a:	ece2 7a01 	vstmia	r2!, {s15}
 800774e:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8007884 <__kernel_rem_pio2f+0x350>
 8007752:	4696      	mov	lr, r2
 8007754:	429c      	cmp	r4, r3
 8007756:	dd33      	ble.n	80077c0 <__kernel_rem_pio2f+0x28c>
 8007758:	ece8 7a01 	vstmia	r8!, {s15}
 800775c:	3001      	adds	r0, #1
 800775e:	e7e7      	b.n	8007730 <__kernel_rem_pio2f+0x1fc>
 8007760:	2602      	movs	r6, #2
 8007762:	e783      	b.n	800766c <__kernel_rem_pio2f+0x138>
 8007764:	aa06      	add	r2, sp, #24
 8007766:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 800776a:	b948      	cbnz	r0, 8007780 <__kernel_rem_pio2f+0x24c>
 800776c:	b12a      	cbz	r2, 800777a <__kernel_rem_pio2f+0x246>
 800776e:	a906      	add	r1, sp, #24
 8007770:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8007774:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
 8007778:	2201      	movs	r2, #1
 800777a:	3401      	adds	r4, #1
 800777c:	4610      	mov	r0, r2
 800777e:	e779      	b.n	8007674 <__kernel_rem_pio2f+0x140>
 8007780:	a906      	add	r1, sp, #24
 8007782:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 8007786:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
 800778a:	4602      	mov	r2, r0
 800778c:	e7f5      	b.n	800777a <__kernel_rem_pio2f+0x246>
 800778e:	1e7c      	subs	r4, r7, #1
 8007790:	aa06      	add	r2, sp, #24
 8007792:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 8007796:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800779a:	a906      	add	r1, sp, #24
 800779c:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
 80077a0:	e772      	b.n	8007688 <__kernel_rem_pio2f+0x154>
 80077a2:	1e7c      	subs	r4, r7, #1
 80077a4:	aa06      	add	r2, sp, #24
 80077a6:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 80077aa:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80077ae:	e7f4      	b.n	800779a <__kernel_rem_pio2f+0x266>
 80077b0:	a906      	add	r1, sp, #24
 80077b2:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 80077b6:	3801      	subs	r0, #1
 80077b8:	430a      	orrs	r2, r1
 80077ba:	e7a1      	b.n	8007700 <__kernel_rem_pio2f+0x1cc>
 80077bc:	3401      	adds	r4, #1
 80077be:	e7a6      	b.n	800770e <__kernel_rem_pio2f+0x1da>
 80077c0:	ecf6 6a01 	vldmia	r6!, {s13}
 80077c4:	ed3e 7a01 	vldmdb	lr!, {s14}
 80077c8:	3401      	adds	r4, #1
 80077ca:	eee6 7a87 	vfma.f32	s15, s13, s14
 80077ce:	e7c1      	b.n	8007754 <__kernel_rem_pio2f+0x220>
 80077d0:	3c01      	subs	r4, #1
 80077d2:	ab06      	add	r3, sp, #24
 80077d4:	3d08      	subs	r5, #8
 80077d6:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d0f8      	beq.n	80077d0 <__kernel_rem_pio2f+0x29c>
 80077de:	4628      	mov	r0, r5
 80077e0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80077e4:	f000 fa68 	bl	8007cb8 <scalbnf>
 80077e8:	00a3      	lsls	r3, r4, #2
 80077ea:	aa42      	add	r2, sp, #264	; 0x108
 80077ec:	3304      	adds	r3, #4
 80077ee:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8007878 <__kernel_rem_pio2f+0x344>
 80077f2:	18d0      	adds	r0, r2, r3
 80077f4:	4622      	mov	r2, r4
 80077f6:	2a00      	cmp	r2, #0
 80077f8:	da46      	bge.n	8007888 <__kernel_rem_pio2f+0x354>
 80077fa:	f10d 0eb8 	add.w	lr, sp, #184	; 0xb8
 80077fe:	2200      	movs	r2, #0
 8007800:	1aa5      	subs	r5, r4, r2
 8007802:	d460      	bmi.n	80078c6 <__kernel_rem_pio2f+0x392>
 8007804:	a942      	add	r1, sp, #264	; 0x108
 8007806:	4f1e      	ldr	r7, [pc, #120]	; (8007880 <__kernel_rem_pio2f+0x34c>)
 8007808:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8007884 <__kernel_rem_pio2f+0x350>
 800780c:	eb01 0585 	add.w	r5, r1, r5, lsl #2
 8007810:	2000      	movs	r0, #0
 8007812:	e050      	b.n	80078b6 <__kernel_rem_pio2f+0x382>
 8007814:	4268      	negs	r0, r5
 8007816:	eeb0 0a48 	vmov.f32	s0, s16
 800781a:	f000 fa4d 	bl	8007cb8 <scalbnf>
 800781e:	ed9f 7a17 	vldr	s14, [pc, #92]	; 800787c <__kernel_rem_pio2f+0x348>
 8007822:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8007826:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800782a:	db19      	blt.n	8007860 <__kernel_rem_pio2f+0x32c>
 800782c:	eddf 7a12 	vldr	s15, [pc, #72]	; 8007878 <__kernel_rem_pio2f+0x344>
 8007830:	ee60 7a27 	vmul.f32	s15, s0, s15
 8007834:	aa06      	add	r2, sp, #24
 8007836:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800783a:	1c7c      	adds	r4, r7, #1
 800783c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007840:	3508      	adds	r5, #8
 8007842:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8007846:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800784a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800784e:	ee10 3a10 	vmov	r3, s0
 8007852:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
 8007856:	ee17 3a90 	vmov	r3, s15
 800785a:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800785e:	e7be      	b.n	80077de <__kernel_rem_pio2f+0x2aa>
 8007860:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8007864:	aa06      	add	r2, sp, #24
 8007866:	ee10 3a10 	vmov	r3, s0
 800786a:	463c      	mov	r4, r7
 800786c:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
 8007870:	e7b5      	b.n	80077de <__kernel_rem_pio2f+0x2aa>
 8007872:	bf00      	nop
 8007874:	08009688 	.word	0x08009688
 8007878:	3b800000 	.word	0x3b800000
 800787c:	43800000 	.word	0x43800000
 8007880:	0800965c 	.word	0x0800965c
 8007884:	00000000 	.word	0x00000000
 8007888:	a906      	add	r1, sp, #24
 800788a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800788e:	9101      	str	r1, [sp, #4]
 8007890:	ee07 1a90 	vmov	s15, r1
 8007894:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007898:	3a01      	subs	r2, #1
 800789a:	ee67 7a80 	vmul.f32	s15, s15, s0
 800789e:	ee20 0a07 	vmul.f32	s0, s0, s14
 80078a2:	ed60 7a01 	vstmdb	r0!, {s15}
 80078a6:	e7a6      	b.n	80077f6 <__kernel_rem_pio2f+0x2c2>
 80078a8:	ecf7 6a01 	vldmia	r7!, {s13}
 80078ac:	ecb5 7a01 	vldmia	r5!, {s14}
 80078b0:	eee6 7a87 	vfma.f32	s15, s13, s14
 80078b4:	3001      	adds	r0, #1
 80078b6:	4550      	cmp	r0, sl
 80078b8:	dc01      	bgt.n	80078be <__kernel_rem_pio2f+0x38a>
 80078ba:	4290      	cmp	r0, r2
 80078bc:	ddf4      	ble.n	80078a8 <__kernel_rem_pio2f+0x374>
 80078be:	ecee 7a01 	vstmia	lr!, {s15}
 80078c2:	3201      	adds	r2, #1
 80078c4:	e79c      	b.n	8007800 <__kernel_rem_pio2f+0x2cc>
 80078c6:	9a64      	ldr	r2, [sp, #400]	; 0x190
 80078c8:	2a03      	cmp	r2, #3
 80078ca:	d843      	bhi.n	8007954 <__kernel_rem_pio2f+0x420>
 80078cc:	e8df f002 	tbb	[pc, r2]
 80078d0:	021d1d37 	.word	0x021d1d37
 80078d4:	aa2e      	add	r2, sp, #184	; 0xb8
 80078d6:	4413      	add	r3, r2
 80078d8:	461a      	mov	r2, r3
 80078da:	4620      	mov	r0, r4
 80078dc:	2800      	cmp	r0, #0
 80078de:	dc55      	bgt.n	800798c <__kernel_rem_pio2f+0x458>
 80078e0:	461a      	mov	r2, r3
 80078e2:	4620      	mov	r0, r4
 80078e4:	2801      	cmp	r0, #1
 80078e6:	dc61      	bgt.n	80079ac <__kernel_rem_pio2f+0x478>
 80078e8:	ed5f 7a1a 	vldr	s15, [pc, #-104]	; 8007884 <__kernel_rem_pio2f+0x350>
 80078ec:	2c01      	cmp	r4, #1
 80078ee:	dc6d      	bgt.n	80079cc <__kernel_rem_pio2f+0x498>
 80078f0:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 80078f4:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 80078f8:	2e00      	cmp	r6, #0
 80078fa:	d16d      	bne.n	80079d8 <__kernel_rem_pio2f+0x4a4>
 80078fc:	edcb 6a00 	vstr	s13, [fp]
 8007900:	ed8b 7a01 	vstr	s14, [fp, #4]
 8007904:	edcb 7a02 	vstr	s15, [fp, #8]
 8007908:	e024      	b.n	8007954 <__kernel_rem_pio2f+0x420>
 800790a:	aa2e      	add	r2, sp, #184	; 0xb8
 800790c:	ed1f 7a23 	vldr	s14, [pc, #-140]	; 8007884 <__kernel_rem_pio2f+0x350>
 8007910:	4413      	add	r3, r2
 8007912:	4622      	mov	r2, r4
 8007914:	2a00      	cmp	r2, #0
 8007916:	da2a      	bge.n	800796e <__kernel_rem_pio2f+0x43a>
 8007918:	b37e      	cbz	r6, 800797a <__kernel_rem_pio2f+0x446>
 800791a:	eef1 7a47 	vneg.f32	s15, s14
 800791e:	edcb 7a00 	vstr	s15, [fp]
 8007922:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 8007926:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800792a:	aa2f      	add	r2, sp, #188	; 0xbc
 800792c:	2301      	movs	r3, #1
 800792e:	429c      	cmp	r4, r3
 8007930:	da26      	bge.n	8007980 <__kernel_rem_pio2f+0x44c>
 8007932:	b10e      	cbz	r6, 8007938 <__kernel_rem_pio2f+0x404>
 8007934:	eef1 7a67 	vneg.f32	s15, s15
 8007938:	edcb 7a01 	vstr	s15, [fp, #4]
 800793c:	e00a      	b.n	8007954 <__kernel_rem_pio2f+0x420>
 800793e:	aa2e      	add	r2, sp, #184	; 0xb8
 8007940:	ed5f 7a30 	vldr	s15, [pc, #-192]	; 8007884 <__kernel_rem_pio2f+0x350>
 8007944:	4413      	add	r3, r2
 8007946:	2c00      	cmp	r4, #0
 8007948:	da0b      	bge.n	8007962 <__kernel_rem_pio2f+0x42e>
 800794a:	b10e      	cbz	r6, 8007950 <__kernel_rem_pio2f+0x41c>
 800794c:	eef1 7a67 	vneg.f32	s15, s15
 8007950:	edcb 7a00 	vstr	s15, [fp]
 8007954:	f009 0007 	and.w	r0, r9, #7
 8007958:	b057      	add	sp, #348	; 0x15c
 800795a:	ecbd 8b04 	vpop	{d8-d9}
 800795e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007962:	ed33 7a01 	vldmdb	r3!, {s14}
 8007966:	3c01      	subs	r4, #1
 8007968:	ee77 7a87 	vadd.f32	s15, s15, s14
 800796c:	e7eb      	b.n	8007946 <__kernel_rem_pio2f+0x412>
 800796e:	ed73 7a01 	vldmdb	r3!, {s15}
 8007972:	3a01      	subs	r2, #1
 8007974:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007978:	e7cc      	b.n	8007914 <__kernel_rem_pio2f+0x3e0>
 800797a:	eef0 7a47 	vmov.f32	s15, s14
 800797e:	e7ce      	b.n	800791e <__kernel_rem_pio2f+0x3ea>
 8007980:	ecb2 7a01 	vldmia	r2!, {s14}
 8007984:	3301      	adds	r3, #1
 8007986:	ee77 7a87 	vadd.f32	s15, s15, s14
 800798a:	e7d0      	b.n	800792e <__kernel_rem_pio2f+0x3fa>
 800798c:	ed52 6a01 	vldr	s13, [r2, #-4]
 8007990:	ed52 7a02 	vldr	s15, [r2, #-8]
 8007994:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8007998:	3801      	subs	r0, #1
 800799a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800799e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079a2:	ed62 7a01 	vstmdb	r2!, {s15}
 80079a6:	ed02 7a01 	vstr	s14, [r2, #-4]
 80079aa:	e797      	b.n	80078dc <__kernel_rem_pio2f+0x3a8>
 80079ac:	ed52 6a01 	vldr	s13, [r2, #-4]
 80079b0:	ed52 7a02 	vldr	s15, [r2, #-8]
 80079b4:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80079b8:	3801      	subs	r0, #1
 80079ba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80079be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079c2:	ed62 7a01 	vstmdb	r2!, {s15}
 80079c6:	ed02 7a01 	vstr	s14, [r2, #-4]
 80079ca:	e78b      	b.n	80078e4 <__kernel_rem_pio2f+0x3b0>
 80079cc:	ed33 7a01 	vldmdb	r3!, {s14}
 80079d0:	3c01      	subs	r4, #1
 80079d2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80079d6:	e789      	b.n	80078ec <__kernel_rem_pio2f+0x3b8>
 80079d8:	eef1 6a66 	vneg.f32	s13, s13
 80079dc:	eeb1 7a47 	vneg.f32	s14, s14
 80079e0:	edcb 6a00 	vstr	s13, [fp]
 80079e4:	ed8b 7a01 	vstr	s14, [fp, #4]
 80079e8:	eef1 7a67 	vneg.f32	s15, s15
 80079ec:	e78a      	b.n	8007904 <__kernel_rem_pio2f+0x3d0>
 80079ee:	bf00      	nop

080079f0 <__kernel_sinf>:
 80079f0:	ee10 3a10 	vmov	r3, s0
 80079f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80079f8:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80079fc:	da04      	bge.n	8007a08 <__kernel_sinf+0x18>
 80079fe:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8007a02:	ee17 3a90 	vmov	r3, s15
 8007a06:	b35b      	cbz	r3, 8007a60 <__kernel_sinf+0x70>
 8007a08:	ee20 7a00 	vmul.f32	s14, s0, s0
 8007a0c:	eddf 7a15 	vldr	s15, [pc, #84]	; 8007a64 <__kernel_sinf+0x74>
 8007a10:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8007a68 <__kernel_sinf+0x78>
 8007a14:	eea7 6a27 	vfma.f32	s12, s14, s15
 8007a18:	eddf 7a14 	vldr	s15, [pc, #80]	; 8007a6c <__kernel_sinf+0x7c>
 8007a1c:	eee7 7a06 	vfma.f32	s15, s14, s12
 8007a20:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8007a70 <__kernel_sinf+0x80>
 8007a24:	eea7 6a27 	vfma.f32	s12, s14, s15
 8007a28:	eddf 7a12 	vldr	s15, [pc, #72]	; 8007a74 <__kernel_sinf+0x84>
 8007a2c:	ee60 6a07 	vmul.f32	s13, s0, s14
 8007a30:	eee7 7a06 	vfma.f32	s15, s14, s12
 8007a34:	b930      	cbnz	r0, 8007a44 <__kernel_sinf+0x54>
 8007a36:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8007a78 <__kernel_sinf+0x88>
 8007a3a:	eea7 6a27 	vfma.f32	s12, s14, s15
 8007a3e:	eea6 0a86 	vfma.f32	s0, s13, s12
 8007a42:	4770      	bx	lr
 8007a44:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8007a48:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8007a4c:	eee0 7a86 	vfma.f32	s15, s1, s12
 8007a50:	eed7 0a27 	vfnms.f32	s1, s14, s15
 8007a54:	eddf 7a09 	vldr	s15, [pc, #36]	; 8007a7c <__kernel_sinf+0x8c>
 8007a58:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8007a5c:	ee30 0a60 	vsub.f32	s0, s0, s1
 8007a60:	4770      	bx	lr
 8007a62:	bf00      	nop
 8007a64:	2f2ec9d3 	.word	0x2f2ec9d3
 8007a68:	b2d72f34 	.word	0xb2d72f34
 8007a6c:	3638ef1b 	.word	0x3638ef1b
 8007a70:	b9500d01 	.word	0xb9500d01
 8007a74:	3c088889 	.word	0x3c088889
 8007a78:	be2aaaab 	.word	0xbe2aaaab
 8007a7c:	3e2aaaab 	.word	0x3e2aaaab

08007a80 <atanf>:
 8007a80:	b538      	push	{r3, r4, r5, lr}
 8007a82:	ee10 5a10 	vmov	r5, s0
 8007a86:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8007a8a:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8007a8e:	eef0 7a40 	vmov.f32	s15, s0
 8007a92:	db10      	blt.n	8007ab6 <atanf+0x36>
 8007a94:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8007a98:	dd04      	ble.n	8007aa4 <atanf+0x24>
 8007a9a:	ee70 7a00 	vadd.f32	s15, s0, s0
 8007a9e:	eeb0 0a67 	vmov.f32	s0, s15
 8007aa2:	bd38      	pop	{r3, r4, r5, pc}
 8007aa4:	eddf 7a4c 	vldr	s15, [pc, #304]	; 8007bd8 <atanf+0x158>
 8007aa8:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8007bdc <atanf+0x15c>
 8007aac:	2d00      	cmp	r5, #0
 8007aae:	bfc8      	it	gt
 8007ab0:	eef0 7a47 	vmovgt.f32	s15, s14
 8007ab4:	e7f3      	b.n	8007a9e <atanf+0x1e>
 8007ab6:	4b4a      	ldr	r3, [pc, #296]	; (8007be0 <atanf+0x160>)
 8007ab8:	429c      	cmp	r4, r3
 8007aba:	dc10      	bgt.n	8007ade <atanf+0x5e>
 8007abc:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8007ac0:	da0a      	bge.n	8007ad8 <atanf+0x58>
 8007ac2:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8007be4 <atanf+0x164>
 8007ac6:	ee30 7a07 	vadd.f32	s14, s0, s14
 8007aca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ace:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8007ad2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ad6:	dce2      	bgt.n	8007a9e <atanf+0x1e>
 8007ad8:	f04f 33ff 	mov.w	r3, #4294967295
 8007adc:	e013      	b.n	8007b06 <atanf+0x86>
 8007ade:	f000 f8a1 	bl	8007c24 <fabsf>
 8007ae2:	4b41      	ldr	r3, [pc, #260]	; (8007be8 <atanf+0x168>)
 8007ae4:	429c      	cmp	r4, r3
 8007ae6:	dc4d      	bgt.n	8007b84 <atanf+0x104>
 8007ae8:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8007aec:	429c      	cmp	r4, r3
 8007aee:	dc3f      	bgt.n	8007b70 <atanf+0xf0>
 8007af0:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8007af4:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8007af8:	eea0 7a27 	vfma.f32	s14, s0, s15
 8007afc:	2300      	movs	r3, #0
 8007afe:	ee30 0a27 	vadd.f32	s0, s0, s15
 8007b02:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8007b06:	1c5a      	adds	r2, r3, #1
 8007b08:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8007b0c:	eddf 6a37 	vldr	s13, [pc, #220]	; 8007bec <atanf+0x16c>
 8007b10:	eddf 5a37 	vldr	s11, [pc, #220]	; 8007bf0 <atanf+0x170>
 8007b14:	ed9f 5a37 	vldr	s10, [pc, #220]	; 8007bf4 <atanf+0x174>
 8007b18:	ee26 7a06 	vmul.f32	s14, s12, s12
 8007b1c:	eee7 5a26 	vfma.f32	s11, s14, s13
 8007b20:	eddf 6a35 	vldr	s13, [pc, #212]	; 8007bf8 <atanf+0x178>
 8007b24:	eee7 6a25 	vfma.f32	s13, s14, s11
 8007b28:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007bfc <atanf+0x17c>
 8007b2c:	eee7 5a26 	vfma.f32	s11, s14, s13
 8007b30:	eddf 6a33 	vldr	s13, [pc, #204]	; 8007c00 <atanf+0x180>
 8007b34:	eee7 6a25 	vfma.f32	s13, s14, s11
 8007b38:	eddf 5a32 	vldr	s11, [pc, #200]	; 8007c04 <atanf+0x184>
 8007b3c:	eee7 5a26 	vfma.f32	s11, s14, s13
 8007b40:	eddf 6a31 	vldr	s13, [pc, #196]	; 8007c08 <atanf+0x188>
 8007b44:	eea7 5a26 	vfma.f32	s10, s14, s13
 8007b48:	eddf 6a30 	vldr	s13, [pc, #192]	; 8007c0c <atanf+0x18c>
 8007b4c:	eee7 6a05 	vfma.f32	s13, s14, s10
 8007b50:	ed9f 5a2f 	vldr	s10, [pc, #188]	; 8007c10 <atanf+0x190>
 8007b54:	eea7 5a26 	vfma.f32	s10, s14, s13
 8007b58:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8007c14 <atanf+0x194>
 8007b5c:	eee7 6a05 	vfma.f32	s13, s14, s10
 8007b60:	ee26 7a87 	vmul.f32	s14, s13, s14
 8007b64:	ee05 7a86 	vmla.f32	s14, s11, s12
 8007b68:	d121      	bne.n	8007bae <atanf+0x12e>
 8007b6a:	eee7 7ac7 	vfms.f32	s15, s15, s14
 8007b6e:	e796      	b.n	8007a9e <atanf+0x1e>
 8007b70:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8007b74:	ee30 7a67 	vsub.f32	s14, s0, s15
 8007b78:	ee30 0a27 	vadd.f32	s0, s0, s15
 8007b7c:	2301      	movs	r3, #1
 8007b7e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8007b82:	e7c0      	b.n	8007b06 <atanf+0x86>
 8007b84:	4b24      	ldr	r3, [pc, #144]	; (8007c18 <atanf+0x198>)
 8007b86:	429c      	cmp	r4, r3
 8007b88:	dc0b      	bgt.n	8007ba2 <atanf+0x122>
 8007b8a:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8007b8e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007b92:	eea0 7a27 	vfma.f32	s14, s0, s15
 8007b96:	2302      	movs	r3, #2
 8007b98:	ee70 6a67 	vsub.f32	s13, s0, s15
 8007b9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007ba0:	e7b1      	b.n	8007b06 <atanf+0x86>
 8007ba2:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8007ba6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8007baa:	2303      	movs	r3, #3
 8007bac:	e7ab      	b.n	8007b06 <atanf+0x86>
 8007bae:	4a1b      	ldr	r2, [pc, #108]	; (8007c1c <atanf+0x19c>)
 8007bb0:	491b      	ldr	r1, [pc, #108]	; (8007c20 <atanf+0x1a0>)
 8007bb2:	009b      	lsls	r3, r3, #2
 8007bb4:	441a      	add	r2, r3
 8007bb6:	440b      	add	r3, r1
 8007bb8:	edd3 6a00 	vldr	s13, [r3]
 8007bbc:	eed7 6a87 	vfnms.f32	s13, s15, s14
 8007bc0:	2d00      	cmp	r5, #0
 8007bc2:	ed92 7a00 	vldr	s14, [r2]
 8007bc6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8007bca:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007bce:	bfb8      	it	lt
 8007bd0:	eef1 7a67 	vneglt.f32	s15, s15
 8007bd4:	e763      	b.n	8007a9e <atanf+0x1e>
 8007bd6:	bf00      	nop
 8007bd8:	bfc90fdb 	.word	0xbfc90fdb
 8007bdc:	3fc90fdb 	.word	0x3fc90fdb
 8007be0:	3edfffff 	.word	0x3edfffff
 8007be4:	7149f2ca 	.word	0x7149f2ca
 8007be8:	3f97ffff 	.word	0x3f97ffff
 8007bec:	3c8569d7 	.word	0x3c8569d7
 8007bf0:	3d4bda59 	.word	0x3d4bda59
 8007bf4:	bd6ef16b 	.word	0xbd6ef16b
 8007bf8:	3d886b35 	.word	0x3d886b35
 8007bfc:	3dba2e6e 	.word	0x3dba2e6e
 8007c00:	3e124925 	.word	0x3e124925
 8007c04:	3eaaaaab 	.word	0x3eaaaaab
 8007c08:	bd15a221 	.word	0xbd15a221
 8007c0c:	bd9d8795 	.word	0xbd9d8795
 8007c10:	bde38e38 	.word	0xbde38e38
 8007c14:	be4ccccd 	.word	0xbe4ccccd
 8007c18:	401bffff 	.word	0x401bffff
 8007c1c:	08009694 	.word	0x08009694
 8007c20:	080096a4 	.word	0x080096a4

08007c24 <fabsf>:
 8007c24:	ee10 3a10 	vmov	r3, s0
 8007c28:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007c2c:	ee00 3a10 	vmov	s0, r3
 8007c30:	4770      	bx	lr
	...

08007c34 <floorf>:
 8007c34:	ee10 3a10 	vmov	r3, s0
 8007c38:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007c3c:	0dca      	lsrs	r2, r1, #23
 8007c3e:	3a7f      	subs	r2, #127	; 0x7f
 8007c40:	2a16      	cmp	r2, #22
 8007c42:	dc2a      	bgt.n	8007c9a <floorf+0x66>
 8007c44:	2a00      	cmp	r2, #0
 8007c46:	da11      	bge.n	8007c6c <floorf+0x38>
 8007c48:	eddf 7a18 	vldr	s15, [pc, #96]	; 8007cac <floorf+0x78>
 8007c4c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8007c50:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8007c54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c58:	dd05      	ble.n	8007c66 <floorf+0x32>
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	da23      	bge.n	8007ca6 <floorf+0x72>
 8007c5e:	4a14      	ldr	r2, [pc, #80]	; (8007cb0 <floorf+0x7c>)
 8007c60:	2900      	cmp	r1, #0
 8007c62:	bf18      	it	ne
 8007c64:	4613      	movne	r3, r2
 8007c66:	ee00 3a10 	vmov	s0, r3
 8007c6a:	4770      	bx	lr
 8007c6c:	4911      	ldr	r1, [pc, #68]	; (8007cb4 <floorf+0x80>)
 8007c6e:	4111      	asrs	r1, r2
 8007c70:	420b      	tst	r3, r1
 8007c72:	d0fa      	beq.n	8007c6a <floorf+0x36>
 8007c74:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8007cac <floorf+0x78>
 8007c78:	ee30 0a27 	vadd.f32	s0, s0, s15
 8007c7c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8007c80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c84:	ddef      	ble.n	8007c66 <floorf+0x32>
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	bfbe      	ittt	lt
 8007c8a:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8007c8e:	fa40 f202 	asrlt.w	r2, r0, r2
 8007c92:	189b      	addlt	r3, r3, r2
 8007c94:	ea23 0301 	bic.w	r3, r3, r1
 8007c98:	e7e5      	b.n	8007c66 <floorf+0x32>
 8007c9a:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8007c9e:	d3e4      	bcc.n	8007c6a <floorf+0x36>
 8007ca0:	ee30 0a00 	vadd.f32	s0, s0, s0
 8007ca4:	4770      	bx	lr
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	e7dd      	b.n	8007c66 <floorf+0x32>
 8007caa:	bf00      	nop
 8007cac:	7149f2ca 	.word	0x7149f2ca
 8007cb0:	bf800000 	.word	0xbf800000
 8007cb4:	007fffff 	.word	0x007fffff

08007cb8 <scalbnf>:
 8007cb8:	b508      	push	{r3, lr}
 8007cba:	ee10 2a10 	vmov	r2, s0
 8007cbe:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 8007cc2:	ed2d 8b02 	vpush	{d8}
 8007cc6:	eef0 0a40 	vmov.f32	s1, s0
 8007cca:	d004      	beq.n	8007cd6 <scalbnf+0x1e>
 8007ccc:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8007cd0:	d306      	bcc.n	8007ce0 <scalbnf+0x28>
 8007cd2:	ee70 0a00 	vadd.f32	s1, s0, s0
 8007cd6:	ecbd 8b02 	vpop	{d8}
 8007cda:	eeb0 0a60 	vmov.f32	s0, s1
 8007cde:	bd08      	pop	{r3, pc}
 8007ce0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007ce4:	d21c      	bcs.n	8007d20 <scalbnf+0x68>
 8007ce6:	4b1f      	ldr	r3, [pc, #124]	; (8007d64 <scalbnf+0xac>)
 8007ce8:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8007d68 <scalbnf+0xb0>
 8007cec:	4298      	cmp	r0, r3
 8007cee:	ee60 0a27 	vmul.f32	s1, s0, s15
 8007cf2:	db10      	blt.n	8007d16 <scalbnf+0x5e>
 8007cf4:	ee10 2a90 	vmov	r2, s1
 8007cf8:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 8007cfc:	3b19      	subs	r3, #25
 8007cfe:	4403      	add	r3, r0
 8007d00:	2bfe      	cmp	r3, #254	; 0xfe
 8007d02:	dd0f      	ble.n	8007d24 <scalbnf+0x6c>
 8007d04:	ed9f 8a19 	vldr	s16, [pc, #100]	; 8007d6c <scalbnf+0xb4>
 8007d08:	eeb0 0a48 	vmov.f32	s0, s16
 8007d0c:	f000 f834 	bl	8007d78 <copysignf>
 8007d10:	ee60 0a08 	vmul.f32	s1, s0, s16
 8007d14:	e7df      	b.n	8007cd6 <scalbnf+0x1e>
 8007d16:	eddf 7a16 	vldr	s15, [pc, #88]	; 8007d70 <scalbnf+0xb8>
 8007d1a:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8007d1e:	e7da      	b.n	8007cd6 <scalbnf+0x1e>
 8007d20:	0ddb      	lsrs	r3, r3, #23
 8007d22:	e7ec      	b.n	8007cfe <scalbnf+0x46>
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	dd06      	ble.n	8007d36 <scalbnf+0x7e>
 8007d28:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8007d2c:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8007d30:	ee00 3a90 	vmov	s1, r3
 8007d34:	e7cf      	b.n	8007cd6 <scalbnf+0x1e>
 8007d36:	f113 0f16 	cmn.w	r3, #22
 8007d3a:	da06      	bge.n	8007d4a <scalbnf+0x92>
 8007d3c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007d40:	4298      	cmp	r0, r3
 8007d42:	dcdf      	bgt.n	8007d04 <scalbnf+0x4c>
 8007d44:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 8007d70 <scalbnf+0xb8>
 8007d48:	e7de      	b.n	8007d08 <scalbnf+0x50>
 8007d4a:	3319      	adds	r3, #25
 8007d4c:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8007d50:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8007d54:	eddf 7a07 	vldr	s15, [pc, #28]	; 8007d74 <scalbnf+0xbc>
 8007d58:	ee07 3a10 	vmov	s14, r3
 8007d5c:	ee67 0a27 	vmul.f32	s1, s14, s15
 8007d60:	e7b9      	b.n	8007cd6 <scalbnf+0x1e>
 8007d62:	bf00      	nop
 8007d64:	ffff3cb0 	.word	0xffff3cb0
 8007d68:	4c000000 	.word	0x4c000000
 8007d6c:	7149f2ca 	.word	0x7149f2ca
 8007d70:	0da24260 	.word	0x0da24260
 8007d74:	33000000 	.word	0x33000000

08007d78 <copysignf>:
 8007d78:	ee10 3a10 	vmov	r3, s0
 8007d7c:	ee10 2a90 	vmov	r2, s1
 8007d80:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007d84:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8007d88:	4313      	orrs	r3, r2
 8007d8a:	ee00 3a10 	vmov	s0, r3
 8007d8e:	4770      	bx	lr

08007d90 <abort>:
 8007d90:	b508      	push	{r3, lr}
 8007d92:	2006      	movs	r0, #6
 8007d94:	f000 fc24 	bl	80085e0 <raise>
 8007d98:	2001      	movs	r0, #1
 8007d9a:	f000 fe01 	bl	80089a0 <_exit>

08007d9e <__cxa_atexit>:
 8007d9e:	4613      	mov	r3, r2
 8007da0:	460a      	mov	r2, r1
 8007da2:	4601      	mov	r1, r0
 8007da4:	2002      	movs	r0, #2
 8007da6:	f000 bc37 	b.w	8008618 <__register_exitproc>
	...

08007dac <__libc_init_array>:
 8007dac:	b570      	push	{r4, r5, r6, lr}
 8007dae:	4e0d      	ldr	r6, [pc, #52]	; (8007de4 <__libc_init_array+0x38>)
 8007db0:	4c0d      	ldr	r4, [pc, #52]	; (8007de8 <__libc_init_array+0x3c>)
 8007db2:	1ba4      	subs	r4, r4, r6
 8007db4:	10a4      	asrs	r4, r4, #2
 8007db6:	2500      	movs	r5, #0
 8007db8:	42a5      	cmp	r5, r4
 8007dba:	d109      	bne.n	8007dd0 <__libc_init_array+0x24>
 8007dbc:	4e0b      	ldr	r6, [pc, #44]	; (8007dec <__libc_init_array+0x40>)
 8007dbe:	4c0c      	ldr	r4, [pc, #48]	; (8007df0 <__libc_init_array+0x44>)
 8007dc0:	f000 fdf0 	bl	80089a4 <_init>
 8007dc4:	1ba4      	subs	r4, r4, r6
 8007dc6:	10a4      	asrs	r4, r4, #2
 8007dc8:	2500      	movs	r5, #0
 8007dca:	42a5      	cmp	r5, r4
 8007dcc:	d105      	bne.n	8007dda <__libc_init_array+0x2e>
 8007dce:	bd70      	pop	{r4, r5, r6, pc}
 8007dd0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007dd4:	4798      	blx	r3
 8007dd6:	3501      	adds	r5, #1
 8007dd8:	e7ee      	b.n	8007db8 <__libc_init_array+0xc>
 8007dda:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007dde:	4798      	blx	r3
 8007de0:	3501      	adds	r5, #1
 8007de2:	e7f2      	b.n	8007dca <__libc_init_array+0x1e>
 8007de4:	08009b4c 	.word	0x08009b4c
 8007de8:	08009b4c 	.word	0x08009b4c
 8007dec:	08009b4c 	.word	0x08009b4c
 8007df0:	08009b54 	.word	0x08009b54

08007df4 <malloc>:
 8007df4:	4b02      	ldr	r3, [pc, #8]	; (8007e00 <malloc+0xc>)
 8007df6:	4601      	mov	r1, r0
 8007df8:	6818      	ldr	r0, [r3, #0]
 8007dfa:	f000 b80b 	b.w	8007e14 <_malloc_r>
 8007dfe:	bf00      	nop
 8007e00:	20000010 	.word	0x20000010

08007e04 <free>:
 8007e04:	4b02      	ldr	r3, [pc, #8]	; (8007e10 <free+0xc>)
 8007e06:	4601      	mov	r1, r0
 8007e08:	6818      	ldr	r0, [r3, #0]
 8007e0a:	f000 bcd1 	b.w	80087b0 <_free_r>
 8007e0e:	bf00      	nop
 8007e10:	20000010 	.word	0x20000010

08007e14 <_malloc_r>:
 8007e14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e18:	f101 040b 	add.w	r4, r1, #11
 8007e1c:	2c16      	cmp	r4, #22
 8007e1e:	4681      	mov	r9, r0
 8007e20:	d907      	bls.n	8007e32 <_malloc_r+0x1e>
 8007e22:	f034 0407 	bics.w	r4, r4, #7
 8007e26:	d505      	bpl.n	8007e34 <_malloc_r+0x20>
 8007e28:	230c      	movs	r3, #12
 8007e2a:	f8c9 3000 	str.w	r3, [r9]
 8007e2e:	2600      	movs	r6, #0
 8007e30:	e131      	b.n	8008096 <_malloc_r+0x282>
 8007e32:	2410      	movs	r4, #16
 8007e34:	428c      	cmp	r4, r1
 8007e36:	d3f7      	bcc.n	8007e28 <_malloc_r+0x14>
 8007e38:	4648      	mov	r0, r9
 8007e3a:	f000 fa05 	bl	8008248 <__malloc_lock>
 8007e3e:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 8007e42:	4d9c      	ldr	r5, [pc, #624]	; (80080b4 <_malloc_r+0x2a0>)
 8007e44:	d236      	bcs.n	8007eb4 <_malloc_r+0xa0>
 8007e46:	f104 0208 	add.w	r2, r4, #8
 8007e4a:	442a      	add	r2, r5
 8007e4c:	f1a2 0108 	sub.w	r1, r2, #8
 8007e50:	6856      	ldr	r6, [r2, #4]
 8007e52:	428e      	cmp	r6, r1
 8007e54:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 8007e58:	d102      	bne.n	8007e60 <_malloc_r+0x4c>
 8007e5a:	68d6      	ldr	r6, [r2, #12]
 8007e5c:	42b2      	cmp	r2, r6
 8007e5e:	d010      	beq.n	8007e82 <_malloc_r+0x6e>
 8007e60:	6873      	ldr	r3, [r6, #4]
 8007e62:	68f2      	ldr	r2, [r6, #12]
 8007e64:	68b1      	ldr	r1, [r6, #8]
 8007e66:	f023 0303 	bic.w	r3, r3, #3
 8007e6a:	60ca      	str	r2, [r1, #12]
 8007e6c:	4433      	add	r3, r6
 8007e6e:	6091      	str	r1, [r2, #8]
 8007e70:	685a      	ldr	r2, [r3, #4]
 8007e72:	f042 0201 	orr.w	r2, r2, #1
 8007e76:	605a      	str	r2, [r3, #4]
 8007e78:	4648      	mov	r0, r9
 8007e7a:	f000 f9eb 	bl	8008254 <__malloc_unlock>
 8007e7e:	3608      	adds	r6, #8
 8007e80:	e109      	b.n	8008096 <_malloc_r+0x282>
 8007e82:	3302      	adds	r3, #2
 8007e84:	4a8c      	ldr	r2, [pc, #560]	; (80080b8 <_malloc_r+0x2a4>)
 8007e86:	692e      	ldr	r6, [r5, #16]
 8007e88:	4296      	cmp	r6, r2
 8007e8a:	4611      	mov	r1, r2
 8007e8c:	d06d      	beq.n	8007f6a <_malloc_r+0x156>
 8007e8e:	6870      	ldr	r0, [r6, #4]
 8007e90:	f020 0003 	bic.w	r0, r0, #3
 8007e94:	1b07      	subs	r7, r0, r4
 8007e96:	2f0f      	cmp	r7, #15
 8007e98:	dd47      	ble.n	8007f2a <_malloc_r+0x116>
 8007e9a:	1933      	adds	r3, r6, r4
 8007e9c:	f044 0401 	orr.w	r4, r4, #1
 8007ea0:	6074      	str	r4, [r6, #4]
 8007ea2:	616b      	str	r3, [r5, #20]
 8007ea4:	612b      	str	r3, [r5, #16]
 8007ea6:	60da      	str	r2, [r3, #12]
 8007ea8:	609a      	str	r2, [r3, #8]
 8007eaa:	f047 0201 	orr.w	r2, r7, #1
 8007eae:	605a      	str	r2, [r3, #4]
 8007eb0:	5037      	str	r7, [r6, r0]
 8007eb2:	e7e1      	b.n	8007e78 <_malloc_r+0x64>
 8007eb4:	0a63      	lsrs	r3, r4, #9
 8007eb6:	d02a      	beq.n	8007f0e <_malloc_r+0xfa>
 8007eb8:	2b04      	cmp	r3, #4
 8007eba:	d812      	bhi.n	8007ee2 <_malloc_r+0xce>
 8007ebc:	09a3      	lsrs	r3, r4, #6
 8007ebe:	3338      	adds	r3, #56	; 0x38
 8007ec0:	1c5a      	adds	r2, r3, #1
 8007ec2:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8007ec6:	f1a2 0008 	sub.w	r0, r2, #8
 8007eca:	6856      	ldr	r6, [r2, #4]
 8007ecc:	4286      	cmp	r6, r0
 8007ece:	d006      	beq.n	8007ede <_malloc_r+0xca>
 8007ed0:	6872      	ldr	r2, [r6, #4]
 8007ed2:	f022 0203 	bic.w	r2, r2, #3
 8007ed6:	1b11      	subs	r1, r2, r4
 8007ed8:	290f      	cmp	r1, #15
 8007eda:	dd1c      	ble.n	8007f16 <_malloc_r+0x102>
 8007edc:	3b01      	subs	r3, #1
 8007ede:	3301      	adds	r3, #1
 8007ee0:	e7d0      	b.n	8007e84 <_malloc_r+0x70>
 8007ee2:	2b14      	cmp	r3, #20
 8007ee4:	d801      	bhi.n	8007eea <_malloc_r+0xd6>
 8007ee6:	335b      	adds	r3, #91	; 0x5b
 8007ee8:	e7ea      	b.n	8007ec0 <_malloc_r+0xac>
 8007eea:	2b54      	cmp	r3, #84	; 0x54
 8007eec:	d802      	bhi.n	8007ef4 <_malloc_r+0xe0>
 8007eee:	0b23      	lsrs	r3, r4, #12
 8007ef0:	336e      	adds	r3, #110	; 0x6e
 8007ef2:	e7e5      	b.n	8007ec0 <_malloc_r+0xac>
 8007ef4:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8007ef8:	d802      	bhi.n	8007f00 <_malloc_r+0xec>
 8007efa:	0be3      	lsrs	r3, r4, #15
 8007efc:	3377      	adds	r3, #119	; 0x77
 8007efe:	e7df      	b.n	8007ec0 <_malloc_r+0xac>
 8007f00:	f240 5254 	movw	r2, #1364	; 0x554
 8007f04:	4293      	cmp	r3, r2
 8007f06:	d804      	bhi.n	8007f12 <_malloc_r+0xfe>
 8007f08:	0ca3      	lsrs	r3, r4, #18
 8007f0a:	337c      	adds	r3, #124	; 0x7c
 8007f0c:	e7d8      	b.n	8007ec0 <_malloc_r+0xac>
 8007f0e:	233f      	movs	r3, #63	; 0x3f
 8007f10:	e7d6      	b.n	8007ec0 <_malloc_r+0xac>
 8007f12:	237e      	movs	r3, #126	; 0x7e
 8007f14:	e7d4      	b.n	8007ec0 <_malloc_r+0xac>
 8007f16:	2900      	cmp	r1, #0
 8007f18:	68f1      	ldr	r1, [r6, #12]
 8007f1a:	db04      	blt.n	8007f26 <_malloc_r+0x112>
 8007f1c:	68b3      	ldr	r3, [r6, #8]
 8007f1e:	60d9      	str	r1, [r3, #12]
 8007f20:	608b      	str	r3, [r1, #8]
 8007f22:	18b3      	adds	r3, r6, r2
 8007f24:	e7a4      	b.n	8007e70 <_malloc_r+0x5c>
 8007f26:	460e      	mov	r6, r1
 8007f28:	e7d0      	b.n	8007ecc <_malloc_r+0xb8>
 8007f2a:	2f00      	cmp	r7, #0
 8007f2c:	616a      	str	r2, [r5, #20]
 8007f2e:	612a      	str	r2, [r5, #16]
 8007f30:	db05      	blt.n	8007f3e <_malloc_r+0x12a>
 8007f32:	4430      	add	r0, r6
 8007f34:	6843      	ldr	r3, [r0, #4]
 8007f36:	f043 0301 	orr.w	r3, r3, #1
 8007f3a:	6043      	str	r3, [r0, #4]
 8007f3c:	e79c      	b.n	8007e78 <_malloc_r+0x64>
 8007f3e:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8007f42:	d244      	bcs.n	8007fce <_malloc_r+0x1ba>
 8007f44:	08c0      	lsrs	r0, r0, #3
 8007f46:	1087      	asrs	r7, r0, #2
 8007f48:	2201      	movs	r2, #1
 8007f4a:	fa02 f707 	lsl.w	r7, r2, r7
 8007f4e:	686a      	ldr	r2, [r5, #4]
 8007f50:	3001      	adds	r0, #1
 8007f52:	433a      	orrs	r2, r7
 8007f54:	606a      	str	r2, [r5, #4]
 8007f56:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 8007f5a:	f855 7030 	ldr.w	r7, [r5, r0, lsl #3]
 8007f5e:	60b7      	str	r7, [r6, #8]
 8007f60:	3a08      	subs	r2, #8
 8007f62:	60f2      	str	r2, [r6, #12]
 8007f64:	f845 6030 	str.w	r6, [r5, r0, lsl #3]
 8007f68:	60fe      	str	r6, [r7, #12]
 8007f6a:	2001      	movs	r0, #1
 8007f6c:	109a      	asrs	r2, r3, #2
 8007f6e:	fa00 f202 	lsl.w	r2, r0, r2
 8007f72:	6868      	ldr	r0, [r5, #4]
 8007f74:	4282      	cmp	r2, r0
 8007f76:	f200 80a1 	bhi.w	80080bc <_malloc_r+0x2a8>
 8007f7a:	4202      	tst	r2, r0
 8007f7c:	d106      	bne.n	8007f8c <_malloc_r+0x178>
 8007f7e:	f023 0303 	bic.w	r3, r3, #3
 8007f82:	0052      	lsls	r2, r2, #1
 8007f84:	4202      	tst	r2, r0
 8007f86:	f103 0304 	add.w	r3, r3, #4
 8007f8a:	d0fa      	beq.n	8007f82 <_malloc_r+0x16e>
 8007f8c:	eb05 0cc3 	add.w	ip, r5, r3, lsl #3
 8007f90:	46e0      	mov	r8, ip
 8007f92:	469e      	mov	lr, r3
 8007f94:	f8d8 600c 	ldr.w	r6, [r8, #12]
 8007f98:	4546      	cmp	r6, r8
 8007f9a:	d153      	bne.n	8008044 <_malloc_r+0x230>
 8007f9c:	f10e 0e01 	add.w	lr, lr, #1
 8007fa0:	f01e 0f03 	tst.w	lr, #3
 8007fa4:	f108 0808 	add.w	r8, r8, #8
 8007fa8:	d1f4      	bne.n	8007f94 <_malloc_r+0x180>
 8007faa:	0798      	lsls	r0, r3, #30
 8007fac:	d179      	bne.n	80080a2 <_malloc_r+0x28e>
 8007fae:	686b      	ldr	r3, [r5, #4]
 8007fb0:	ea23 0302 	bic.w	r3, r3, r2
 8007fb4:	606b      	str	r3, [r5, #4]
 8007fb6:	6868      	ldr	r0, [r5, #4]
 8007fb8:	0052      	lsls	r2, r2, #1
 8007fba:	4282      	cmp	r2, r0
 8007fbc:	d87e      	bhi.n	80080bc <_malloc_r+0x2a8>
 8007fbe:	2a00      	cmp	r2, #0
 8007fc0:	d07c      	beq.n	80080bc <_malloc_r+0x2a8>
 8007fc2:	4673      	mov	r3, lr
 8007fc4:	4202      	tst	r2, r0
 8007fc6:	d1e1      	bne.n	8007f8c <_malloc_r+0x178>
 8007fc8:	3304      	adds	r3, #4
 8007fca:	0052      	lsls	r2, r2, #1
 8007fcc:	e7fa      	b.n	8007fc4 <_malloc_r+0x1b0>
 8007fce:	0a42      	lsrs	r2, r0, #9
 8007fd0:	2a04      	cmp	r2, #4
 8007fd2:	d815      	bhi.n	8008000 <_malloc_r+0x1ec>
 8007fd4:	0982      	lsrs	r2, r0, #6
 8007fd6:	3238      	adds	r2, #56	; 0x38
 8007fd8:	1c57      	adds	r7, r2, #1
 8007fda:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 8007fde:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 8007fe2:	45be      	cmp	lr, r7
 8007fe4:	d126      	bne.n	8008034 <_malloc_r+0x220>
 8007fe6:	2001      	movs	r0, #1
 8007fe8:	1092      	asrs	r2, r2, #2
 8007fea:	fa00 f202 	lsl.w	r2, r0, r2
 8007fee:	6868      	ldr	r0, [r5, #4]
 8007ff0:	4310      	orrs	r0, r2
 8007ff2:	6068      	str	r0, [r5, #4]
 8007ff4:	f8c6 e00c 	str.w	lr, [r6, #12]
 8007ff8:	60b7      	str	r7, [r6, #8]
 8007ffa:	f8ce 6008 	str.w	r6, [lr, #8]
 8007ffe:	e7b3      	b.n	8007f68 <_malloc_r+0x154>
 8008000:	2a14      	cmp	r2, #20
 8008002:	d801      	bhi.n	8008008 <_malloc_r+0x1f4>
 8008004:	325b      	adds	r2, #91	; 0x5b
 8008006:	e7e7      	b.n	8007fd8 <_malloc_r+0x1c4>
 8008008:	2a54      	cmp	r2, #84	; 0x54
 800800a:	d802      	bhi.n	8008012 <_malloc_r+0x1fe>
 800800c:	0b02      	lsrs	r2, r0, #12
 800800e:	326e      	adds	r2, #110	; 0x6e
 8008010:	e7e2      	b.n	8007fd8 <_malloc_r+0x1c4>
 8008012:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8008016:	d802      	bhi.n	800801e <_malloc_r+0x20a>
 8008018:	0bc2      	lsrs	r2, r0, #15
 800801a:	3277      	adds	r2, #119	; 0x77
 800801c:	e7dc      	b.n	8007fd8 <_malloc_r+0x1c4>
 800801e:	f240 5754 	movw	r7, #1364	; 0x554
 8008022:	42ba      	cmp	r2, r7
 8008024:	bf9a      	itte	ls
 8008026:	0c82      	lsrls	r2, r0, #18
 8008028:	327c      	addls	r2, #124	; 0x7c
 800802a:	227e      	movhi	r2, #126	; 0x7e
 800802c:	e7d4      	b.n	8007fd8 <_malloc_r+0x1c4>
 800802e:	68bf      	ldr	r7, [r7, #8]
 8008030:	45be      	cmp	lr, r7
 8008032:	d004      	beq.n	800803e <_malloc_r+0x22a>
 8008034:	687a      	ldr	r2, [r7, #4]
 8008036:	f022 0203 	bic.w	r2, r2, #3
 800803a:	4290      	cmp	r0, r2
 800803c:	d3f7      	bcc.n	800802e <_malloc_r+0x21a>
 800803e:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 8008042:	e7d7      	b.n	8007ff4 <_malloc_r+0x1e0>
 8008044:	6870      	ldr	r0, [r6, #4]
 8008046:	68f7      	ldr	r7, [r6, #12]
 8008048:	f020 0003 	bic.w	r0, r0, #3
 800804c:	eba0 0a04 	sub.w	sl, r0, r4
 8008050:	f1ba 0f0f 	cmp.w	sl, #15
 8008054:	dd10      	ble.n	8008078 <_malloc_r+0x264>
 8008056:	68b2      	ldr	r2, [r6, #8]
 8008058:	1933      	adds	r3, r6, r4
 800805a:	f044 0401 	orr.w	r4, r4, #1
 800805e:	6074      	str	r4, [r6, #4]
 8008060:	60d7      	str	r7, [r2, #12]
 8008062:	60ba      	str	r2, [r7, #8]
 8008064:	f04a 0201 	orr.w	r2, sl, #1
 8008068:	616b      	str	r3, [r5, #20]
 800806a:	612b      	str	r3, [r5, #16]
 800806c:	60d9      	str	r1, [r3, #12]
 800806e:	6099      	str	r1, [r3, #8]
 8008070:	605a      	str	r2, [r3, #4]
 8008072:	f846 a000 	str.w	sl, [r6, r0]
 8008076:	e6ff      	b.n	8007e78 <_malloc_r+0x64>
 8008078:	f1ba 0f00 	cmp.w	sl, #0
 800807c:	db0f      	blt.n	800809e <_malloc_r+0x28a>
 800807e:	4430      	add	r0, r6
 8008080:	6843      	ldr	r3, [r0, #4]
 8008082:	f043 0301 	orr.w	r3, r3, #1
 8008086:	6043      	str	r3, [r0, #4]
 8008088:	f856 3f08 	ldr.w	r3, [r6, #8]!
 800808c:	4648      	mov	r0, r9
 800808e:	60df      	str	r7, [r3, #12]
 8008090:	60bb      	str	r3, [r7, #8]
 8008092:	f000 f8df 	bl	8008254 <__malloc_unlock>
 8008096:	4630      	mov	r0, r6
 8008098:	b003      	add	sp, #12
 800809a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800809e:	463e      	mov	r6, r7
 80080a0:	e77a      	b.n	8007f98 <_malloc_r+0x184>
 80080a2:	f85c 0908 	ldr.w	r0, [ip], #-8
 80080a6:	4584      	cmp	ip, r0
 80080a8:	f103 33ff 	add.w	r3, r3, #4294967295
 80080ac:	f43f af7d 	beq.w	8007faa <_malloc_r+0x196>
 80080b0:	e781      	b.n	8007fb6 <_malloc_r+0x1a2>
 80080b2:	bf00      	nop
 80080b4:	20000104 	.word	0x20000104
 80080b8:	2000010c 	.word	0x2000010c
 80080bc:	f8d5 b008 	ldr.w	fp, [r5, #8]
 80080c0:	f8db 6004 	ldr.w	r6, [fp, #4]
 80080c4:	f026 0603 	bic.w	r6, r6, #3
 80080c8:	42b4      	cmp	r4, r6
 80080ca:	d803      	bhi.n	80080d4 <_malloc_r+0x2c0>
 80080cc:	1b33      	subs	r3, r6, r4
 80080ce:	2b0f      	cmp	r3, #15
 80080d0:	f300 8096 	bgt.w	8008200 <_malloc_r+0x3ec>
 80080d4:	4a4f      	ldr	r2, [pc, #316]	; (8008214 <_malloc_r+0x400>)
 80080d6:	6817      	ldr	r7, [r2, #0]
 80080d8:	4a4f      	ldr	r2, [pc, #316]	; (8008218 <_malloc_r+0x404>)
 80080da:	6811      	ldr	r1, [r2, #0]
 80080dc:	3710      	adds	r7, #16
 80080de:	3101      	adds	r1, #1
 80080e0:	eb0b 0306 	add.w	r3, fp, r6
 80080e4:	4427      	add	r7, r4
 80080e6:	d005      	beq.n	80080f4 <_malloc_r+0x2e0>
 80080e8:	494c      	ldr	r1, [pc, #304]	; (800821c <_malloc_r+0x408>)
 80080ea:	3901      	subs	r1, #1
 80080ec:	440f      	add	r7, r1
 80080ee:	3101      	adds	r1, #1
 80080f0:	4249      	negs	r1, r1
 80080f2:	400f      	ands	r7, r1
 80080f4:	4639      	mov	r1, r7
 80080f6:	4648      	mov	r0, r9
 80080f8:	9201      	str	r2, [sp, #4]
 80080fa:	9300      	str	r3, [sp, #0]
 80080fc:	f000 fa38 	bl	8008570 <_sbrk_r>
 8008100:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008104:	4680      	mov	r8, r0
 8008106:	d056      	beq.n	80081b6 <_malloc_r+0x3a2>
 8008108:	9b00      	ldr	r3, [sp, #0]
 800810a:	9a01      	ldr	r2, [sp, #4]
 800810c:	4283      	cmp	r3, r0
 800810e:	d901      	bls.n	8008114 <_malloc_r+0x300>
 8008110:	45ab      	cmp	fp, r5
 8008112:	d150      	bne.n	80081b6 <_malloc_r+0x3a2>
 8008114:	4842      	ldr	r0, [pc, #264]	; (8008220 <_malloc_r+0x40c>)
 8008116:	6801      	ldr	r1, [r0, #0]
 8008118:	4543      	cmp	r3, r8
 800811a:	eb07 0e01 	add.w	lr, r7, r1
 800811e:	f8c0 e000 	str.w	lr, [r0]
 8008122:	4940      	ldr	r1, [pc, #256]	; (8008224 <_malloc_r+0x410>)
 8008124:	4682      	mov	sl, r0
 8008126:	d113      	bne.n	8008150 <_malloc_r+0x33c>
 8008128:	420b      	tst	r3, r1
 800812a:	d111      	bne.n	8008150 <_malloc_r+0x33c>
 800812c:	68ab      	ldr	r3, [r5, #8]
 800812e:	443e      	add	r6, r7
 8008130:	f046 0601 	orr.w	r6, r6, #1
 8008134:	605e      	str	r6, [r3, #4]
 8008136:	4a3c      	ldr	r2, [pc, #240]	; (8008228 <_malloc_r+0x414>)
 8008138:	f8da 3000 	ldr.w	r3, [sl]
 800813c:	6811      	ldr	r1, [r2, #0]
 800813e:	428b      	cmp	r3, r1
 8008140:	bf88      	it	hi
 8008142:	6013      	strhi	r3, [r2, #0]
 8008144:	4a39      	ldr	r2, [pc, #228]	; (800822c <_malloc_r+0x418>)
 8008146:	6811      	ldr	r1, [r2, #0]
 8008148:	428b      	cmp	r3, r1
 800814a:	bf88      	it	hi
 800814c:	6013      	strhi	r3, [r2, #0]
 800814e:	e032      	b.n	80081b6 <_malloc_r+0x3a2>
 8008150:	6810      	ldr	r0, [r2, #0]
 8008152:	3001      	adds	r0, #1
 8008154:	bf1b      	ittet	ne
 8008156:	eba8 0303 	subne.w	r3, r8, r3
 800815a:	4473      	addne	r3, lr
 800815c:	f8c2 8000 	streq.w	r8, [r2]
 8008160:	f8ca 3000 	strne.w	r3, [sl]
 8008164:	f018 0007 	ands.w	r0, r8, #7
 8008168:	bf1c      	itt	ne
 800816a:	f1c0 0008 	rsbne	r0, r0, #8
 800816e:	4480      	addne	r8, r0
 8008170:	4b2a      	ldr	r3, [pc, #168]	; (800821c <_malloc_r+0x408>)
 8008172:	4447      	add	r7, r8
 8008174:	4418      	add	r0, r3
 8008176:	400f      	ands	r7, r1
 8008178:	1bc7      	subs	r7, r0, r7
 800817a:	4639      	mov	r1, r7
 800817c:	4648      	mov	r0, r9
 800817e:	f000 f9f7 	bl	8008570 <_sbrk_r>
 8008182:	1c43      	adds	r3, r0, #1
 8008184:	bf08      	it	eq
 8008186:	4640      	moveq	r0, r8
 8008188:	f8da 3000 	ldr.w	r3, [sl]
 800818c:	f8c5 8008 	str.w	r8, [r5, #8]
 8008190:	bf08      	it	eq
 8008192:	2700      	moveq	r7, #0
 8008194:	eba0 0008 	sub.w	r0, r0, r8
 8008198:	443b      	add	r3, r7
 800819a:	4407      	add	r7, r0
 800819c:	f047 0701 	orr.w	r7, r7, #1
 80081a0:	45ab      	cmp	fp, r5
 80081a2:	f8ca 3000 	str.w	r3, [sl]
 80081a6:	f8c8 7004 	str.w	r7, [r8, #4]
 80081aa:	d0c4      	beq.n	8008136 <_malloc_r+0x322>
 80081ac:	2e0f      	cmp	r6, #15
 80081ae:	d810      	bhi.n	80081d2 <_malloc_r+0x3be>
 80081b0:	2301      	movs	r3, #1
 80081b2:	f8c8 3004 	str.w	r3, [r8, #4]
 80081b6:	68ab      	ldr	r3, [r5, #8]
 80081b8:	685a      	ldr	r2, [r3, #4]
 80081ba:	f022 0203 	bic.w	r2, r2, #3
 80081be:	4294      	cmp	r4, r2
 80081c0:	eba2 0304 	sub.w	r3, r2, r4
 80081c4:	d801      	bhi.n	80081ca <_malloc_r+0x3b6>
 80081c6:	2b0f      	cmp	r3, #15
 80081c8:	dc1a      	bgt.n	8008200 <_malloc_r+0x3ec>
 80081ca:	4648      	mov	r0, r9
 80081cc:	f000 f842 	bl	8008254 <__malloc_unlock>
 80081d0:	e62d      	b.n	8007e2e <_malloc_r+0x1a>
 80081d2:	f8db 3004 	ldr.w	r3, [fp, #4]
 80081d6:	3e0c      	subs	r6, #12
 80081d8:	f026 0607 	bic.w	r6, r6, #7
 80081dc:	f003 0301 	and.w	r3, r3, #1
 80081e0:	4333      	orrs	r3, r6
 80081e2:	f8cb 3004 	str.w	r3, [fp, #4]
 80081e6:	eb0b 0306 	add.w	r3, fp, r6
 80081ea:	2205      	movs	r2, #5
 80081ec:	2e0f      	cmp	r6, #15
 80081ee:	605a      	str	r2, [r3, #4]
 80081f0:	609a      	str	r2, [r3, #8]
 80081f2:	d9a0      	bls.n	8008136 <_malloc_r+0x322>
 80081f4:	f10b 0108 	add.w	r1, fp, #8
 80081f8:	4648      	mov	r0, r9
 80081fa:	f000 fad9 	bl	80087b0 <_free_r>
 80081fe:	e79a      	b.n	8008136 <_malloc_r+0x322>
 8008200:	68ae      	ldr	r6, [r5, #8]
 8008202:	f044 0201 	orr.w	r2, r4, #1
 8008206:	4434      	add	r4, r6
 8008208:	f043 0301 	orr.w	r3, r3, #1
 800820c:	6072      	str	r2, [r6, #4]
 800820e:	60ac      	str	r4, [r5, #8]
 8008210:	6063      	str	r3, [r4, #4]
 8008212:	e631      	b.n	8007e78 <_malloc_r+0x64>
 8008214:	20003d44 	.word	0x20003d44
 8008218:	2000050c 	.word	0x2000050c
 800821c:	00001000 	.word	0x00001000
 8008220:	20003d14 	.word	0x20003d14
 8008224:	00000fff 	.word	0x00000fff
 8008228:	20003d3c 	.word	0x20003d3c
 800822c:	20003d40 	.word	0x20003d40

08008230 <memcpy>:
 8008230:	b510      	push	{r4, lr}
 8008232:	1e43      	subs	r3, r0, #1
 8008234:	440a      	add	r2, r1
 8008236:	4291      	cmp	r1, r2
 8008238:	d100      	bne.n	800823c <memcpy+0xc>
 800823a:	bd10      	pop	{r4, pc}
 800823c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008240:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008244:	e7f7      	b.n	8008236 <memcpy+0x6>
	...

08008248 <__malloc_lock>:
 8008248:	4801      	ldr	r0, [pc, #4]	; (8008250 <__malloc_lock+0x8>)
 800824a:	f000 bb6d 	b.w	8008928 <__retarget_lock_acquire_recursive>
 800824e:	bf00      	nop
 8008250:	20003e58 	.word	0x20003e58

08008254 <__malloc_unlock>:
 8008254:	4801      	ldr	r0, [pc, #4]	; (800825c <__malloc_unlock+0x8>)
 8008256:	f000 bb69 	b.w	800892c <__retarget_lock_release_recursive>
 800825a:	bf00      	nop
 800825c:	20003e58 	.word	0x20003e58

08008260 <realloc>:
 8008260:	4b02      	ldr	r3, [pc, #8]	; (800826c <realloc+0xc>)
 8008262:	460a      	mov	r2, r1
 8008264:	4601      	mov	r1, r0
 8008266:	6818      	ldr	r0, [r3, #0]
 8008268:	f000 b802 	b.w	8008270 <_realloc_r>
 800826c:	20000010 	.word	0x20000010

08008270 <_realloc_r>:
 8008270:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008274:	4682      	mov	sl, r0
 8008276:	460c      	mov	r4, r1
 8008278:	b929      	cbnz	r1, 8008286 <_realloc_r+0x16>
 800827a:	4611      	mov	r1, r2
 800827c:	b003      	add	sp, #12
 800827e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008282:	f7ff bdc7 	b.w	8007e14 <_malloc_r>
 8008286:	9201      	str	r2, [sp, #4]
 8008288:	f7ff ffde 	bl	8008248 <__malloc_lock>
 800828c:	9a01      	ldr	r2, [sp, #4]
 800828e:	f854 5c04 	ldr.w	r5, [r4, #-4]
 8008292:	f102 080b 	add.w	r8, r2, #11
 8008296:	f1b8 0f16 	cmp.w	r8, #22
 800829a:	f1a4 0908 	sub.w	r9, r4, #8
 800829e:	f025 0603 	bic.w	r6, r5, #3
 80082a2:	d90a      	bls.n	80082ba <_realloc_r+0x4a>
 80082a4:	f038 0807 	bics.w	r8, r8, #7
 80082a8:	d509      	bpl.n	80082be <_realloc_r+0x4e>
 80082aa:	230c      	movs	r3, #12
 80082ac:	f8ca 3000 	str.w	r3, [sl]
 80082b0:	2700      	movs	r7, #0
 80082b2:	4638      	mov	r0, r7
 80082b4:	b003      	add	sp, #12
 80082b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082ba:	f04f 0810 	mov.w	r8, #16
 80082be:	4590      	cmp	r8, r2
 80082c0:	d3f3      	bcc.n	80082aa <_realloc_r+0x3a>
 80082c2:	45b0      	cmp	r8, r6
 80082c4:	f340 8145 	ble.w	8008552 <_realloc_r+0x2e2>
 80082c8:	4ba8      	ldr	r3, [pc, #672]	; (800856c <_realloc_r+0x2fc>)
 80082ca:	f8d3 e008 	ldr.w	lr, [r3, #8]
 80082ce:	eb09 0106 	add.w	r1, r9, r6
 80082d2:	4571      	cmp	r1, lr
 80082d4:	469b      	mov	fp, r3
 80082d6:	684b      	ldr	r3, [r1, #4]
 80082d8:	d005      	beq.n	80082e6 <_realloc_r+0x76>
 80082da:	f023 0001 	bic.w	r0, r3, #1
 80082de:	4408      	add	r0, r1
 80082e0:	6840      	ldr	r0, [r0, #4]
 80082e2:	07c7      	lsls	r7, r0, #31
 80082e4:	d447      	bmi.n	8008376 <_realloc_r+0x106>
 80082e6:	f023 0303 	bic.w	r3, r3, #3
 80082ea:	4571      	cmp	r1, lr
 80082ec:	eb06 0703 	add.w	r7, r6, r3
 80082f0:	d119      	bne.n	8008326 <_realloc_r+0xb6>
 80082f2:	f108 0010 	add.w	r0, r8, #16
 80082f6:	4287      	cmp	r7, r0
 80082f8:	db3f      	blt.n	800837a <_realloc_r+0x10a>
 80082fa:	eb09 0308 	add.w	r3, r9, r8
 80082fe:	eba7 0708 	sub.w	r7, r7, r8
 8008302:	f047 0701 	orr.w	r7, r7, #1
 8008306:	f8cb 3008 	str.w	r3, [fp, #8]
 800830a:	605f      	str	r7, [r3, #4]
 800830c:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8008310:	f003 0301 	and.w	r3, r3, #1
 8008314:	ea43 0308 	orr.w	r3, r3, r8
 8008318:	f844 3c04 	str.w	r3, [r4, #-4]
 800831c:	4650      	mov	r0, sl
 800831e:	f7ff ff99 	bl	8008254 <__malloc_unlock>
 8008322:	4627      	mov	r7, r4
 8008324:	e7c5      	b.n	80082b2 <_realloc_r+0x42>
 8008326:	45b8      	cmp	r8, r7
 8008328:	dc27      	bgt.n	800837a <_realloc_r+0x10a>
 800832a:	68cb      	ldr	r3, [r1, #12]
 800832c:	688a      	ldr	r2, [r1, #8]
 800832e:	60d3      	str	r3, [r2, #12]
 8008330:	609a      	str	r2, [r3, #8]
 8008332:	eba7 0008 	sub.w	r0, r7, r8
 8008336:	280f      	cmp	r0, #15
 8008338:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800833c:	eb09 0207 	add.w	r2, r9, r7
 8008340:	f240 8109 	bls.w	8008556 <_realloc_r+0x2e6>
 8008344:	eb09 0108 	add.w	r1, r9, r8
 8008348:	f003 0301 	and.w	r3, r3, #1
 800834c:	ea43 0308 	orr.w	r3, r3, r8
 8008350:	f040 0001 	orr.w	r0, r0, #1
 8008354:	f8c9 3004 	str.w	r3, [r9, #4]
 8008358:	6048      	str	r0, [r1, #4]
 800835a:	6853      	ldr	r3, [r2, #4]
 800835c:	f043 0301 	orr.w	r3, r3, #1
 8008360:	6053      	str	r3, [r2, #4]
 8008362:	3108      	adds	r1, #8
 8008364:	4650      	mov	r0, sl
 8008366:	f000 fa23 	bl	80087b0 <_free_r>
 800836a:	4650      	mov	r0, sl
 800836c:	f7ff ff72 	bl	8008254 <__malloc_unlock>
 8008370:	f109 0708 	add.w	r7, r9, #8
 8008374:	e79d      	b.n	80082b2 <_realloc_r+0x42>
 8008376:	2300      	movs	r3, #0
 8008378:	4619      	mov	r1, r3
 800837a:	07e8      	lsls	r0, r5, #31
 800837c:	f100 8084 	bmi.w	8008488 <_realloc_r+0x218>
 8008380:	f854 5c08 	ldr.w	r5, [r4, #-8]
 8008384:	eba9 0505 	sub.w	r5, r9, r5
 8008388:	6868      	ldr	r0, [r5, #4]
 800838a:	f020 0003 	bic.w	r0, r0, #3
 800838e:	4430      	add	r0, r6
 8008390:	2900      	cmp	r1, #0
 8008392:	d076      	beq.n	8008482 <_realloc_r+0x212>
 8008394:	4571      	cmp	r1, lr
 8008396:	d150      	bne.n	800843a <_realloc_r+0x1ca>
 8008398:	4403      	add	r3, r0
 800839a:	f108 0110 	add.w	r1, r8, #16
 800839e:	428b      	cmp	r3, r1
 80083a0:	db6f      	blt.n	8008482 <_realloc_r+0x212>
 80083a2:	462f      	mov	r7, r5
 80083a4:	68ea      	ldr	r2, [r5, #12]
 80083a6:	f857 1f08 	ldr.w	r1, [r7, #8]!
 80083aa:	60ca      	str	r2, [r1, #12]
 80083ac:	6091      	str	r1, [r2, #8]
 80083ae:	1f32      	subs	r2, r6, #4
 80083b0:	2a24      	cmp	r2, #36	; 0x24
 80083b2:	d83b      	bhi.n	800842c <_realloc_r+0x1bc>
 80083b4:	2a13      	cmp	r2, #19
 80083b6:	d936      	bls.n	8008426 <_realloc_r+0x1b6>
 80083b8:	6821      	ldr	r1, [r4, #0]
 80083ba:	60a9      	str	r1, [r5, #8]
 80083bc:	6861      	ldr	r1, [r4, #4]
 80083be:	60e9      	str	r1, [r5, #12]
 80083c0:	2a1b      	cmp	r2, #27
 80083c2:	d81c      	bhi.n	80083fe <_realloc_r+0x18e>
 80083c4:	f105 0210 	add.w	r2, r5, #16
 80083c8:	f104 0108 	add.w	r1, r4, #8
 80083cc:	6808      	ldr	r0, [r1, #0]
 80083ce:	6010      	str	r0, [r2, #0]
 80083d0:	6848      	ldr	r0, [r1, #4]
 80083d2:	6050      	str	r0, [r2, #4]
 80083d4:	6889      	ldr	r1, [r1, #8]
 80083d6:	6091      	str	r1, [r2, #8]
 80083d8:	eb05 0208 	add.w	r2, r5, r8
 80083dc:	eba3 0308 	sub.w	r3, r3, r8
 80083e0:	f043 0301 	orr.w	r3, r3, #1
 80083e4:	f8cb 2008 	str.w	r2, [fp, #8]
 80083e8:	6053      	str	r3, [r2, #4]
 80083ea:	686b      	ldr	r3, [r5, #4]
 80083ec:	f003 0301 	and.w	r3, r3, #1
 80083f0:	ea43 0308 	orr.w	r3, r3, r8
 80083f4:	606b      	str	r3, [r5, #4]
 80083f6:	4650      	mov	r0, sl
 80083f8:	f7ff ff2c 	bl	8008254 <__malloc_unlock>
 80083fc:	e759      	b.n	80082b2 <_realloc_r+0x42>
 80083fe:	68a1      	ldr	r1, [r4, #8]
 8008400:	6129      	str	r1, [r5, #16]
 8008402:	68e1      	ldr	r1, [r4, #12]
 8008404:	6169      	str	r1, [r5, #20]
 8008406:	2a24      	cmp	r2, #36	; 0x24
 8008408:	bf01      	itttt	eq
 800840a:	6922      	ldreq	r2, [r4, #16]
 800840c:	61aa      	streq	r2, [r5, #24]
 800840e:	6960      	ldreq	r0, [r4, #20]
 8008410:	61e8      	streq	r0, [r5, #28]
 8008412:	bf19      	ittee	ne
 8008414:	f105 0218 	addne.w	r2, r5, #24
 8008418:	f104 0110 	addne.w	r1, r4, #16
 800841c:	f105 0220 	addeq.w	r2, r5, #32
 8008420:	f104 0118 	addeq.w	r1, r4, #24
 8008424:	e7d2      	b.n	80083cc <_realloc_r+0x15c>
 8008426:	463a      	mov	r2, r7
 8008428:	4621      	mov	r1, r4
 800842a:	e7cf      	b.n	80083cc <_realloc_r+0x15c>
 800842c:	4621      	mov	r1, r4
 800842e:	4638      	mov	r0, r7
 8008430:	9301      	str	r3, [sp, #4]
 8008432:	f000 fa7c 	bl	800892e <memmove>
 8008436:	9b01      	ldr	r3, [sp, #4]
 8008438:	e7ce      	b.n	80083d8 <_realloc_r+0x168>
 800843a:	18c7      	adds	r7, r0, r3
 800843c:	45b8      	cmp	r8, r7
 800843e:	dc20      	bgt.n	8008482 <_realloc_r+0x212>
 8008440:	68cb      	ldr	r3, [r1, #12]
 8008442:	688a      	ldr	r2, [r1, #8]
 8008444:	60d3      	str	r3, [r2, #12]
 8008446:	609a      	str	r2, [r3, #8]
 8008448:	4628      	mov	r0, r5
 800844a:	68eb      	ldr	r3, [r5, #12]
 800844c:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8008450:	60d3      	str	r3, [r2, #12]
 8008452:	609a      	str	r2, [r3, #8]
 8008454:	1f32      	subs	r2, r6, #4
 8008456:	2a24      	cmp	r2, #36	; 0x24
 8008458:	d842      	bhi.n	80084e0 <_realloc_r+0x270>
 800845a:	2a13      	cmp	r2, #19
 800845c:	d93e      	bls.n	80084dc <_realloc_r+0x26c>
 800845e:	6823      	ldr	r3, [r4, #0]
 8008460:	60ab      	str	r3, [r5, #8]
 8008462:	6863      	ldr	r3, [r4, #4]
 8008464:	60eb      	str	r3, [r5, #12]
 8008466:	2a1b      	cmp	r2, #27
 8008468:	d824      	bhi.n	80084b4 <_realloc_r+0x244>
 800846a:	f105 0010 	add.w	r0, r5, #16
 800846e:	f104 0308 	add.w	r3, r4, #8
 8008472:	681a      	ldr	r2, [r3, #0]
 8008474:	6002      	str	r2, [r0, #0]
 8008476:	685a      	ldr	r2, [r3, #4]
 8008478:	6042      	str	r2, [r0, #4]
 800847a:	689b      	ldr	r3, [r3, #8]
 800847c:	6083      	str	r3, [r0, #8]
 800847e:	46a9      	mov	r9, r5
 8008480:	e757      	b.n	8008332 <_realloc_r+0xc2>
 8008482:	4580      	cmp	r8, r0
 8008484:	4607      	mov	r7, r0
 8008486:	dddf      	ble.n	8008448 <_realloc_r+0x1d8>
 8008488:	4611      	mov	r1, r2
 800848a:	4650      	mov	r0, sl
 800848c:	f7ff fcc2 	bl	8007e14 <_malloc_r>
 8008490:	4607      	mov	r7, r0
 8008492:	2800      	cmp	r0, #0
 8008494:	d0af      	beq.n	80083f6 <_realloc_r+0x186>
 8008496:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800849a:	f023 0301 	bic.w	r3, r3, #1
 800849e:	f1a0 0208 	sub.w	r2, r0, #8
 80084a2:	444b      	add	r3, r9
 80084a4:	429a      	cmp	r2, r3
 80084a6:	d11f      	bne.n	80084e8 <_realloc_r+0x278>
 80084a8:	f850 7c04 	ldr.w	r7, [r0, #-4]
 80084ac:	f027 0703 	bic.w	r7, r7, #3
 80084b0:	4437      	add	r7, r6
 80084b2:	e73e      	b.n	8008332 <_realloc_r+0xc2>
 80084b4:	68a3      	ldr	r3, [r4, #8]
 80084b6:	612b      	str	r3, [r5, #16]
 80084b8:	68e3      	ldr	r3, [r4, #12]
 80084ba:	616b      	str	r3, [r5, #20]
 80084bc:	2a24      	cmp	r2, #36	; 0x24
 80084be:	bf01      	itttt	eq
 80084c0:	6923      	ldreq	r3, [r4, #16]
 80084c2:	61ab      	streq	r3, [r5, #24]
 80084c4:	6962      	ldreq	r2, [r4, #20]
 80084c6:	61ea      	streq	r2, [r5, #28]
 80084c8:	bf19      	ittee	ne
 80084ca:	f105 0018 	addne.w	r0, r5, #24
 80084ce:	f104 0310 	addne.w	r3, r4, #16
 80084d2:	f105 0020 	addeq.w	r0, r5, #32
 80084d6:	f104 0318 	addeq.w	r3, r4, #24
 80084da:	e7ca      	b.n	8008472 <_realloc_r+0x202>
 80084dc:	4623      	mov	r3, r4
 80084de:	e7c8      	b.n	8008472 <_realloc_r+0x202>
 80084e0:	4621      	mov	r1, r4
 80084e2:	f000 fa24 	bl	800892e <memmove>
 80084e6:	e7ca      	b.n	800847e <_realloc_r+0x20e>
 80084e8:	1f32      	subs	r2, r6, #4
 80084ea:	2a24      	cmp	r2, #36	; 0x24
 80084ec:	d82d      	bhi.n	800854a <_realloc_r+0x2da>
 80084ee:	2a13      	cmp	r2, #19
 80084f0:	d928      	bls.n	8008544 <_realloc_r+0x2d4>
 80084f2:	6823      	ldr	r3, [r4, #0]
 80084f4:	6003      	str	r3, [r0, #0]
 80084f6:	6863      	ldr	r3, [r4, #4]
 80084f8:	6043      	str	r3, [r0, #4]
 80084fa:	2a1b      	cmp	r2, #27
 80084fc:	d80e      	bhi.n	800851c <_realloc_r+0x2ac>
 80084fe:	f100 0308 	add.w	r3, r0, #8
 8008502:	f104 0208 	add.w	r2, r4, #8
 8008506:	6811      	ldr	r1, [r2, #0]
 8008508:	6019      	str	r1, [r3, #0]
 800850a:	6851      	ldr	r1, [r2, #4]
 800850c:	6059      	str	r1, [r3, #4]
 800850e:	6892      	ldr	r2, [r2, #8]
 8008510:	609a      	str	r2, [r3, #8]
 8008512:	4621      	mov	r1, r4
 8008514:	4650      	mov	r0, sl
 8008516:	f000 f94b 	bl	80087b0 <_free_r>
 800851a:	e76c      	b.n	80083f6 <_realloc_r+0x186>
 800851c:	68a3      	ldr	r3, [r4, #8]
 800851e:	6083      	str	r3, [r0, #8]
 8008520:	68e3      	ldr	r3, [r4, #12]
 8008522:	60c3      	str	r3, [r0, #12]
 8008524:	2a24      	cmp	r2, #36	; 0x24
 8008526:	bf01      	itttt	eq
 8008528:	6923      	ldreq	r3, [r4, #16]
 800852a:	6103      	streq	r3, [r0, #16]
 800852c:	6961      	ldreq	r1, [r4, #20]
 800852e:	6141      	streq	r1, [r0, #20]
 8008530:	bf19      	ittee	ne
 8008532:	f100 0310 	addne.w	r3, r0, #16
 8008536:	f104 0210 	addne.w	r2, r4, #16
 800853a:	f100 0318 	addeq.w	r3, r0, #24
 800853e:	f104 0218 	addeq.w	r2, r4, #24
 8008542:	e7e0      	b.n	8008506 <_realloc_r+0x296>
 8008544:	4603      	mov	r3, r0
 8008546:	4622      	mov	r2, r4
 8008548:	e7dd      	b.n	8008506 <_realloc_r+0x296>
 800854a:	4621      	mov	r1, r4
 800854c:	f000 f9ef 	bl	800892e <memmove>
 8008550:	e7df      	b.n	8008512 <_realloc_r+0x2a2>
 8008552:	4637      	mov	r7, r6
 8008554:	e6ed      	b.n	8008332 <_realloc_r+0xc2>
 8008556:	f003 0301 	and.w	r3, r3, #1
 800855a:	431f      	orrs	r7, r3
 800855c:	f8c9 7004 	str.w	r7, [r9, #4]
 8008560:	6853      	ldr	r3, [r2, #4]
 8008562:	f043 0301 	orr.w	r3, r3, #1
 8008566:	6053      	str	r3, [r2, #4]
 8008568:	e6ff      	b.n	800836a <_realloc_r+0xfa>
 800856a:	bf00      	nop
 800856c:	20000104 	.word	0x20000104

08008570 <_sbrk_r>:
 8008570:	b538      	push	{r3, r4, r5, lr}
 8008572:	4c06      	ldr	r4, [pc, #24]	; (800858c <_sbrk_r+0x1c>)
 8008574:	2300      	movs	r3, #0
 8008576:	4605      	mov	r5, r0
 8008578:	4608      	mov	r0, r1
 800857a:	6023      	str	r3, [r4, #0]
 800857c:	f000 fa02 	bl	8008984 <_sbrk>
 8008580:	1c43      	adds	r3, r0, #1
 8008582:	d102      	bne.n	800858a <_sbrk_r+0x1a>
 8008584:	6823      	ldr	r3, [r4, #0]
 8008586:	b103      	cbz	r3, 800858a <_sbrk_r+0x1a>
 8008588:	602b      	str	r3, [r5, #0]
 800858a:	bd38      	pop	{r3, r4, r5, pc}
 800858c:	20003e60 	.word	0x20003e60

08008590 <_raise_r>:
 8008590:	291f      	cmp	r1, #31
 8008592:	b538      	push	{r3, r4, r5, lr}
 8008594:	4604      	mov	r4, r0
 8008596:	460d      	mov	r5, r1
 8008598:	d904      	bls.n	80085a4 <_raise_r+0x14>
 800859a:	2316      	movs	r3, #22
 800859c:	6003      	str	r3, [r0, #0]
 800859e:	f04f 30ff 	mov.w	r0, #4294967295
 80085a2:	bd38      	pop	{r3, r4, r5, pc}
 80085a4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80085a6:	b112      	cbz	r2, 80085ae <_raise_r+0x1e>
 80085a8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80085ac:	b94b      	cbnz	r3, 80085c2 <_raise_r+0x32>
 80085ae:	4620      	mov	r0, r4
 80085b0:	f000 f830 	bl	8008614 <_getpid_r>
 80085b4:	462a      	mov	r2, r5
 80085b6:	4601      	mov	r1, r0
 80085b8:	4620      	mov	r0, r4
 80085ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80085be:	f000 b817 	b.w	80085f0 <_kill_r>
 80085c2:	2b01      	cmp	r3, #1
 80085c4:	d00a      	beq.n	80085dc <_raise_r+0x4c>
 80085c6:	1c59      	adds	r1, r3, #1
 80085c8:	d103      	bne.n	80085d2 <_raise_r+0x42>
 80085ca:	2316      	movs	r3, #22
 80085cc:	6003      	str	r3, [r0, #0]
 80085ce:	2001      	movs	r0, #1
 80085d0:	bd38      	pop	{r3, r4, r5, pc}
 80085d2:	2400      	movs	r4, #0
 80085d4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80085d8:	4628      	mov	r0, r5
 80085da:	4798      	blx	r3
 80085dc:	2000      	movs	r0, #0
 80085de:	bd38      	pop	{r3, r4, r5, pc}

080085e0 <raise>:
 80085e0:	4b02      	ldr	r3, [pc, #8]	; (80085ec <raise+0xc>)
 80085e2:	4601      	mov	r1, r0
 80085e4:	6818      	ldr	r0, [r3, #0]
 80085e6:	f7ff bfd3 	b.w	8008590 <_raise_r>
 80085ea:	bf00      	nop
 80085ec:	20000010 	.word	0x20000010

080085f0 <_kill_r>:
 80085f0:	b538      	push	{r3, r4, r5, lr}
 80085f2:	4c07      	ldr	r4, [pc, #28]	; (8008610 <_kill_r+0x20>)
 80085f4:	2300      	movs	r3, #0
 80085f6:	4605      	mov	r5, r0
 80085f8:	4608      	mov	r0, r1
 80085fa:	4611      	mov	r1, r2
 80085fc:	6023      	str	r3, [r4, #0]
 80085fe:	f000 f9b9 	bl	8008974 <_kill>
 8008602:	1c43      	adds	r3, r0, #1
 8008604:	d102      	bne.n	800860c <_kill_r+0x1c>
 8008606:	6823      	ldr	r3, [r4, #0]
 8008608:	b103      	cbz	r3, 800860c <_kill_r+0x1c>
 800860a:	602b      	str	r3, [r5, #0]
 800860c:	bd38      	pop	{r3, r4, r5, pc}
 800860e:	bf00      	nop
 8008610:	20003e60 	.word	0x20003e60

08008614 <_getpid_r>:
 8008614:	f000 b9a6 	b.w	8008964 <_getpid>

08008618 <__register_exitproc>:
 8008618:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800861c:	4d35      	ldr	r5, [pc, #212]	; (80086f4 <__register_exitproc+0xdc>)
 800861e:	4680      	mov	r8, r0
 8008620:	6828      	ldr	r0, [r5, #0]
 8008622:	4699      	mov	r9, r3
 8008624:	460f      	mov	r7, r1
 8008626:	4692      	mov	sl, r2
 8008628:	f000 f97e 	bl	8008928 <__retarget_lock_acquire_recursive>
 800862c:	4b32      	ldr	r3, [pc, #200]	; (80086f8 <__register_exitproc+0xe0>)
 800862e:	681e      	ldr	r6, [r3, #0]
 8008630:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 8008632:	b93c      	cbnz	r4, 8008644 <__register_exitproc+0x2c>
 8008634:	4b31      	ldr	r3, [pc, #196]	; (80086fc <__register_exitproc+0xe4>)
 8008636:	f106 044c 	add.w	r4, r6, #76	; 0x4c
 800863a:	64b4      	str	r4, [r6, #72]	; 0x48
 800863c:	b113      	cbz	r3, 8008644 <__register_exitproc+0x2c>
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	f8c6 30d4 	str.w	r3, [r6, #212]	; 0xd4
 8008644:	6863      	ldr	r3, [r4, #4]
 8008646:	2b1f      	cmp	r3, #31
 8008648:	dd46      	ble.n	80086d8 <__register_exitproc+0xc0>
 800864a:	4b2d      	ldr	r3, [pc, #180]	; (8008700 <__register_exitproc+0xe8>)
 800864c:	b933      	cbnz	r3, 800865c <__register_exitproc+0x44>
 800864e:	6828      	ldr	r0, [r5, #0]
 8008650:	f000 f96c 	bl	800892c <__retarget_lock_release_recursive>
 8008654:	f04f 30ff 	mov.w	r0, #4294967295
 8008658:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800865c:	208c      	movs	r0, #140	; 0x8c
 800865e:	f7ff fbc9 	bl	8007df4 <malloc>
 8008662:	4604      	mov	r4, r0
 8008664:	2800      	cmp	r0, #0
 8008666:	d0f2      	beq.n	800864e <__register_exitproc+0x36>
 8008668:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 800866a:	6003      	str	r3, [r0, #0]
 800866c:	2200      	movs	r2, #0
 800866e:	6042      	str	r2, [r0, #4]
 8008670:	64b0      	str	r0, [r6, #72]	; 0x48
 8008672:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
 8008676:	f1b8 0f00 	cmp.w	r8, #0
 800867a:	d021      	beq.n	80086c0 <__register_exitproc+0xa8>
 800867c:	f44f 7084 	mov.w	r0, #264	; 0x108
 8008680:	f7ff fbb8 	bl	8007df4 <malloc>
 8008684:	b390      	cbz	r0, 80086ec <__register_exitproc+0xd4>
 8008686:	2300      	movs	r3, #0
 8008688:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 800868c:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
 8008690:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8008694:	6862      	ldr	r2, [r4, #4]
 8008696:	f840 a022 	str.w	sl, [r0, r2, lsl #2]
 800869a:	2301      	movs	r3, #1
 800869c:	4093      	lsls	r3, r2
 800869e:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 80086a2:	f8d0 2100 	ldr.w	r2, [r0, #256]	; 0x100
 80086a6:	431a      	orrs	r2, r3
 80086a8:	f1b8 0f02 	cmp.w	r8, #2
 80086ac:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
 80086b0:	f8c1 9080 	str.w	r9, [r1, #128]	; 0x80
 80086b4:	bf02      	ittt	eq
 80086b6:	f8d0 2104 	ldreq.w	r2, [r0, #260]	; 0x104
 80086ba:	4313      	orreq	r3, r2
 80086bc:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 80086c0:	6863      	ldr	r3, [r4, #4]
 80086c2:	6828      	ldr	r0, [r5, #0]
 80086c4:	1c5a      	adds	r2, r3, #1
 80086c6:	3302      	adds	r3, #2
 80086c8:	6062      	str	r2, [r4, #4]
 80086ca:	f844 7023 	str.w	r7, [r4, r3, lsl #2]
 80086ce:	f000 f92d 	bl	800892c <__retarget_lock_release_recursive>
 80086d2:	2000      	movs	r0, #0
 80086d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086d8:	f1b8 0f00 	cmp.w	r8, #0
 80086dc:	d0f0      	beq.n	80086c0 <__register_exitproc+0xa8>
 80086de:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80086e2:	2800      	cmp	r0, #0
 80086e4:	d1d6      	bne.n	8008694 <__register_exitproc+0x7c>
 80086e6:	4b06      	ldr	r3, [pc, #24]	; (8008700 <__register_exitproc+0xe8>)
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d1c7      	bne.n	800867c <__register_exitproc+0x64>
 80086ec:	6828      	ldr	r0, [r5, #0]
 80086ee:	f000 f91c 	bl	800892a <__retarget_lock_release>
 80086f2:	e7af      	b.n	8008654 <__register_exitproc+0x3c>
 80086f4:	20000514 	.word	0x20000514
 80086f8:	080096b4 	.word	0x080096b4
 80086fc:	080096b8 	.word	0x080096b8
 8008700:	08007df5 	.word	0x08007df5

08008704 <_malloc_trim_r>:
 8008704:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008708:	4f25      	ldr	r7, [pc, #148]	; (80087a0 <_malloc_trim_r+0x9c>)
 800870a:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 80087ac <_malloc_trim_r+0xa8>
 800870e:	4689      	mov	r9, r1
 8008710:	4606      	mov	r6, r0
 8008712:	f7ff fd99 	bl	8008248 <__malloc_lock>
 8008716:	68bb      	ldr	r3, [r7, #8]
 8008718:	685d      	ldr	r5, [r3, #4]
 800871a:	f1a8 0411 	sub.w	r4, r8, #17
 800871e:	f025 0503 	bic.w	r5, r5, #3
 8008722:	eba4 0409 	sub.w	r4, r4, r9
 8008726:	442c      	add	r4, r5
 8008728:	fbb4 f4f8 	udiv	r4, r4, r8
 800872c:	3c01      	subs	r4, #1
 800872e:	fb08 f404 	mul.w	r4, r8, r4
 8008732:	4544      	cmp	r4, r8
 8008734:	da05      	bge.n	8008742 <_malloc_trim_r+0x3e>
 8008736:	4630      	mov	r0, r6
 8008738:	f7ff fd8c 	bl	8008254 <__malloc_unlock>
 800873c:	2000      	movs	r0, #0
 800873e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008742:	2100      	movs	r1, #0
 8008744:	4630      	mov	r0, r6
 8008746:	f7ff ff13 	bl	8008570 <_sbrk_r>
 800874a:	68bb      	ldr	r3, [r7, #8]
 800874c:	442b      	add	r3, r5
 800874e:	4298      	cmp	r0, r3
 8008750:	d1f1      	bne.n	8008736 <_malloc_trim_r+0x32>
 8008752:	4261      	negs	r1, r4
 8008754:	4630      	mov	r0, r6
 8008756:	f7ff ff0b 	bl	8008570 <_sbrk_r>
 800875a:	3001      	adds	r0, #1
 800875c:	d110      	bne.n	8008780 <_malloc_trim_r+0x7c>
 800875e:	2100      	movs	r1, #0
 8008760:	4630      	mov	r0, r6
 8008762:	f7ff ff05 	bl	8008570 <_sbrk_r>
 8008766:	68ba      	ldr	r2, [r7, #8]
 8008768:	1a83      	subs	r3, r0, r2
 800876a:	2b0f      	cmp	r3, #15
 800876c:	dde3      	ble.n	8008736 <_malloc_trim_r+0x32>
 800876e:	490d      	ldr	r1, [pc, #52]	; (80087a4 <_malloc_trim_r+0xa0>)
 8008770:	6809      	ldr	r1, [r1, #0]
 8008772:	1a40      	subs	r0, r0, r1
 8008774:	490c      	ldr	r1, [pc, #48]	; (80087a8 <_malloc_trim_r+0xa4>)
 8008776:	f043 0301 	orr.w	r3, r3, #1
 800877a:	6008      	str	r0, [r1, #0]
 800877c:	6053      	str	r3, [r2, #4]
 800877e:	e7da      	b.n	8008736 <_malloc_trim_r+0x32>
 8008780:	68bb      	ldr	r3, [r7, #8]
 8008782:	4a09      	ldr	r2, [pc, #36]	; (80087a8 <_malloc_trim_r+0xa4>)
 8008784:	1b2d      	subs	r5, r5, r4
 8008786:	f045 0501 	orr.w	r5, r5, #1
 800878a:	605d      	str	r5, [r3, #4]
 800878c:	6813      	ldr	r3, [r2, #0]
 800878e:	4630      	mov	r0, r6
 8008790:	1b1c      	subs	r4, r3, r4
 8008792:	6014      	str	r4, [r2, #0]
 8008794:	f7ff fd5e 	bl	8008254 <__malloc_unlock>
 8008798:	2001      	movs	r0, #1
 800879a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800879e:	bf00      	nop
 80087a0:	20000104 	.word	0x20000104
 80087a4:	2000050c 	.word	0x2000050c
 80087a8:	20003d14 	.word	0x20003d14
 80087ac:	00001000 	.word	0x00001000

080087b0 <_free_r>:
 80087b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087b4:	4604      	mov	r4, r0
 80087b6:	4688      	mov	r8, r1
 80087b8:	2900      	cmp	r1, #0
 80087ba:	f000 80ab 	beq.w	8008914 <_free_r+0x164>
 80087be:	f7ff fd43 	bl	8008248 <__malloc_lock>
 80087c2:	f858 2c04 	ldr.w	r2, [r8, #-4]
 80087c6:	4d54      	ldr	r5, [pc, #336]	; (8008918 <_free_r+0x168>)
 80087c8:	f022 0001 	bic.w	r0, r2, #1
 80087cc:	f1a8 0308 	sub.w	r3, r8, #8
 80087d0:	181f      	adds	r7, r3, r0
 80087d2:	68a9      	ldr	r1, [r5, #8]
 80087d4:	687e      	ldr	r6, [r7, #4]
 80087d6:	428f      	cmp	r7, r1
 80087d8:	f026 0603 	bic.w	r6, r6, #3
 80087dc:	f002 0201 	and.w	r2, r2, #1
 80087e0:	d11b      	bne.n	800881a <_free_r+0x6a>
 80087e2:	4430      	add	r0, r6
 80087e4:	b93a      	cbnz	r2, 80087f6 <_free_r+0x46>
 80087e6:	f858 2c08 	ldr.w	r2, [r8, #-8]
 80087ea:	1a9b      	subs	r3, r3, r2
 80087ec:	4410      	add	r0, r2
 80087ee:	6899      	ldr	r1, [r3, #8]
 80087f0:	68da      	ldr	r2, [r3, #12]
 80087f2:	60ca      	str	r2, [r1, #12]
 80087f4:	6091      	str	r1, [r2, #8]
 80087f6:	f040 0201 	orr.w	r2, r0, #1
 80087fa:	605a      	str	r2, [r3, #4]
 80087fc:	60ab      	str	r3, [r5, #8]
 80087fe:	4b47      	ldr	r3, [pc, #284]	; (800891c <_free_r+0x16c>)
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	4298      	cmp	r0, r3
 8008804:	d304      	bcc.n	8008810 <_free_r+0x60>
 8008806:	4b46      	ldr	r3, [pc, #280]	; (8008920 <_free_r+0x170>)
 8008808:	4620      	mov	r0, r4
 800880a:	6819      	ldr	r1, [r3, #0]
 800880c:	f7ff ff7a 	bl	8008704 <_malloc_trim_r>
 8008810:	4620      	mov	r0, r4
 8008812:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008816:	f7ff bd1d 	b.w	8008254 <__malloc_unlock>
 800881a:	607e      	str	r6, [r7, #4]
 800881c:	2a00      	cmp	r2, #0
 800881e:	d139      	bne.n	8008894 <_free_r+0xe4>
 8008820:	f858 1c08 	ldr.w	r1, [r8, #-8]
 8008824:	1a5b      	subs	r3, r3, r1
 8008826:	4408      	add	r0, r1
 8008828:	6899      	ldr	r1, [r3, #8]
 800882a:	f105 0e08 	add.w	lr, r5, #8
 800882e:	4571      	cmp	r1, lr
 8008830:	d032      	beq.n	8008898 <_free_r+0xe8>
 8008832:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 8008836:	f8c1 e00c 	str.w	lr, [r1, #12]
 800883a:	f8ce 1008 	str.w	r1, [lr, #8]
 800883e:	19b9      	adds	r1, r7, r6
 8008840:	6849      	ldr	r1, [r1, #4]
 8008842:	07c9      	lsls	r1, r1, #31
 8008844:	d40a      	bmi.n	800885c <_free_r+0xac>
 8008846:	4430      	add	r0, r6
 8008848:	68b9      	ldr	r1, [r7, #8]
 800884a:	bb3a      	cbnz	r2, 800889c <_free_r+0xec>
 800884c:	4e35      	ldr	r6, [pc, #212]	; (8008924 <_free_r+0x174>)
 800884e:	42b1      	cmp	r1, r6
 8008850:	d124      	bne.n	800889c <_free_r+0xec>
 8008852:	616b      	str	r3, [r5, #20]
 8008854:	612b      	str	r3, [r5, #16]
 8008856:	2201      	movs	r2, #1
 8008858:	60d9      	str	r1, [r3, #12]
 800885a:	6099      	str	r1, [r3, #8]
 800885c:	f040 0101 	orr.w	r1, r0, #1
 8008860:	6059      	str	r1, [r3, #4]
 8008862:	5018      	str	r0, [r3, r0]
 8008864:	2a00      	cmp	r2, #0
 8008866:	d1d3      	bne.n	8008810 <_free_r+0x60>
 8008868:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800886c:	d21a      	bcs.n	80088a4 <_free_r+0xf4>
 800886e:	08c0      	lsrs	r0, r0, #3
 8008870:	1081      	asrs	r1, r0, #2
 8008872:	2201      	movs	r2, #1
 8008874:	408a      	lsls	r2, r1
 8008876:	6869      	ldr	r1, [r5, #4]
 8008878:	3001      	adds	r0, #1
 800887a:	430a      	orrs	r2, r1
 800887c:	606a      	str	r2, [r5, #4]
 800887e:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 8008882:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 8008886:	6099      	str	r1, [r3, #8]
 8008888:	3a08      	subs	r2, #8
 800888a:	60da      	str	r2, [r3, #12]
 800888c:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 8008890:	60cb      	str	r3, [r1, #12]
 8008892:	e7bd      	b.n	8008810 <_free_r+0x60>
 8008894:	2200      	movs	r2, #0
 8008896:	e7d2      	b.n	800883e <_free_r+0x8e>
 8008898:	2201      	movs	r2, #1
 800889a:	e7d0      	b.n	800883e <_free_r+0x8e>
 800889c:	68fe      	ldr	r6, [r7, #12]
 800889e:	60ce      	str	r6, [r1, #12]
 80088a0:	60b1      	str	r1, [r6, #8]
 80088a2:	e7db      	b.n	800885c <_free_r+0xac>
 80088a4:	0a42      	lsrs	r2, r0, #9
 80088a6:	2a04      	cmp	r2, #4
 80088a8:	d813      	bhi.n	80088d2 <_free_r+0x122>
 80088aa:	0982      	lsrs	r2, r0, #6
 80088ac:	3238      	adds	r2, #56	; 0x38
 80088ae:	1c51      	adds	r1, r2, #1
 80088b0:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 80088b4:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 80088b8:	428e      	cmp	r6, r1
 80088ba:	d124      	bne.n	8008906 <_free_r+0x156>
 80088bc:	2001      	movs	r0, #1
 80088be:	1092      	asrs	r2, r2, #2
 80088c0:	fa00 f202 	lsl.w	r2, r0, r2
 80088c4:	6868      	ldr	r0, [r5, #4]
 80088c6:	4302      	orrs	r2, r0
 80088c8:	606a      	str	r2, [r5, #4]
 80088ca:	60de      	str	r6, [r3, #12]
 80088cc:	6099      	str	r1, [r3, #8]
 80088ce:	60b3      	str	r3, [r6, #8]
 80088d0:	e7de      	b.n	8008890 <_free_r+0xe0>
 80088d2:	2a14      	cmp	r2, #20
 80088d4:	d801      	bhi.n	80088da <_free_r+0x12a>
 80088d6:	325b      	adds	r2, #91	; 0x5b
 80088d8:	e7e9      	b.n	80088ae <_free_r+0xfe>
 80088da:	2a54      	cmp	r2, #84	; 0x54
 80088dc:	d802      	bhi.n	80088e4 <_free_r+0x134>
 80088de:	0b02      	lsrs	r2, r0, #12
 80088e0:	326e      	adds	r2, #110	; 0x6e
 80088e2:	e7e4      	b.n	80088ae <_free_r+0xfe>
 80088e4:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80088e8:	d802      	bhi.n	80088f0 <_free_r+0x140>
 80088ea:	0bc2      	lsrs	r2, r0, #15
 80088ec:	3277      	adds	r2, #119	; 0x77
 80088ee:	e7de      	b.n	80088ae <_free_r+0xfe>
 80088f0:	f240 5154 	movw	r1, #1364	; 0x554
 80088f4:	428a      	cmp	r2, r1
 80088f6:	bf9a      	itte	ls
 80088f8:	0c82      	lsrls	r2, r0, #18
 80088fa:	327c      	addls	r2, #124	; 0x7c
 80088fc:	227e      	movhi	r2, #126	; 0x7e
 80088fe:	e7d6      	b.n	80088ae <_free_r+0xfe>
 8008900:	6889      	ldr	r1, [r1, #8]
 8008902:	428e      	cmp	r6, r1
 8008904:	d004      	beq.n	8008910 <_free_r+0x160>
 8008906:	684a      	ldr	r2, [r1, #4]
 8008908:	f022 0203 	bic.w	r2, r2, #3
 800890c:	4290      	cmp	r0, r2
 800890e:	d3f7      	bcc.n	8008900 <_free_r+0x150>
 8008910:	68ce      	ldr	r6, [r1, #12]
 8008912:	e7da      	b.n	80088ca <_free_r+0x11a>
 8008914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008918:	20000104 	.word	0x20000104
 800891c:	20000510 	.word	0x20000510
 8008920:	20003d44 	.word	0x20003d44
 8008924:	2000010c 	.word	0x2000010c

08008928 <__retarget_lock_acquire_recursive>:
 8008928:	4770      	bx	lr

0800892a <__retarget_lock_release>:
 800892a:	4770      	bx	lr

0800892c <__retarget_lock_release_recursive>:
 800892c:	4770      	bx	lr

0800892e <memmove>:
 800892e:	4288      	cmp	r0, r1
 8008930:	b510      	push	{r4, lr}
 8008932:	eb01 0302 	add.w	r3, r1, r2
 8008936:	d803      	bhi.n	8008940 <memmove+0x12>
 8008938:	1e42      	subs	r2, r0, #1
 800893a:	4299      	cmp	r1, r3
 800893c:	d10c      	bne.n	8008958 <memmove+0x2a>
 800893e:	bd10      	pop	{r4, pc}
 8008940:	4298      	cmp	r0, r3
 8008942:	d2f9      	bcs.n	8008938 <memmove+0xa>
 8008944:	1881      	adds	r1, r0, r2
 8008946:	1ad2      	subs	r2, r2, r3
 8008948:	42d3      	cmn	r3, r2
 800894a:	d100      	bne.n	800894e <memmove+0x20>
 800894c:	bd10      	pop	{r4, pc}
 800894e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008952:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008956:	e7f7      	b.n	8008948 <memmove+0x1a>
 8008958:	f811 4b01 	ldrb.w	r4, [r1], #1
 800895c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008960:	e7eb      	b.n	800893a <memmove+0xc>
	...

08008964 <_getpid>:
 8008964:	4b02      	ldr	r3, [pc, #8]	; (8008970 <_getpid+0xc>)
 8008966:	2258      	movs	r2, #88	; 0x58
 8008968:	601a      	str	r2, [r3, #0]
 800896a:	f04f 30ff 	mov.w	r0, #4294967295
 800896e:	4770      	bx	lr
 8008970:	20003e60 	.word	0x20003e60

08008974 <_kill>:
 8008974:	4b02      	ldr	r3, [pc, #8]	; (8008980 <_kill+0xc>)
 8008976:	2258      	movs	r2, #88	; 0x58
 8008978:	601a      	str	r2, [r3, #0]
 800897a:	f04f 30ff 	mov.w	r0, #4294967295
 800897e:	4770      	bx	lr
 8008980:	20003e60 	.word	0x20003e60

08008984 <_sbrk>:
 8008984:	4b04      	ldr	r3, [pc, #16]	; (8008998 <_sbrk+0x14>)
 8008986:	6819      	ldr	r1, [r3, #0]
 8008988:	4602      	mov	r2, r0
 800898a:	b909      	cbnz	r1, 8008990 <_sbrk+0xc>
 800898c:	4903      	ldr	r1, [pc, #12]	; (800899c <_sbrk+0x18>)
 800898e:	6019      	str	r1, [r3, #0]
 8008990:	6818      	ldr	r0, [r3, #0]
 8008992:	4402      	add	r2, r0
 8008994:	601a      	str	r2, [r3, #0]
 8008996:	4770      	bx	lr
 8008998:	20003e50 	.word	0x20003e50
 800899c:	20003e64 	.word	0x20003e64

080089a0 <_exit>:
 80089a0:	e7fe      	b.n	80089a0 <_exit>
	...

080089a4 <_init>:
 80089a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089a6:	bf00      	nop
 80089a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089aa:	bc08      	pop	{r3}
 80089ac:	469e      	mov	lr, r3
 80089ae:	4770      	bx	lr

080089b0 <_fini>:
 80089b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089b2:	bf00      	nop
 80089b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089b6:	bc08      	pop	{r3}
 80089b8:	469e      	mov	lr, r3
 80089ba:	4770      	bx	lr
