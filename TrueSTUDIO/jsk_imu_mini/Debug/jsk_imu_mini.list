
jsk_imu_mini.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c208  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000cbc  0800c3d0  0800c3d0  0001c3d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000350  0800d08c  0800d08c  0001d08c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000530  0800d3dc  0800d3dc  0001d3dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .init_array   00000008  0800d90c  0800d90c  0001d90c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  0800d914  0800d914  0001d914  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         00000518  20000000  0800d918  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00003958  20000518  0800de30  00020518  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20003e70  0800de30  00023e70  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020518  2**0
                  CONTENTS, READONLY
 11 .debug_line   0000a57f  00000000  00000000  00020548  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_info   000329e9  00000000  00000000  0002aac7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005523  00000000  00000000  0005d4b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001328  00000000  00000000  000629d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001680  00000000  00000000  00063d00  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    00005cca  00000000  00000000  00065380  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    0000f001  00000000  00000000  0006b04a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      000000fa  00000000  00000000  0007a04b  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000058f4  00000000  00000000  0007a148  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .stab         0000003c  00000000  00000000  0007fa3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stabstr      00000076  00000000  00000000  0007fa78  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000518 	.word	0x20000518
 80001e4:	00000000 	.word	0x00000000
 80001e8:	0800c3b8 	.word	0x0800c3b8

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	2000051c 	.word	0x2000051c
 8000204:	0800c3b8 	.word	0x0800c3b8

08000208 <strcmp>:
 8000208:	f810 2b01 	ldrb.w	r2, [r0], #1
 800020c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000210:	2a01      	cmp	r2, #1
 8000212:	bf28      	it	cs
 8000214:	429a      	cmpcs	r2, r3
 8000216:	d0f7      	beq.n	8000208 <strcmp>
 8000218:	1ad0      	subs	r0, r2, r3
 800021a:	4770      	bx	lr

0800021c <strlen>:
 800021c:	4603      	mov	r3, r0
 800021e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000222:	2a00      	cmp	r2, #0
 8000224:	d1fb      	bne.n	800021e <strlen+0x2>
 8000226:	1a18      	subs	r0, r3, r0
 8000228:	3801      	subs	r0, #1
 800022a:	4770      	bx	lr

0800022c <__aeabi_uldivmod>:
 800022c:	b953      	cbnz	r3, 8000244 <__aeabi_uldivmod+0x18>
 800022e:	b94a      	cbnz	r2, 8000244 <__aeabi_uldivmod+0x18>
 8000230:	2900      	cmp	r1, #0
 8000232:	bf08      	it	eq
 8000234:	2800      	cmpeq	r0, #0
 8000236:	bf1c      	itt	ne
 8000238:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800023c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000240:	f001 b8f6 	b.w	8001430 <__aeabi_idiv0>
 8000244:	f1ad 0c08 	sub.w	ip, sp, #8
 8000248:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800024c:	f000 f806 	bl	800025c <__udivmoddi4>
 8000250:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000254:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000258:	b004      	add	sp, #16
 800025a:	4770      	bx	lr

0800025c <__udivmoddi4>:
 800025c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000260:	468c      	mov	ip, r1
 8000262:	460d      	mov	r5, r1
 8000264:	4604      	mov	r4, r0
 8000266:	9e08      	ldr	r6, [sp, #32]
 8000268:	2b00      	cmp	r3, #0
 800026a:	d151      	bne.n	8000310 <__udivmoddi4+0xb4>
 800026c:	428a      	cmp	r2, r1
 800026e:	4617      	mov	r7, r2
 8000270:	d96d      	bls.n	800034e <__udivmoddi4+0xf2>
 8000272:	fab2 fe82 	clz	lr, r2
 8000276:	f1be 0f00 	cmp.w	lr, #0
 800027a:	d00b      	beq.n	8000294 <__udivmoddi4+0x38>
 800027c:	f1ce 0c20 	rsb	ip, lr, #32
 8000280:	fa01 f50e 	lsl.w	r5, r1, lr
 8000284:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000288:	fa02 f70e 	lsl.w	r7, r2, lr
 800028c:	ea4c 0c05 	orr.w	ip, ip, r5
 8000290:	fa00 f40e 	lsl.w	r4, r0, lr
 8000294:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000298:	0c25      	lsrs	r5, r4, #16
 800029a:	fbbc f8fa 	udiv	r8, ip, sl
 800029e:	fa1f f987 	uxth.w	r9, r7
 80002a2:	fb0a cc18 	mls	ip, sl, r8, ip
 80002a6:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80002aa:	fb08 f309 	mul.w	r3, r8, r9
 80002ae:	42ab      	cmp	r3, r5
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x6c>
 80002b2:	19ed      	adds	r5, r5, r7
 80002b4:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 80002b8:	f080 8123 	bcs.w	8000502 <__udivmoddi4+0x2a6>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	f240 8120 	bls.w	8000502 <__udivmoddi4+0x2a6>
 80002c2:	f1a8 0802 	sub.w	r8, r8, #2
 80002c6:	443d      	add	r5, r7
 80002c8:	1aed      	subs	r5, r5, r3
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb5 f0fa 	udiv	r0, r5, sl
 80002d0:	fb0a 5510 	mls	r5, sl, r0, r5
 80002d4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002d8:	fb00 f909 	mul.w	r9, r0, r9
 80002dc:	45a1      	cmp	r9, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x98>
 80002e0:	19e4      	adds	r4, r4, r7
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002e6:	f080 810a 	bcs.w	80004fe <__udivmoddi4+0x2a2>
 80002ea:	45a1      	cmp	r9, r4
 80002ec:	f240 8107 	bls.w	80004fe <__udivmoddi4+0x2a2>
 80002f0:	3802      	subs	r0, #2
 80002f2:	443c      	add	r4, r7
 80002f4:	eba4 0409 	sub.w	r4, r4, r9
 80002f8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002fc:	2100      	movs	r1, #0
 80002fe:	2e00      	cmp	r6, #0
 8000300:	d061      	beq.n	80003c6 <__udivmoddi4+0x16a>
 8000302:	fa24 f40e 	lsr.w	r4, r4, lr
 8000306:	2300      	movs	r3, #0
 8000308:	6034      	str	r4, [r6, #0]
 800030a:	6073      	str	r3, [r6, #4]
 800030c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000310:	428b      	cmp	r3, r1
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0xc8>
 8000314:	2e00      	cmp	r6, #0
 8000316:	d054      	beq.n	80003c2 <__udivmoddi4+0x166>
 8000318:	2100      	movs	r1, #0
 800031a:	e886 0021 	stmia.w	r6, {r0, r5}
 800031e:	4608      	mov	r0, r1
 8000320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000324:	fab3 f183 	clz	r1, r3
 8000328:	2900      	cmp	r1, #0
 800032a:	f040 808e 	bne.w	800044a <__udivmoddi4+0x1ee>
 800032e:	42ab      	cmp	r3, r5
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0xdc>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80fa 	bhi.w	800052c <__udivmoddi4+0x2d0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb65 0503 	sbc.w	r5, r5, r3
 800033e:	2001      	movs	r0, #1
 8000340:	46ac      	mov	ip, r5
 8000342:	2e00      	cmp	r6, #0
 8000344:	d03f      	beq.n	80003c6 <__udivmoddi4+0x16a>
 8000346:	e886 1010 	stmia.w	r6, {r4, ip}
 800034a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034e:	b912      	cbnz	r2, 8000356 <__udivmoddi4+0xfa>
 8000350:	2701      	movs	r7, #1
 8000352:	fbb7 f7f2 	udiv	r7, r7, r2
 8000356:	fab7 fe87 	clz	lr, r7
 800035a:	f1be 0f00 	cmp.w	lr, #0
 800035e:	d134      	bne.n	80003ca <__udivmoddi4+0x16e>
 8000360:	1beb      	subs	r3, r5, r7
 8000362:	0c3a      	lsrs	r2, r7, #16
 8000364:	fa1f fc87 	uxth.w	ip, r7
 8000368:	2101      	movs	r1, #1
 800036a:	fbb3 f8f2 	udiv	r8, r3, r2
 800036e:	0c25      	lsrs	r5, r4, #16
 8000370:	fb02 3318 	mls	r3, r2, r8, r3
 8000374:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000378:	fb0c f308 	mul.w	r3, ip, r8
 800037c:	42ab      	cmp	r3, r5
 800037e:	d907      	bls.n	8000390 <__udivmoddi4+0x134>
 8000380:	19ed      	adds	r5, r5, r7
 8000382:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x132>
 8000388:	42ab      	cmp	r3, r5
 800038a:	f200 80d1 	bhi.w	8000530 <__udivmoddi4+0x2d4>
 800038e:	4680      	mov	r8, r0
 8000390:	1aed      	subs	r5, r5, r3
 8000392:	b2a3      	uxth	r3, r4
 8000394:	fbb5 f0f2 	udiv	r0, r5, r2
 8000398:	fb02 5510 	mls	r5, r2, r0, r5
 800039c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80003a0:	fb0c fc00 	mul.w	ip, ip, r0
 80003a4:	45a4      	cmp	ip, r4
 80003a6:	d907      	bls.n	80003b8 <__udivmoddi4+0x15c>
 80003a8:	19e4      	adds	r4, r4, r7
 80003aa:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003ae:	d202      	bcs.n	80003b6 <__udivmoddi4+0x15a>
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	f200 80b8 	bhi.w	8000526 <__udivmoddi4+0x2ca>
 80003b6:	4618      	mov	r0, r3
 80003b8:	eba4 040c 	sub.w	r4, r4, ip
 80003bc:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003c0:	e79d      	b.n	80002fe <__udivmoddi4+0xa2>
 80003c2:	4631      	mov	r1, r6
 80003c4:	4630      	mov	r0, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	f1ce 0420 	rsb	r4, lr, #32
 80003ce:	fa05 f30e 	lsl.w	r3, r5, lr
 80003d2:	fa07 f70e 	lsl.w	r7, r7, lr
 80003d6:	fa20 f804 	lsr.w	r8, r0, r4
 80003da:	0c3a      	lsrs	r2, r7, #16
 80003dc:	fa25 f404 	lsr.w	r4, r5, r4
 80003e0:	ea48 0803 	orr.w	r8, r8, r3
 80003e4:	fbb4 f1f2 	udiv	r1, r4, r2
 80003e8:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003ec:	fb02 4411 	mls	r4, r2, r1, r4
 80003f0:	fa1f fc87 	uxth.w	ip, r7
 80003f4:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003f8:	fb01 f30c 	mul.w	r3, r1, ip
 80003fc:	42ab      	cmp	r3, r5
 80003fe:	fa00 f40e 	lsl.w	r4, r0, lr
 8000402:	d909      	bls.n	8000418 <__udivmoddi4+0x1bc>
 8000404:	19ed      	adds	r5, r5, r7
 8000406:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 800040a:	f080 808a 	bcs.w	8000522 <__udivmoddi4+0x2c6>
 800040e:	42ab      	cmp	r3, r5
 8000410:	f240 8087 	bls.w	8000522 <__udivmoddi4+0x2c6>
 8000414:	3902      	subs	r1, #2
 8000416:	443d      	add	r5, r7
 8000418:	1aeb      	subs	r3, r5, r3
 800041a:	fa1f f588 	uxth.w	r5, r8
 800041e:	fbb3 f0f2 	udiv	r0, r3, r2
 8000422:	fb02 3310 	mls	r3, r2, r0, r3
 8000426:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800042a:	fb00 f30c 	mul.w	r3, r0, ip
 800042e:	42ab      	cmp	r3, r5
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x1e6>
 8000432:	19ed      	adds	r5, r5, r7
 8000434:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000438:	d26f      	bcs.n	800051a <__udivmoddi4+0x2be>
 800043a:	42ab      	cmp	r3, r5
 800043c:	d96d      	bls.n	800051a <__udivmoddi4+0x2be>
 800043e:	3802      	subs	r0, #2
 8000440:	443d      	add	r5, r7
 8000442:	1aeb      	subs	r3, r5, r3
 8000444:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000448:	e78f      	b.n	800036a <__udivmoddi4+0x10e>
 800044a:	f1c1 0720 	rsb	r7, r1, #32
 800044e:	fa22 f807 	lsr.w	r8, r2, r7
 8000452:	408b      	lsls	r3, r1
 8000454:	fa05 f401 	lsl.w	r4, r5, r1
 8000458:	ea48 0303 	orr.w	r3, r8, r3
 800045c:	fa20 fe07 	lsr.w	lr, r0, r7
 8000460:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000464:	40fd      	lsrs	r5, r7
 8000466:	ea4e 0e04 	orr.w	lr, lr, r4
 800046a:	fbb5 f9fc 	udiv	r9, r5, ip
 800046e:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000472:	fb0c 5519 	mls	r5, ip, r9, r5
 8000476:	fa1f f883 	uxth.w	r8, r3
 800047a:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800047e:	fb09 f408 	mul.w	r4, r9, r8
 8000482:	42ac      	cmp	r4, r5
 8000484:	fa02 f201 	lsl.w	r2, r2, r1
 8000488:	fa00 fa01 	lsl.w	sl, r0, r1
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x244>
 800048e:	18ed      	adds	r5, r5, r3
 8000490:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000494:	d243      	bcs.n	800051e <__udivmoddi4+0x2c2>
 8000496:	42ac      	cmp	r4, r5
 8000498:	d941      	bls.n	800051e <__udivmoddi4+0x2c2>
 800049a:	f1a9 0902 	sub.w	r9, r9, #2
 800049e:	441d      	add	r5, r3
 80004a0:	1b2d      	subs	r5, r5, r4
 80004a2:	fa1f fe8e 	uxth.w	lr, lr
 80004a6:	fbb5 f0fc 	udiv	r0, r5, ip
 80004aa:	fb0c 5510 	mls	r5, ip, r0, r5
 80004ae:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 80004b2:	fb00 f808 	mul.w	r8, r0, r8
 80004b6:	45a0      	cmp	r8, r4
 80004b8:	d907      	bls.n	80004ca <__udivmoddi4+0x26e>
 80004ba:	18e4      	adds	r4, r4, r3
 80004bc:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 80004c0:	d229      	bcs.n	8000516 <__udivmoddi4+0x2ba>
 80004c2:	45a0      	cmp	r8, r4
 80004c4:	d927      	bls.n	8000516 <__udivmoddi4+0x2ba>
 80004c6:	3802      	subs	r0, #2
 80004c8:	441c      	add	r4, r3
 80004ca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ce:	eba4 0408 	sub.w	r4, r4, r8
 80004d2:	fba0 8902 	umull	r8, r9, r0, r2
 80004d6:	454c      	cmp	r4, r9
 80004d8:	46c6      	mov	lr, r8
 80004da:	464d      	mov	r5, r9
 80004dc:	d315      	bcc.n	800050a <__udivmoddi4+0x2ae>
 80004de:	d012      	beq.n	8000506 <__udivmoddi4+0x2aa>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x29c>
 80004e2:	ebba 030e 	subs.w	r3, sl, lr
 80004e6:	eb64 0405 	sbc.w	r4, r4, r5
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40cb      	lsrs	r3, r1
 80004f0:	431f      	orrs	r7, r3
 80004f2:	40cc      	lsrs	r4, r1
 80004f4:	6037      	str	r7, [r6, #0]
 80004f6:	6074      	str	r4, [r6, #4]
 80004f8:	2100      	movs	r1, #0
 80004fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fe:	4618      	mov	r0, r3
 8000500:	e6f8      	b.n	80002f4 <__udivmoddi4+0x98>
 8000502:	4690      	mov	r8, r2
 8000504:	e6e0      	b.n	80002c8 <__udivmoddi4+0x6c>
 8000506:	45c2      	cmp	sl, r8
 8000508:	d2ea      	bcs.n	80004e0 <__udivmoddi4+0x284>
 800050a:	ebb8 0e02 	subs.w	lr, r8, r2
 800050e:	eb69 0503 	sbc.w	r5, r9, r3
 8000512:	3801      	subs	r0, #1
 8000514:	e7e4      	b.n	80004e0 <__udivmoddi4+0x284>
 8000516:	4628      	mov	r0, r5
 8000518:	e7d7      	b.n	80004ca <__udivmoddi4+0x26e>
 800051a:	4640      	mov	r0, r8
 800051c:	e791      	b.n	8000442 <__udivmoddi4+0x1e6>
 800051e:	4681      	mov	r9, r0
 8000520:	e7be      	b.n	80004a0 <__udivmoddi4+0x244>
 8000522:	4601      	mov	r1, r0
 8000524:	e778      	b.n	8000418 <__udivmoddi4+0x1bc>
 8000526:	3802      	subs	r0, #2
 8000528:	443c      	add	r4, r7
 800052a:	e745      	b.n	80003b8 <__udivmoddi4+0x15c>
 800052c:	4608      	mov	r0, r1
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xe6>
 8000530:	f1a8 0802 	sub.w	r8, r8, #2
 8000534:	443d      	add	r5, r7
 8000536:	e72b      	b.n	8000390 <__udivmoddi4+0x134>

08000538 <selfrel_offset31>:
 8000538:	6803      	ldr	r3, [r0, #0]
 800053a:	005a      	lsls	r2, r3, #1
 800053c:	bf4c      	ite	mi
 800053e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8000542:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 8000546:	4418      	add	r0, r3
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop

0800054c <search_EIT_table>:
 800054c:	b361      	cbz	r1, 80005a8 <search_EIT_table+0x5c>
 800054e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000552:	f101 3aff 	add.w	sl, r1, #4294967295	; 0xffffffff
 8000556:	4690      	mov	r8, r2
 8000558:	4606      	mov	r6, r0
 800055a:	46d1      	mov	r9, sl
 800055c:	2700      	movs	r7, #0
 800055e:	eb07 0409 	add.w	r4, r7, r9
 8000562:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 8000566:	1064      	asrs	r4, r4, #1
 8000568:	00e5      	lsls	r5, r4, #3
 800056a:	1971      	adds	r1, r6, r5
 800056c:	4608      	mov	r0, r1
 800056e:	f7ff ffe3 	bl	8000538 <selfrel_offset31>
 8000572:	45a2      	cmp	sl, r4
 8000574:	4683      	mov	fp, r0
 8000576:	f105 0008 	add.w	r0, r5, #8
 800057a:	4430      	add	r0, r6
 800057c:	d009      	beq.n	8000592 <search_EIT_table+0x46>
 800057e:	f7ff ffdb 	bl	8000538 <selfrel_offset31>
 8000582:	45c3      	cmp	fp, r8
 8000584:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
 8000588:	d805      	bhi.n	8000596 <search_EIT_table+0x4a>
 800058a:	4540      	cmp	r0, r8
 800058c:	d209      	bcs.n	80005a2 <search_EIT_table+0x56>
 800058e:	1c67      	adds	r7, r4, #1
 8000590:	e7e5      	b.n	800055e <search_EIT_table+0x12>
 8000592:	45c3      	cmp	fp, r8
 8000594:	d905      	bls.n	80005a2 <search_EIT_table+0x56>
 8000596:	42a7      	cmp	r7, r4
 8000598:	d002      	beq.n	80005a0 <search_EIT_table+0x54>
 800059a:	f104 39ff 	add.w	r9, r4, #4294967295	; 0xffffffff
 800059e:	e7de      	b.n	800055e <search_EIT_table+0x12>
 80005a0:	2100      	movs	r1, #0
 80005a2:	4608      	mov	r0, r1
 80005a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80005a8:	4608      	mov	r0, r1
 80005aa:	4770      	bx	lr

080005ac <__gnu_unwind_get_pr_addr>:
 80005ac:	2801      	cmp	r0, #1
 80005ae:	d007      	beq.n	80005c0 <__gnu_unwind_get_pr_addr+0x14>
 80005b0:	2802      	cmp	r0, #2
 80005b2:	d007      	beq.n	80005c4 <__gnu_unwind_get_pr_addr+0x18>
 80005b4:	4b04      	ldr	r3, [pc, #16]	; (80005c8 <__gnu_unwind_get_pr_addr+0x1c>)
 80005b6:	2800      	cmp	r0, #0
 80005b8:	bf0c      	ite	eq
 80005ba:	4618      	moveq	r0, r3
 80005bc:	2000      	movne	r0, #0
 80005be:	4770      	bx	lr
 80005c0:	4802      	ldr	r0, [pc, #8]	; (80005cc <__gnu_unwind_get_pr_addr+0x20>)
 80005c2:	4770      	bx	lr
 80005c4:	4802      	ldr	r0, [pc, #8]	; (80005d0 <__gnu_unwind_get_pr_addr+0x24>)
 80005c6:	4770      	bx	lr
 80005c8:	08000cb1 	.word	0x08000cb1
 80005cc:	08000cb5 	.word	0x08000cb5
 80005d0:	08000cb9 	.word	0x08000cb9

080005d4 <get_eit_entry>:
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	4b24      	ldr	r3, [pc, #144]	; (8000668 <get_eit_entry+0x94>)
 80005d8:	b083      	sub	sp, #12
 80005da:	4604      	mov	r4, r0
 80005dc:	1e8d      	subs	r5, r1, #2
 80005de:	b37b      	cbz	r3, 8000640 <get_eit_entry+0x6c>
 80005e0:	a901      	add	r1, sp, #4
 80005e2:	4628      	mov	r0, r5
 80005e4:	f3af 8000 	nop.w
 80005e8:	b320      	cbz	r0, 8000634 <get_eit_entry+0x60>
 80005ea:	9901      	ldr	r1, [sp, #4]
 80005ec:	462a      	mov	r2, r5
 80005ee:	f7ff ffad 	bl	800054c <search_EIT_table>
 80005f2:	4601      	mov	r1, r0
 80005f4:	b1f0      	cbz	r0, 8000634 <get_eit_entry+0x60>
 80005f6:	f7ff ff9f 	bl	8000538 <selfrel_offset31>
 80005fa:	684b      	ldr	r3, [r1, #4]
 80005fc:	64a0      	str	r0, [r4, #72]	; 0x48
 80005fe:	2b01      	cmp	r3, #1
 8000600:	d012      	beq.n	8000628 <get_eit_entry+0x54>
 8000602:	2b00      	cmp	r3, #0
 8000604:	f101 0004 	add.w	r0, r1, #4
 8000608:	db20      	blt.n	800064c <get_eit_entry+0x78>
 800060a:	f7ff ff95 	bl	8000538 <selfrel_offset31>
 800060e:	2300      	movs	r3, #0
 8000610:	64e0      	str	r0, [r4, #76]	; 0x4c
 8000612:	6523      	str	r3, [r4, #80]	; 0x50
 8000614:	6803      	ldr	r3, [r0, #0]
 8000616:	2b00      	cmp	r3, #0
 8000618:	db1c      	blt.n	8000654 <get_eit_entry+0x80>
 800061a:	f7ff ff8d 	bl	8000538 <selfrel_offset31>
 800061e:	2300      	movs	r3, #0
 8000620:	6120      	str	r0, [r4, #16]
 8000622:	4618      	mov	r0, r3
 8000624:	b003      	add	sp, #12
 8000626:	bd30      	pop	{r4, r5, pc}
 8000628:	2300      	movs	r3, #0
 800062a:	6123      	str	r3, [r4, #16]
 800062c:	2305      	movs	r3, #5
 800062e:	4618      	mov	r0, r3
 8000630:	b003      	add	sp, #12
 8000632:	bd30      	pop	{r4, r5, pc}
 8000634:	2300      	movs	r3, #0
 8000636:	6123      	str	r3, [r4, #16]
 8000638:	2309      	movs	r3, #9
 800063a:	4618      	mov	r0, r3
 800063c:	b003      	add	sp, #12
 800063e:	bd30      	pop	{r4, r5, pc}
 8000640:	490a      	ldr	r1, [pc, #40]	; (800066c <get_eit_entry+0x98>)
 8000642:	480b      	ldr	r0, [pc, #44]	; (8000670 <get_eit_entry+0x9c>)
 8000644:	1a09      	subs	r1, r1, r0
 8000646:	10c9      	asrs	r1, r1, #3
 8000648:	9101      	str	r1, [sp, #4]
 800064a:	e7cf      	b.n	80005ec <get_eit_entry+0x18>
 800064c:	2301      	movs	r3, #1
 800064e:	64e0      	str	r0, [r4, #76]	; 0x4c
 8000650:	6523      	str	r3, [r4, #80]	; 0x50
 8000652:	e7df      	b.n	8000614 <get_eit_entry+0x40>
 8000654:	f3c3 6003 	ubfx	r0, r3, #24, #4
 8000658:	f7ff ffa8 	bl	80005ac <__gnu_unwind_get_pr_addr>
 800065c:	2800      	cmp	r0, #0
 800065e:	6120      	str	r0, [r4, #16]
 8000660:	bf14      	ite	ne
 8000662:	2300      	movne	r3, #0
 8000664:	2309      	moveq	r3, #9
 8000666:	e7dc      	b.n	8000622 <get_eit_entry+0x4e>
 8000668:	00000000 	.word	0x00000000
 800066c:	0800d90c 	.word	0x0800d90c
 8000670:	0800d3dc 	.word	0x0800d3dc

08000674 <restore_non_core_regs>:
 8000674:	6803      	ldr	r3, [r0, #0]
 8000676:	07da      	lsls	r2, r3, #31
 8000678:	b510      	push	{r4, lr}
 800067a:	4604      	mov	r4, r0
 800067c:	d406      	bmi.n	800068c <restore_non_core_regs+0x18>
 800067e:	079b      	lsls	r3, r3, #30
 8000680:	f100 0048 	add.w	r0, r0, #72	; 0x48
 8000684:	d509      	bpl.n	800069a <restore_non_core_regs+0x26>
 8000686:	f000 fc51 	bl	8000f2c <__gnu_Unwind_Restore_VFP_D>
 800068a:	6823      	ldr	r3, [r4, #0]
 800068c:	0759      	lsls	r1, r3, #29
 800068e:	d509      	bpl.n	80006a4 <restore_non_core_regs+0x30>
 8000690:	071a      	lsls	r2, r3, #28
 8000692:	d50e      	bpl.n	80006b2 <restore_non_core_regs+0x3e>
 8000694:	06db      	lsls	r3, r3, #27
 8000696:	d513      	bpl.n	80006c0 <restore_non_core_regs+0x4c>
 8000698:	bd10      	pop	{r4, pc}
 800069a:	f000 fc3f 	bl	8000f1c <__gnu_Unwind_Restore_VFP>
 800069e:	6823      	ldr	r3, [r4, #0]
 80006a0:	0759      	lsls	r1, r3, #29
 80006a2:	d4f5      	bmi.n	8000690 <restore_non_core_regs+0x1c>
 80006a4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80006a8:	f000 fc48 	bl	8000f3c <__gnu_Unwind_Restore_VFP_D_16_to_31>
 80006ac:	6823      	ldr	r3, [r4, #0]
 80006ae:	071a      	lsls	r2, r3, #28
 80006b0:	d4f0      	bmi.n	8000694 <restore_non_core_regs+0x20>
 80006b2:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 80006b6:	f000 fc49 	bl	8000f4c <__gnu_Unwind_Restore_WMMXD>
 80006ba:	6823      	ldr	r3, [r4, #0]
 80006bc:	06db      	lsls	r3, r3, #27
 80006be:	d4eb      	bmi.n	8000698 <restore_non_core_regs+0x24>
 80006c0:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 80006c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80006c8:	f000 bc84 	b.w	8000fd4 <__gnu_Unwind_Restore_WMMXC>

080006cc <_Unwind_decode_typeinfo_ptr.isra.0>:
 80006cc:	6803      	ldr	r3, [r0, #0]
 80006ce:	b103      	cbz	r3, 80006d2 <_Unwind_decode_typeinfo_ptr.isra.0+0x6>
 80006d0:	4403      	add	r3, r0
 80006d2:	4618      	mov	r0, r3
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop

080006d8 <__gnu_unwind_24bit.isra.1>:
 80006d8:	2009      	movs	r0, #9
 80006da:	4770      	bx	lr

080006dc <_Unwind_DebugHook>:
 80006dc:	4770      	bx	lr
 80006de:	bf00      	nop

080006e0 <unwind_phase2>:
 80006e0:	b570      	push	{r4, r5, r6, lr}
 80006e2:	4604      	mov	r4, r0
 80006e4:	460d      	mov	r5, r1
 80006e6:	e008      	b.n	80006fa <unwind_phase2+0x1a>
 80006e8:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80006ea:	6163      	str	r3, [r4, #20]
 80006ec:	462a      	mov	r2, r5
 80006ee:	6923      	ldr	r3, [r4, #16]
 80006f0:	4621      	mov	r1, r4
 80006f2:	2001      	movs	r0, #1
 80006f4:	4798      	blx	r3
 80006f6:	2808      	cmp	r0, #8
 80006f8:	d108      	bne.n	800070c <unwind_phase2+0x2c>
 80006fa:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80006fc:	4620      	mov	r0, r4
 80006fe:	f7ff ff69 	bl	80005d4 <get_eit_entry>
 8000702:	4606      	mov	r6, r0
 8000704:	2800      	cmp	r0, #0
 8000706:	d0ef      	beq.n	80006e8 <unwind_phase2+0x8>
 8000708:	f00b f84c 	bl	800b7a4 <abort>
 800070c:	2807      	cmp	r0, #7
 800070e:	d1fb      	bne.n	8000708 <unwind_phase2+0x28>
 8000710:	4630      	mov	r0, r6
 8000712:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8000714:	f7ff ffe2 	bl	80006dc <_Unwind_DebugHook>
 8000718:	1d28      	adds	r0, r5, #4
 800071a:	f000 fbf3 	bl	8000f04 <__restore_core_regs>
 800071e:	bf00      	nop

08000720 <unwind_phase2_forced>:
 8000720:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000724:	1d0c      	adds	r4, r1, #4
 8000726:	4605      	mov	r5, r0
 8000728:	4692      	mov	sl, r2
 800072a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800072c:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 8000730:	ae03      	add	r6, sp, #12
 8000732:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000734:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000736:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000738:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800073a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800073c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000740:	ac02      	add	r4, sp, #8
 8000742:	f8d5 800c 	ldr.w	r8, [r5, #12]
 8000746:	f8d5 9018 	ldr.w	r9, [r5, #24]
 800074a:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 800074e:	2300      	movs	r3, #0
 8000750:	4628      	mov	r0, r5
 8000752:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8000754:	6023      	str	r3, [r4, #0]
 8000756:	f7ff ff3d 	bl	80005d4 <get_eit_entry>
 800075a:	f1ba 0f00 	cmp.w	sl, #0
 800075e:	4607      	mov	r7, r0
 8000760:	bf14      	ite	ne
 8000762:	260a      	movne	r6, #10
 8000764:	2609      	moveq	r6, #9
 8000766:	b17f      	cbz	r7, 8000788 <unwind_phase2_forced+0x68>
 8000768:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800076a:	f046 0110 	orr.w	r1, r6, #16
 800076e:	e88d 0210 	stmia.w	sp, {r4, r9}
 8000772:	462a      	mov	r2, r5
 8000774:	6463      	str	r3, [r4, #68]	; 0x44
 8000776:	2001      	movs	r0, #1
 8000778:	462b      	mov	r3, r5
 800077a:	47c0      	blx	r8
 800077c:	bb78      	cbnz	r0, 80007de <unwind_phase2_forced+0xbe>
 800077e:	4638      	mov	r0, r7
 8000780:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 8000784:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000788:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800078a:	616b      	str	r3, [r5, #20]
 800078c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000790:	4621      	mov	r1, r4
 8000792:	a87a      	add	r0, sp, #488	; 0x1e8
 8000794:	f00b fa56 	bl	800bc44 <memcpy>
 8000798:	692b      	ldr	r3, [r5, #16]
 800079a:	aa7a      	add	r2, sp, #488	; 0x1e8
 800079c:	4629      	mov	r1, r5
 800079e:	4630      	mov	r0, r6
 80007a0:	4798      	blx	r3
 80007a2:	9b88      	ldr	r3, [sp, #544]	; 0x220
 80007a4:	4682      	mov	sl, r0
 80007a6:	e88d 0210 	stmia.w	sp, {r4, r9}
 80007aa:	4631      	mov	r1, r6
 80007ac:	6463      	str	r3, [r4, #68]	; 0x44
 80007ae:	462a      	mov	r2, r5
 80007b0:	462b      	mov	r3, r5
 80007b2:	2001      	movs	r0, #1
 80007b4:	47c0      	blx	r8
 80007b6:	b990      	cbnz	r0, 80007de <unwind_phase2_forced+0xbe>
 80007b8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80007bc:	a97a      	add	r1, sp, #488	; 0x1e8
 80007be:	4620      	mov	r0, r4
 80007c0:	f00b fa40 	bl	800bc44 <memcpy>
 80007c4:	f1ba 0f08 	cmp.w	sl, #8
 80007c8:	d106      	bne.n	80007d8 <unwind_phase2_forced+0xb8>
 80007ca:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80007cc:	4628      	mov	r0, r5
 80007ce:	f7ff ff01 	bl	80005d4 <get_eit_entry>
 80007d2:	2609      	movs	r6, #9
 80007d4:	4607      	mov	r7, r0
 80007d6:	e7c6      	b.n	8000766 <unwind_phase2_forced+0x46>
 80007d8:	f1ba 0f07 	cmp.w	sl, #7
 80007dc:	d005      	beq.n	80007ea <unwind_phase2_forced+0xca>
 80007de:	2709      	movs	r7, #9
 80007e0:	4638      	mov	r0, r7
 80007e2:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 80007e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ea:	4638      	mov	r0, r7
 80007ec:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80007ee:	f7ff ff75 	bl	80006dc <_Unwind_DebugHook>
 80007f2:	a803      	add	r0, sp, #12
 80007f4:	f000 fb86 	bl	8000f04 <__restore_core_regs>

080007f8 <_Unwind_GetCFA>:
 80007f8:	6c40      	ldr	r0, [r0, #68]	; 0x44
 80007fa:	4770      	bx	lr

080007fc <__gnu_Unwind_RaiseException>:
 80007fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007fe:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8000800:	640b      	str	r3, [r1, #64]	; 0x40
 8000802:	1d0e      	adds	r6, r1, #4
 8000804:	460f      	mov	r7, r1
 8000806:	4604      	mov	r4, r0
 8000808:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800080a:	b0f9      	sub	sp, #484	; 0x1e4
 800080c:	ad01      	add	r5, sp, #4
 800080e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000810:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000812:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000814:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000816:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000818:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800081c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8000820:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000824:	9600      	str	r6, [sp, #0]
 8000826:	e006      	b.n	8000836 <__gnu_Unwind_RaiseException+0x3a>
 8000828:	6923      	ldr	r3, [r4, #16]
 800082a:	466a      	mov	r2, sp
 800082c:	4621      	mov	r1, r4
 800082e:	4798      	blx	r3
 8000830:	2808      	cmp	r0, #8
 8000832:	4605      	mov	r5, r0
 8000834:	d108      	bne.n	8000848 <__gnu_Unwind_RaiseException+0x4c>
 8000836:	9910      	ldr	r1, [sp, #64]	; 0x40
 8000838:	4620      	mov	r0, r4
 800083a:	f7ff fecb 	bl	80005d4 <get_eit_entry>
 800083e:	2800      	cmp	r0, #0
 8000840:	d0f2      	beq.n	8000828 <__gnu_Unwind_RaiseException+0x2c>
 8000842:	2009      	movs	r0, #9
 8000844:	b079      	add	sp, #484	; 0x1e4
 8000846:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000848:	4668      	mov	r0, sp
 800084a:	f7ff ff13 	bl	8000674 <restore_non_core_regs>
 800084e:	2d06      	cmp	r5, #6
 8000850:	d1f7      	bne.n	8000842 <__gnu_Unwind_RaiseException+0x46>
 8000852:	4639      	mov	r1, r7
 8000854:	4620      	mov	r0, r4
 8000856:	f7ff ff43 	bl	80006e0 <unwind_phase2>
 800085a:	bf00      	nop

0800085c <__gnu_Unwind_ForcedUnwind>:
 800085c:	b430      	push	{r4, r5}
 800085e:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8000860:	60c1      	str	r1, [r0, #12]
 8000862:	6182      	str	r2, [r0, #24]
 8000864:	4619      	mov	r1, r3
 8000866:	641d      	str	r5, [r3, #64]	; 0x40
 8000868:	2200      	movs	r2, #0
 800086a:	bc30      	pop	{r4, r5}
 800086c:	e758      	b.n	8000720 <unwind_phase2_forced>
 800086e:	bf00      	nop

08000870 <__gnu_Unwind_Resume>:
 8000870:	b570      	push	{r4, r5, r6, lr}
 8000872:	68c6      	ldr	r6, [r0, #12]
 8000874:	6943      	ldr	r3, [r0, #20]
 8000876:	640b      	str	r3, [r1, #64]	; 0x40
 8000878:	b126      	cbz	r6, 8000884 <__gnu_Unwind_Resume+0x14>
 800087a:	2201      	movs	r2, #1
 800087c:	f7ff ff50 	bl	8000720 <unwind_phase2_forced>
 8000880:	f00a ff90 	bl	800b7a4 <abort>
 8000884:	6903      	ldr	r3, [r0, #16]
 8000886:	460a      	mov	r2, r1
 8000888:	4604      	mov	r4, r0
 800088a:	460d      	mov	r5, r1
 800088c:	4601      	mov	r1, r0
 800088e:	2002      	movs	r0, #2
 8000890:	4798      	blx	r3
 8000892:	2807      	cmp	r0, #7
 8000894:	d007      	beq.n	80008a6 <__gnu_Unwind_Resume+0x36>
 8000896:	2808      	cmp	r0, #8
 8000898:	d103      	bne.n	80008a2 <__gnu_Unwind_Resume+0x32>
 800089a:	4629      	mov	r1, r5
 800089c:	4620      	mov	r0, r4
 800089e:	f7ff ff1f 	bl	80006e0 <unwind_phase2>
 80008a2:	f00a ff7f 	bl	800b7a4 <abort>
 80008a6:	4630      	mov	r0, r6
 80008a8:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80008aa:	f7ff ff17 	bl	80006dc <_Unwind_DebugHook>
 80008ae:	1d28      	adds	r0, r5, #4
 80008b0:	f000 fb28 	bl	8000f04 <__restore_core_regs>

080008b4 <__gnu_Unwind_Resume_or_Rethrow>:
 80008b4:	68c2      	ldr	r2, [r0, #12]
 80008b6:	b11a      	cbz	r2, 80008c0 <__gnu_Unwind_Resume_or_Rethrow+0xc>
 80008b8:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 80008ba:	640a      	str	r2, [r1, #64]	; 0x40
 80008bc:	2200      	movs	r2, #0
 80008be:	e72f      	b.n	8000720 <unwind_phase2_forced>
 80008c0:	e79c      	b.n	80007fc <__gnu_Unwind_RaiseException>
 80008c2:	bf00      	nop

080008c4 <_Unwind_Complete>:
 80008c4:	4770      	bx	lr
 80008c6:	bf00      	nop

080008c8 <_Unwind_DeleteException>:
 80008c8:	6883      	ldr	r3, [r0, #8]
 80008ca:	b113      	cbz	r3, 80008d2 <_Unwind_DeleteException+0xa>
 80008cc:	4601      	mov	r1, r0
 80008ce:	2001      	movs	r0, #1
 80008d0:	4718      	bx	r3
 80008d2:	4770      	bx	lr

080008d4 <_Unwind_VRS_Get>:
 80008d4:	b500      	push	{lr}
 80008d6:	2904      	cmp	r1, #4
 80008d8:	d807      	bhi.n	80008ea <_Unwind_VRS_Get+0x16>
 80008da:	e8df f001 	tbb	[pc, r1]
 80008de:	0903      	.short	0x0903
 80008e0:	0906      	.short	0x0906
 80008e2:	09          	.byte	0x09
 80008e3:	00          	.byte	0x00
 80008e4:	b90b      	cbnz	r3, 80008ea <_Unwind_VRS_Get+0x16>
 80008e6:	2a0f      	cmp	r2, #15
 80008e8:	d905      	bls.n	80008f6 <_Unwind_VRS_Get+0x22>
 80008ea:	2002      	movs	r0, #2
 80008ec:	f85d fb04 	ldr.w	pc, [sp], #4
 80008f0:	2001      	movs	r0, #1
 80008f2:	f85d fb04 	ldr.w	pc, [sp], #4
 80008f6:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80008fa:	4618      	mov	r0, r3
 80008fc:	6853      	ldr	r3, [r2, #4]
 80008fe:	9a01      	ldr	r2, [sp, #4]
 8000900:	6013      	str	r3, [r2, #0]
 8000902:	f85d fb04 	ldr.w	pc, [sp], #4
 8000906:	bf00      	nop

08000908 <_Unwind_GetGR>:
 8000908:	b510      	push	{r4, lr}
 800090a:	b084      	sub	sp, #16
 800090c:	2300      	movs	r3, #0
 800090e:	ac03      	add	r4, sp, #12
 8000910:	460a      	mov	r2, r1
 8000912:	9400      	str	r4, [sp, #0]
 8000914:	4619      	mov	r1, r3
 8000916:	f7ff ffdd 	bl	80008d4 <_Unwind_VRS_Get>
 800091a:	9803      	ldr	r0, [sp, #12]
 800091c:	b004      	add	sp, #16
 800091e:	bd10      	pop	{r4, pc}

08000920 <_Unwind_VRS_Set>:
 8000920:	b500      	push	{lr}
 8000922:	2904      	cmp	r1, #4
 8000924:	d807      	bhi.n	8000936 <_Unwind_VRS_Set+0x16>
 8000926:	e8df f001 	tbb	[pc, r1]
 800092a:	0903      	.short	0x0903
 800092c:	0906      	.short	0x0906
 800092e:	09          	.byte	0x09
 800092f:	00          	.byte	0x00
 8000930:	b90b      	cbnz	r3, 8000936 <_Unwind_VRS_Set+0x16>
 8000932:	2a0f      	cmp	r2, #15
 8000934:	d905      	bls.n	8000942 <_Unwind_VRS_Set+0x22>
 8000936:	2002      	movs	r0, #2
 8000938:	f85d fb04 	ldr.w	pc, [sp], #4
 800093c:	2001      	movs	r0, #1
 800093e:	f85d fb04 	ldr.w	pc, [sp], #4
 8000942:	9901      	ldr	r1, [sp, #4]
 8000944:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8000948:	6809      	ldr	r1, [r1, #0]
 800094a:	6051      	str	r1, [r2, #4]
 800094c:	4618      	mov	r0, r3
 800094e:	f85d fb04 	ldr.w	pc, [sp], #4
 8000952:	bf00      	nop

08000954 <_Unwind_SetGR>:
 8000954:	b510      	push	{r4, lr}
 8000956:	b084      	sub	sp, #16
 8000958:	ac04      	add	r4, sp, #16
 800095a:	2300      	movs	r3, #0
 800095c:	f844 2d04 	str.w	r2, [r4, #-4]!
 8000960:	460a      	mov	r2, r1
 8000962:	9400      	str	r4, [sp, #0]
 8000964:	4619      	mov	r1, r3
 8000966:	f7ff ffdb 	bl	8000920 <_Unwind_VRS_Set>
 800096a:	b004      	add	sp, #16
 800096c:	bd10      	pop	{r4, pc}
 800096e:	bf00      	nop

08000970 <__gnu_Unwind_Backtrace>:
 8000970:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000972:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8000974:	6413      	str	r3, [r2, #64]	; 0x40
 8000976:	1d15      	adds	r5, r2, #4
 8000978:	4607      	mov	r7, r0
 800097a:	460e      	mov	r6, r1
 800097c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800097e:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 8000982:	ac17      	add	r4, sp, #92	; 0x5c
 8000984:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000986:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000988:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800098a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800098c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800098e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000992:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8000996:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800099a:	9516      	str	r5, [sp, #88]	; 0x58
 800099c:	e010      	b.n	80009c0 <__gnu_Unwind_Backtrace+0x50>
 800099e:	a816      	add	r0, sp, #88	; 0x58
 80009a0:	f7ff ffd8 	bl	8000954 <_Unwind_SetGR>
 80009a4:	4631      	mov	r1, r6
 80009a6:	a816      	add	r0, sp, #88	; 0x58
 80009a8:	47b8      	blx	r7
 80009aa:	aa16      	add	r2, sp, #88	; 0x58
 80009ac:	4669      	mov	r1, sp
 80009ae:	b978      	cbnz	r0, 80009d0 <__gnu_Unwind_Backtrace+0x60>
 80009b0:	9b04      	ldr	r3, [sp, #16]
 80009b2:	2008      	movs	r0, #8
 80009b4:	4798      	blx	r3
 80009b6:	2805      	cmp	r0, #5
 80009b8:	4604      	mov	r4, r0
 80009ba:	d00a      	beq.n	80009d2 <__gnu_Unwind_Backtrace+0x62>
 80009bc:	2809      	cmp	r0, #9
 80009be:	d007      	beq.n	80009d0 <__gnu_Unwind_Backtrace+0x60>
 80009c0:	9926      	ldr	r1, [sp, #152]	; 0x98
 80009c2:	4668      	mov	r0, sp
 80009c4:	f7ff fe06 	bl	80005d4 <get_eit_entry>
 80009c8:	466a      	mov	r2, sp
 80009ca:	210c      	movs	r1, #12
 80009cc:	2800      	cmp	r0, #0
 80009ce:	d0e6      	beq.n	800099e <__gnu_Unwind_Backtrace+0x2e>
 80009d0:	2409      	movs	r4, #9
 80009d2:	a816      	add	r0, sp, #88	; 0x58
 80009d4:	f7ff fe4e 	bl	8000674 <restore_non_core_regs>
 80009d8:	4620      	mov	r0, r4
 80009da:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 80009de:	bdf0      	pop	{r4, r5, r6, r7, pc}

080009e0 <__gnu_unwind_pr_common>:
 80009e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80009e4:	460d      	mov	r5, r1
 80009e6:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 80009e8:	b08b      	sub	sp, #44	; 0x2c
 80009ea:	1d0c      	adds	r4, r1, #4
 80009ec:	6809      	ldr	r1, [r1, #0]
 80009ee:	9107      	str	r1, [sp, #28]
 80009f0:	4691      	mov	r9, r2
 80009f2:	9408      	str	r4, [sp, #32]
 80009f4:	f000 0b03 	and.w	fp, r0, #3
 80009f8:	461e      	mov	r6, r3
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d160      	bne.n	8000ac0 <__gnu_unwind_pr_common+0xe0>
 80009fe:	0209      	lsls	r1, r1, #8
 8000a00:	2303      	movs	r3, #3
 8000a02:	9107      	str	r1, [sp, #28]
 8000a04:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
 8000a08:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8000a0c:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8000a0e:	f1bb 0f02 	cmp.w	fp, #2
 8000a12:	bf08      	it	eq
 8000a14:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 8000a16:	f013 0301 	ands.w	r3, r3, #1
 8000a1a:	d140      	bne.n	8000a9e <__gnu_unwind_pr_common+0xbe>
 8000a1c:	9301      	str	r3, [sp, #4]
 8000a1e:	f000 0308 	and.w	r3, r0, #8
 8000a22:	9303      	str	r3, [sp, #12]
 8000a24:	f8d4 8000 	ldr.w	r8, [r4]
 8000a28:	f1b8 0f00 	cmp.w	r8, #0
 8000a2c:	d039      	beq.n	8000aa2 <__gnu_unwind_pr_common+0xc2>
 8000a2e:	2e02      	cmp	r6, #2
 8000a30:	d043      	beq.n	8000aba <__gnu_unwind_pr_common+0xda>
 8000a32:	f8b4 8000 	ldrh.w	r8, [r4]
 8000a36:	8867      	ldrh	r7, [r4, #2]
 8000a38:	3404      	adds	r4, #4
 8000a3a:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8000a3c:	f027 0a01 	bic.w	sl, r7, #1
 8000a40:	210f      	movs	r1, #15
 8000a42:	4648      	mov	r0, r9
 8000a44:	449a      	add	sl, r3
 8000a46:	f7ff ff5f 	bl	8000908 <_Unwind_GetGR>
 8000a4a:	4582      	cmp	sl, r0
 8000a4c:	d833      	bhi.n	8000ab6 <__gnu_unwind_pr_common+0xd6>
 8000a4e:	f028 0301 	bic.w	r3, r8, #1
 8000a52:	449a      	add	sl, r3
 8000a54:	4550      	cmp	r0, sl
 8000a56:	bf2c      	ite	cs
 8000a58:	2000      	movcs	r0, #0
 8000a5a:	2001      	movcc	r0, #1
 8000a5c:	007f      	lsls	r7, r7, #1
 8000a5e:	f007 0702 	and.w	r7, r7, #2
 8000a62:	f008 0801 	and.w	r8, r8, #1
 8000a66:	ea47 0708 	orr.w	r7, r7, r8
 8000a6a:	2f01      	cmp	r7, #1
 8000a6c:	d03e      	beq.n	8000aec <__gnu_unwind_pr_common+0x10c>
 8000a6e:	d335      	bcc.n	8000adc <__gnu_unwind_pr_common+0xfc>
 8000a70:	2f02      	cmp	r7, #2
 8000a72:	d11c      	bne.n	8000aae <__gnu_unwind_pr_common+0xce>
 8000a74:	6823      	ldr	r3, [r4, #0]
 8000a76:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000a7a:	9202      	str	r2, [sp, #8]
 8000a7c:	f1bb 0f00 	cmp.w	fp, #0
 8000a80:	d176      	bne.n	8000b70 <__gnu_unwind_pr_common+0x190>
 8000a82:	b128      	cbz	r0, 8000a90 <__gnu_unwind_pr_common+0xb0>
 8000a84:	9903      	ldr	r1, [sp, #12]
 8000a86:	2900      	cmp	r1, #0
 8000a88:	d07e      	beq.n	8000b88 <__gnu_unwind_pr_common+0x1a8>
 8000a8a:	2a00      	cmp	r2, #0
 8000a8c:	f000 80a6 	beq.w	8000bdc <__gnu_unwind_pr_common+0x1fc>
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	db77      	blt.n	8000b84 <__gnu_unwind_pr_common+0x1a4>
 8000a94:	9b02      	ldr	r3, [sp, #8]
 8000a96:	3301      	adds	r3, #1
 8000a98:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8000a9c:	e7c2      	b.n	8000a24 <__gnu_unwind_pr_common+0x44>
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	9301      	str	r3, [sp, #4]
 8000aa2:	2e02      	cmp	r6, #2
 8000aa4:	dd3e      	ble.n	8000b24 <__gnu_unwind_pr_common+0x144>
 8000aa6:	f7ff fe17 	bl	80006d8 <__gnu_unwind_24bit.isra.1>
 8000aaa:	2800      	cmp	r0, #0
 8000aac:	d040      	beq.n	8000b30 <__gnu_unwind_pr_common+0x150>
 8000aae:	2009      	movs	r0, #9
 8000ab0:	b00b      	add	sp, #44	; 0x2c
 8000ab2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000ab6:	2000      	movs	r0, #0
 8000ab8:	e7d0      	b.n	8000a5c <__gnu_unwind_pr_common+0x7c>
 8000aba:	6867      	ldr	r7, [r4, #4]
 8000abc:	3408      	adds	r4, #8
 8000abe:	e7bc      	b.n	8000a3a <__gnu_unwind_pr_common+0x5a>
 8000ac0:	2b02      	cmp	r3, #2
 8000ac2:	dca3      	bgt.n	8000a0c <__gnu_unwind_pr_common+0x2c>
 8000ac4:	0c0b      	lsrs	r3, r1, #16
 8000ac6:	b2da      	uxtb	r2, r3
 8000ac8:	0409      	lsls	r1, r1, #16
 8000aca:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
 8000ace:	2302      	movs	r3, #2
 8000ad0:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 8000ad4:	9107      	str	r1, [sp, #28]
 8000ad6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8000ada:	e797      	b.n	8000a0c <__gnu_unwind_pr_common+0x2c>
 8000adc:	f1bb 0f00 	cmp.w	fp, #0
 8000ae0:	d002      	beq.n	8000ae8 <__gnu_unwind_pr_common+0x108>
 8000ae2:	2800      	cmp	r0, #0
 8000ae4:	f040 80bd 	bne.w	8000c62 <__gnu_unwind_pr_common+0x282>
 8000ae8:	3404      	adds	r4, #4
 8000aea:	e79b      	b.n	8000a24 <__gnu_unwind_pr_common+0x44>
 8000aec:	f1bb 0f00 	cmp.w	fp, #0
 8000af0:	d125      	bne.n	8000b3e <__gnu_unwind_pr_common+0x15e>
 8000af2:	b1a8      	cbz	r0, 8000b20 <__gnu_unwind_pr_common+0x140>
 8000af4:	e894 000c 	ldmia.w	r4, {r2, r3}
 8000af8:	1c99      	adds	r1, r3, #2
 8000afa:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 8000afe:	d0d6      	beq.n	8000aae <__gnu_unwind_pr_common+0xce>
 8000b00:	f105 0158 	add.w	r1, r5, #88	; 0x58
 8000b04:	3301      	adds	r3, #1
 8000b06:	9106      	str	r1, [sp, #24]
 8000b08:	f000 80a3 	beq.w	8000c52 <__gnu_unwind_pr_common+0x272>
 8000b0c:	1d20      	adds	r0, r4, #4
 8000b0e:	f7ff fddd 	bl	80006cc <_Unwind_decode_typeinfo_ptr.isra.0>
 8000b12:	ab06      	add	r3, sp, #24
 8000b14:	4601      	mov	r1, r0
 8000b16:	4628      	mov	r0, r5
 8000b18:	f009 fb12 	bl	800a140 <__cxa_type_match>
 8000b1c:	2800      	cmp	r0, #0
 8000b1e:	d177      	bne.n	8000c10 <__gnu_unwind_pr_common+0x230>
 8000b20:	3408      	adds	r4, #8
 8000b22:	e77f      	b.n	8000a24 <__gnu_unwind_pr_common+0x44>
 8000b24:	a907      	add	r1, sp, #28
 8000b26:	4648      	mov	r0, r9
 8000b28:	f000 faee 	bl	8001108 <__gnu_unwind_execute>
 8000b2c:	2800      	cmp	r0, #0
 8000b2e:	d1be      	bne.n	8000aae <__gnu_unwind_pr_common+0xce>
 8000b30:	9b01      	ldr	r3, [sp, #4]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d15c      	bne.n	8000bf0 <__gnu_unwind_pr_common+0x210>
 8000b36:	2008      	movs	r0, #8
 8000b38:	b00b      	add	sp, #44	; 0x2c
 8000b3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000b3e:	210d      	movs	r1, #13
 8000b40:	4648      	mov	r0, r9
 8000b42:	6a2f      	ldr	r7, [r5, #32]
 8000b44:	f7ff fee0 	bl	8000908 <_Unwind_GetGR>
 8000b48:	4287      	cmp	r7, r0
 8000b4a:	d1e9      	bne.n	8000b20 <__gnu_unwind_pr_common+0x140>
 8000b4c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000b4e:	429c      	cmp	r4, r3
 8000b50:	d1e6      	bne.n	8000b20 <__gnu_unwind_pr_common+0x140>
 8000b52:	4620      	mov	r0, r4
 8000b54:	f7ff fcf0 	bl	8000538 <selfrel_offset31>
 8000b58:	210f      	movs	r1, #15
 8000b5a:	4602      	mov	r2, r0
 8000b5c:	4648      	mov	r0, r9
 8000b5e:	f7ff fef9 	bl	8000954 <_Unwind_SetGR>
 8000b62:	4648      	mov	r0, r9
 8000b64:	462a      	mov	r2, r5
 8000b66:	2100      	movs	r1, #0
 8000b68:	f7ff fef4 	bl	8000954 <_Unwind_SetGR>
 8000b6c:	2007      	movs	r0, #7
 8000b6e:	e79f      	b.n	8000ab0 <__gnu_unwind_pr_common+0xd0>
 8000b70:	210d      	movs	r1, #13
 8000b72:	4648      	mov	r0, r9
 8000b74:	6a2f      	ldr	r7, [r5, #32]
 8000b76:	f7ff fec7 	bl	8000908 <_Unwind_GetGR>
 8000b7a:	4287      	cmp	r7, r0
 8000b7c:	d058      	beq.n	8000c30 <__gnu_unwind_pr_common+0x250>
 8000b7e:	6823      	ldr	r3, [r4, #0]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	da87      	bge.n	8000a94 <__gnu_unwind_pr_common+0xb4>
 8000b84:	3404      	adds	r4, #4
 8000b86:	e785      	b.n	8000a94 <__gnu_unwind_pr_common+0xb4>
 8000b88:	9b02      	ldr	r3, [sp, #8]
 8000b8a:	b33b      	cbz	r3, 8000bdc <__gnu_unwind_pr_common+0x1fc>
 8000b8c:	f105 0358 	add.w	r3, r5, #88	; 0x58
 8000b90:	1d27      	adds	r7, r4, #4
 8000b92:	f8cd b010 	str.w	fp, [sp, #16]
 8000b96:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8000b9a:	f8dd a008 	ldr.w	sl, [sp, #8]
 8000b9e:	9605      	str	r6, [sp, #20]
 8000ba0:	46a3      	mov	fp, r4
 8000ba2:	461c      	mov	r4, r3
 8000ba4:	e002      	b.n	8000bac <__gnu_unwind_pr_common+0x1cc>
 8000ba6:	45b2      	cmp	sl, r6
 8000ba8:	46b0      	mov	r8, r6
 8000baa:	d016      	beq.n	8000bda <__gnu_unwind_pr_common+0x1fa>
 8000bac:	4638      	mov	r0, r7
 8000bae:	9406      	str	r4, [sp, #24]
 8000bb0:	f7ff fd8c 	bl	80006cc <_Unwind_decode_typeinfo_ptr.isra.0>
 8000bb4:	ab06      	add	r3, sp, #24
 8000bb6:	4601      	mov	r1, r0
 8000bb8:	2200      	movs	r2, #0
 8000bba:	4628      	mov	r0, r5
 8000bbc:	f009 fac0 	bl	800a140 <__cxa_type_match>
 8000bc0:	f108 0601 	add.w	r6, r8, #1
 8000bc4:	3704      	adds	r7, #4
 8000bc6:	2800      	cmp	r0, #0
 8000bc8:	d0ed      	beq.n	8000ba6 <__gnu_unwind_pr_common+0x1c6>
 8000bca:	9b02      	ldr	r3, [sp, #8]
 8000bcc:	9e05      	ldr	r6, [sp, #20]
 8000bce:	4543      	cmp	r3, r8
 8000bd0:	465c      	mov	r4, fp
 8000bd2:	f8dd b010 	ldr.w	fp, [sp, #16]
 8000bd6:	d1d2      	bne.n	8000b7e <__gnu_unwind_pr_common+0x19e>
 8000bd8:	e000      	b.n	8000bdc <__gnu_unwind_pr_common+0x1fc>
 8000bda:	465c      	mov	r4, fp
 8000bdc:	4648      	mov	r0, r9
 8000bde:	210d      	movs	r1, #13
 8000be0:	f7ff fe92 	bl	8000908 <_Unwind_GetGR>
 8000be4:	9b06      	ldr	r3, [sp, #24]
 8000be6:	6228      	str	r0, [r5, #32]
 8000be8:	62ac      	str	r4, [r5, #40]	; 0x28
 8000bea:	626b      	str	r3, [r5, #36]	; 0x24
 8000bec:	2006      	movs	r0, #6
 8000bee:	e75f      	b.n	8000ab0 <__gnu_unwind_pr_common+0xd0>
 8000bf0:	210f      	movs	r1, #15
 8000bf2:	4648      	mov	r0, r9
 8000bf4:	f7ff fe88 	bl	8000908 <_Unwind_GetGR>
 8000bf8:	210e      	movs	r1, #14
 8000bfa:	4602      	mov	r2, r0
 8000bfc:	4648      	mov	r0, r9
 8000bfe:	f7ff fea9 	bl	8000954 <_Unwind_SetGR>
 8000c02:	4648      	mov	r0, r9
 8000c04:	4a29      	ldr	r2, [pc, #164]	; (8000cac <__gnu_unwind_pr_common+0x2cc>)
 8000c06:	210f      	movs	r1, #15
 8000c08:	f7ff fea4 	bl	8000954 <_Unwind_SetGR>
 8000c0c:	2007      	movs	r0, #7
 8000c0e:	e74f      	b.n	8000ab0 <__gnu_unwind_pr_common+0xd0>
 8000c10:	4607      	mov	r7, r0
 8000c12:	210d      	movs	r1, #13
 8000c14:	4648      	mov	r0, r9
 8000c16:	f7ff fe77 	bl	8000908 <_Unwind_GetGR>
 8000c1a:	2f02      	cmp	r7, #2
 8000c1c:	6228      	str	r0, [r5, #32]
 8000c1e:	d11d      	bne.n	8000c5c <__gnu_unwind_pr_common+0x27c>
 8000c20:	462b      	mov	r3, r5
 8000c22:	9a06      	ldr	r2, [sp, #24]
 8000c24:	f843 2f2c 	str.w	r2, [r3, #44]!
 8000c28:	626b      	str	r3, [r5, #36]	; 0x24
 8000c2a:	62ac      	str	r4, [r5, #40]	; 0x28
 8000c2c:	2006      	movs	r0, #6
 8000c2e:	e73f      	b.n	8000ab0 <__gnu_unwind_pr_common+0xd0>
 8000c30:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000c32:	429c      	cmp	r4, r3
 8000c34:	d1a3      	bne.n	8000b7e <__gnu_unwind_pr_common+0x19e>
 8000c36:	2204      	movs	r2, #4
 8000c38:	2700      	movs	r7, #0
 8000c3a:	18a3      	adds	r3, r4, r2
 8000c3c:	9902      	ldr	r1, [sp, #8]
 8000c3e:	62a9      	str	r1, [r5, #40]	; 0x28
 8000c40:	62ef      	str	r7, [r5, #44]	; 0x2c
 8000c42:	632a      	str	r2, [r5, #48]	; 0x30
 8000c44:	636b      	str	r3, [r5, #52]	; 0x34
 8000c46:	6823      	ldr	r3, [r4, #0]
 8000c48:	42bb      	cmp	r3, r7
 8000c4a:	db1d      	blt.n	8000c88 <__gnu_unwind_pr_common+0x2a8>
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	9301      	str	r3, [sp, #4]
 8000c50:	e720      	b.n	8000a94 <__gnu_unwind_pr_common+0xb4>
 8000c52:	4648      	mov	r0, r9
 8000c54:	210d      	movs	r1, #13
 8000c56:	f7ff fe57 	bl	8000908 <_Unwind_GetGR>
 8000c5a:	6228      	str	r0, [r5, #32]
 8000c5c:	9b06      	ldr	r3, [sp, #24]
 8000c5e:	626b      	str	r3, [r5, #36]	; 0x24
 8000c60:	e7e3      	b.n	8000c2a <__gnu_unwind_pr_common+0x24a>
 8000c62:	4620      	mov	r0, r4
 8000c64:	f7ff fc68 	bl	8000538 <selfrel_offset31>
 8000c68:	3404      	adds	r4, #4
 8000c6a:	4606      	mov	r6, r0
 8000c6c:	63ac      	str	r4, [r5, #56]	; 0x38
 8000c6e:	4628      	mov	r0, r5
 8000c70:	f009 fac4 	bl	800a1fc <__cxa_begin_cleanup>
 8000c74:	2800      	cmp	r0, #0
 8000c76:	f43f af1a 	beq.w	8000aae <__gnu_unwind_pr_common+0xce>
 8000c7a:	4648      	mov	r0, r9
 8000c7c:	4632      	mov	r2, r6
 8000c7e:	210f      	movs	r1, #15
 8000c80:	f7ff fe68 	bl	8000954 <_Unwind_SetGR>
 8000c84:	2007      	movs	r0, #7
 8000c86:	e713      	b.n	8000ab0 <__gnu_unwind_pr_common+0xd0>
 8000c88:	4608      	mov	r0, r1
 8000c8a:	3001      	adds	r0, #1
 8000c8c:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8000c90:	f7ff fc52 	bl	8000538 <selfrel_offset31>
 8000c94:	210f      	movs	r1, #15
 8000c96:	4602      	mov	r2, r0
 8000c98:	4648      	mov	r0, r9
 8000c9a:	f7ff fe5b 	bl	8000954 <_Unwind_SetGR>
 8000c9e:	4648      	mov	r0, r9
 8000ca0:	462a      	mov	r2, r5
 8000ca2:	4639      	mov	r1, r7
 8000ca4:	f7ff fe56 	bl	8000954 <_Unwind_SetGR>
 8000ca8:	2007      	movs	r0, #7
 8000caa:	e701      	b.n	8000ab0 <__gnu_unwind_pr_common+0xd0>
 8000cac:	0800a911 	.word	0x0800a911

08000cb0 <__aeabi_unwind_cpp_pr0>:
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	e695      	b.n	80009e0 <__gnu_unwind_pr_common>

08000cb4 <__aeabi_unwind_cpp_pr1>:
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	e693      	b.n	80009e0 <__gnu_unwind_pr_common>

08000cb8 <__aeabi_unwind_cpp_pr2>:
 8000cb8:	2302      	movs	r3, #2
 8000cba:	e691      	b.n	80009e0 <__gnu_unwind_pr_common>

08000cbc <_Unwind_VRS_Pop>:
 8000cbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	b0c5      	sub	sp, #276	; 0x114
 8000cc2:	2904      	cmp	r1, #4
 8000cc4:	d80d      	bhi.n	8000ce2 <_Unwind_VRS_Pop+0x26>
 8000cc6:	e8df f001 	tbb	[pc, r1]
 8000cca:	0353      	.short	0x0353
 8000ccc:	310c      	.short	0x310c
 8000cce:	0f          	.byte	0x0f
 8000ccf:	00          	.byte	0x00
 8000cd0:	2b01      	cmp	r3, #1
 8000cd2:	ea4f 4612 	mov.w	r6, r2, lsr #16
 8000cd6:	b295      	uxth	r5, r2
 8000cd8:	d162      	bne.n	8000da0 <_Unwind_VRS_Pop+0xe4>
 8000cda:	1972      	adds	r2, r6, r5
 8000cdc:	2a10      	cmp	r2, #16
 8000cde:	f240 809b 	bls.w	8000e18 <_Unwind_VRS_Pop+0x15c>
 8000ce2:	2002      	movs	r0, #2
 8000ce4:	b045      	add	sp, #276	; 0x114
 8000ce6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d1fa      	bne.n	8000ce2 <_Unwind_VRS_Pop+0x26>
 8000cec:	2a10      	cmp	r2, #16
 8000cee:	d8f8      	bhi.n	8000ce2 <_Unwind_VRS_Pop+0x26>
 8000cf0:	6823      	ldr	r3, [r4, #0]
 8000cf2:	06d8      	lsls	r0, r3, #27
 8000cf4:	f100 80c6 	bmi.w	8000e84 <_Unwind_VRS_Pop+0x1c8>
 8000cf8:	ae22      	add	r6, sp, #136	; 0x88
 8000cfa:	4630      	mov	r0, r6
 8000cfc:	9201      	str	r2, [sp, #4]
 8000cfe:	f000 f973 	bl	8000fe8 <__gnu_Unwind_Save_WMMXC>
 8000d02:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8000d04:	9a01      	ldr	r2, [sp, #4]
 8000d06:	2300      	movs	r3, #0
 8000d08:	2501      	movs	r5, #1
 8000d0a:	fa05 f103 	lsl.w	r1, r5, r3
 8000d0e:	4211      	tst	r1, r2
 8000d10:	d003      	beq.n	8000d1a <_Unwind_VRS_Pop+0x5e>
 8000d12:	6801      	ldr	r1, [r0, #0]
 8000d14:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
 8000d18:	3004      	adds	r0, #4
 8000d1a:	3301      	adds	r3, #1
 8000d1c:	2b04      	cmp	r3, #4
 8000d1e:	d1f4      	bne.n	8000d0a <_Unwind_VRS_Pop+0x4e>
 8000d20:	63a0      	str	r0, [r4, #56]	; 0x38
 8000d22:	4630      	mov	r0, r6
 8000d24:	f000 f956 	bl	8000fd4 <__gnu_Unwind_Restore_WMMXC>
 8000d28:	2000      	movs	r0, #0
 8000d2a:	e7db      	b.n	8000ce4 <_Unwind_VRS_Pop+0x28>
 8000d2c:	2b03      	cmp	r3, #3
 8000d2e:	d1d8      	bne.n	8000ce2 <_Unwind_VRS_Pop+0x26>
 8000d30:	0c15      	lsrs	r5, r2, #16
 8000d32:	b297      	uxth	r7, r2
 8000d34:	19eb      	adds	r3, r5, r7
 8000d36:	2b10      	cmp	r3, #16
 8000d38:	d8d3      	bhi.n	8000ce2 <_Unwind_VRS_Pop+0x26>
 8000d3a:	6823      	ldr	r3, [r4, #0]
 8000d3c:	071e      	lsls	r6, r3, #28
 8000d3e:	f100 80b5 	bmi.w	8000eac <_Unwind_VRS_Pop+0x1f0>
 8000d42:	ae22      	add	r6, sp, #136	; 0x88
 8000d44:	4630      	mov	r0, r6
 8000d46:	f000 f923 	bl	8000f90 <__gnu_Unwind_Save_WMMXD>
 8000d4a:	00ed      	lsls	r5, r5, #3
 8000d4c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000d4e:	b14f      	cbz	r7, 8000d64 <_Unwind_VRS_Pop+0xa8>
 8000d50:	3d04      	subs	r5, #4
 8000d52:	1971      	adds	r1, r6, r5
 8000d54:	eb03 00c7 	add.w	r0, r3, r7, lsl #3
 8000d58:	f853 2b04 	ldr.w	r2, [r3], #4
 8000d5c:	f841 2f04 	str.w	r2, [r1, #4]!
 8000d60:	4283      	cmp	r3, r0
 8000d62:	d1f9      	bne.n	8000d58 <_Unwind_VRS_Pop+0x9c>
 8000d64:	4630      	mov	r0, r6
 8000d66:	63a3      	str	r3, [r4, #56]	; 0x38
 8000d68:	f000 f8f0 	bl	8000f4c <__gnu_Unwind_Restore_WMMXD>
 8000d6c:	2000      	movs	r0, #0
 8000d6e:	e7b9      	b.n	8000ce4 <_Unwind_VRS_Pop+0x28>
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d1b6      	bne.n	8000ce2 <_Unwind_VRS_Pop+0x26>
 8000d74:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8000d76:	b297      	uxth	r7, r2
 8000d78:	1d20      	adds	r0, r4, #4
 8000d7a:	2601      	movs	r6, #1
 8000d7c:	fa06 f103 	lsl.w	r1, r6, r3
 8000d80:	4239      	tst	r1, r7
 8000d82:	f103 0301 	add.w	r3, r3, #1
 8000d86:	d002      	beq.n	8000d8e <_Unwind_VRS_Pop+0xd2>
 8000d88:	6829      	ldr	r1, [r5, #0]
 8000d8a:	6001      	str	r1, [r0, #0]
 8000d8c:	3504      	adds	r5, #4
 8000d8e:	2b10      	cmp	r3, #16
 8000d90:	f100 0004 	add.w	r0, r0, #4
 8000d94:	d1f2      	bne.n	8000d7c <_Unwind_VRS_Pop+0xc0>
 8000d96:	f412 5000 	ands.w	r0, r2, #8192	; 0x2000
 8000d9a:	d13b      	bne.n	8000e14 <_Unwind_VRS_Pop+0x158>
 8000d9c:	63a5      	str	r5, [r4, #56]	; 0x38
 8000d9e:	e7a1      	b.n	8000ce4 <_Unwind_VRS_Pop+0x28>
 8000da0:	2b05      	cmp	r3, #5
 8000da2:	d19e      	bne.n	8000ce2 <_Unwind_VRS_Pop+0x26>
 8000da4:	1977      	adds	r7, r6, r5
 8000da6:	2f20      	cmp	r7, #32
 8000da8:	d89b      	bhi.n	8000ce2 <_Unwind_VRS_Pop+0x26>
 8000daa:	2e0f      	cmp	r6, #15
 8000dac:	d966      	bls.n	8000e7c <_Unwind_VRS_Pop+0x1c0>
 8000dae:	462f      	mov	r7, r5
 8000db0:	2d00      	cmp	r5, #0
 8000db2:	d13a      	bne.n	8000e2a <_Unwind_VRS_Pop+0x16e>
 8000db4:	462a      	mov	r2, r5
 8000db6:	2700      	movs	r7, #0
 8000db8:	2a00      	cmp	r2, #0
 8000dba:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8000dbc:	dd72      	ble.n	8000ea4 <_Unwind_VRS_Pop+0x1e8>
 8000dbe:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 8000dc2:	4601      	mov	r1, r0
 8000dc4:	a844      	add	r0, sp, #272	; 0x110
 8000dc6:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
 8000dca:	388c      	subs	r0, #140	; 0x8c
 8000dcc:	f851 5b04 	ldr.w	r5, [r1], #4
 8000dd0:	f840 5f04 	str.w	r5, [r0, #4]!
 8000dd4:	4291      	cmp	r1, r2
 8000dd6:	d1f9      	bne.n	8000dcc <_Unwind_VRS_Pop+0x110>
 8000dd8:	4608      	mov	r0, r1
 8000dda:	b197      	cbz	r7, 8000e02 <_Unwind_VRS_Pop+0x146>
 8000ddc:	2e10      	cmp	r6, #16
 8000dde:	4632      	mov	r2, r6
 8000de0:	a944      	add	r1, sp, #272	; 0x110
 8000de2:	bf38      	it	cc
 8000de4:	2210      	movcc	r2, #16
 8000de6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8000dea:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
 8000dee:	0079      	lsls	r1, r7, #1
 8000df0:	3a04      	subs	r2, #4
 8000df2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8000df6:	f850 5b04 	ldr.w	r5, [r0], #4
 8000dfa:	f842 5f04 	str.w	r5, [r2, #4]!
 8000dfe:	4288      	cmp	r0, r1
 8000e00:	d1f9      	bne.n	8000df6 <_Unwind_VRS_Pop+0x13a>
 8000e02:	2b01      	cmp	r3, #1
 8000e04:	d048      	beq.n	8000e98 <_Unwind_VRS_Pop+0x1dc>
 8000e06:	2e0f      	cmp	r6, #15
 8000e08:	63a1      	str	r1, [r4, #56]	; 0x38
 8000e0a:	d933      	bls.n	8000e74 <_Unwind_VRS_Pop+0x1b8>
 8000e0c:	b117      	cbz	r7, 8000e14 <_Unwind_VRS_Pop+0x158>
 8000e0e:	a802      	add	r0, sp, #8
 8000e10:	f000 f894 	bl	8000f3c <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8000e14:	2000      	movs	r0, #0
 8000e16:	e765      	b.n	8000ce4 <_Unwind_VRS_Pop+0x28>
 8000e18:	2e0f      	cmp	r6, #15
 8000e1a:	f63f af62 	bhi.w	8000ce2 <_Unwind_VRS_Pop+0x26>
 8000e1e:	2700      	movs	r7, #0
 8000e20:	6822      	ldr	r2, [r4, #0]
 8000e22:	07d1      	lsls	r1, r2, #31
 8000e24:	d417      	bmi.n	8000e56 <_Unwind_VRS_Pop+0x19a>
 8000e26:	2f00      	cmp	r7, #0
 8000e28:	d060      	beq.n	8000eec <_Unwind_VRS_Pop+0x230>
 8000e2a:	6822      	ldr	r2, [r4, #0]
 8000e2c:	0751      	lsls	r1, r2, #29
 8000e2e:	d445      	bmi.n	8000ebc <_Unwind_VRS_Pop+0x200>
 8000e30:	2b01      	cmp	r3, #1
 8000e32:	d04d      	beq.n	8000ed0 <_Unwind_VRS_Pop+0x214>
 8000e34:	2e0f      	cmp	r6, #15
 8000e36:	d806      	bhi.n	8000e46 <_Unwind_VRS_Pop+0x18a>
 8000e38:	a822      	add	r0, sp, #136	; 0x88
 8000e3a:	9301      	str	r3, [sp, #4]
 8000e3c:	f000 f87a 	bl	8000f34 <__gnu_Unwind_Save_VFP_D>
 8000e40:	9b01      	ldr	r3, [sp, #4]
 8000e42:	2f00      	cmp	r7, #0
 8000e44:	d0b6      	beq.n	8000db4 <_Unwind_VRS_Pop+0xf8>
 8000e46:	a802      	add	r0, sp, #8
 8000e48:	9301      	str	r3, [sp, #4]
 8000e4a:	f000 f87b 	bl	8000f44 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000e4e:	9b01      	ldr	r3, [sp, #4]
 8000e50:	f1c6 0210 	rsb	r2, r6, #16
 8000e54:	e7b0      	b.n	8000db8 <_Unwind_VRS_Pop+0xfc>
 8000e56:	f022 0101 	bic.w	r1, r2, #1
 8000e5a:	2b05      	cmp	r3, #5
 8000e5c:	6021      	str	r1, [r4, #0]
 8000e5e:	9301      	str	r3, [sp, #4]
 8000e60:	4620      	mov	r0, r4
 8000e62:	d03b      	beq.n	8000edc <_Unwind_VRS_Pop+0x220>
 8000e64:	f022 0203 	bic.w	r2, r2, #3
 8000e68:	f840 2b48 	str.w	r2, [r0], #72
 8000e6c:	f000 f85a 	bl	8000f24 <__gnu_Unwind_Save_VFP>
 8000e70:	9b01      	ldr	r3, [sp, #4]
 8000e72:	e7d8      	b.n	8000e26 <_Unwind_VRS_Pop+0x16a>
 8000e74:	a822      	add	r0, sp, #136	; 0x88
 8000e76:	f000 f859 	bl	8000f2c <__gnu_Unwind_Restore_VFP_D>
 8000e7a:	e7c7      	b.n	8000e0c <_Unwind_VRS_Pop+0x150>
 8000e7c:	2f10      	cmp	r7, #16
 8000e7e:	d9ce      	bls.n	8000e1e <_Unwind_VRS_Pop+0x162>
 8000e80:	3f10      	subs	r7, #16
 8000e82:	e7cd      	b.n	8000e20 <_Unwind_VRS_Pop+0x164>
 8000e84:	f023 0310 	bic.w	r3, r3, #16
 8000e88:	6023      	str	r3, [r4, #0]
 8000e8a:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 8000e8e:	9201      	str	r2, [sp, #4]
 8000e90:	f000 f8aa 	bl	8000fe8 <__gnu_Unwind_Save_WMMXC>
 8000e94:	9a01      	ldr	r2, [sp, #4]
 8000e96:	e72f      	b.n	8000cf8 <_Unwind_VRS_Pop+0x3c>
 8000e98:	3104      	adds	r1, #4
 8000e9a:	63a1      	str	r1, [r4, #56]	; 0x38
 8000e9c:	a822      	add	r0, sp, #136	; 0x88
 8000e9e:	f000 f83d 	bl	8000f1c <__gnu_Unwind_Restore_VFP>
 8000ea2:	e7b7      	b.n	8000e14 <_Unwind_VRS_Pop+0x158>
 8000ea4:	2f00      	cmp	r7, #0
 8000ea6:	d199      	bne.n	8000ddc <_Unwind_VRS_Pop+0x120>
 8000ea8:	4601      	mov	r1, r0
 8000eaa:	e7aa      	b.n	8000e02 <_Unwind_VRS_Pop+0x146>
 8000eac:	f023 0308 	bic.w	r3, r3, #8
 8000eb0:	6023      	str	r3, [r4, #0]
 8000eb2:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 8000eb6:	f000 f86b 	bl	8000f90 <__gnu_Unwind_Save_WMMXD>
 8000eba:	e742      	b.n	8000d42 <_Unwind_VRS_Pop+0x86>
 8000ebc:	4620      	mov	r0, r4
 8000ebe:	f022 0204 	bic.w	r2, r2, #4
 8000ec2:	f840 2bd0 	str.w	r2, [r0], #208
 8000ec6:	9301      	str	r3, [sp, #4]
 8000ec8:	f000 f83c 	bl	8000f44 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000ecc:	9b01      	ldr	r3, [sp, #4]
 8000ece:	e7af      	b.n	8000e30 <_Unwind_VRS_Pop+0x174>
 8000ed0:	a822      	add	r0, sp, #136	; 0x88
 8000ed2:	9301      	str	r3, [sp, #4]
 8000ed4:	f000 f826 	bl	8000f24 <__gnu_Unwind_Save_VFP>
 8000ed8:	9b01      	ldr	r3, [sp, #4]
 8000eda:	e7b9      	b.n	8000e50 <_Unwind_VRS_Pop+0x194>
 8000edc:	f041 0102 	orr.w	r1, r1, #2
 8000ee0:	f840 1b48 	str.w	r1, [r0], #72
 8000ee4:	f000 f826 	bl	8000f34 <__gnu_Unwind_Save_VFP_D>
 8000ee8:	9b01      	ldr	r3, [sp, #4]
 8000eea:	e79c      	b.n	8000e26 <_Unwind_VRS_Pop+0x16a>
 8000eec:	2b01      	cmp	r3, #1
 8000eee:	d003      	beq.n	8000ef8 <_Unwind_VRS_Pop+0x23c>
 8000ef0:	2e0f      	cmp	r6, #15
 8000ef2:	f63f af5f 	bhi.w	8000db4 <_Unwind_VRS_Pop+0xf8>
 8000ef6:	e79f      	b.n	8000e38 <_Unwind_VRS_Pop+0x17c>
 8000ef8:	a822      	add	r0, sp, #136	; 0x88
 8000efa:	9301      	str	r3, [sp, #4]
 8000efc:	f000 f812 	bl	8000f24 <__gnu_Unwind_Save_VFP>
 8000f00:	9b01      	ldr	r3, [sp, #4]
 8000f02:	e757      	b.n	8000db4 <_Unwind_VRS_Pop+0xf8>

08000f04 <__restore_core_regs>:
 8000f04:	f100 0134 	add.w	r1, r0, #52	; 0x34
 8000f08:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 8000f0c:	469c      	mov	ip, r3
 8000f0e:	46a6      	mov	lr, r4
 8000f10:	f84c 5d04 	str.w	r5, [ip, #-4]!
 8000f14:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8000f18:	46e5      	mov	sp, ip
 8000f1a:	bd00      	pop	{pc}

08000f1c <__gnu_Unwind_Restore_VFP>:
 8000f1c:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop

08000f24 <__gnu_Unwind_Save_VFP>:
 8000f24:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop

08000f2c <__gnu_Unwind_Restore_VFP_D>:
 8000f2c:	ec90 0b20 	vldmia	r0, {d0-d15}
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop

08000f34 <__gnu_Unwind_Save_VFP_D>:
 8000f34:	ec80 0b20 	vstmia	r0, {d0-d15}
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop

08000f3c <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 8000f3c:	ecd0 0b20 	vldmia	r0, {d16-d31}
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop

08000f44 <__gnu_Unwind_Save_VFP_D_16_to_31>:
 8000f44:	ecc0 0b20 	vstmia	r0, {d16-d31}
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <__gnu_Unwind_Restore_WMMXD>:
 8000f4c:	ecf0 0102 	ldfe	f0, [r0], #8
 8000f50:	ecf0 1102 	ldfe	f1, [r0], #8
 8000f54:	ecf0 2102 	ldfe	f2, [r0], #8
 8000f58:	ecf0 3102 	ldfe	f3, [r0], #8
 8000f5c:	ecf0 4102 	ldfe	f4, [r0], #8
 8000f60:	ecf0 5102 	ldfe	f5, [r0], #8
 8000f64:	ecf0 6102 	ldfe	f6, [r0], #8
 8000f68:	ecf0 7102 	ldfe	f7, [r0], #8
 8000f6c:	ecf0 8102 	ldfp	f0, [r0], #8
 8000f70:	ecf0 9102 	ldfp	f1, [r0], #8
 8000f74:	ecf0 a102 	ldfp	f2, [r0], #8
 8000f78:	ecf0 b102 	ldfp	f3, [r0], #8
 8000f7c:	ecf0 c102 	ldfp	f4, [r0], #8
 8000f80:	ecf0 d102 	ldfp	f5, [r0], #8
 8000f84:	ecf0 e102 	ldfp	f6, [r0], #8
 8000f88:	ecf0 f102 	ldfp	f7, [r0], #8
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop

08000f90 <__gnu_Unwind_Save_WMMXD>:
 8000f90:	ece0 0102 	stfe	f0, [r0], #8
 8000f94:	ece0 1102 	stfe	f1, [r0], #8
 8000f98:	ece0 2102 	stfe	f2, [r0], #8
 8000f9c:	ece0 3102 	stfe	f3, [r0], #8
 8000fa0:	ece0 4102 	stfe	f4, [r0], #8
 8000fa4:	ece0 5102 	stfe	f5, [r0], #8
 8000fa8:	ece0 6102 	stfe	f6, [r0], #8
 8000fac:	ece0 7102 	stfe	f7, [r0], #8
 8000fb0:	ece0 8102 	stfp	f0, [r0], #8
 8000fb4:	ece0 9102 	stfp	f1, [r0], #8
 8000fb8:	ece0 a102 	stfp	f2, [r0], #8
 8000fbc:	ece0 b102 	stfp	f3, [r0], #8
 8000fc0:	ece0 c102 	stfp	f4, [r0], #8
 8000fc4:	ece0 d102 	stfp	f5, [r0], #8
 8000fc8:	ece0 e102 	stfp	f6, [r0], #8
 8000fcc:	ece0 f102 	stfp	f7, [r0], #8
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop

08000fd4 <__gnu_Unwind_Restore_WMMXC>:
 8000fd4:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 8000fd8:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 8000fdc:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 8000fe0:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop

08000fe8 <__gnu_Unwind_Save_WMMXC>:
 8000fe8:	fca0 8101 	stc2	1, cr8, [r0], #4
 8000fec:	fca0 9101 	stc2	1, cr9, [r0], #4
 8000ff0:	fca0 a101 	stc2	1, cr10, [r0], #4
 8000ff4:	fca0 b101 	stc2	1, cr11, [r0], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop

08000ffc <_Unwind_RaiseException>:
 8000ffc:	46ec      	mov	ip, sp
 8000ffe:	b500      	push	{lr}
 8001000:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001004:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001008:	f04f 0300 	mov.w	r3, #0
 800100c:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001010:	a901      	add	r1, sp, #4
 8001012:	f7ff fbf3 	bl	80007fc <__gnu_Unwind_RaiseException>
 8001016:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800101a:	b012      	add	sp, #72	; 0x48
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop

08001020 <_Unwind_Resume>:
 8001020:	46ec      	mov	ip, sp
 8001022:	b500      	push	{lr}
 8001024:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001028:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 800102c:	f04f 0300 	mov.w	r3, #0
 8001030:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001034:	a901      	add	r1, sp, #4
 8001036:	f7ff fc1b 	bl	8000870 <__gnu_Unwind_Resume>
 800103a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800103e:	b012      	add	sp, #72	; 0x48
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop

08001044 <_Unwind_Resume_or_Rethrow>:
 8001044:	46ec      	mov	ip, sp
 8001046:	b500      	push	{lr}
 8001048:	e92d 5000 	stmdb	sp!, {ip, lr}
 800104c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001050:	f04f 0300 	mov.w	r3, #0
 8001054:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001058:	a901      	add	r1, sp, #4
 800105a:	f7ff fc2b 	bl	80008b4 <__gnu_Unwind_Resume_or_Rethrow>
 800105e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001062:	b012      	add	sp, #72	; 0x48
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop

08001068 <_Unwind_ForcedUnwind>:
 8001068:	46ec      	mov	ip, sp
 800106a:	b500      	push	{lr}
 800106c:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001070:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001074:	f04f 0300 	mov.w	r3, #0
 8001078:	e92d 000c 	stmdb	sp!, {r2, r3}
 800107c:	ab01      	add	r3, sp, #4
 800107e:	f7ff fbed 	bl	800085c <__gnu_Unwind_ForcedUnwind>
 8001082:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001086:	b012      	add	sp, #72	; 0x48
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop

0800108c <_Unwind_Backtrace>:
 800108c:	46ec      	mov	ip, sp
 800108e:	b500      	push	{lr}
 8001090:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001094:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001098:	f04f 0300 	mov.w	r3, #0
 800109c:	e92d 000c 	stmdb	sp!, {r2, r3}
 80010a0:	aa01      	add	r2, sp, #4
 80010a2:	f7ff fc65 	bl	8000970 <__gnu_Unwind_Backtrace>
 80010a6:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80010aa:	b012      	add	sp, #72	; 0x48
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop

080010b0 <next_unwind_byte>:
 80010b0:	7a02      	ldrb	r2, [r0, #8]
 80010b2:	b91a      	cbnz	r2, 80010bc <next_unwind_byte+0xc>
 80010b4:	7a43      	ldrb	r3, [r0, #9]
 80010b6:	b943      	cbnz	r3, 80010ca <next_unwind_byte+0x1a>
 80010b8:	20b0      	movs	r0, #176	; 0xb0
 80010ba:	4770      	bx	lr
 80010bc:	6803      	ldr	r3, [r0, #0]
 80010be:	3a01      	subs	r2, #1
 80010c0:	7202      	strb	r2, [r0, #8]
 80010c2:	021a      	lsls	r2, r3, #8
 80010c4:	6002      	str	r2, [r0, #0]
 80010c6:	0e18      	lsrs	r0, r3, #24
 80010c8:	4770      	bx	lr
 80010ca:	6842      	ldr	r2, [r0, #4]
 80010cc:	3b01      	subs	r3, #1
 80010ce:	b410      	push	{r4}
 80010d0:	7243      	strb	r3, [r0, #9]
 80010d2:	6813      	ldr	r3, [r2, #0]
 80010d4:	2103      	movs	r1, #3
 80010d6:	1d14      	adds	r4, r2, #4
 80010d8:	7201      	strb	r1, [r0, #8]
 80010da:	021a      	lsls	r2, r3, #8
 80010dc:	6044      	str	r4, [r0, #4]
 80010de:	6002      	str	r2, [r0, #0]
 80010e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80010e4:	0e18      	lsrs	r0, r3, #24
 80010e6:	4770      	bx	lr

080010e8 <_Unwind_GetGR.constprop.0>:
 80010e8:	b500      	push	{lr}
 80010ea:	b085      	sub	sp, #20
 80010ec:	aa03      	add	r2, sp, #12
 80010ee:	2300      	movs	r3, #0
 80010f0:	9200      	str	r2, [sp, #0]
 80010f2:	4619      	mov	r1, r3
 80010f4:	220c      	movs	r2, #12
 80010f6:	f7ff fbed 	bl	80008d4 <_Unwind_VRS_Get>
 80010fa:	9803      	ldr	r0, [sp, #12]
 80010fc:	b005      	add	sp, #20
 80010fe:	f85d fb04 	ldr.w	pc, [sp], #4
 8001102:	bf00      	nop

08001104 <unwind_UCB_from_context>:
 8001104:	e7f0      	b.n	80010e8 <_Unwind_GetGR.constprop.0>
 8001106:	bf00      	nop

08001108 <__gnu_unwind_execute>:
 8001108:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800110c:	4606      	mov	r6, r0
 800110e:	b085      	sub	sp, #20
 8001110:	460f      	mov	r7, r1
 8001112:	f04f 0800 	mov.w	r8, #0
 8001116:	4638      	mov	r0, r7
 8001118:	f7ff ffca 	bl	80010b0 <next_unwind_byte>
 800111c:	28b0      	cmp	r0, #176	; 0xb0
 800111e:	4604      	mov	r4, r0
 8001120:	d023      	beq.n	800116a <__gnu_unwind_execute+0x62>
 8001122:	0605      	lsls	r5, r0, #24
 8001124:	d427      	bmi.n	8001176 <__gnu_unwind_execute+0x6e>
 8001126:	2300      	movs	r3, #0
 8001128:	f10d 090c 	add.w	r9, sp, #12
 800112c:	4619      	mov	r1, r3
 800112e:	0085      	lsls	r5, r0, #2
 8001130:	220d      	movs	r2, #13
 8001132:	f8cd 9000 	str.w	r9, [sp]
 8001136:	4630      	mov	r0, r6
 8001138:	f7ff fbcc 	bl	80008d4 <_Unwind_VRS_Get>
 800113c:	b2ed      	uxtb	r5, r5
 800113e:	9b03      	ldr	r3, [sp, #12]
 8001140:	f8cd 9000 	str.w	r9, [sp]
 8001144:	0660      	lsls	r0, r4, #25
 8001146:	f105 0504 	add.w	r5, r5, #4
 800114a:	bf4c      	ite	mi
 800114c:	1b5d      	submi	r5, r3, r5
 800114e:	18ed      	addpl	r5, r5, r3
 8001150:	2300      	movs	r3, #0
 8001152:	4619      	mov	r1, r3
 8001154:	220d      	movs	r2, #13
 8001156:	4630      	mov	r0, r6
 8001158:	9503      	str	r5, [sp, #12]
 800115a:	f7ff fbe1 	bl	8000920 <_Unwind_VRS_Set>
 800115e:	4638      	mov	r0, r7
 8001160:	f7ff ffa6 	bl	80010b0 <next_unwind_byte>
 8001164:	28b0      	cmp	r0, #176	; 0xb0
 8001166:	4604      	mov	r4, r0
 8001168:	d1db      	bne.n	8001122 <__gnu_unwind_execute+0x1a>
 800116a:	f1b8 0f00 	cmp.w	r8, #0
 800116e:	f000 8095 	beq.w	800129c <__gnu_unwind_execute+0x194>
 8001172:	2000      	movs	r0, #0
 8001174:	e01c      	b.n	80011b0 <__gnu_unwind_execute+0xa8>
 8001176:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 800117a:	2b80      	cmp	r3, #128	; 0x80
 800117c:	d05d      	beq.n	800123a <__gnu_unwind_execute+0x132>
 800117e:	2b90      	cmp	r3, #144	; 0x90
 8001180:	d019      	beq.n	80011b6 <__gnu_unwind_execute+0xae>
 8001182:	2ba0      	cmp	r3, #160	; 0xa0
 8001184:	d02c      	beq.n	80011e0 <__gnu_unwind_execute+0xd8>
 8001186:	2bb0      	cmp	r3, #176	; 0xb0
 8001188:	d03f      	beq.n	800120a <__gnu_unwind_execute+0x102>
 800118a:	2bc0      	cmp	r3, #192	; 0xc0
 800118c:	d06c      	beq.n	8001268 <__gnu_unwind_execute+0x160>
 800118e:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8001192:	2bd0      	cmp	r3, #208	; 0xd0
 8001194:	d10b      	bne.n	80011ae <__gnu_unwind_execute+0xa6>
 8001196:	f000 0207 	and.w	r2, r0, #7
 800119a:	3201      	adds	r2, #1
 800119c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80011a0:	2305      	movs	r3, #5
 80011a2:	2101      	movs	r1, #1
 80011a4:	4630      	mov	r0, r6
 80011a6:	f7ff fd89 	bl	8000cbc <_Unwind_VRS_Pop>
 80011aa:	2800      	cmp	r0, #0
 80011ac:	d0b3      	beq.n	8001116 <__gnu_unwind_execute+0xe>
 80011ae:	2009      	movs	r0, #9
 80011b0:	b005      	add	sp, #20
 80011b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80011b6:	f000 030d 	and.w	r3, r0, #13
 80011ba:	2b0d      	cmp	r3, #13
 80011bc:	d0f7      	beq.n	80011ae <__gnu_unwind_execute+0xa6>
 80011be:	ad03      	add	r5, sp, #12
 80011c0:	2300      	movs	r3, #0
 80011c2:	f000 020f 	and.w	r2, r0, #15
 80011c6:	4619      	mov	r1, r3
 80011c8:	9500      	str	r5, [sp, #0]
 80011ca:	4630      	mov	r0, r6
 80011cc:	f7ff fb82 	bl	80008d4 <_Unwind_VRS_Get>
 80011d0:	2300      	movs	r3, #0
 80011d2:	9500      	str	r5, [sp, #0]
 80011d4:	4619      	mov	r1, r3
 80011d6:	220d      	movs	r2, #13
 80011d8:	4630      	mov	r0, r6
 80011da:	f7ff fba1 	bl	8000920 <_Unwind_VRS_Set>
 80011de:	e79a      	b.n	8001116 <__gnu_unwind_execute+0xe>
 80011e0:	43c2      	mvns	r2, r0
 80011e2:	f002 0307 	and.w	r3, r2, #7
 80011e6:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 80011ea:	411a      	asrs	r2, r3
 80011ec:	0701      	lsls	r1, r0, #28
 80011ee:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 80011f2:	f04f 0300 	mov.w	r3, #0
 80011f6:	bf48      	it	mi
 80011f8:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 80011fc:	4619      	mov	r1, r3
 80011fe:	4630      	mov	r0, r6
 8001200:	f7ff fd5c 	bl	8000cbc <_Unwind_VRS_Pop>
 8001204:	2800      	cmp	r0, #0
 8001206:	d1d2      	bne.n	80011ae <__gnu_unwind_execute+0xa6>
 8001208:	e785      	b.n	8001116 <__gnu_unwind_execute+0xe>
 800120a:	28b1      	cmp	r0, #177	; 0xb1
 800120c:	d057      	beq.n	80012be <__gnu_unwind_execute+0x1b6>
 800120e:	28b2      	cmp	r0, #178	; 0xb2
 8001210:	d068      	beq.n	80012e4 <__gnu_unwind_execute+0x1dc>
 8001212:	28b3      	cmp	r0, #179	; 0xb3
 8001214:	f000 8095 	beq.w	8001342 <__gnu_unwind_execute+0x23a>
 8001218:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 800121c:	2bb4      	cmp	r3, #180	; 0xb4
 800121e:	d0c6      	beq.n	80011ae <__gnu_unwind_execute+0xa6>
 8001220:	f000 0207 	and.w	r2, r0, #7
 8001224:	3201      	adds	r2, #1
 8001226:	2301      	movs	r3, #1
 8001228:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800122c:	4619      	mov	r1, r3
 800122e:	4630      	mov	r0, r6
 8001230:	f7ff fd44 	bl	8000cbc <_Unwind_VRS_Pop>
 8001234:	2800      	cmp	r0, #0
 8001236:	d1ba      	bne.n	80011ae <__gnu_unwind_execute+0xa6>
 8001238:	e76d      	b.n	8001116 <__gnu_unwind_execute+0xe>
 800123a:	4638      	mov	r0, r7
 800123c:	f7ff ff38 	bl	80010b0 <next_unwind_byte>
 8001240:	0224      	lsls	r4, r4, #8
 8001242:	4304      	orrs	r4, r0
 8001244:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8001248:	d0b1      	beq.n	80011ae <__gnu_unwind_execute+0xa6>
 800124a:	0124      	lsls	r4, r4, #4
 800124c:	2300      	movs	r3, #0
 800124e:	b2a2      	uxth	r2, r4
 8001250:	4619      	mov	r1, r3
 8001252:	4630      	mov	r0, r6
 8001254:	f7ff fd32 	bl	8000cbc <_Unwind_VRS_Pop>
 8001258:	2800      	cmp	r0, #0
 800125a:	d1a8      	bne.n	80011ae <__gnu_unwind_execute+0xa6>
 800125c:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8001260:	bf18      	it	ne
 8001262:	f04f 0801 	movne.w	r8, #1
 8001266:	e756      	b.n	8001116 <__gnu_unwind_execute+0xe>
 8001268:	28c6      	cmp	r0, #198	; 0xc6
 800126a:	d07d      	beq.n	8001368 <__gnu_unwind_execute+0x260>
 800126c:	28c7      	cmp	r0, #199	; 0xc7
 800126e:	f000 8086 	beq.w	800137e <__gnu_unwind_execute+0x276>
 8001272:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8001276:	2bc0      	cmp	r3, #192	; 0xc0
 8001278:	f000 8094 	beq.w	80013a4 <__gnu_unwind_execute+0x29c>
 800127c:	28c8      	cmp	r0, #200	; 0xc8
 800127e:	f000 809f 	beq.w	80013c0 <__gnu_unwind_execute+0x2b8>
 8001282:	28c9      	cmp	r0, #201	; 0xc9
 8001284:	d193      	bne.n	80011ae <__gnu_unwind_execute+0xa6>
 8001286:	4638      	mov	r0, r7
 8001288:	f7ff ff12 	bl	80010b0 <next_unwind_byte>
 800128c:	0302      	lsls	r2, r0, #12
 800128e:	f000 000f 	and.w	r0, r0, #15
 8001292:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 8001296:	3001      	adds	r0, #1
 8001298:	4302      	orrs	r2, r0
 800129a:	e781      	b.n	80011a0 <__gnu_unwind_execute+0x98>
 800129c:	ac03      	add	r4, sp, #12
 800129e:	4643      	mov	r3, r8
 80012a0:	220e      	movs	r2, #14
 80012a2:	4641      	mov	r1, r8
 80012a4:	9400      	str	r4, [sp, #0]
 80012a6:	4630      	mov	r0, r6
 80012a8:	f7ff fb14 	bl	80008d4 <_Unwind_VRS_Get>
 80012ac:	9400      	str	r4, [sp, #0]
 80012ae:	4630      	mov	r0, r6
 80012b0:	4643      	mov	r3, r8
 80012b2:	220f      	movs	r2, #15
 80012b4:	4641      	mov	r1, r8
 80012b6:	f7ff fb33 	bl	8000920 <_Unwind_VRS_Set>
 80012ba:	4640      	mov	r0, r8
 80012bc:	e778      	b.n	80011b0 <__gnu_unwind_execute+0xa8>
 80012be:	4638      	mov	r0, r7
 80012c0:	f7ff fef6 	bl	80010b0 <next_unwind_byte>
 80012c4:	2800      	cmp	r0, #0
 80012c6:	f43f af72 	beq.w	80011ae <__gnu_unwind_execute+0xa6>
 80012ca:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 80012ce:	f47f af6e 	bne.w	80011ae <__gnu_unwind_execute+0xa6>
 80012d2:	4602      	mov	r2, r0
 80012d4:	4619      	mov	r1, r3
 80012d6:	4630      	mov	r0, r6
 80012d8:	f7ff fcf0 	bl	8000cbc <_Unwind_VRS_Pop>
 80012dc:	2800      	cmp	r0, #0
 80012de:	f47f af66 	bne.w	80011ae <__gnu_unwind_execute+0xa6>
 80012e2:	e718      	b.n	8001116 <__gnu_unwind_execute+0xe>
 80012e4:	2300      	movs	r3, #0
 80012e6:	f10d 090c 	add.w	r9, sp, #12
 80012ea:	220d      	movs	r2, #13
 80012ec:	4619      	mov	r1, r3
 80012ee:	f8cd 9000 	str.w	r9, [sp]
 80012f2:	4630      	mov	r0, r6
 80012f4:	f7ff faee 	bl	80008d4 <_Unwind_VRS_Get>
 80012f8:	4638      	mov	r0, r7
 80012fa:	f7ff fed9 	bl	80010b0 <next_unwind_byte>
 80012fe:	0602      	lsls	r2, r0, #24
 8001300:	f04f 0402 	mov.w	r4, #2
 8001304:	d50c      	bpl.n	8001320 <__gnu_unwind_execute+0x218>
 8001306:	9b03      	ldr	r3, [sp, #12]
 8001308:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800130c:	40a0      	lsls	r0, r4
 800130e:	4403      	add	r3, r0
 8001310:	4638      	mov	r0, r7
 8001312:	9303      	str	r3, [sp, #12]
 8001314:	f7ff fecc 	bl	80010b0 <next_unwind_byte>
 8001318:	0603      	lsls	r3, r0, #24
 800131a:	f104 0407 	add.w	r4, r4, #7
 800131e:	d4f2      	bmi.n	8001306 <__gnu_unwind_execute+0x1fe>
 8001320:	9b03      	ldr	r3, [sp, #12]
 8001322:	f8cd 9000 	str.w	r9, [sp]
 8001326:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 800132a:	40a2      	lsls	r2, r4
 800132c:	f503 7401 	add.w	r4, r3, #516	; 0x204
 8001330:	2300      	movs	r3, #0
 8001332:	4414      	add	r4, r2
 8001334:	4619      	mov	r1, r3
 8001336:	220d      	movs	r2, #13
 8001338:	4630      	mov	r0, r6
 800133a:	9403      	str	r4, [sp, #12]
 800133c:	f7ff faf0 	bl	8000920 <_Unwind_VRS_Set>
 8001340:	e6e9      	b.n	8001116 <__gnu_unwind_execute+0xe>
 8001342:	4638      	mov	r0, r7
 8001344:	f7ff feb4 	bl	80010b0 <next_unwind_byte>
 8001348:	0301      	lsls	r1, r0, #12
 800134a:	f000 000f 	and.w	r0, r0, #15
 800134e:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 8001352:	1c42      	adds	r2, r0, #1
 8001354:	2301      	movs	r3, #1
 8001356:	430a      	orrs	r2, r1
 8001358:	4630      	mov	r0, r6
 800135a:	4619      	mov	r1, r3
 800135c:	f7ff fcae 	bl	8000cbc <_Unwind_VRS_Pop>
 8001360:	2800      	cmp	r0, #0
 8001362:	f47f af24 	bne.w	80011ae <__gnu_unwind_execute+0xa6>
 8001366:	e6d6      	b.n	8001116 <__gnu_unwind_execute+0xe>
 8001368:	4638      	mov	r0, r7
 800136a:	f7ff fea1 	bl	80010b0 <next_unwind_byte>
 800136e:	0301      	lsls	r1, r0, #12
 8001370:	f000 000f 	and.w	r0, r0, #15
 8001374:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 8001378:	1c42      	adds	r2, r0, #1
 800137a:	2303      	movs	r3, #3
 800137c:	e7eb      	b.n	8001356 <__gnu_unwind_execute+0x24e>
 800137e:	4638      	mov	r0, r7
 8001380:	f7ff fe96 	bl	80010b0 <next_unwind_byte>
 8001384:	2800      	cmp	r0, #0
 8001386:	f43f af12 	beq.w	80011ae <__gnu_unwind_execute+0xa6>
 800138a:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 800138e:	f47f af0e 	bne.w	80011ae <__gnu_unwind_execute+0xa6>
 8001392:	4602      	mov	r2, r0
 8001394:	2104      	movs	r1, #4
 8001396:	4630      	mov	r0, r6
 8001398:	f7ff fc90 	bl	8000cbc <_Unwind_VRS_Pop>
 800139c:	2800      	cmp	r0, #0
 800139e:	f47f af06 	bne.w	80011ae <__gnu_unwind_execute+0xa6>
 80013a2:	e6b8      	b.n	8001116 <__gnu_unwind_execute+0xe>
 80013a4:	f000 020f 	and.w	r2, r0, #15
 80013a8:	3201      	adds	r2, #1
 80013aa:	2303      	movs	r3, #3
 80013ac:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 80013b0:	4619      	mov	r1, r3
 80013b2:	4630      	mov	r0, r6
 80013b4:	f7ff fc82 	bl	8000cbc <_Unwind_VRS_Pop>
 80013b8:	2800      	cmp	r0, #0
 80013ba:	f47f aef8 	bne.w	80011ae <__gnu_unwind_execute+0xa6>
 80013be:	e6aa      	b.n	8001116 <__gnu_unwind_execute+0xe>
 80013c0:	4638      	mov	r0, r7
 80013c2:	f7ff fe75 	bl	80010b0 <next_unwind_byte>
 80013c6:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 80013ca:	f000 030f 	and.w	r3, r0, #15
 80013ce:	3210      	adds	r2, #16
 80013d0:	3301      	adds	r3, #1
 80013d2:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 80013d6:	e6e3      	b.n	80011a0 <__gnu_unwind_execute+0x98>

080013d8 <__gnu_unwind_frame>:
 80013d8:	b510      	push	{r4, lr}
 80013da:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80013dc:	b084      	sub	sp, #16
 80013de:	685a      	ldr	r2, [r3, #4]
 80013e0:	2003      	movs	r0, #3
 80013e2:	f88d 000c 	strb.w	r0, [sp, #12]
 80013e6:	79dc      	ldrb	r4, [r3, #7]
 80013e8:	f88d 400d 	strb.w	r4, [sp, #13]
 80013ec:	0212      	lsls	r2, r2, #8
 80013ee:	3308      	adds	r3, #8
 80013f0:	4608      	mov	r0, r1
 80013f2:	a901      	add	r1, sp, #4
 80013f4:	9201      	str	r2, [sp, #4]
 80013f6:	9302      	str	r3, [sp, #8]
 80013f8:	f7ff fe86 	bl	8001108 <__gnu_unwind_execute>
 80013fc:	b004      	add	sp, #16
 80013fe:	bd10      	pop	{r4, pc}

08001400 <_Unwind_GetRegionStart>:
 8001400:	b508      	push	{r3, lr}
 8001402:	f7ff fe7f 	bl	8001104 <unwind_UCB_from_context>
 8001406:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8001408:	bd08      	pop	{r3, pc}
 800140a:	bf00      	nop

0800140c <_Unwind_GetLanguageSpecificData>:
 800140c:	b508      	push	{r3, lr}
 800140e:	f7ff fe79 	bl	8001104 <unwind_UCB_from_context>
 8001412:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8001414:	79c3      	ldrb	r3, [r0, #7]
 8001416:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800141a:	3008      	adds	r0, #8
 800141c:	bd08      	pop	{r3, pc}
 800141e:	bf00      	nop

08001420 <_Unwind_GetTextRelBase>:
 8001420:	b508      	push	{r3, lr}
 8001422:	f00a f9bf 	bl	800b7a4 <abort>
 8001426:	bf00      	nop

08001428 <_Unwind_GetDataRelBase>:
 8001428:	b508      	push	{r3, lr}
 800142a:	f7ff fff9 	bl	8001420 <_Unwind_GetTextRelBase>
 800142e:	bf00      	nop

08001430 <__aeabi_idiv0>:
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop

08001434 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8001434:	f8df d034 	ldr.w	sp, [pc, #52]	; 800146c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8001438:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800143a:	e003      	b.n	8001444 <LoopCopyDataInit>

0800143c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800143c:	4b0c      	ldr	r3, [pc, #48]	; (8001470 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800143e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001440:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001442:	3104      	adds	r1, #4

08001444 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001444:	480b      	ldr	r0, [pc, #44]	; (8001474 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001446:	4b0c      	ldr	r3, [pc, #48]	; (8001478 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001448:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800144a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800144c:	d3f6      	bcc.n	800143c <CopyDataInit>
  ldr  r2, =_sbss
 800144e:	4a0b      	ldr	r2, [pc, #44]	; (800147c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001450:	e002      	b.n	8001458 <LoopFillZerobss>

08001452 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8001452:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001454:	f842 3b04 	str.w	r3, [r2], #4

08001458 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001458:	4b09      	ldr	r3, [pc, #36]	; (8001480 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800145a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800145c:	d3f9      	bcc.n	8001452 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800145e:	f006 f9fb 	bl	8007858 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001462:	f00a f9ad 	bl	800b7c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001466:	f003 fa81 	bl	800496c <main>
  bx  lr    
 800146a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800146c:	20008000 	.word	0x20008000
  ldr  r3, =_sidata
 8001470:	0800d918 	.word	0x0800d918
  ldr  r0, =_sdata
 8001474:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001478:	20000518 	.word	0x20000518
  ldr  r2, =_sbss
 800147c:	20000518 	.word	0x20000518
  ldr  r3, = _ebss
 8001480:	20003e70 	.word	0x20003e70

08001484 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001484:	e7fe      	b.n	8001484 <ADC_IRQHandler>
	...

08001488 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001488:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  ADC_ChannelConfTypeDef sConfig;

    /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
    */
  hadc1.Instance = ADC1;
 800148a:	4826      	ldr	r0, [pc, #152]	; (8001524 <MX_ADC1_Init+0x9c>)
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800148c:	4b26      	ldr	r3, [pc, #152]	; (8001528 <MX_ADC1_Init+0xa0>)
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.ScanConvMode = ENABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800148e:	4a27      	ldr	r2, [pc, #156]	; (800152c <MX_ADC1_Init+0xa4>)
 8001490:	6282      	str	r2, [r0, #40]	; 0x28
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001492:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 8001496:	e880 0018 	stmia.w	r0, {r3, r4}
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 4;
 800149a:	2204      	movs	r2, #4
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800149c:	2300      	movs	r3, #0
  hadc1.Init.ScanConvMode = ENABLE;
 800149e:	2401      	movs	r4, #1
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80014a0:	6083      	str	r3, [r0, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80014a2:	6104      	str	r4, [r0, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80014a4:	6183      	str	r3, [r0, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80014a6:	6203      	str	r3, [r0, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80014a8:	62c3      	str	r3, [r0, #44]	; 0x2c
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014aa:	60c3      	str	r3, [r0, #12]
  hadc1.Init.NbrOfConversion = 4;
 80014ac:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80014ae:	6303      	str	r3, [r0, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014b0:	6144      	str	r4, [r0, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80014b2:	f006 fa43 	bl	800793c <HAL_ADC_Init>
 80014b6:	b118      	cbz	r0, 80014c0 <MX_ADC1_Init+0x38>
  {
    _Error_Handler(__FILE__, __LINE__);
 80014b8:	2148      	movs	r1, #72	; 0x48
 80014ba:	481d      	ldr	r0, [pc, #116]	; (8001530 <MX_ADC1_Init+0xa8>)
 80014bc:	f003 fb60 	bl	8004b80 <_Error_Handler>
  }

    /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
    */
  sConfig.Channel = ADC_CHANNEL_1;
 80014c0:	9400      	str	r4, [sp, #0]
  sConfig.Rank = 1;
 80014c2:	9401      	str	r4, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014c4:	4669      	mov	r1, sp
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 80014c6:	2402      	movs	r4, #2
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014c8:	4816      	ldr	r0, [pc, #88]	; (8001524 <MX_ADC1_Init+0x9c>)
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 80014ca:	9402      	str	r4, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014cc:	f006 fbaa 	bl	8007c24 <HAL_ADC_ConfigChannel>
 80014d0:	b118      	cbz	r0, 80014da <MX_ADC1_Init+0x52>
  {
    _Error_Handler(__FILE__, __LINE__);
 80014d2:	2152      	movs	r1, #82	; 0x52
 80014d4:	4816      	ldr	r0, [pc, #88]	; (8001530 <MX_ADC1_Init+0xa8>)
 80014d6:	f003 fb53 	bl	8004b80 <_Error_Handler>

    /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
    */
  sConfig.Channel = ADC_CHANNEL_2;
  sConfig.Rank = 2;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014da:	4669      	mov	r1, sp
 80014dc:	4811      	ldr	r0, [pc, #68]	; (8001524 <MX_ADC1_Init+0x9c>)
  sConfig.Channel = ADC_CHANNEL_2;
 80014de:	9400      	str	r4, [sp, #0]
  sConfig.Rank = 2;
 80014e0:	9401      	str	r4, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014e2:	f006 fb9f 	bl	8007c24 <HAL_ADC_ConfigChannel>
 80014e6:	b118      	cbz	r0, 80014f0 <MX_ADC1_Init+0x68>
  {
    _Error_Handler(__FILE__, __LINE__);
 80014e8:	215b      	movs	r1, #91	; 0x5b
 80014ea:	4811      	ldr	r0, [pc, #68]	; (8001530 <MX_ADC1_Init+0xa8>)
 80014ec:	f003 fb48 	bl	8004b80 <_Error_Handler>
  }

    /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
    */
  sConfig.Channel = ADC_CHANNEL_3;
 80014f0:	2303      	movs	r3, #3
  sConfig.Rank = 3;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014f2:	4669      	mov	r1, sp
 80014f4:	480b      	ldr	r0, [pc, #44]	; (8001524 <MX_ADC1_Init+0x9c>)
  sConfig.Channel = ADC_CHANNEL_3;
 80014f6:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 3;
 80014f8:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014fa:	f006 fb93 	bl	8007c24 <HAL_ADC_ConfigChannel>
 80014fe:	b118      	cbz	r0, 8001508 <MX_ADC1_Init+0x80>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001500:	2164      	movs	r1, #100	; 0x64
 8001502:	480b      	ldr	r0, [pc, #44]	; (8001530 <MX_ADC1_Init+0xa8>)
 8001504:	f003 fb3c 	bl	8004b80 <_Error_Handler>
  }

    /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
    */
  sConfig.Channel = ADC_CHANNEL_4;
 8001508:	2304      	movs	r3, #4
  sConfig.Rank = 4;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800150a:	4669      	mov	r1, sp
 800150c:	4805      	ldr	r0, [pc, #20]	; (8001524 <MX_ADC1_Init+0x9c>)
  sConfig.Channel = ADC_CHANNEL_4;
 800150e:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 4;
 8001510:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001512:	f006 fb87 	bl	8007c24 <HAL_ADC_ConfigChannel>
 8001516:	b118      	cbz	r0, 8001520 <MX_ADC1_Init+0x98>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001518:	216d      	movs	r1, #109	; 0x6d
 800151a:	4805      	ldr	r0, [pc, #20]	; (8001530 <MX_ADC1_Init+0xa8>)
 800151c:	f003 fb30 	bl	8004b80 <_Error_Handler>
  }

}
 8001520:	b004      	add	sp, #16
 8001522:	bd10      	pop	{r4, pc}
 8001524:	20000a30 	.word	0x20000a30
 8001528:	40012000 	.word	0x40012000
 800152c:	0f000001 	.word	0x0f000001
 8001530:	0800c669 	.word	0x0800c669

08001534 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001534:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(adcHandle->Instance==ADC1)
 8001536:	6802      	ldr	r2, [r0, #0]
 8001538:	4b0d      	ldr	r3, [pc, #52]	; (8001570 <HAL_ADC_MspInit+0x3c>)
 800153a:	429a      	cmp	r2, r3
 800153c:	d114      	bne.n	8001568 <HAL_ADC_MspInit+0x34>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800153e:	2100      	movs	r1, #0
 8001540:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8001544:	9100      	str	r1, [sp, #0]
 8001546:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    PA4     ------> ADC1_IN4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001548:	480a      	ldr	r0, [pc, #40]	; (8001574 <HAL_ADC_MspInit+0x40>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 800154a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800154e:	645a      	str	r2, [r3, #68]	; 0x44
 8001550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001552:	9103      	str	r1, [sp, #12]
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001554:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001558:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 800155a:	231e      	movs	r3, #30
 800155c:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800155e:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001560:	2303      	movs	r3, #3
 8001562:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001564:	f006 ffc6 	bl	80084f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001568:	b007      	add	sp, #28
 800156a:	f85d fb04 	ldr.w	pc, [sp], #4
 800156e:	bf00      	nop
 8001570:	40012000 	.word	0x40012000
 8001574:	40020000 	.word	0x40020000

08001578 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8001578:	b507      	push	{r0, r1, r2, lr}
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800157a:	2300      	movs	r3, #0
 800157c:	9301      	str	r3, [sp, #4]
 800157e:	4b0e      	ldr	r3, [pc, #56]	; (80015b8 <MX_DMA_Init+0x40>)
 8001580:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001582:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001586:	631a      	str	r2, [r3, #48]	; 0x30
 8001588:	6b1b      	ldr	r3, [r3, #48]	; 0x30

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 2, 1);
 800158a:	2201      	movs	r2, #1
  __HAL_RCC_DMA2_CLK_ENABLE();
 800158c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 2, 1);
 8001590:	2102      	movs	r1, #2
 8001592:	203a      	movs	r0, #58	; 0x3a
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001594:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 2, 1);
 8001596:	f006 fbeb 	bl	8007d70 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800159a:	203a      	movs	r0, #58	; 0x3a
 800159c:	f006 fc1c 	bl	8007dd8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 2, 1);
 80015a0:	2201      	movs	r2, #1
 80015a2:	2102      	movs	r1, #2
 80015a4:	2046      	movs	r0, #70	; 0x46
 80015a6:	f006 fbe3 	bl	8007d70 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80015aa:	2046      	movs	r0, #70	; 0x46
 80015ac:	f006 fc14 	bl	8007dd8 <HAL_NVIC_EnableIRQ>

}
 80015b0:	b003      	add	sp, #12
 80015b2:	f85d fb04 	ldr.w	pc, [sp], #4
 80015b6:	bf00      	nop
 80015b8:	40023800 	.word	0x40023800

080015bc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80015bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015be:	b08b      	sub	sp, #44	; 0x2c

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015c0:	4b25      	ldr	r3, [pc, #148]	; (8001658 <MX_GPIO_Init+0x9c>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PC13_LED_GPIO_Port, PC13_LED_Pin, GPIO_PIN_RESET);
 80015c2:	4f26      	ldr	r7, [pc, #152]	; (800165c <MX_GPIO_Init+0xa0>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 80015c4:	4e26      	ldr	r6, [pc, #152]	; (8001660 <MX_GPIO_Init+0xa4>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015c6:	2400      	movs	r4, #0
 80015c8:	9401      	str	r4, [sp, #4]
 80015ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015cc:	f042 0204 	orr.w	r2, r2, #4
 80015d0:	631a      	str	r2, [r3, #48]	; 0x30
 80015d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015d4:	f002 0204 	and.w	r2, r2, #4
 80015d8:	9201      	str	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015da:	9402      	str	r4, [sp, #8]
 80015dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015de:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80015e2:	631a      	str	r2, [r3, #48]	; 0x30
 80015e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015e6:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80015ea:	9202      	str	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ec:	9403      	str	r4, [sp, #12]
 80015ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015f0:	f042 0201 	orr.w	r2, r2, #1
 80015f4:	631a      	str	r2, [r3, #48]	; 0x30
 80015f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015f8:	f002 0201 	and.w	r2, r2, #1
 80015fc:	9203      	str	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015fe:	9404      	str	r4, [sp, #16]
 8001600:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001602:	f042 0202 	orr.w	r2, r2, #2
 8001606:	631a      	str	r2, [r3, #48]	; 0x30
 8001608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(PC13_LED_GPIO_Port, PC13_LED_Pin, GPIO_PIN_RESET);
 800160a:	4622      	mov	r2, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800160c:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(PC13_LED_GPIO_Port, PC13_LED_Pin, GPIO_PIN_RESET);
 8001610:	4638      	mov	r0, r7
 8001612:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001616:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(PC13_LED_GPIO_Port, PC13_LED_Pin, GPIO_PIN_RESET);
 8001618:	f007 f826 	bl	8008668 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 800161c:	4622      	mov	r2, r4
 800161e:	4630      	mov	r0, r6
 8001620:	2140      	movs	r1, #64	; 0x40
 8001622:	f007 f821 	bl	8008668 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PC13_LED_Pin;
 8001626:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800162a:	2501      	movs	r5, #1
  GPIO_InitStruct.Pin = PC13_LED_Pin;
 800162c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(PC13_LED_GPIO_Port, &GPIO_InitStruct);
 800162e:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001630:	2311      	movs	r3, #17
  HAL_GPIO_Init(PC13_LED_GPIO_Port, &GPIO_InitStruct);
 8001632:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001634:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001636:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001638:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(PC13_LED_GPIO_Port, &GPIO_InitStruct);
 800163a:	f006 ff5b 	bl	80084f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 800163e:	2340      	movs	r3, #64	; 0x40
 8001640:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8001642:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001644:	2302      	movs	r3, #2
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8001646:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001648:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800164a:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800164c:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 800164e:	f006 ff51 	bl	80084f4 <HAL_GPIO_Init>

}
 8001652:	b00b      	add	sp, #44	; 0x2c
 8001654:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001656:	bf00      	nop
 8001658:	40023800 	.word	0x40023800
 800165c:	40020800 	.word	0x40020800
 8001660:	40020400 	.word	0x40020400

08001664 <_ZN3ros4TimeC1Ev>:
  class Time
  {
    public:
      uint32_t sec, nsec;

      Time() : sec(0), nsec(0) {}
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2200      	movs	r2, #0
 8001670:	601a      	str	r2, [r3, #0]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2200      	movs	r2, #0
 8001676:	605a      	str	r2, [r3, #4]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	4618      	mov	r0, r3
 800167c:	370c      	adds	r7, #12
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr
	...

08001688 <_ZN3ros3MsgC1Ev>:
#include <stdint.h>

namespace ros {

/* Base Message Type */
class Msg
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
 8001690:	4a04      	ldr	r2, [pc, #16]	; (80016a4 <_ZN3ros3MsgC1Ev+0x1c>)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	601a      	str	r2, [r3, #0]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	4618      	mov	r0, r3
 800169a:	370c      	adds	r7, #12
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr
 80016a4:	0800c7cc 	.word	0x0800c7cc

080016a8 <_ZN8std_msgs4TimeC1Ev>:
  class Time : public ros::Msg
  {
    public:
      ros::Time data;

    Time():
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
      data()
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	4618      	mov	r0, r3
 80016b4:	f7ff ffe8 	bl	8001688 <_ZN3ros3MsgC1Ev>
 80016b8:	4a06      	ldr	r2, [pc, #24]	; (80016d4 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	601a      	str	r2, [r3, #0]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	3304      	adds	r3, #4
 80016c2:	4618      	mov	r0, r3
 80016c4:	f7ff ffce 	bl	8001664 <_ZN3ros4TimeC1Ev>
    {
    }
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	4618      	mov	r0, r3
 80016cc:	3708      	adds	r7, #8
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	0800c7b4 	.word	0x0800c7b4

080016d8 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80016d8:	b480      	push	{r7}
 80016da:	b085      	sub	sp, #20
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
 80016e0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80016e2:	2300      	movs	r3, #0
 80016e4:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	683a      	ldr	r2, [r7, #0]
 80016ea:	4413      	add	r3, r2
 80016ec:	687a      	ldr	r2, [r7, #4]
 80016ee:	6852      	ldr	r2, [r2, #4]
 80016f0:	b2d2      	uxtb	r2, r2
 80016f2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	3301      	adds	r3, #1
 80016f8:	683a      	ldr	r2, [r7, #0]
 80016fa:	4413      	add	r3, r2
 80016fc:	687a      	ldr	r2, [r7, #4]
 80016fe:	6852      	ldr	r2, [r2, #4]
 8001700:	0a12      	lsrs	r2, r2, #8
 8001702:	b2d2      	uxtb	r2, r2
 8001704:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	3302      	adds	r3, #2
 800170a:	683a      	ldr	r2, [r7, #0]
 800170c:	4413      	add	r3, r2
 800170e:	687a      	ldr	r2, [r7, #4]
 8001710:	6852      	ldr	r2, [r2, #4]
 8001712:	0c12      	lsrs	r2, r2, #16
 8001714:	b2d2      	uxtb	r2, r2
 8001716:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	3303      	adds	r3, #3
 800171c:	683a      	ldr	r2, [r7, #0]
 800171e:	4413      	add	r3, r2
 8001720:	687a      	ldr	r2, [r7, #4]
 8001722:	6852      	ldr	r2, [r2, #4]
 8001724:	0e12      	lsrs	r2, r2, #24
 8001726:	b2d2      	uxtb	r2, r2
 8001728:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	3304      	adds	r3, #4
 800172e:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	683a      	ldr	r2, [r7, #0]
 8001734:	4413      	add	r3, r2
 8001736:	687a      	ldr	r2, [r7, #4]
 8001738:	6892      	ldr	r2, [r2, #8]
 800173a:	b2d2      	uxtb	r2, r2
 800173c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	3301      	adds	r3, #1
 8001742:	683a      	ldr	r2, [r7, #0]
 8001744:	4413      	add	r3, r2
 8001746:	687a      	ldr	r2, [r7, #4]
 8001748:	6892      	ldr	r2, [r2, #8]
 800174a:	0a12      	lsrs	r2, r2, #8
 800174c:	b2d2      	uxtb	r2, r2
 800174e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	3302      	adds	r3, #2
 8001754:	683a      	ldr	r2, [r7, #0]
 8001756:	4413      	add	r3, r2
 8001758:	687a      	ldr	r2, [r7, #4]
 800175a:	6892      	ldr	r2, [r2, #8]
 800175c:	0c12      	lsrs	r2, r2, #16
 800175e:	b2d2      	uxtb	r2, r2
 8001760:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	3303      	adds	r3, #3
 8001766:	683a      	ldr	r2, [r7, #0]
 8001768:	4413      	add	r3, r2
 800176a:	687a      	ldr	r2, [r7, #4]
 800176c:	6892      	ldr	r2, [r2, #8]
 800176e:	0e12      	lsrs	r2, r2, #24
 8001770:	b2d2      	uxtb	r2, r2
 8001772:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	3304      	adds	r3, #4
 8001778:	60fb      	str	r3, [r7, #12]
      return offset;
 800177a:	68fb      	ldr	r3, [r7, #12]
    }
 800177c:	4618      	mov	r0, r3
 800177e:	3714      	adds	r7, #20
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr

08001788 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001788:	b480      	push	{r7}
 800178a:	b085      	sub	sp, #20
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
 8001790:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001792:	2300      	movs	r3, #0
 8001794:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	683a      	ldr	r2, [r7, #0]
 800179a:	4413      	add	r3, r2
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	461a      	mov	r2, r3
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	685a      	ldr	r2, [r3, #4]
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	3301      	adds	r3, #1
 80017ac:	6839      	ldr	r1, [r7, #0]
 80017ae:	440b      	add	r3, r1
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	021b      	lsls	r3, r3, #8
 80017b4:	431a      	orrs	r2, r3
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	685a      	ldr	r2, [r3, #4]
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	3302      	adds	r3, #2
 80017c2:	6839      	ldr	r1, [r7, #0]
 80017c4:	440b      	add	r3, r1
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	041b      	lsls	r3, r3, #16
 80017ca:	431a      	orrs	r2, r3
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	685a      	ldr	r2, [r3, #4]
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	3303      	adds	r3, #3
 80017d8:	6839      	ldr	r1, [r7, #0]
 80017da:	440b      	add	r3, r1
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	061b      	lsls	r3, r3, #24
 80017e0:	431a      	orrs	r2, r3
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	3304      	adds	r3, #4
 80017ea:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	683a      	ldr	r2, [r7, #0]
 80017f0:	4413      	add	r3, r2
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	461a      	mov	r2, r3
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	689a      	ldr	r2, [r3, #8]
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	3301      	adds	r3, #1
 8001802:	6839      	ldr	r1, [r7, #0]
 8001804:	440b      	add	r3, r1
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	021b      	lsls	r3, r3, #8
 800180a:	431a      	orrs	r2, r3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	689a      	ldr	r2, [r3, #8]
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	3302      	adds	r3, #2
 8001818:	6839      	ldr	r1, [r7, #0]
 800181a:	440b      	add	r3, r1
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	041b      	lsls	r3, r3, #16
 8001820:	431a      	orrs	r2, r3
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	689a      	ldr	r2, [r3, #8]
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	3303      	adds	r3, #3
 800182e:	6839      	ldr	r1, [r7, #0]
 8001830:	440b      	add	r3, r1
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	061b      	lsls	r3, r3, #24
 8001836:	431a      	orrs	r2, r3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	3304      	adds	r3, #4
 8001840:	60fb      	str	r3, [r7, #12]
     return offset;
 8001842:	68fb      	ldr	r3, [r7, #12]
    }
 8001844:	4618      	mov	r0, r3
 8001846:	3714      	adds	r7, #20
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr

08001850 <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	4b03      	ldr	r3, [pc, #12]	; (8001868 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 800185a:	4618      	mov	r0, r3
 800185c:	370c      	adds	r7, #12
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr
 8001866:	bf00      	nop
 8001868:	0800c3d0 	.word	0x0800c3d0

0800186c <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
 8001874:	4b03      	ldr	r3, [pc, #12]	; (8001884 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 8001876:	4618      	mov	r0, r3
 8001878:	370c      	adds	r7, #12
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop
 8001884:	0800c3e0 	.word	0x0800c3e0

08001888 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	4618      	mov	r0, r3
 8001894:	f7ff fef8 	bl	8001688 <_ZN3ros3MsgC1Ev>
 8001898:	4a0b      	ldr	r2, [pc, #44]	; (80018c8 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	601a      	str	r2, [r3, #0]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2200      	movs	r2, #0
 80018a2:	809a      	strh	r2, [r3, #4]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	4a09      	ldr	r2, [pc, #36]	; (80018cc <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80018a8:	609a      	str	r2, [r3, #8]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	4a07      	ldr	r2, [pc, #28]	; (80018cc <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80018ae:	60da      	str	r2, [r3, #12]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	4a06      	ldr	r2, [pc, #24]	; (80018cc <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80018b4:	611a      	str	r2, [r3, #16]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2200      	movs	r2, #0
 80018ba:	615a      	str	r2, [r3, #20]
    {
    }
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	4618      	mov	r0, r3
 80018c0:	3708      	adds	r7, #8
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	0800c79c 	.word	0x0800c79c
 80018cc:	0800c404 	.word	0x0800c404

080018d0 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b088      	sub	sp, #32
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
 80018d8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80018da:	2300      	movs	r3, #0
 80018dc:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	683a      	ldr	r2, [r7, #0]
 80018e2:	4413      	add	r3, r2
 80018e4:	687a      	ldr	r2, [r7, #4]
 80018e6:	8892      	ldrh	r2, [r2, #4]
 80018e8:	b2d2      	uxtb	r2, r2
 80018ea:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 80018ec:	69fb      	ldr	r3, [r7, #28]
 80018ee:	3301      	adds	r3, #1
 80018f0:	683a      	ldr	r2, [r7, #0]
 80018f2:	4413      	add	r3, r2
 80018f4:	687a      	ldr	r2, [r7, #4]
 80018f6:	8892      	ldrh	r2, [r2, #4]
 80018f8:	0a12      	lsrs	r2, r2, #8
 80018fa:	b292      	uxth	r2, r2
 80018fc:	b2d2      	uxtb	r2, r2
 80018fe:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8001900:	69fb      	ldr	r3, [r7, #28]
 8001902:	3302      	adds	r3, #2
 8001904:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	4618      	mov	r0, r3
 800190c:	f7fe fc86 	bl	800021c <strlen>
 8001910:	4603      	mov	r3, r0
 8001912:	61bb      	str	r3, [r7, #24]
      memcpy(outbuffer + offset, &length_topic_name, sizeof(uint32_t));
 8001914:	69fb      	ldr	r3, [r7, #28]
 8001916:	683a      	ldr	r2, [r7, #0]
 8001918:	4413      	add	r3, r2
 800191a:	69ba      	ldr	r2, [r7, #24]
 800191c:	601a      	str	r2, [r3, #0]
      offset += 4;
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	3304      	adds	r3, #4
 8001922:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8001924:	69fb      	ldr	r3, [r7, #28]
 8001926:	683a      	ldr	r2, [r7, #0]
 8001928:	18d0      	adds	r0, r2, r3
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	69ba      	ldr	r2, [r7, #24]
 8001930:	4619      	mov	r1, r3
 8001932:	f00a f987 	bl	800bc44 <memcpy>
      offset += length_topic_name;
 8001936:	69fa      	ldr	r2, [r7, #28]
 8001938:	69bb      	ldr	r3, [r7, #24]
 800193a:	4413      	add	r3, r2
 800193c:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	68db      	ldr	r3, [r3, #12]
 8001942:	4618      	mov	r0, r3
 8001944:	f7fe fc6a 	bl	800021c <strlen>
 8001948:	4603      	mov	r3, r0
 800194a:	617b      	str	r3, [r7, #20]
      memcpy(outbuffer + offset, &length_message_type, sizeof(uint32_t));
 800194c:	69fb      	ldr	r3, [r7, #28]
 800194e:	683a      	ldr	r2, [r7, #0]
 8001950:	4413      	add	r3, r2
 8001952:	697a      	ldr	r2, [r7, #20]
 8001954:	601a      	str	r2, [r3, #0]
      offset += 4;
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	3304      	adds	r3, #4
 800195a:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 800195c:	69fb      	ldr	r3, [r7, #28]
 800195e:	683a      	ldr	r2, [r7, #0]
 8001960:	18d0      	adds	r0, r2, r3
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	68db      	ldr	r3, [r3, #12]
 8001966:	697a      	ldr	r2, [r7, #20]
 8001968:	4619      	mov	r1, r3
 800196a:	f00a f96b 	bl	800bc44 <memcpy>
      offset += length_message_type;
 800196e:	69fa      	ldr	r2, [r7, #28]
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	4413      	add	r3, r2
 8001974:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	691b      	ldr	r3, [r3, #16]
 800197a:	4618      	mov	r0, r3
 800197c:	f7fe fc4e 	bl	800021c <strlen>
 8001980:	4603      	mov	r3, r0
 8001982:	613b      	str	r3, [r7, #16]
      memcpy(outbuffer + offset, &length_md5sum, sizeof(uint32_t));
 8001984:	69fb      	ldr	r3, [r7, #28]
 8001986:	683a      	ldr	r2, [r7, #0]
 8001988:	4413      	add	r3, r2
 800198a:	693a      	ldr	r2, [r7, #16]
 800198c:	601a      	str	r2, [r3, #0]
      offset += 4;
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	3304      	adds	r3, #4
 8001992:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8001994:	69fb      	ldr	r3, [r7, #28]
 8001996:	683a      	ldr	r2, [r7, #0]
 8001998:	18d0      	adds	r0, r2, r3
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	691b      	ldr	r3, [r3, #16]
 800199e:	693a      	ldr	r2, [r7, #16]
 80019a0:	4619      	mov	r1, r3
 80019a2:	f00a f94f 	bl	800bc44 <memcpy>
      offset += length_md5sum;
 80019a6:	69fa      	ldr	r2, [r7, #28]
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	4413      	add	r3, r2
 80019ac:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	695b      	ldr	r3, [r3, #20]
 80019b2:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 80019b4:	69fb      	ldr	r3, [r7, #28]
 80019b6:	683a      	ldr	r2, [r7, #0]
 80019b8:	4413      	add	r3, r2
 80019ba:	68fa      	ldr	r2, [r7, #12]
 80019bc:	b2d2      	uxtb	r2, r2
 80019be:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 80019c0:	69fb      	ldr	r3, [r7, #28]
 80019c2:	3301      	adds	r3, #1
 80019c4:	683a      	ldr	r2, [r7, #0]
 80019c6:	4413      	add	r3, r2
 80019c8:	68fa      	ldr	r2, [r7, #12]
 80019ca:	0a12      	lsrs	r2, r2, #8
 80019cc:	b2d2      	uxtb	r2, r2
 80019ce:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 80019d0:	69fb      	ldr	r3, [r7, #28]
 80019d2:	3302      	adds	r3, #2
 80019d4:	683a      	ldr	r2, [r7, #0]
 80019d6:	4413      	add	r3, r2
 80019d8:	68fa      	ldr	r2, [r7, #12]
 80019da:	0c12      	lsrs	r2, r2, #16
 80019dc:	b2d2      	uxtb	r2, r2
 80019de:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 80019e0:	69fb      	ldr	r3, [r7, #28]
 80019e2:	3303      	adds	r3, #3
 80019e4:	683a      	ldr	r2, [r7, #0]
 80019e6:	4413      	add	r3, r2
 80019e8:	68fa      	ldr	r2, [r7, #12]
 80019ea:	0e12      	lsrs	r2, r2, #24
 80019ec:	b2d2      	uxtb	r2, r2
 80019ee:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 80019f0:	69fb      	ldr	r3, [r7, #28]
 80019f2:	3304      	adds	r3, #4
 80019f4:	61fb      	str	r3, [r7, #28]
      return offset;
 80019f6:	69fb      	ldr	r3, [r7, #28]
    }
 80019f8:	4618      	mov	r0, r3
 80019fa:	3720      	adds	r7, #32
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}

08001a00 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001a00:	b480      	push	{r7}
 8001a02:	b08b      	sub	sp, #44	; 0x2c
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
 8001a08:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8001a0e:	69bb      	ldr	r3, [r7, #24]
 8001a10:	683a      	ldr	r2, [r7, #0]
 8001a12:	4413      	add	r3, r2
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	b29a      	uxth	r2, r3
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	889b      	ldrh	r3, [r3, #4]
 8001a20:	b21a      	sxth	r2, r3
 8001a22:	69bb      	ldr	r3, [r7, #24]
 8001a24:	3301      	adds	r3, #1
 8001a26:	6839      	ldr	r1, [r7, #0]
 8001a28:	440b      	add	r3, r1
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	021b      	lsls	r3, r3, #8
 8001a2e:	b21b      	sxth	r3, r3
 8001a30:	4313      	orrs	r3, r2
 8001a32:	b21b      	sxth	r3, r3
 8001a34:	b29a      	uxth	r2, r3
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8001a3a:	69bb      	ldr	r3, [r7, #24]
 8001a3c:	3302      	adds	r3, #2
 8001a3e:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      memcpy(&length_topic_name, (inbuffer + offset), sizeof(uint32_t));
 8001a40:	69bb      	ldr	r3, [r7, #24]
 8001a42:	683a      	ldr	r2, [r7, #0]
 8001a44:	4413      	add	r3, r2
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	617b      	str	r3, [r7, #20]
      offset += 4;
 8001a4a:	69bb      	ldr	r3, [r7, #24]
 8001a4c:	3304      	adds	r3, #4
 8001a4e:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001a50:	69bb      	ldr	r3, [r7, #24]
 8001a52:	627b      	str	r3, [r7, #36]	; 0x24
 8001a54:	69ba      	ldr	r2, [r7, #24]
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	441a      	add	r2, r3
 8001a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d90c      	bls.n	8001a7a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x7a>
          inbuffer[k-1]=inbuffer[k];
 8001a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a62:	3b01      	subs	r3, #1
 8001a64:	683a      	ldr	r2, [r7, #0]
 8001a66:	4413      	add	r3, r2
 8001a68:	6839      	ldr	r1, [r7, #0]
 8001a6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a6c:	440a      	add	r2, r1
 8001a6e:	7812      	ldrb	r2, [r2, #0]
 8001a70:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a74:	3301      	adds	r3, #1
 8001a76:	627b      	str	r3, [r7, #36]	; 0x24
 8001a78:	e7ec      	b.n	8001a54 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x54>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8001a7a:	69ba      	ldr	r2, [r7, #24]
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	4413      	add	r3, r2
 8001a80:	3b01      	subs	r3, #1
 8001a82:	683a      	ldr	r2, [r7, #0]
 8001a84:	4413      	add	r3, r2
 8001a86:	2200      	movs	r2, #0
 8001a88:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8001a8a:	69bb      	ldr	r3, [r7, #24]
 8001a8c:	3b01      	subs	r3, #1
 8001a8e:	683a      	ldr	r2, [r7, #0]
 8001a90:	441a      	add	r2, r3
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8001a96:	69ba      	ldr	r2, [r7, #24]
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	4413      	add	r3, r2
 8001a9c:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      memcpy(&length_message_type, (inbuffer + offset), sizeof(uint32_t));
 8001a9e:	69bb      	ldr	r3, [r7, #24]
 8001aa0:	683a      	ldr	r2, [r7, #0]
 8001aa2:	4413      	add	r3, r2
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	613b      	str	r3, [r7, #16]
      offset += 4;
 8001aa8:	69bb      	ldr	r3, [r7, #24]
 8001aaa:	3304      	adds	r3, #4
 8001aac:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001aae:	69bb      	ldr	r3, [r7, #24]
 8001ab0:	623b      	str	r3, [r7, #32]
 8001ab2:	69ba      	ldr	r2, [r7, #24]
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	441a      	add	r2, r3
 8001ab8:	6a3b      	ldr	r3, [r7, #32]
 8001aba:	429a      	cmp	r2, r3
 8001abc:	d90c      	bls.n	8001ad8 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xd8>
          inbuffer[k-1]=inbuffer[k];
 8001abe:	6a3b      	ldr	r3, [r7, #32]
 8001ac0:	3b01      	subs	r3, #1
 8001ac2:	683a      	ldr	r2, [r7, #0]
 8001ac4:	4413      	add	r3, r2
 8001ac6:	6839      	ldr	r1, [r7, #0]
 8001ac8:	6a3a      	ldr	r2, [r7, #32]
 8001aca:	440a      	add	r2, r1
 8001acc:	7812      	ldrb	r2, [r2, #0]
 8001ace:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001ad0:	6a3b      	ldr	r3, [r7, #32]
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	623b      	str	r3, [r7, #32]
 8001ad6:	e7ec      	b.n	8001ab2 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xb2>
      }
      inbuffer[offset+length_message_type-1]=0;
 8001ad8:	69ba      	ldr	r2, [r7, #24]
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	4413      	add	r3, r2
 8001ade:	3b01      	subs	r3, #1
 8001ae0:	683a      	ldr	r2, [r7, #0]
 8001ae2:	4413      	add	r3, r2
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8001ae8:	69bb      	ldr	r3, [r7, #24]
 8001aea:	3b01      	subs	r3, #1
 8001aec:	683a      	ldr	r2, [r7, #0]
 8001aee:	441a      	add	r2, r3
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8001af4:	69ba      	ldr	r2, [r7, #24]
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	4413      	add	r3, r2
 8001afa:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      memcpy(&length_md5sum, (inbuffer + offset), sizeof(uint32_t));
 8001afc:	69bb      	ldr	r3, [r7, #24]
 8001afe:	683a      	ldr	r2, [r7, #0]
 8001b00:	4413      	add	r3, r2
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	60fb      	str	r3, [r7, #12]
      offset += 4;
 8001b06:	69bb      	ldr	r3, [r7, #24]
 8001b08:	3304      	adds	r3, #4
 8001b0a:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8001b0c:	69bb      	ldr	r3, [r7, #24]
 8001b0e:	61fb      	str	r3, [r7, #28]
 8001b10:	69ba      	ldr	r2, [r7, #24]
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	441a      	add	r2, r3
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d90c      	bls.n	8001b36 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x136>
          inbuffer[k-1]=inbuffer[k];
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	3b01      	subs	r3, #1
 8001b20:	683a      	ldr	r2, [r7, #0]
 8001b22:	4413      	add	r3, r2
 8001b24:	6839      	ldr	r1, [r7, #0]
 8001b26:	69fa      	ldr	r2, [r7, #28]
 8001b28:	440a      	add	r2, r1
 8001b2a:	7812      	ldrb	r2, [r2, #0]
 8001b2c:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	3301      	adds	r3, #1
 8001b32:	61fb      	str	r3, [r7, #28]
 8001b34:	e7ec      	b.n	8001b10 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x110>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8001b36:	69ba      	ldr	r2, [r7, #24]
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	4413      	add	r3, r2
 8001b3c:	3b01      	subs	r3, #1
 8001b3e:	683a      	ldr	r2, [r7, #0]
 8001b40:	4413      	add	r3, r2
 8001b42:	2200      	movs	r2, #0
 8001b44:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8001b46:	69bb      	ldr	r3, [r7, #24]
 8001b48:	3b01      	subs	r3, #1
 8001b4a:	683a      	ldr	r2, [r7, #0]
 8001b4c:	441a      	add	r2, r3
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8001b52:	69ba      	ldr	r2, [r7, #24]
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	4413      	add	r3, r2
 8001b58:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001b5e:	68bb      	ldr	r3, [r7, #8]
 8001b60:	69ba      	ldr	r2, [r7, #24]
 8001b62:	6839      	ldr	r1, [r7, #0]
 8001b64:	440a      	add	r2, r1
 8001b66:	7812      	ldrb	r2, [r2, #0]
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001b6c:	68ba      	ldr	r2, [r7, #8]
 8001b6e:	69bb      	ldr	r3, [r7, #24]
 8001b70:	3301      	adds	r3, #1
 8001b72:	6839      	ldr	r1, [r7, #0]
 8001b74:	440b      	add	r3, r1
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	021b      	lsls	r3, r3, #8
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001b7e:	68ba      	ldr	r2, [r7, #8]
 8001b80:	69bb      	ldr	r3, [r7, #24]
 8001b82:	3302      	adds	r3, #2
 8001b84:	6839      	ldr	r1, [r7, #0]
 8001b86:	440b      	add	r3, r1
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	041b      	lsls	r3, r3, #16
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001b90:	68ba      	ldr	r2, [r7, #8]
 8001b92:	69bb      	ldr	r3, [r7, #24]
 8001b94:	3303      	adds	r3, #3
 8001b96:	6839      	ldr	r1, [r7, #0]
 8001b98:	440b      	add	r3, r1
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	061b      	lsls	r3, r3, #24
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8001ba2:	68ba      	ldr	r2, [r7, #8]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8001ba8:	69bb      	ldr	r3, [r7, #24]
 8001baa:	3304      	adds	r3, #4
 8001bac:	61bb      	str	r3, [r7, #24]
     return offset;
 8001bae:	69bb      	ldr	r3, [r7, #24]
    }
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	372c      	adds	r7, #44	; 0x2c
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr

08001bbc <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 8001bbc:	b480      	push	{r7}
 8001bbe:	b083      	sub	sp, #12
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
 8001bc4:	4b03      	ldr	r3, [pc, #12]	; (8001bd4 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	370c      	adds	r7, #12
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	0800c408 	.word	0x0800c408

08001bd8 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	4b03      	ldr	r3, [pc, #12]	; (8001bf0 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 8001be2:	4618      	mov	r0, r3
 8001be4:	370c      	adds	r7, #12
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop
 8001bf0:	0800c424 	.word	0x0800c424

08001bf4 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f7ff fd42 	bl	8001688 <_ZN3ros3MsgC1Ev>
 8001c04:	4a06      	ldr	r2, [pc, #24]	; (8001c20 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	601a      	str	r2, [r3, #0]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	711a      	strb	r2, [r3, #4]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	4a04      	ldr	r2, [pc, #16]	; (8001c24 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8001c14:	609a      	str	r2, [r3, #8]
    {
    }
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4618      	mov	r0, r3
 8001c1a:	3708      	adds	r7, #8
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	0800c784 	.word	0x0800c784
 8001c24:	0800c404 	.word	0x0800c404

08001c28 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b084      	sub	sp, #16
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001c32:	2300      	movs	r3, #0
 8001c34:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	683a      	ldr	r2, [r7, #0]
 8001c3a:	4413      	add	r3, r2
 8001c3c:	687a      	ldr	r2, [r7, #4]
 8001c3e:	7912      	ldrb	r2, [r2, #4]
 8001c40:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	3301      	adds	r3, #1
 8001c46:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f7fe fae5 	bl	800021c <strlen>
 8001c52:	4603      	mov	r3, r0
 8001c54:	60bb      	str	r3, [r7, #8]
      memcpy(outbuffer + offset, &length_msg, sizeof(uint32_t));
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	683a      	ldr	r2, [r7, #0]
 8001c5a:	4413      	add	r3, r2
 8001c5c:	68ba      	ldr	r2, [r7, #8]
 8001c5e:	601a      	str	r2, [r3, #0]
      offset += 4;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	3304      	adds	r3, #4
 8001c64:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	683a      	ldr	r2, [r7, #0]
 8001c6a:	18d0      	adds	r0, r2, r3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	68ba      	ldr	r2, [r7, #8]
 8001c72:	4619      	mov	r1, r3
 8001c74:	f009 ffe6 	bl	800bc44 <memcpy>
      offset += length_msg;
 8001c78:	68fa      	ldr	r2, [r7, #12]
 8001c7a:	68bb      	ldr	r3, [r7, #8]
 8001c7c:	4413      	add	r3, r2
 8001c7e:	60fb      	str	r3, [r7, #12]
      return offset;
 8001c80:	68fb      	ldr	r3, [r7, #12]
    }
 8001c82:	4618      	mov	r0, r3
 8001c84:	3710      	adds	r7, #16
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}

08001c8a <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001c8a:	b480      	push	{r7}
 8001c8c:	b087      	sub	sp, #28
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	6078      	str	r0, [r7, #4]
 8001c92:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001c94:	2300      	movs	r3, #0
 8001c96:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	683a      	ldr	r2, [r7, #0]
 8001c9c:	4413      	add	r3, r2
 8001c9e:	781a      	ldrb	r2, [r3, #0]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	3301      	adds	r3, #1
 8001ca8:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      memcpy(&length_msg, (inbuffer + offset), sizeof(uint32_t));
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	683a      	ldr	r2, [r7, #0]
 8001cae:	4413      	add	r3, r2
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	60fb      	str	r3, [r7, #12]
      offset += 4;
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	3304      	adds	r3, #4
 8001cb8:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	617b      	str	r3, [r7, #20]
 8001cbe:	693a      	ldr	r2, [r7, #16]
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	441a      	add	r2, r3
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	429a      	cmp	r2, r3
 8001cc8:	d90c      	bls.n	8001ce4 <_ZN14rosserial_msgs3Log11deserializeEPh+0x5a>
          inbuffer[k-1]=inbuffer[k];
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	3b01      	subs	r3, #1
 8001cce:	683a      	ldr	r2, [r7, #0]
 8001cd0:	4413      	add	r3, r2
 8001cd2:	6839      	ldr	r1, [r7, #0]
 8001cd4:	697a      	ldr	r2, [r7, #20]
 8001cd6:	440a      	add	r2, r1
 8001cd8:	7812      	ldrb	r2, [r2, #0]
 8001cda:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	3301      	adds	r3, #1
 8001ce0:	617b      	str	r3, [r7, #20]
 8001ce2:	e7ec      	b.n	8001cbe <_ZN14rosserial_msgs3Log11deserializeEPh+0x34>
      }
      inbuffer[offset+length_msg-1]=0;
 8001ce4:	693a      	ldr	r2, [r7, #16]
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	4413      	add	r3, r2
 8001cea:	3b01      	subs	r3, #1
 8001cec:	683a      	ldr	r2, [r7, #0]
 8001cee:	4413      	add	r3, r2
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	3b01      	subs	r3, #1
 8001cf8:	683a      	ldr	r2, [r7, #0]
 8001cfa:	441a      	add	r2, r3
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8001d00:	693a      	ldr	r2, [r7, #16]
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	4413      	add	r3, r2
 8001d06:	613b      	str	r3, [r7, #16]
     return offset;
 8001d08:	693b      	ldr	r3, [r7, #16]
    }
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	371c      	adds	r7, #28
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr
	...

08001d18 <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 8001d18:	b480      	push	{r7}
 8001d1a:	b083      	sub	sp, #12
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	4b03      	ldr	r3, [pc, #12]	; (8001d30 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8001d22:	4618      	mov	r0, r3
 8001d24:	370c      	adds	r7, #12
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	0800c448 	.word	0x0800c448

08001d34 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
 8001d3c:	4b03      	ldr	r3, [pc, #12]	; (8001d4c <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8001d3e:	4618      	mov	r0, r3
 8001d40:	370c      	adds	r7, #12
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr
 8001d4a:	bf00      	nop
 8001d4c:	0800c45c 	.word	0x0800c45c

08001d50 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      float * floats;
      uint8_t strings_length;
      char* st_strings;
      char* * strings;

    RequestParamResponse():
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f7ff fc94 	bl	8001688 <_ZN3ros3MsgC1Ev>
 8001d60:	4a0c      	ldr	r2, [pc, #48]	; (8001d94 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	601a      	str	r2, [r3, #0]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	711a      	strb	r2, [r3, #4]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	60da      	str	r2, [r3, #12]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2200      	movs	r2, #0
 8001d76:	741a      	strb	r2, [r3, #16]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	619a      	str	r2, [r3, #24]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2200      	movs	r2, #0
 8001d82:	771a      	strb	r2, [r3, #28]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2200      	movs	r2, #0
 8001d88:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3708      	adds	r7, #8
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	0800c76c 	.word	0x0800c76c

08001d98 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b088      	sub	sp, #32
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
 8001da0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001da2:	2300      	movs	r3, #0
 8001da4:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset++) = ints_length;
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	1c5a      	adds	r2, r3, #1
 8001daa:	61fa      	str	r2, [r7, #28]
 8001dac:	461a      	mov	r2, r3
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	4413      	add	r3, r2
 8001db2:	687a      	ldr	r2, [r7, #4]
 8001db4:	7912      	ldrb	r2, [r2, #4]
 8001db6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset++) = 0;
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	1c5a      	adds	r2, r3, #1
 8001dbc:	61fa      	str	r2, [r7, #28]
 8001dbe:	461a      	mov	r2, r3
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	4413      	add	r3, r2
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset++) = 0;
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	1c5a      	adds	r2, r3, #1
 8001dcc:	61fa      	str	r2, [r7, #28]
 8001dce:	461a      	mov	r2, r3
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	4413      	add	r3, r2
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset++) = 0;
 8001dd8:	69fb      	ldr	r3, [r7, #28]
 8001dda:	1c5a      	adds	r2, r3, #1
 8001ddc:	61fa      	str	r2, [r7, #28]
 8001dde:	461a      	mov	r2, r3
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	4413      	add	r3, r2
 8001de4:	2200      	movs	r2, #0
 8001de6:	701a      	strb	r2, [r3, #0]
      for( uint8_t i = 0; i < ints_length; i++){
 8001de8:	2300      	movs	r3, #0
 8001dea:	76fb      	strb	r3, [r7, #27]
 8001dec:	7efb      	ldrb	r3, [r7, #27]
 8001dee:	687a      	ldr	r2, [r7, #4]
 8001df0:	7912      	ldrb	r2, [r2, #4]
 8001df2:	4293      	cmp	r3, r2
 8001df4:	da2b      	bge.n	8001e4e <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xb6>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	68da      	ldr	r2, [r3, #12]
 8001dfa:	7efb      	ldrb	r3, [r7, #27]
 8001dfc:	009b      	lsls	r3, r3, #2
 8001dfe:	4413      	add	r3, r2
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	617b      	str	r3, [r7, #20]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8001e04:	69fb      	ldr	r3, [r7, #28]
 8001e06:	683a      	ldr	r2, [r7, #0]
 8001e08:	4413      	add	r3, r2
 8001e0a:	697a      	ldr	r2, [r7, #20]
 8001e0c:	b2d2      	uxtb	r2, r2
 8001e0e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8001e10:	69fb      	ldr	r3, [r7, #28]
 8001e12:	3301      	adds	r3, #1
 8001e14:	683a      	ldr	r2, [r7, #0]
 8001e16:	4413      	add	r3, r2
 8001e18:	697a      	ldr	r2, [r7, #20]
 8001e1a:	0a12      	lsrs	r2, r2, #8
 8001e1c:	b2d2      	uxtb	r2, r2
 8001e1e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8001e20:	69fb      	ldr	r3, [r7, #28]
 8001e22:	3302      	adds	r3, #2
 8001e24:	683a      	ldr	r2, [r7, #0]
 8001e26:	4413      	add	r3, r2
 8001e28:	697a      	ldr	r2, [r7, #20]
 8001e2a:	0c12      	lsrs	r2, r2, #16
 8001e2c:	b2d2      	uxtb	r2, r2
 8001e2e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8001e30:	69fb      	ldr	r3, [r7, #28]
 8001e32:	3303      	adds	r3, #3
 8001e34:	683a      	ldr	r2, [r7, #0]
 8001e36:	4413      	add	r3, r2
 8001e38:	697a      	ldr	r2, [r7, #20]
 8001e3a:	0e12      	lsrs	r2, r2, #24
 8001e3c:	b2d2      	uxtb	r2, r2
 8001e3e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8001e40:	69fb      	ldr	r3, [r7, #28]
 8001e42:	3304      	adds	r3, #4
 8001e44:	61fb      	str	r3, [r7, #28]
      for( uint8_t i = 0; i < ints_length; i++){
 8001e46:	7efb      	ldrb	r3, [r7, #27]
 8001e48:	3301      	adds	r3, #1
 8001e4a:	76fb      	strb	r3, [r7, #27]
 8001e4c:	e7ce      	b.n	8001dec <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x54>
      }
      *(outbuffer + offset++) = floats_length;
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	1c5a      	adds	r2, r3, #1
 8001e52:	61fa      	str	r2, [r7, #28]
 8001e54:	461a      	mov	r2, r3
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	4413      	add	r3, r2
 8001e5a:	687a      	ldr	r2, [r7, #4]
 8001e5c:	7c12      	ldrb	r2, [r2, #16]
 8001e5e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset++) = 0;
 8001e60:	69fb      	ldr	r3, [r7, #28]
 8001e62:	1c5a      	adds	r2, r3, #1
 8001e64:	61fa      	str	r2, [r7, #28]
 8001e66:	461a      	mov	r2, r3
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	4413      	add	r3, r2
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset++) = 0;
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	1c5a      	adds	r2, r3, #1
 8001e74:	61fa      	str	r2, [r7, #28]
 8001e76:	461a      	mov	r2, r3
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	4413      	add	r3, r2
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset++) = 0;
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	1c5a      	adds	r2, r3, #1
 8001e84:	61fa      	str	r2, [r7, #28]
 8001e86:	461a      	mov	r2, r3
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	4413      	add	r3, r2
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	701a      	strb	r2, [r3, #0]
      for( uint8_t i = 0; i < floats_length; i++){
 8001e90:	2300      	movs	r3, #0
 8001e92:	76bb      	strb	r3, [r7, #26]
 8001e94:	7ebb      	ldrb	r3, [r7, #26]
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	7c12      	ldrb	r2, [r2, #16]
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	da2b      	bge.n	8001ef6 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x15e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	699a      	ldr	r2, [r3, #24]
 8001ea2:	7ebb      	ldrb	r3, [r7, #26]
 8001ea4:	009b      	lsls	r3, r3, #2
 8001ea6:	4413      	add	r3, r2
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8001eac:	69fb      	ldr	r3, [r7, #28]
 8001eae:	683a      	ldr	r2, [r7, #0]
 8001eb0:	4413      	add	r3, r2
 8001eb2:	693a      	ldr	r2, [r7, #16]
 8001eb4:	b2d2      	uxtb	r2, r2
 8001eb6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8001eb8:	69fb      	ldr	r3, [r7, #28]
 8001eba:	3301      	adds	r3, #1
 8001ebc:	683a      	ldr	r2, [r7, #0]
 8001ebe:	4413      	add	r3, r2
 8001ec0:	693a      	ldr	r2, [r7, #16]
 8001ec2:	0a12      	lsrs	r2, r2, #8
 8001ec4:	b2d2      	uxtb	r2, r2
 8001ec6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8001ec8:	69fb      	ldr	r3, [r7, #28]
 8001eca:	3302      	adds	r3, #2
 8001ecc:	683a      	ldr	r2, [r7, #0]
 8001ece:	4413      	add	r3, r2
 8001ed0:	693a      	ldr	r2, [r7, #16]
 8001ed2:	0c12      	lsrs	r2, r2, #16
 8001ed4:	b2d2      	uxtb	r2, r2
 8001ed6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8001ed8:	69fb      	ldr	r3, [r7, #28]
 8001eda:	3303      	adds	r3, #3
 8001edc:	683a      	ldr	r2, [r7, #0]
 8001ede:	4413      	add	r3, r2
 8001ee0:	693a      	ldr	r2, [r7, #16]
 8001ee2:	0e12      	lsrs	r2, r2, #24
 8001ee4:	b2d2      	uxtb	r2, r2
 8001ee6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8001ee8:	69fb      	ldr	r3, [r7, #28]
 8001eea:	3304      	adds	r3, #4
 8001eec:	61fb      	str	r3, [r7, #28]
      for( uint8_t i = 0; i < floats_length; i++){
 8001eee:	7ebb      	ldrb	r3, [r7, #26]
 8001ef0:	3301      	adds	r3, #1
 8001ef2:	76bb      	strb	r3, [r7, #26]
 8001ef4:	e7ce      	b.n	8001e94 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xfc>
      }
      *(outbuffer + offset++) = strings_length;
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	1c5a      	adds	r2, r3, #1
 8001efa:	61fa      	str	r2, [r7, #28]
 8001efc:	461a      	mov	r2, r3
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	4413      	add	r3, r2
 8001f02:	687a      	ldr	r2, [r7, #4]
 8001f04:	7f12      	ldrb	r2, [r2, #28]
 8001f06:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset++) = 0;
 8001f08:	69fb      	ldr	r3, [r7, #28]
 8001f0a:	1c5a      	adds	r2, r3, #1
 8001f0c:	61fa      	str	r2, [r7, #28]
 8001f0e:	461a      	mov	r2, r3
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	4413      	add	r3, r2
 8001f14:	2200      	movs	r2, #0
 8001f16:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset++) = 0;
 8001f18:	69fb      	ldr	r3, [r7, #28]
 8001f1a:	1c5a      	adds	r2, r3, #1
 8001f1c:	61fa      	str	r2, [r7, #28]
 8001f1e:	461a      	mov	r2, r3
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	4413      	add	r3, r2
 8001f24:	2200      	movs	r2, #0
 8001f26:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset++) = 0;
 8001f28:	69fb      	ldr	r3, [r7, #28]
 8001f2a:	1c5a      	adds	r2, r3, #1
 8001f2c:	61fa      	str	r2, [r7, #28]
 8001f2e:	461a      	mov	r2, r3
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	4413      	add	r3, r2
 8001f34:	2200      	movs	r2, #0
 8001f36:	701a      	strb	r2, [r3, #0]
      for( uint8_t i = 0; i < strings_length; i++){
 8001f38:	2300      	movs	r3, #0
 8001f3a:	767b      	strb	r3, [r7, #25]
 8001f3c:	7e7b      	ldrb	r3, [r7, #25]
 8001f3e:	687a      	ldr	r2, [r7, #4]
 8001f40:	7f12      	ldrb	r2, [r2, #28]
 8001f42:	4293      	cmp	r3, r2
 8001f44:	da27      	bge.n	8001f96 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1fe>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f4a:	7e7b      	ldrb	r3, [r7, #25]
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	4413      	add	r3, r2
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4618      	mov	r0, r3
 8001f54:	f7fe f962 	bl	800021c <strlen>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, &length_stringsi, sizeof(uint32_t));
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	683a      	ldr	r2, [r7, #0]
 8001f60:	4413      	add	r3, r2
 8001f62:	68fa      	ldr	r2, [r7, #12]
 8001f64:	601a      	str	r2, [r3, #0]
      offset += 4;
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	3304      	adds	r3, #4
 8001f6a:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8001f6c:	69fb      	ldr	r3, [r7, #28]
 8001f6e:	683a      	ldr	r2, [r7, #0]
 8001f70:	18d0      	adds	r0, r2, r3
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f76:	7e7b      	ldrb	r3, [r7, #25]
 8001f78:	009b      	lsls	r3, r3, #2
 8001f7a:	4413      	add	r3, r2
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	68fa      	ldr	r2, [r7, #12]
 8001f80:	4619      	mov	r1, r3
 8001f82:	f009 fe5f 	bl	800bc44 <memcpy>
      offset += length_stringsi;
 8001f86:	69fa      	ldr	r2, [r7, #28]
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	4413      	add	r3, r2
 8001f8c:	61fb      	str	r3, [r7, #28]
      for( uint8_t i = 0; i < strings_length; i++){
 8001f8e:	7e7b      	ldrb	r3, [r7, #25]
 8001f90:	3301      	adds	r3, #1
 8001f92:	767b      	strb	r3, [r7, #25]
 8001f94:	e7d2      	b.n	8001f3c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1a4>
      }
      return offset;
 8001f96:	69fb      	ldr	r3, [r7, #28]
    }
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3720      	adds	r7, #32
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}

08001fa0 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b08a      	sub	sp, #40	; 0x28
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001faa:	2300      	movs	r3, #0
 8001fac:	627b      	str	r3, [r7, #36]	; 0x24
      uint8_t ints_lengthT = *(inbuffer + offset++);
 8001fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb0:	1c5a      	adds	r2, r3, #1
 8001fb2:	627a      	str	r2, [r7, #36]	; 0x24
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	4413      	add	r3, r2
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	76fb      	strb	r3, [r7, #27]
      if(ints_lengthT > ints_length)
 8001fbe:	7efb      	ldrb	r3, [r7, #27]
 8001fc0:	687a      	ldr	r2, [r7, #4]
 8001fc2:	7912      	ldrb	r2, [r2, #4]
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	dd0a      	ble.n	8001fde <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x3e>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	68da      	ldr	r2, [r3, #12]
 8001fcc:	7efb      	ldrb	r3, [r7, #27]
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	4610      	mov	r0, r2
 8001fd4:	f009 fe4e 	bl	800bc74 <realloc>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	60da      	str	r2, [r3, #12]
      offset += 3;
 8001fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe0:	3303      	adds	r3, #3
 8001fe2:	627b      	str	r3, [r7, #36]	; 0x24
      ints_length = ints_lengthT;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	7efa      	ldrb	r2, [r7, #27]
 8001fe8:	711a      	strb	r2, [r3, #4]
      for( uint8_t i = 0; i < ints_length; i++){
 8001fea:	2300      	movs	r3, #0
 8001fec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001ff0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001ff4:	687a      	ldr	r2, [r7, #4]
 8001ff6:	7912      	ldrb	r2, [r2, #4]
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	da39      	bge.n	8002070 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xd0>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002004:	6839      	ldr	r1, [r7, #0]
 8002006:	440a      	add	r2, r1
 8002008:	7812      	ldrb	r2, [r2, #0]
 800200a:	4313      	orrs	r3, r2
 800200c:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800200e:	697a      	ldr	r2, [r7, #20]
 8002010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002012:	3301      	adds	r3, #1
 8002014:	6839      	ldr	r1, [r7, #0]
 8002016:	440b      	add	r3, r1
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	021b      	lsls	r3, r3, #8
 800201c:	4313      	orrs	r3, r2
 800201e:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002020:	697a      	ldr	r2, [r7, #20]
 8002022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002024:	3302      	adds	r3, #2
 8002026:	6839      	ldr	r1, [r7, #0]
 8002028:	440b      	add	r3, r1
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	041b      	lsls	r3, r3, #16
 800202e:	4313      	orrs	r3, r2
 8002030:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002032:	697a      	ldr	r2, [r7, #20]
 8002034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002036:	3303      	adds	r3, #3
 8002038:	6839      	ldr	r1, [r7, #0]
 800203a:	440b      	add	r3, r1
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	061b      	lsls	r3, r3, #24
 8002040:	4313      	orrs	r3, r2
 8002042:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8002044:	697a      	ldr	r2, [r7, #20]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 800204a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800204c:	3304      	adds	r3, #4
 800204e:	627b      	str	r3, [r7, #36]	; 0x24
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	68da      	ldr	r2, [r3, #12]
 8002054:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	4413      	add	r3, r2
 800205c:	687a      	ldr	r2, [r7, #4]
 800205e:	3208      	adds	r2, #8
 8002060:	6812      	ldr	r2, [r2, #0]
 8002062:	601a      	str	r2, [r3, #0]
      for( uint8_t i = 0; i < ints_length; i++){
 8002064:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002068:	3301      	adds	r3, #1
 800206a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800206e:	e7bf      	b.n	8001ff0 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x50>
      }
      uint8_t floats_lengthT = *(inbuffer + offset++);
 8002070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002072:	1c5a      	adds	r2, r3, #1
 8002074:	627a      	str	r2, [r7, #36]	; 0x24
 8002076:	461a      	mov	r2, r3
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	4413      	add	r3, r2
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	76bb      	strb	r3, [r7, #26]
      if(floats_lengthT > floats_length)
 8002080:	7ebb      	ldrb	r3, [r7, #26]
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	7c12      	ldrb	r2, [r2, #16]
 8002086:	4293      	cmp	r3, r2
 8002088:	dd0a      	ble.n	80020a0 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x100>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	699a      	ldr	r2, [r3, #24]
 800208e:	7ebb      	ldrb	r3, [r7, #26]
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	4619      	mov	r1, r3
 8002094:	4610      	mov	r0, r2
 8002096:	f009 fded 	bl	800bc74 <realloc>
 800209a:	4602      	mov	r2, r0
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	619a      	str	r2, [r3, #24]
      offset += 3;
 80020a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a2:	3303      	adds	r3, #3
 80020a4:	627b      	str	r3, [r7, #36]	; 0x24
      floats_length = floats_lengthT;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	7eba      	ldrb	r2, [r7, #26]
 80020aa:	741a      	strb	r2, [r3, #16]
      for( uint8_t i = 0; i < floats_length; i++){
 80020ac:	2300      	movs	r3, #0
 80020ae:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80020b2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80020b6:	687a      	ldr	r2, [r7, #4]
 80020b8:	7c12      	ldrb	r2, [r2, #16]
 80020ba:	4293      	cmp	r3, r2
 80020bc:	da39      	bge.n	8002132 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x192>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 80020be:	2300      	movs	r3, #0
 80020c0:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020c6:	6839      	ldr	r1, [r7, #0]
 80020c8:	440a      	add	r2, r1
 80020ca:	7812      	ldrb	r2, [r2, #0]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80020d0:	693a      	ldr	r2, [r7, #16]
 80020d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d4:	3301      	adds	r3, #1
 80020d6:	6839      	ldr	r1, [r7, #0]
 80020d8:	440b      	add	r3, r1
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	021b      	lsls	r3, r3, #8
 80020de:	4313      	orrs	r3, r2
 80020e0:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80020e2:	693a      	ldr	r2, [r7, #16]
 80020e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e6:	3302      	adds	r3, #2
 80020e8:	6839      	ldr	r1, [r7, #0]
 80020ea:	440b      	add	r3, r1
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	041b      	lsls	r3, r3, #16
 80020f0:	4313      	orrs	r3, r2
 80020f2:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80020f4:	693a      	ldr	r2, [r7, #16]
 80020f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f8:	3303      	adds	r3, #3
 80020fa:	6839      	ldr	r1, [r7, #0]
 80020fc:	440b      	add	r3, r1
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	061b      	lsls	r3, r3, #24
 8002102:	4313      	orrs	r3, r2
 8002104:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8002106:	693a      	ldr	r2, [r7, #16]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 800210c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210e:	3304      	adds	r3, #4
 8002110:	627b      	str	r3, [r7, #36]	; 0x24
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	699a      	ldr	r2, [r3, #24]
 8002116:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	4413      	add	r3, r2
 800211e:	687a      	ldr	r2, [r7, #4]
 8002120:	3214      	adds	r2, #20
 8002122:	6812      	ldr	r2, [r2, #0]
 8002124:	601a      	str	r2, [r3, #0]
      for( uint8_t i = 0; i < floats_length; i++){
 8002126:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800212a:	3301      	adds	r3, #1
 800212c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002130:	e7bf      	b.n	80020b2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x112>
      }
      uint8_t strings_lengthT = *(inbuffer + offset++);
 8002132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002134:	1c5a      	adds	r2, r3, #1
 8002136:	627a      	str	r2, [r7, #36]	; 0x24
 8002138:	461a      	mov	r2, r3
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	4413      	add	r3, r2
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	767b      	strb	r3, [r7, #25]
      if(strings_lengthT > strings_length)
 8002142:	7e7b      	ldrb	r3, [r7, #25]
 8002144:	687a      	ldr	r2, [r7, #4]
 8002146:	7f12      	ldrb	r2, [r2, #28]
 8002148:	4293      	cmp	r3, r2
 800214a:	dd0a      	ble.n	8002162 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1c2>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002150:	7e7b      	ldrb	r3, [r7, #25]
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	4619      	mov	r1, r3
 8002156:	4610      	mov	r0, r2
 8002158:	f009 fd8c 	bl	800bc74 <realloc>
 800215c:	4602      	mov	r2, r0
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	625a      	str	r2, [r3, #36]	; 0x24
      offset += 3;
 8002162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002164:	3303      	adds	r3, #3
 8002166:	627b      	str	r3, [r7, #36]	; 0x24
      strings_length = strings_lengthT;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	7e7a      	ldrb	r2, [r7, #25]
 800216c:	771a      	strb	r2, [r3, #28]
      for( uint8_t i = 0; i < strings_length; i++){
 800216e:	2300      	movs	r3, #0
 8002170:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8002174:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8002178:	687a      	ldr	r2, [r7, #4]
 800217a:	7f12      	ldrb	r2, [r2, #28]
 800217c:	4293      	cmp	r3, r2
 800217e:	da3e      	bge.n	80021fe <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x25e>
      uint32_t length_st_strings;
      memcpy(&length_st_strings, (inbuffer + offset), sizeof(uint32_t));
 8002180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002182:	683a      	ldr	r2, [r7, #0]
 8002184:	4413      	add	r3, r2
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	60fb      	str	r3, [r7, #12]
      offset += 4;
 800218a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218c:	3304      	adds	r3, #4
 800218e:	627b      	str	r3, [r7, #36]	; 0x24
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002192:	61fb      	str	r3, [r7, #28]
 8002194:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	441a      	add	r2, r3
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	429a      	cmp	r2, r3
 800219e:	d90c      	bls.n	80021ba <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x21a>
          inbuffer[k-1]=inbuffer[k];
 80021a0:	69fb      	ldr	r3, [r7, #28]
 80021a2:	3b01      	subs	r3, #1
 80021a4:	683a      	ldr	r2, [r7, #0]
 80021a6:	4413      	add	r3, r2
 80021a8:	6839      	ldr	r1, [r7, #0]
 80021aa:	69fa      	ldr	r2, [r7, #28]
 80021ac:	440a      	add	r2, r1
 80021ae:	7812      	ldrb	r2, [r2, #0]
 80021b0:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	3301      	adds	r3, #1
 80021b6:	61fb      	str	r3, [r7, #28]
 80021b8:	e7ec      	b.n	8002194 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1f4>
      }
      inbuffer[offset+length_st_strings-1]=0;
 80021ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	4413      	add	r3, r2
 80021c0:	3b01      	subs	r3, #1
 80021c2:	683a      	ldr	r2, [r7, #0]
 80021c4:	4413      	add	r3, r2
 80021c6:	2200      	movs	r2, #0
 80021c8:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 80021ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021cc:	3b01      	subs	r3, #1
 80021ce:	683a      	ldr	r2, [r7, #0]
 80021d0:	441a      	add	r2, r3
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 80021d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	4413      	add	r3, r2
 80021dc:	627b      	str	r3, [r7, #36]	; 0x24
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021e2:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	4413      	add	r3, r2
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	3220      	adds	r2, #32
 80021ee:	6812      	ldr	r2, [r2, #0]
 80021f0:	601a      	str	r2, [r3, #0]
      for( uint8_t i = 0; i < strings_length; i++){
 80021f2:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80021f6:	3301      	adds	r3, #1
 80021f8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 80021fc:	e7ba      	b.n	8002174 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1d4>
      }
     return offset;
 80021fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8002200:	4618      	mov	r0, r3
 8002202:	3728      	adds	r7, #40	; 0x28
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}

08002208 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 8002208:	b480      	push	{r7}
 800220a:	b083      	sub	sp, #12
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	4b03      	ldr	r3, [pc, #12]	; (8002220 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 8002212:	4618      	mov	r0, r3
 8002214:	370c      	adds	r7, #12
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr
 800221e:	bf00      	nop
 8002220:	0800c480 	.word	0x0800c480

08002224 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
 800222c:	4b03      	ldr	r3, [pc, #12]	; (800223c <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 800222e:	4618      	mov	r0, r3
 8002230:	370c      	adds	r7, #12
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop
 800223c:	0800c49c 	.word	0x0800c49c

08002240 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

  /* Generic Publisher */
  class Publisher
  {
    public:
      Publisher( const char * topic_name, Msg * msg, int endpoint=rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8002240:	b480      	push	{r7}
 8002242:	b085      	sub	sp, #20
 8002244:	af00      	add	r7, sp, #0
 8002246:	60f8      	str	r0, [r7, #12]
 8002248:	60b9      	str	r1, [r7, #8]
 800224a:	607a      	str	r2, [r7, #4]
 800224c:	603b      	str	r3, [r7, #0]
        topic_(topic_name), 
        msg_(msg),
        endpoint_(endpoint) {};
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	68ba      	ldr	r2, [r7, #8]
 8002252:	601a      	str	r2, [r3, #0]
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	687a      	ldr	r2, [r7, #4]
 8002258:	605a      	str	r2, [r3, #4]
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	683a      	ldr	r2, [r7, #0]
 800225e:	611a      	str	r2, [r3, #16]
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	4618      	mov	r0, r3
 8002264:	3714      	adds	r7, #20
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr

0800226e <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

      int publish( const Msg * msg ) { return nh_->publish(id_, msg); };
 800226e:	b580      	push	{r7, lr}
 8002270:	b082      	sub	sp, #8
 8002272:	af00      	add	r7, sp, #0
 8002274:	6078      	str	r0, [r7, #4]
 8002276:	6039      	str	r1, [r7, #0]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	687a      	ldr	r2, [r7, #4]
 8002282:	68d0      	ldr	r0, [r2, #12]
 8002284:	687a      	ldr	r2, [r7, #4]
 8002286:	6891      	ldr	r1, [r2, #8]
 8002288:	683a      	ldr	r2, [r7, #0]
 800228a:	4798      	blx	r3
 800228c:	4603      	mov	r3, r0
 800228e:	4618      	mov	r0, r3
 8002290:	3708      	adds	r7, #8
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}

08002296 <_ZN3ros9Publisher15getEndpointTypeEv>:
      int getEndpointType(){ return endpoint_; }
 8002296:	b480      	push	{r7}
 8002298:	b083      	sub	sp, #12
 800229a:	af00      	add	r7, sp, #0
 800229c:	6078      	str	r0, [r7, #4]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	691b      	ldr	r3, [r3, #16]
 80022a2:	4618      	mov	r0, r3
 80022a4:	370c      	adds	r7, #12
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr
	...

080022b0 <_ZN13STMF4HardwareC1Ev>:
class STMF4Hardware {
public:
  typedef UART_HandleTypeDef serial_class;


  STMF4Hardware(){ // hard coding
 80022b0:	b480      	push	{r7}
 80022b2:	b083      	sub	sp, #12
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
    baud_ = 961200;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	4a04      	ldr	r2, [pc, #16]	; (80022cc <_ZN13STMF4HardwareC1Ev+0x1c>)
 80022bc:	609a      	str	r2, [r3, #8]
  }
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4618      	mov	r0, r3
 80022c2:	370c      	adds	r7, #12
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr
 80022cc:	000eaab0 	.word	0x000eaab0

080022d0 <_ZN13STMF4Hardware4initEP18UART_HandleTypeDef>:
    this->baud_= baud;
  }

  int getBaud(){return baud_;}

  void init(serial_class* huart){
 80022d0:	b590      	push	{r4, r7, lr}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
 80022d8:	6039      	str	r1, [r7, #0]
    iostream_ = new UartDriver<serial_class>(huart);
 80022da:	200c      	movs	r0, #12
 80022dc:	f007 fefb 	bl	800a0d6 <_Znwj>
 80022e0:	4603      	mov	r3, r0
 80022e2:	461c      	mov	r4, r3
 80022e4:	6839      	ldr	r1, [r7, #0]
 80022e6:	4620      	mov	r0, r4
 80022e8:	f002 fc50 	bl	8004b8c <_ZN10UartDriverI18UART_HandleTypeDefLi50ELi250ELi400ELi8EEC1EPS0_>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	605c      	str	r4, [r3, #4]
    iostream_->begin(baud_);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	685a      	ldr	r2, [r3, #4]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	4619      	mov	r1, r3
 80022fa:	4610      	mov	r0, r2
 80022fc:	f002 fc78 	bl	8004bf0 <_ZN10UartDriverI18UART_HandleTypeDefLi50ELi250ELi400ELi8EE5beginEm>
  }
 8002300:	e004      	b.n	800230c <_ZN13STMF4Hardware4initEP18UART_HandleTypeDef+0x3c>
    iostream_ = new UartDriver<serial_class>(huart);
 8002302:	4620      	mov	r0, r4
 8002304:	f007 feb9 	bl	800a07a <_ZdlPv>
 8002308:	f007 fef6 	bl	800a0f8 <__cxa_end_cleanup>
  }
 800230c:	370c      	adds	r7, #12
 800230e:	46bd      	mov	sp, r7
 8002310:	bd90      	pop	{r4, r7, pc}

08002312 <_ZN13STMF4Hardware4readEv>:

  void init(){
    iostream_ = NULL;
  }

  int read()
 8002312:	b580      	push	{r7, lr}
 8002314:	b082      	sub	sp, #8
 8002316:	af00      	add	r7, sp, #0
 8002318:	6078      	str	r0, [r7, #4]
  {
    return iostream_->read();
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	4618      	mov	r0, r3
 8002320:	f002 fc78 	bl	8004c14 <_ZN10UartDriverI18UART_HandleTypeDefLi50ELi250ELi400ELi8EE4readEv>
 8002324:	4603      	mov	r3, r0
  };
 8002326:	4618      	mov	r0, r3
 8002328:	3708      	adds	r7, #8
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}

0800232e <_ZN13STMF4Hardware5writeEPhi>:

  void write(uint8_t* data, int length){
 800232e:	b580      	push	{r7, lr}
 8002330:	b084      	sub	sp, #16
 8002332:	af00      	add	r7, sp, #0
 8002334:	60f8      	str	r0, [r7, #12]
 8002336:	60b9      	str	r1, [r7, #8]
 8002338:	607a      	str	r2, [r7, #4]
    iostream_->write(data, length);
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	687a      	ldr	r2, [r7, #4]
 8002340:	b2d2      	uxtb	r2, r2
 8002342:	68b9      	ldr	r1, [r7, #8]
 8002344:	4618      	mov	r0, r3
 8002346:	f002 fc73 	bl	8004c30 <_ZN10UartDriverI18UART_HandleTypeDefLi50ELi250ELi400ELi8EE5writeEPhh>
  }
 800234a:	bf00      	nop
 800234c:	3710      	adds	r7, #16
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}

08002352 <_ZN13STMF4Hardware4timeEv>:

  uint32_t time(){return HAL_GetTick();}
 8002352:	b580      	push	{r7, lr}
 8002354:	b082      	sub	sp, #8
 8002356:	af00      	add	r7, sp, #0
 8002358:	6078      	str	r0, [r7, #4]
 800235a:	f005 fad9 	bl	8007910 <HAL_GetTick>
 800235e:	4603      	mov	r3, r0
 8002360:	4618      	mov	r0, r3
 8002362:	3708      	adds	r7, #8
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}

08002368 <_ZN6kduino8PotentioC1Ev>:
      ros::Time stamp;
      uint8_t potentio_length;
      uint16_t st_potentio;
      uint16_t * potentio;

    Potentio():
 8002368:	b580      	push	{r7, lr}
 800236a:	b082      	sub	sp, #8
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
      stamp(),
      potentio_length(0), potentio(NULL)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	4618      	mov	r0, r3
 8002374:	f7ff f988 	bl	8001688 <_ZN3ros3MsgC1Ev>
 8002378:	4a09      	ldr	r2, [pc, #36]	; (80023a0 <_ZN6kduino8PotentioC1Ev+0x38>)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	601a      	str	r2, [r3, #0]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	3304      	adds	r3, #4
 8002382:	4618      	mov	r0, r3
 8002384:	f7ff f96e 	bl	8001664 <_ZN3ros4TimeC1Ev>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2200      	movs	r2, #0
 800238c:	731a      	strb	r2, [r3, #12]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2200      	movs	r2, #0
 8002392:	611a      	str	r2, [r3, #16]
    {
    }
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	4618      	mov	r0, r3
 8002398:	3708      	adds	r7, #8
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	0800c728 	.word	0x0800c728

080023a4 <_ZNK6kduino8Potentio9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80023a4:	b480      	push	{r7}
 80023a6:	b085      	sub	sp, #20
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
 80023ac:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80023ae:	2300      	movs	r3, #0
 80023b0:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->stamp.sec >> (8 * 0)) & 0xFF;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	683a      	ldr	r2, [r7, #0]
 80023b6:	4413      	add	r3, r2
 80023b8:	687a      	ldr	r2, [r7, #4]
 80023ba:	6852      	ldr	r2, [r2, #4]
 80023bc:	b2d2      	uxtb	r2, r2
 80023be:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->stamp.sec >> (8 * 1)) & 0xFF;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	3301      	adds	r3, #1
 80023c4:	683a      	ldr	r2, [r7, #0]
 80023c6:	4413      	add	r3, r2
 80023c8:	687a      	ldr	r2, [r7, #4]
 80023ca:	6852      	ldr	r2, [r2, #4]
 80023cc:	0a12      	lsrs	r2, r2, #8
 80023ce:	b2d2      	uxtb	r2, r2
 80023d0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->stamp.sec >> (8 * 2)) & 0xFF;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	3302      	adds	r3, #2
 80023d6:	683a      	ldr	r2, [r7, #0]
 80023d8:	4413      	add	r3, r2
 80023da:	687a      	ldr	r2, [r7, #4]
 80023dc:	6852      	ldr	r2, [r2, #4]
 80023de:	0c12      	lsrs	r2, r2, #16
 80023e0:	b2d2      	uxtb	r2, r2
 80023e2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->stamp.sec >> (8 * 3)) & 0xFF;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	3303      	adds	r3, #3
 80023e8:	683a      	ldr	r2, [r7, #0]
 80023ea:	4413      	add	r3, r2
 80023ec:	687a      	ldr	r2, [r7, #4]
 80023ee:	6852      	ldr	r2, [r2, #4]
 80023f0:	0e12      	lsrs	r2, r2, #24
 80023f2:	b2d2      	uxtb	r2, r2
 80023f4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->stamp.sec);
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	3304      	adds	r3, #4
 80023fa:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->stamp.nsec >> (8 * 0)) & 0xFF;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	683a      	ldr	r2, [r7, #0]
 8002400:	4413      	add	r3, r2
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	6892      	ldr	r2, [r2, #8]
 8002406:	b2d2      	uxtb	r2, r2
 8002408:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->stamp.nsec >> (8 * 1)) & 0xFF;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	3301      	adds	r3, #1
 800240e:	683a      	ldr	r2, [r7, #0]
 8002410:	4413      	add	r3, r2
 8002412:	687a      	ldr	r2, [r7, #4]
 8002414:	6892      	ldr	r2, [r2, #8]
 8002416:	0a12      	lsrs	r2, r2, #8
 8002418:	b2d2      	uxtb	r2, r2
 800241a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->stamp.nsec >> (8 * 2)) & 0xFF;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	3302      	adds	r3, #2
 8002420:	683a      	ldr	r2, [r7, #0]
 8002422:	4413      	add	r3, r2
 8002424:	687a      	ldr	r2, [r7, #4]
 8002426:	6892      	ldr	r2, [r2, #8]
 8002428:	0c12      	lsrs	r2, r2, #16
 800242a:	b2d2      	uxtb	r2, r2
 800242c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->stamp.nsec >> (8 * 3)) & 0xFF;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	3303      	adds	r3, #3
 8002432:	683a      	ldr	r2, [r7, #0]
 8002434:	4413      	add	r3, r2
 8002436:	687a      	ldr	r2, [r7, #4]
 8002438:	6892      	ldr	r2, [r2, #8]
 800243a:	0e12      	lsrs	r2, r2, #24
 800243c:	b2d2      	uxtb	r2, r2
 800243e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->stamp.nsec);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	3304      	adds	r3, #4
 8002444:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset++) = potentio_length;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	1c5a      	adds	r2, r3, #1
 800244a:	60fa      	str	r2, [r7, #12]
 800244c:	461a      	mov	r2, r3
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	4413      	add	r3, r2
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	7b12      	ldrb	r2, [r2, #12]
 8002456:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset++) = 0;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	1c5a      	adds	r2, r3, #1
 800245c:	60fa      	str	r2, [r7, #12]
 800245e:	461a      	mov	r2, r3
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	4413      	add	r3, r2
 8002464:	2200      	movs	r2, #0
 8002466:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset++) = 0;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	1c5a      	adds	r2, r3, #1
 800246c:	60fa      	str	r2, [r7, #12]
 800246e:	461a      	mov	r2, r3
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	4413      	add	r3, r2
 8002474:	2200      	movs	r2, #0
 8002476:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset++) = 0;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	1c5a      	adds	r2, r3, #1
 800247c:	60fa      	str	r2, [r7, #12]
 800247e:	461a      	mov	r2, r3
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	4413      	add	r3, r2
 8002484:	2200      	movs	r2, #0
 8002486:	701a      	strb	r2, [r3, #0]
      for( uint8_t i = 0; i < potentio_length; i++){
 8002488:	2300      	movs	r3, #0
 800248a:	72fb      	strb	r3, [r7, #11]
 800248c:	7afb      	ldrb	r3, [r7, #11]
 800248e:	687a      	ldr	r2, [r7, #4]
 8002490:	7b12      	ldrb	r2, [r2, #12]
 8002492:	4293      	cmp	r3, r2
 8002494:	da1f      	bge.n	80024d6 <_ZNK6kduino8Potentio9serializeEPh+0x132>
      *(outbuffer + offset + 0) = (this->potentio[i] >> (8 * 0)) & 0xFF;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	683a      	ldr	r2, [r7, #0]
 800249a:	4413      	add	r3, r2
 800249c:	687a      	ldr	r2, [r7, #4]
 800249e:	6911      	ldr	r1, [r2, #16]
 80024a0:	7afa      	ldrb	r2, [r7, #11]
 80024a2:	0052      	lsls	r2, r2, #1
 80024a4:	440a      	add	r2, r1
 80024a6:	8812      	ldrh	r2, [r2, #0]
 80024a8:	b2d2      	uxtb	r2, r2
 80024aa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->potentio[i] >> (8 * 1)) & 0xFF;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	3301      	adds	r3, #1
 80024b0:	683a      	ldr	r2, [r7, #0]
 80024b2:	4413      	add	r3, r2
 80024b4:	687a      	ldr	r2, [r7, #4]
 80024b6:	6911      	ldr	r1, [r2, #16]
 80024b8:	7afa      	ldrb	r2, [r7, #11]
 80024ba:	0052      	lsls	r2, r2, #1
 80024bc:	440a      	add	r2, r1
 80024be:	8812      	ldrh	r2, [r2, #0]
 80024c0:	0a12      	lsrs	r2, r2, #8
 80024c2:	b292      	uxth	r2, r2
 80024c4:	b2d2      	uxtb	r2, r2
 80024c6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->potentio[i]);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	3302      	adds	r3, #2
 80024cc:	60fb      	str	r3, [r7, #12]
      for( uint8_t i = 0; i < potentio_length; i++){
 80024ce:	7afb      	ldrb	r3, [r7, #11]
 80024d0:	3301      	adds	r3, #1
 80024d2:	72fb      	strb	r3, [r7, #11]
 80024d4:	e7da      	b.n	800248c <_ZNK6kduino8Potentio9serializeEPh+0xe8>
      }
      return offset;
 80024d6:	68fb      	ldr	r3, [r7, #12]
    }
 80024d8:	4618      	mov	r0, r3
 80024da:	3714      	adds	r7, #20
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr

080024e4 <_ZN6kduino8Potentio11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
 80024ec:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80024ee:	2300      	movs	r3, #0
 80024f0:	60fb      	str	r3, [r7, #12]
      this->stamp.sec =  ((uint32_t) (*(inbuffer + offset)));
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	683a      	ldr	r2, [r7, #0]
 80024f6:	4413      	add	r3, r2
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	461a      	mov	r2, r3
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	605a      	str	r2, [r3, #4]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	685a      	ldr	r2, [r3, #4]
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	3301      	adds	r3, #1
 8002508:	6839      	ldr	r1, [r7, #0]
 800250a:	440b      	add	r3, r1
 800250c:	781b      	ldrb	r3, [r3, #0]
 800250e:	021b      	lsls	r3, r3, #8
 8002510:	431a      	orrs	r2, r3
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	605a      	str	r2, [r3, #4]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	685a      	ldr	r2, [r3, #4]
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	3302      	adds	r3, #2
 800251e:	6839      	ldr	r1, [r7, #0]
 8002520:	440b      	add	r3, r1
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	041b      	lsls	r3, r3, #16
 8002526:	431a      	orrs	r2, r3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	605a      	str	r2, [r3, #4]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	685a      	ldr	r2, [r3, #4]
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	3303      	adds	r3, #3
 8002534:	6839      	ldr	r1, [r7, #0]
 8002536:	440b      	add	r3, r1
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	061b      	lsls	r3, r3, #24
 800253c:	431a      	orrs	r2, r3
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->stamp.sec);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	3304      	adds	r3, #4
 8002546:	60fb      	str	r3, [r7, #12]
      this->stamp.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	683a      	ldr	r2, [r7, #0]
 800254c:	4413      	add	r3, r2
 800254e:	781b      	ldrb	r3, [r3, #0]
 8002550:	461a      	mov	r2, r3
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	609a      	str	r2, [r3, #8]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	689a      	ldr	r2, [r3, #8]
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	3301      	adds	r3, #1
 800255e:	6839      	ldr	r1, [r7, #0]
 8002560:	440b      	add	r3, r1
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	021b      	lsls	r3, r3, #8
 8002566:	431a      	orrs	r2, r3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	609a      	str	r2, [r3, #8]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	689a      	ldr	r2, [r3, #8]
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	3302      	adds	r3, #2
 8002574:	6839      	ldr	r1, [r7, #0]
 8002576:	440b      	add	r3, r1
 8002578:	781b      	ldrb	r3, [r3, #0]
 800257a:	041b      	lsls	r3, r3, #16
 800257c:	431a      	orrs	r2, r3
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	609a      	str	r2, [r3, #8]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	689a      	ldr	r2, [r3, #8]
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	3303      	adds	r3, #3
 800258a:	6839      	ldr	r1, [r7, #0]
 800258c:	440b      	add	r3, r1
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	061b      	lsls	r3, r3, #24
 8002592:	431a      	orrs	r2, r3
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->stamp.nsec);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	3304      	adds	r3, #4
 800259c:	60fb      	str	r3, [r7, #12]
      uint8_t potentio_lengthT = *(inbuffer + offset++);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	1c5a      	adds	r2, r3, #1
 80025a2:	60fa      	str	r2, [r7, #12]
 80025a4:	461a      	mov	r2, r3
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	4413      	add	r3, r2
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	72bb      	strb	r3, [r7, #10]
      if(potentio_lengthT > potentio_length)
 80025ae:	7abb      	ldrb	r3, [r7, #10]
 80025b0:	687a      	ldr	r2, [r7, #4]
 80025b2:	7b12      	ldrb	r2, [r2, #12]
 80025b4:	4293      	cmp	r3, r2
 80025b6:	dd0a      	ble.n	80025ce <_ZN6kduino8Potentio11deserializeEPh+0xea>
        this->potentio = (uint16_t*)realloc(this->potentio, potentio_lengthT * sizeof(uint16_t));
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	691a      	ldr	r2, [r3, #16]
 80025bc:	7abb      	ldrb	r3, [r7, #10]
 80025be:	005b      	lsls	r3, r3, #1
 80025c0:	4619      	mov	r1, r3
 80025c2:	4610      	mov	r0, r2
 80025c4:	f009 fb56 	bl	800bc74 <realloc>
 80025c8:	4602      	mov	r2, r0
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	611a      	str	r2, [r3, #16]
      offset += 3;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	3303      	adds	r3, #3
 80025d2:	60fb      	str	r3, [r7, #12]
      potentio_length = potentio_lengthT;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	7aba      	ldrb	r2, [r7, #10]
 80025d8:	731a      	strb	r2, [r3, #12]
      for( uint8_t i = 0; i < potentio_length; i++){
 80025da:	2300      	movs	r3, #0
 80025dc:	72fb      	strb	r3, [r7, #11]
 80025de:	7afb      	ldrb	r3, [r7, #11]
 80025e0:	687a      	ldr	r2, [r7, #4]
 80025e2:	7b12      	ldrb	r2, [r2, #12]
 80025e4:	4293      	cmp	r3, r2
 80025e6:	da26      	bge.n	8002636 <_ZN6kduino8Potentio11deserializeEPh+0x152>
      this->st_potentio =  ((uint16_t) (*(inbuffer + offset)));
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	683a      	ldr	r2, [r7, #0]
 80025ec:	4413      	add	r3, r2
 80025ee:	781b      	ldrb	r3, [r3, #0]
 80025f0:	b29a      	uxth	r2, r3
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	81da      	strh	r2, [r3, #14]
      this->st_potentio |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	89db      	ldrh	r3, [r3, #14]
 80025fa:	b21a      	sxth	r2, r3
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	3301      	adds	r3, #1
 8002600:	6839      	ldr	r1, [r7, #0]
 8002602:	440b      	add	r3, r1
 8002604:	781b      	ldrb	r3, [r3, #0]
 8002606:	021b      	lsls	r3, r3, #8
 8002608:	b21b      	sxth	r3, r3
 800260a:	4313      	orrs	r3, r2
 800260c:	b21b      	sxth	r3, r3
 800260e:	b29a      	uxth	r2, r3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	81da      	strh	r2, [r3, #14]
      offset += sizeof(this->st_potentio);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	3302      	adds	r3, #2
 8002618:	60fb      	str	r3, [r7, #12]
        memcpy( &(this->potentio[i]), &(this->st_potentio), sizeof(uint16_t));
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	691a      	ldr	r2, [r3, #16]
 800261e:	7afb      	ldrb	r3, [r7, #11]
 8002620:	005b      	lsls	r3, r3, #1
 8002622:	4413      	add	r3, r2
 8002624:	687a      	ldr	r2, [r7, #4]
 8002626:	320e      	adds	r2, #14
 8002628:	8812      	ldrh	r2, [r2, #0]
 800262a:	b292      	uxth	r2, r2
 800262c:	801a      	strh	r2, [r3, #0]
      for( uint8_t i = 0; i < potentio_length; i++){
 800262e:	7afb      	ldrb	r3, [r7, #11]
 8002630:	3301      	adds	r3, #1
 8002632:	72fb      	strb	r3, [r7, #11]
 8002634:	e7d3      	b.n	80025de <_ZN6kduino8Potentio11deserializeEPh+0xfa>
      }
     return offset;
 8002636:	68fb      	ldr	r3, [r7, #12]
    }
 8002638:	4618      	mov	r0, r3
 800263a:	3710      	adds	r7, #16
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}

08002640 <_ZN6kduino8Potentio7getTypeEv>:

    const char * getType(){ return "kduino/Potentio"; };
 8002640:	b480      	push	{r7}
 8002642:	b083      	sub	sp, #12
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
 8002648:	4b03      	ldr	r3, [pc, #12]	; (8002658 <_ZN6kduino8Potentio7getTypeEv+0x18>)
 800264a:	4618      	mov	r0, r3
 800264c:	370c      	adds	r7, #12
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr
 8002656:	bf00      	nop
 8002658:	0800c4cc 	.word	0x0800c4cc

0800265c <_ZN6kduino8Potentio6getMD5Ev>:
    const char * getMD5(){ return "3c38bfc62efc8af1fef221b81830300a"; };
 800265c:	b480      	push	{r7}
 800265e:	b083      	sub	sp, #12
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
 8002664:	4b03      	ldr	r3, [pc, #12]	; (8002674 <_ZN6kduino8Potentio6getMD5Ev+0x18>)
 8002666:	4618      	mov	r0, r3
 8002668:	370c      	adds	r7, #12
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr
 8002672:	bf00      	nop
 8002674:	0800c4dc 	.word	0x0800c4dc

08002678 <_ZN10QuaternionC1Ev>:
public:
    float        q1, q2, q3, q4;

    // constructor creates a quaternion equivalent
    // to roll=0, pitch=0, yaw=0
    Quaternion() {
 8002678:	b480      	push	{r7}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
        q1 = 1; q2 = q3 = q4 = 0;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002686:	601a      	str	r2, [r3, #0]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	f04f 0200 	mov.w	r2, #0
 800268e:	60da      	str	r2, [r3, #12]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	68da      	ldr	r2, [r3, #12]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	609a      	str	r2, [r3, #8]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	689a      	ldr	r2, [r3, #8]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	605a      	str	r2, [r3, #4]
    }
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	4618      	mov	r0, r3
 80026a4:	370c      	adds	r7, #12
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr

080026ae <_ZN3IMUC1Ev>:

class IMU : public SENSOR_<Imugyro>
{
public:
	IMU(SPI_HandleTypeDef* hspi, ros::NodeHandle* nh);
	IMU(){};
 80026ae:	b580      	push	{r7, lr}
 80026b0:	b082      	sub	sp, #8
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	6078      	str	r0, [r7, #4]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	4618      	mov	r0, r3
 80026ba:	f002 facb 	bl	8004c54 <_ZN7SENSOR_I7Vector3IfEEC1Ev>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	330c      	adds	r3, #12
 80026c2:	4618      	mov	r0, r3
 80026c4:	f002 fae0 	bl	8004c88 <_ZNSt6vectorI7Vector3IfESaIS1_EEC1Ev>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	3318      	adds	r3, #24
 80026cc:	4618      	mov	r0, r3
 80026ce:	f002 fb03 	bl	8004cd8 <_ZN7Vector3IfEC1Ev>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	3324      	adds	r3, #36	; 0x24
 80026d6:	4618      	mov	r0, r3
 80026d8:	f002 fafe 	bl	8004cd8 <_ZN7Vector3IfEC1Ev>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	3340      	adds	r3, #64	; 0x40
 80026e0:	4618      	mov	r0, r3
 80026e2:	f002 faf9 	bl	8004cd8 <_ZN7Vector3IfEC1Ev>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	334c      	adds	r3, #76	; 0x4c
 80026ea:	4618      	mov	r0, r3
 80026ec:	f002 faf4 	bl	8004cd8 <_ZN7Vector3IfEC1Ev>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	3358      	adds	r3, #88	; 0x58
 80026f4:	4618      	mov	r0, r3
 80026f6:	f002 faef 	bl	8004cd8 <_ZN7Vector3IfEC1Ev>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	3364      	adds	r3, #100	; 0x64
 80026fe:	4618      	mov	r0, r3
 8002700:	f002 faea 	bl	8004cd8 <_ZN7Vector3IfEC1Ev>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	3370      	adds	r3, #112	; 0x70
 8002708:	4618      	mov	r0, r3
 800270a:	f002 fae5 	bl	8004cd8 <_ZN7Vector3IfEC1Ev>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	337c      	adds	r3, #124	; 0x7c
 8002712:	4618      	mov	r0, r3
 8002714:	f002 fae0 	bl	8004cd8 <_ZN7Vector3IfEC1Ev>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	3388      	adds	r3, #136	; 0x88
 800271c:	4618      	mov	r0, r3
 800271e:	f002 fadb 	bl	8004cd8 <_ZN7Vector3IfEC1Ev>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	3394      	adds	r3, #148	; 0x94
 8002726:	4618      	mov	r0, r3
 8002728:	f002 fad6 	bl	8004cd8 <_ZN7Vector3IfEC1Ev>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	33a0      	adds	r3, #160	; 0xa0
 8002730:	4618      	mov	r0, r3
 8002732:	f002 fad1 	bl	8004cd8 <_ZN7Vector3IfEC1Ev>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	33ac      	adds	r3, #172	; 0xac
 800273a:	4618      	mov	r0, r3
 800273c:	f002 facc 	bl	8004cd8 <_ZN7Vector3IfEC1Ev>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	33b8      	adds	r3, #184	; 0xb8
 8002744:	4618      	mov	r0, r3
 8002746:	f002 fac7 	bl	8004cd8 <_ZN7Vector3IfEC1Ev>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	33d0      	adds	r3, #208	; 0xd0
 800274e:	4618      	mov	r0, r3
 8002750:	f002 fac2 	bl	8004cd8 <_ZN7Vector3IfEC1Ev>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	33dc      	adds	r3, #220	; 0xdc
 8002758:	4618      	mov	r0, r3
 800275a:	f002 fabd 	bl	8004cd8 <_ZN7Vector3IfEC1Ev>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	33e8      	adds	r3, #232	; 0xe8
 8002762:	4618      	mov	r0, r3
 8002764:	f002 fab8 	bl	8004cd8 <_ZN7Vector3IfEC1Ev>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	33f4      	adds	r3, #244	; 0xf4
 800276c:	4618      	mov	r0, r3
 800276e:	f002 fab3 	bl	8004cd8 <_ZN7Vector3IfEC1Ev>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002778:	4618      	mov	r0, r3
 800277a:	f002 faad 	bl	8004cd8 <_ZN7Vector3IfEC1Ev>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	4618      	mov	r0, r3
 8002782:	3708      	adds	r7, #8
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}

08002788 <_ZN3IMUD1Ev>:
	~IMU(){}
 8002788:	b580      	push	{r7, lr}
 800278a:	b082      	sub	sp, #8
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	330c      	adds	r3, #12
 8002794:	4618      	mov	r0, r3
 8002796:	f002 fa84 	bl	8004ca2 <_ZNSt6vectorI7Vector3IfESaIS1_EED1Ev>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	4618      	mov	r0, r3
 800279e:	f002 fa66 	bl	8004c6e <_ZN7SENSOR_I7Vector3IfEED1Ev>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	4618      	mov	r0, r3
 80027a6:	3708      	adds	r7, #8
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}

080027ac <_ZN3IMU9getUpdateEv>:
	//chen 0526 change update function
	//void update();
	uint16_t update(uint16_t queue_size = DEFAULT_DATA_SIZE);
	void ledOutput();

	bool getUpdate() { return update_; }
 80027ac:	b480      	push	{r7}
 80027ae:	b083      	sub	sp, #12
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 80027ba:	4618      	mov	r0, r3
 80027bc:	370c      	adds	r7, #12
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr

080027c6 <_ZN3IMU9setUpdateEb>:
	void setUpdate(bool update) { update_ = update; }
 80027c6:	b480      	push	{r7}
 80027c8:	b083      	sub	sp, #12
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	6078      	str	r0, [r7, #4]
 80027ce:	460b      	mov	r3, r1
 80027d0:	70fb      	strb	r3, [r7, #3]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	78fa      	ldrb	r2, [r7, #3]
 80027d6:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
 80027da:	bf00      	nop
 80027dc:	370c      	adds	r7, #12
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr

080027e6 <_ZN3IMU6getAccEv>:
	/* calibration cmd form ROS */
	static const uint8_t RESET_CALIB_CMD = 0x00;
	static const uint8_t MPU_ACC_GYRO_CALIB_CMD = 0x01;
	static const uint8_t MPU_MAG_CALIB_CMD = 0x02;

	Vector3f  getAcc(){return acc_;}
 80027e6:	b480      	push	{r7}
 80027e8:	b08b      	sub	sp, #44	; 0x2c
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	6178      	str	r0, [r7, #20]
 80027ee:	697a      	ldr	r2, [r7, #20]
 80027f0:	f107 031c 	add.w	r3, r7, #28
 80027f4:	3288      	adds	r2, #136	; 0x88
 80027f6:	ca07      	ldmia	r2, {r0, r1, r2}
 80027f8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80027fc:	69f9      	ldr	r1, [r7, #28]
 80027fe:	6a3a      	ldr	r2, [r7, #32]
 8002800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002802:	ee06 1a90 	vmov	s13, r1
 8002806:	ee07 2a10 	vmov	s14, r2
 800280a:	ee07 3a90 	vmov	s15, r3
 800280e:	eeb0 0a66 	vmov.f32	s0, s13
 8002812:	eef0 0a47 	vmov.f32	s1, s14
 8002816:	eeb0 1a67 	vmov.f32	s2, s15
 800281a:	372c      	adds	r7, #44	; 0x2c
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr

08002824 <_ZN3IMU7getGyroEv>:
	Vector3f  getGyro(){return gyro_;}
 8002824:	b480      	push	{r7}
 8002826:	b08b      	sub	sp, #44	; 0x2c
 8002828:	af00      	add	r7, sp, #0
 800282a:	6178      	str	r0, [r7, #20]
 800282c:	697a      	ldr	r2, [r7, #20]
 800282e:	f107 031c 	add.w	r3, r7, #28
 8002832:	3294      	adds	r2, #148	; 0x94
 8002834:	ca07      	ldmia	r2, {r0, r1, r2}
 8002836:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800283a:	69f9      	ldr	r1, [r7, #28]
 800283c:	6a3a      	ldr	r2, [r7, #32]
 800283e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002840:	ee06 1a90 	vmov	s13, r1
 8002844:	ee07 2a10 	vmov	s14, r2
 8002848:	ee07 3a90 	vmov	s15, r3
 800284c:	eeb0 0a66 	vmov.f32	s0, s13
 8002850:	eef0 0a47 	vmov.f32	s1, s14
 8002854:	eeb0 1a67 	vmov.f32	s2, s15
 8002858:	372c      	adds	r7, #44	; 0x2c
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr

08002862 <_ZN3IMU6getMagEv>:
	Vector3f  getMag(){return mag_;}
 8002862:	b480      	push	{r7}
 8002864:	b08b      	sub	sp, #44	; 0x2c
 8002866:	af00      	add	r7, sp, #0
 8002868:	6178      	str	r0, [r7, #20]
 800286a:	697a      	ldr	r2, [r7, #20]
 800286c:	f107 031c 	add.w	r3, r7, #28
 8002870:	32a0      	adds	r2, #160	; 0xa0
 8002872:	ca07      	ldmia	r2, {r0, r1, r2}
 8002874:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002878:	69f9      	ldr	r1, [r7, #28]
 800287a:	6a3a      	ldr	r2, [r7, #32]
 800287c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287e:	ee06 1a90 	vmov	s13, r1
 8002882:	ee07 2a10 	vmov	s14, r2
 8002886:	ee07 3a90 	vmov	s15, r3
 800288a:	eeb0 0a66 	vmov.f32	s0, s13
 800288e:	eef0 0a47 	vmov.f32	s1, s14
 8002892:	eeb0 1a67 	vmov.f32	s2, s15
 8002896:	372c      	adds	r7, #44	; 0x2c
 8002898:	46bd      	mov	sp, r7
 800289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289e:	4770      	bx	lr

080028a0 <_ZN7RosNodeC1EPN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EEE>:
#define MIN_DUTY 27000 //backward

class RosNode
{
public:
	RosNode(ros::NodeHandle* nh)
 80028a0:	b590      	push	{r4, r7, lr}
 80028a2:	b083      	sub	sp, #12
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
 80028a8:	6039      	str	r1, [r7, #0]
	{
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	3308      	adds	r3, #8
 80028ae:	4618      	mov	r0, r3
 80028b0:	f7ff fd5a 	bl	8002368 <_ZN6kduino8PotentioC1Ev>
		/* ros node initialize */
		nh_ = nh;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	683a      	ldr	r2, [r7, #0]
 80028b8:	601a      	str	r2, [r3, #0]

		/* ros publisher initialize */
		//radioflag_pub_ = new ros::Publisher("radioflag",&radioflag_msg);
		//odom_pub_ = new ros::Publisher("odometry/raw",&odom_msg);
		potentio_pub = new ros::Publisher("potentio/raw", &potentio_msg);
 80028ba:	2014      	movs	r0, #20
 80028bc:	f007 fc0b 	bl	800a0d6 <_Znwj>
 80028c0:	4603      	mov	r3, r0
 80028c2:	461c      	mov	r4, r3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	f103 0208 	add.w	r2, r3, #8
 80028ca:	2300      	movs	r3, #0
 80028cc:	490a      	ldr	r1, [pc, #40]	; (80028f8 <_ZN7RosNodeC1EPN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EEE+0x58>)
 80028ce:	4620      	mov	r0, r4
 80028d0:	f7ff fcb6 	bl	8002240 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	605c      	str	r4, [r3, #4]
		//publish the msgs
		//nh_->advertise(*radioflag_pub_);
		//nh_->advertise(*odom_pub_);
		potentio_msg.potentio_length = 4;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2204      	movs	r2, #4
 80028dc:	751a      	strb	r2, [r3, #20]
		potentio_msg.potentio = (uint16_t*)malloc(sizeof(uint16_t)*4);
 80028de:	2008      	movs	r0, #8
 80028e0:	f008 ff92 	bl	800b808 <malloc>
 80028e4:	4603      	mov	r3, r0
 80028e6:	461a      	mov	r2, r3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	619a      	str	r2, [r3, #24]

		/* ros subscriber initialize */
	}
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	4618      	mov	r0, r3
 80028f0:	370c      	adds	r7, #12
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd90      	pop	{r4, r7, pc}
 80028f6:	bf00      	nop
 80028f8:	0800c500 	.word	0x0800c500

080028fc <_ZN7RosNode7publishEPt>:

	void publish(uint16_t arr[]){
 80028fc:	b590      	push	{r4, r7, lr}
 80028fe:	b087      	sub	sp, #28
 8002900:	af00      	add	r7, sp, #0
 8002902:	60f8      	str	r0, [r7, #12]
 8002904:	60b9      	str	r1, [r7, #8]
		potentio_msg.stamp = nh_->now();
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	68fc      	ldr	r4, [r7, #12]
 800290c:	463b      	mov	r3, r7
 800290e:	4611      	mov	r1, r2
 8002910:	4618      	mov	r0, r3
 8002912:	f002 f9f9 	bl	8004d08 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE3nowEv>
 8002916:	f104 030c 	add.w	r3, r4, #12
 800291a:	463a      	mov	r2, r7
 800291c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002920:	e883 0003 	stmia.w	r3, {r0, r1}
		for(int i=0; i<4; i++)
 8002924:	2300      	movs	r3, #0
 8002926:	617b      	str	r3, [r7, #20]
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	2b03      	cmp	r3, #3
 800292c:	dc0e      	bgt.n	800294c <_ZN7RosNode7publishEPt+0x50>
			potentio_msg.potentio[i] = arr[i];
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	699a      	ldr	r2, [r3, #24]
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	005b      	lsls	r3, r3, #1
 8002936:	4413      	add	r3, r2
 8002938:	697a      	ldr	r2, [r7, #20]
 800293a:	0052      	lsls	r2, r2, #1
 800293c:	68b9      	ldr	r1, [r7, #8]
 800293e:	440a      	add	r2, r1
 8002940:	8812      	ldrh	r2, [r2, #0]
 8002942:	801a      	strh	r2, [r3, #0]
		for(int i=0; i<4; i++)
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	3301      	adds	r3, #1
 8002948:	617b      	str	r3, [r7, #20]
 800294a:	e7ed      	b.n	8002928 <_ZN7RosNode7publishEPt+0x2c>
		nh_->advertise(*potentio_pub);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	4619      	mov	r1, r3
 8002956:	4610      	mov	r0, r2
 8002958:	f002 fa10 	bl	8004d7c <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE9advertiseERNS_9PublisherE>
	}
 800295c:	bf00      	nop
 800295e:	371c      	adds	r7, #28
 8002960:	46bd      	mov	sp, r7
 8002962:	bd90      	pop	{r4, r7, pc}

08002964 <_ZN11BaroBackend9getUpdateEv>:
  // get current climb rate in meters/s. A positive number means
  float getClimbRate(void);
  // get last time sample was taken (in ms)
  uint32_t getLastUpdate(void) const { return last_timer_; }

  bool getUpdate() { return update_; }
 8002964:	b480      	push	{r7}
 8002966:	b083      	sub	sp, #12
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002972:	4618      	mov	r0, r3
 8002974:	370c      	adds	r7, #12
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr

0800297e <_ZN11BaroBackend9setUpdateEb>:
  void setUpdate(bool update) { update_ = update; }
 800297e:	b480      	push	{r7}
 8002980:	b083      	sub	sp, #12
 8002982:	af00      	add	r7, sp, #0
 8002984:	6078      	str	r0, [r7, #4]
 8002986:	460b      	mov	r3, r1
 8002988:	70fb      	strb	r3, [r7, #3]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	78fa      	ldrb	r2, [r7, #3]
 800298e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8002992:	bf00      	nop
 8002994:	370c      	adds	r7, #12
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr

0800299e <_ZN11BaroBackend11getPressureEv>:

  inline float getPressure(){return pressure_;}
 800299e:	b480      	push	{r7}
 80029a0:	b083      	sub	sp, #12
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	6078      	str	r0, [r7, #4]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	ee07 3a90 	vmov	s15, r3
 80029ae:	eeb0 0a67 	vmov.f32	s0, s15
 80029b2:	370c      	adds	r7, #12
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr

080029bc <_ZN11BaroBackend14getTemperatureEv>:
  inline float getTemperature(){return temperature_;}
 80029bc:	b480      	push	{r7}
 80029be:	b083      	sub	sp, #12
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	ee07 3a90 	vmov	s15, r3
 80029cc:	eeb0 0a67 	vmov.f32	s0, s15
 80029d0:	370c      	adds	r7, #12
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr

080029da <_ZN11BaroBackend11getAltitudeEv>:
  inline float getAltitude(){return altitude_;}
 80029da:	b480      	push	{r7}
 80029dc:	b083      	sub	sp, #12
 80029de:	af00      	add	r7, sp, #0
 80029e0:	6078      	str	r0, [r7, #4]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	68db      	ldr	r3, [r3, #12]
 80029e6:	ee07 3a90 	vmov	s15, r3
 80029ea:	eeb0 0a67 	vmov.f32	s0, s15
 80029ee:	370c      	adds	r7, #12
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr

080029f8 <_ZN11GPS_Backend11getGosStateEv>:
  virtual void update() = 0;

  virtual bool is_configured(void) { return true; }
  virtual void inject_data(uint8_t *data, uint8_t len) { return; }

  GPS_State getGosState()
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b082      	sub	sp, #8
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	6039      	str	r1, [r7, #0]
  {
    return state;
 8002a02:	687a      	ldr	r2, [r7, #4]
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	4610      	mov	r0, r2
 8002a08:	3310      	adds	r3, #16
 8002a0a:	2248      	movs	r2, #72	; 0x48
 8002a0c:	4619      	mov	r1, r3
 8002a0e:	f009 f919 	bl	800bc44 <memcpy>
  }
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	3708      	adds	r7, #8
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}

08002a1a <_ZN11GPS_Backend9getUpdateEv>:
  uint16_t getRxSize()
  {
    return (uint16_t)GPS_RX_SIZE;
  }

  bool getUpdate() { return update_; }
 8002a1a:	b480      	push	{r7}
 8002a1c:	b083      	sub	sp, #12
 8002a1e:	af00      	add	r7, sp, #0
 8002a20:	6078      	str	r0, [r7, #4]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8002a28:	4618      	mov	r0, r3
 8002a2a:	370c      	adds	r7, #12
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr

08002a34 <_ZN11GPS_Backend9setUpdateEb>:
  void setUpdate(bool update) { update_ = update; }
 8002a34:	b480      	push	{r7}
 8002a36:	b083      	sub	sp, #12
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
 8002a3c:	460b      	mov	r3, r1
 8002a3e:	70fb      	strb	r3, [r7, #3]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	78fa      	ldrb	r2, [r7, #3]
 8002a44:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
 8002a48:	bf00      	nop
 8002a4a:	370c      	adds	r7, #12
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr

08002a54 <_ZN6kduino3ImuC1Ev>:
      float acc_data[3];
      float gyro_data[3];
      float mag_data[3];
      float angles[3];

    Imu():
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b082      	sub	sp, #8
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
      stamp(),
      acc_data(),
      gyro_data(),
      mag_data(),
      angles()
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f7fe fe12 	bl	8001688 <_ZN3ros3MsgC1Ev>
 8002a64:	4a1e      	ldr	r2, [pc, #120]	; (8002ae0 <_ZN6kduino3ImuC1Ev+0x8c>)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	601a      	str	r2, [r3, #0]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	3304      	adds	r3, #4
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f7fe fdf8 	bl	8001664 <_ZN3ros4TimeC1Ev>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	f103 020c 	add.w	r2, r3, #12
 8002a7a:	2302      	movs	r3, #2
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	db05      	blt.n	8002a8c <_ZN6kduino3ImuC1Ev+0x38>
 8002a80:	f04f 0100 	mov.w	r1, #0
 8002a84:	6011      	str	r1, [r2, #0]
 8002a86:	3204      	adds	r2, #4
 8002a88:	3b01      	subs	r3, #1
 8002a8a:	e7f7      	b.n	8002a7c <_ZN6kduino3ImuC1Ev+0x28>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	f103 0218 	add.w	r2, r3, #24
 8002a92:	2302      	movs	r3, #2
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	db05      	blt.n	8002aa4 <_ZN6kduino3ImuC1Ev+0x50>
 8002a98:	f04f 0100 	mov.w	r1, #0
 8002a9c:	6011      	str	r1, [r2, #0]
 8002a9e:	3204      	adds	r2, #4
 8002aa0:	3b01      	subs	r3, #1
 8002aa2:	e7f7      	b.n	8002a94 <_ZN6kduino3ImuC1Ev+0x40>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8002aaa:	2302      	movs	r3, #2
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	db05      	blt.n	8002abc <_ZN6kduino3ImuC1Ev+0x68>
 8002ab0:	f04f 0100 	mov.w	r1, #0
 8002ab4:	6011      	str	r1, [r2, #0]
 8002ab6:	3204      	adds	r2, #4
 8002ab8:	3b01      	subs	r3, #1
 8002aba:	e7f7      	b.n	8002aac <_ZN6kduino3ImuC1Ev+0x58>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8002ac2:	2302      	movs	r3, #2
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	db05      	blt.n	8002ad4 <_ZN6kduino3ImuC1Ev+0x80>
 8002ac8:	f04f 0100 	mov.w	r1, #0
 8002acc:	6011      	str	r1, [r2, #0]
 8002ace:	3204      	adds	r2, #4
 8002ad0:	3b01      	subs	r3, #1
 8002ad2:	e7f7      	b.n	8002ac4 <_ZN6kduino3ImuC1Ev+0x70>
    {
    }
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3708      	adds	r7, #8
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	0800c6fc 	.word	0x0800c6fc

08002ae4 <_ZNK6kduino3Imu9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002ae4:	b480      	push	{r7}
 8002ae6:	b089      	sub	sp, #36	; 0x24
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
 8002aec:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002aee:	2300      	movs	r3, #0
 8002af0:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->stamp.sec >> (8 * 0)) & 0xFF;
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	683a      	ldr	r2, [r7, #0]
 8002af6:	4413      	add	r3, r2
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	6852      	ldr	r2, [r2, #4]
 8002afc:	b2d2      	uxtb	r2, r2
 8002afe:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->stamp.sec >> (8 * 1)) & 0xFF;
 8002b00:	69fb      	ldr	r3, [r7, #28]
 8002b02:	3301      	adds	r3, #1
 8002b04:	683a      	ldr	r2, [r7, #0]
 8002b06:	4413      	add	r3, r2
 8002b08:	687a      	ldr	r2, [r7, #4]
 8002b0a:	6852      	ldr	r2, [r2, #4]
 8002b0c:	0a12      	lsrs	r2, r2, #8
 8002b0e:	b2d2      	uxtb	r2, r2
 8002b10:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->stamp.sec >> (8 * 2)) & 0xFF;
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	3302      	adds	r3, #2
 8002b16:	683a      	ldr	r2, [r7, #0]
 8002b18:	4413      	add	r3, r2
 8002b1a:	687a      	ldr	r2, [r7, #4]
 8002b1c:	6852      	ldr	r2, [r2, #4]
 8002b1e:	0c12      	lsrs	r2, r2, #16
 8002b20:	b2d2      	uxtb	r2, r2
 8002b22:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->stamp.sec >> (8 * 3)) & 0xFF;
 8002b24:	69fb      	ldr	r3, [r7, #28]
 8002b26:	3303      	adds	r3, #3
 8002b28:	683a      	ldr	r2, [r7, #0]
 8002b2a:	4413      	add	r3, r2
 8002b2c:	687a      	ldr	r2, [r7, #4]
 8002b2e:	6852      	ldr	r2, [r2, #4]
 8002b30:	0e12      	lsrs	r2, r2, #24
 8002b32:	b2d2      	uxtb	r2, r2
 8002b34:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->stamp.sec);
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	3304      	adds	r3, #4
 8002b3a:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->stamp.nsec >> (8 * 0)) & 0xFF;
 8002b3c:	69fb      	ldr	r3, [r7, #28]
 8002b3e:	683a      	ldr	r2, [r7, #0]
 8002b40:	4413      	add	r3, r2
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	6892      	ldr	r2, [r2, #8]
 8002b46:	b2d2      	uxtb	r2, r2
 8002b48:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->stamp.nsec >> (8 * 1)) & 0xFF;
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	3301      	adds	r3, #1
 8002b4e:	683a      	ldr	r2, [r7, #0]
 8002b50:	4413      	add	r3, r2
 8002b52:	687a      	ldr	r2, [r7, #4]
 8002b54:	6892      	ldr	r2, [r2, #8]
 8002b56:	0a12      	lsrs	r2, r2, #8
 8002b58:	b2d2      	uxtb	r2, r2
 8002b5a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->stamp.nsec >> (8 * 2)) & 0xFF;
 8002b5c:	69fb      	ldr	r3, [r7, #28]
 8002b5e:	3302      	adds	r3, #2
 8002b60:	683a      	ldr	r2, [r7, #0]
 8002b62:	4413      	add	r3, r2
 8002b64:	687a      	ldr	r2, [r7, #4]
 8002b66:	6892      	ldr	r2, [r2, #8]
 8002b68:	0c12      	lsrs	r2, r2, #16
 8002b6a:	b2d2      	uxtb	r2, r2
 8002b6c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->stamp.nsec >> (8 * 3)) & 0xFF;
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	3303      	adds	r3, #3
 8002b72:	683a      	ldr	r2, [r7, #0]
 8002b74:	4413      	add	r3, r2
 8002b76:	687a      	ldr	r2, [r7, #4]
 8002b78:	6892      	ldr	r2, [r2, #8]
 8002b7a:	0e12      	lsrs	r2, r2, #24
 8002b7c:	b2d2      	uxtb	r2, r2
 8002b7e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->stamp.nsec);
 8002b80:	69fb      	ldr	r3, [r7, #28]
 8002b82:	3304      	adds	r3, #4
 8002b84:	61fb      	str	r3, [r7, #28]
      for( uint8_t i = 0; i < 3; i++){
 8002b86:	2300      	movs	r3, #0
 8002b88:	76fb      	strb	r3, [r7, #27]
 8002b8a:	7efb      	ldrb	r3, [r7, #27]
 8002b8c:	2b02      	cmp	r3, #2
 8002b8e:	dc2c      	bgt.n	8002bea <_ZNK6kduino3Imu9serializeEPh+0x106>
      union {
        float real;
        uint32_t base;
      } u_acc_datai;
      u_acc_datai.real = this->acc_data[i];
 8002b90:	7efb      	ldrb	r3, [r7, #27]
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	3302      	adds	r3, #2
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	4413      	add	r3, r2
 8002b9a:	3304      	adds	r3, #4
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	617b      	str	r3, [r7, #20]
      *(outbuffer + offset + 0) = (u_acc_datai.base >> (8 * 0)) & 0xFF;
 8002ba0:	69fb      	ldr	r3, [r7, #28]
 8002ba2:	683a      	ldr	r2, [r7, #0]
 8002ba4:	4413      	add	r3, r2
 8002ba6:	697a      	ldr	r2, [r7, #20]
 8002ba8:	b2d2      	uxtb	r2, r2
 8002baa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_acc_datai.base >> (8 * 1)) & 0xFF;
 8002bac:	69fb      	ldr	r3, [r7, #28]
 8002bae:	3301      	adds	r3, #1
 8002bb0:	683a      	ldr	r2, [r7, #0]
 8002bb2:	4413      	add	r3, r2
 8002bb4:	697a      	ldr	r2, [r7, #20]
 8002bb6:	0a12      	lsrs	r2, r2, #8
 8002bb8:	b2d2      	uxtb	r2, r2
 8002bba:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_acc_datai.base >> (8 * 2)) & 0xFF;
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	3302      	adds	r3, #2
 8002bc0:	683a      	ldr	r2, [r7, #0]
 8002bc2:	4413      	add	r3, r2
 8002bc4:	697a      	ldr	r2, [r7, #20]
 8002bc6:	0c12      	lsrs	r2, r2, #16
 8002bc8:	b2d2      	uxtb	r2, r2
 8002bca:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_acc_datai.base >> (8 * 3)) & 0xFF;
 8002bcc:	69fb      	ldr	r3, [r7, #28]
 8002bce:	3303      	adds	r3, #3
 8002bd0:	683a      	ldr	r2, [r7, #0]
 8002bd2:	4413      	add	r3, r2
 8002bd4:	697a      	ldr	r2, [r7, #20]
 8002bd6:	0e12      	lsrs	r2, r2, #24
 8002bd8:	b2d2      	uxtb	r2, r2
 8002bda:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->acc_data[i]);
 8002bdc:	69fb      	ldr	r3, [r7, #28]
 8002bde:	3304      	adds	r3, #4
 8002be0:	61fb      	str	r3, [r7, #28]
      for( uint8_t i = 0; i < 3; i++){
 8002be2:	7efb      	ldrb	r3, [r7, #27]
 8002be4:	3301      	adds	r3, #1
 8002be6:	76fb      	strb	r3, [r7, #27]
 8002be8:	e7cf      	b.n	8002b8a <_ZNK6kduino3Imu9serializeEPh+0xa6>
      }
      for( uint8_t i = 0; i < 3; i++){
 8002bea:	2300      	movs	r3, #0
 8002bec:	76bb      	strb	r3, [r7, #26]
 8002bee:	7ebb      	ldrb	r3, [r7, #26]
 8002bf0:	2b02      	cmp	r3, #2
 8002bf2:	dc2b      	bgt.n	8002c4c <_ZNK6kduino3Imu9serializeEPh+0x168>
      union {
        float real;
        uint32_t base;
      } u_gyro_datai;
      u_gyro_datai.real = this->gyro_data[i];
 8002bf4:	7ebb      	ldrb	r3, [r7, #26]
 8002bf6:	687a      	ldr	r2, [r7, #4]
 8002bf8:	3306      	adds	r3, #6
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	4413      	add	r3, r2
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_gyro_datai.base >> (8 * 0)) & 0xFF;
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	683a      	ldr	r2, [r7, #0]
 8002c06:	4413      	add	r3, r2
 8002c08:	693a      	ldr	r2, [r7, #16]
 8002c0a:	b2d2      	uxtb	r2, r2
 8002c0c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_gyro_datai.base >> (8 * 1)) & 0xFF;
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	3301      	adds	r3, #1
 8002c12:	683a      	ldr	r2, [r7, #0]
 8002c14:	4413      	add	r3, r2
 8002c16:	693a      	ldr	r2, [r7, #16]
 8002c18:	0a12      	lsrs	r2, r2, #8
 8002c1a:	b2d2      	uxtb	r2, r2
 8002c1c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_gyro_datai.base >> (8 * 2)) & 0xFF;
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	3302      	adds	r3, #2
 8002c22:	683a      	ldr	r2, [r7, #0]
 8002c24:	4413      	add	r3, r2
 8002c26:	693a      	ldr	r2, [r7, #16]
 8002c28:	0c12      	lsrs	r2, r2, #16
 8002c2a:	b2d2      	uxtb	r2, r2
 8002c2c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_gyro_datai.base >> (8 * 3)) & 0xFF;
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	3303      	adds	r3, #3
 8002c32:	683a      	ldr	r2, [r7, #0]
 8002c34:	4413      	add	r3, r2
 8002c36:	693a      	ldr	r2, [r7, #16]
 8002c38:	0e12      	lsrs	r2, r2, #24
 8002c3a:	b2d2      	uxtb	r2, r2
 8002c3c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->gyro_data[i]);
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	3304      	adds	r3, #4
 8002c42:	61fb      	str	r3, [r7, #28]
      for( uint8_t i = 0; i < 3; i++){
 8002c44:	7ebb      	ldrb	r3, [r7, #26]
 8002c46:	3301      	adds	r3, #1
 8002c48:	76bb      	strb	r3, [r7, #26]
 8002c4a:	e7d0      	b.n	8002bee <_ZNK6kduino3Imu9serializeEPh+0x10a>
      }
      for( uint8_t i = 0; i < 3; i++){
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	767b      	strb	r3, [r7, #25]
 8002c50:	7e7b      	ldrb	r3, [r7, #25]
 8002c52:	2b02      	cmp	r3, #2
 8002c54:	dc2c      	bgt.n	8002cb0 <_ZNK6kduino3Imu9serializeEPh+0x1cc>
      union {
        float real;
        uint32_t base;
      } u_mag_datai;
      u_mag_datai.real = this->mag_data[i];
 8002c56:	7e7b      	ldrb	r3, [r7, #25]
 8002c58:	687a      	ldr	r2, [r7, #4]
 8002c5a:	3308      	adds	r3, #8
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	4413      	add	r3, r2
 8002c60:	3304      	adds	r3, #4
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_mag_datai.base >> (8 * 0)) & 0xFF;
 8002c66:	69fb      	ldr	r3, [r7, #28]
 8002c68:	683a      	ldr	r2, [r7, #0]
 8002c6a:	4413      	add	r3, r2
 8002c6c:	68fa      	ldr	r2, [r7, #12]
 8002c6e:	b2d2      	uxtb	r2, r2
 8002c70:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_mag_datai.base >> (8 * 1)) & 0xFF;
 8002c72:	69fb      	ldr	r3, [r7, #28]
 8002c74:	3301      	adds	r3, #1
 8002c76:	683a      	ldr	r2, [r7, #0]
 8002c78:	4413      	add	r3, r2
 8002c7a:	68fa      	ldr	r2, [r7, #12]
 8002c7c:	0a12      	lsrs	r2, r2, #8
 8002c7e:	b2d2      	uxtb	r2, r2
 8002c80:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_mag_datai.base >> (8 * 2)) & 0xFF;
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	3302      	adds	r3, #2
 8002c86:	683a      	ldr	r2, [r7, #0]
 8002c88:	4413      	add	r3, r2
 8002c8a:	68fa      	ldr	r2, [r7, #12]
 8002c8c:	0c12      	lsrs	r2, r2, #16
 8002c8e:	b2d2      	uxtb	r2, r2
 8002c90:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_mag_datai.base >> (8 * 3)) & 0xFF;
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	3303      	adds	r3, #3
 8002c96:	683a      	ldr	r2, [r7, #0]
 8002c98:	4413      	add	r3, r2
 8002c9a:	68fa      	ldr	r2, [r7, #12]
 8002c9c:	0e12      	lsrs	r2, r2, #24
 8002c9e:	b2d2      	uxtb	r2, r2
 8002ca0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->mag_data[i]);
 8002ca2:	69fb      	ldr	r3, [r7, #28]
 8002ca4:	3304      	adds	r3, #4
 8002ca6:	61fb      	str	r3, [r7, #28]
      for( uint8_t i = 0; i < 3; i++){
 8002ca8:	7e7b      	ldrb	r3, [r7, #25]
 8002caa:	3301      	adds	r3, #1
 8002cac:	767b      	strb	r3, [r7, #25]
 8002cae:	e7cf      	b.n	8002c50 <_ZNK6kduino3Imu9serializeEPh+0x16c>
      }
      for( uint8_t i = 0; i < 3; i++){
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	763b      	strb	r3, [r7, #24]
 8002cb4:	7e3b      	ldrb	r3, [r7, #24]
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	dc2b      	bgt.n	8002d12 <_ZNK6kduino3Imu9serializeEPh+0x22e>
      union {
        float real;
        uint32_t base;
      } u_anglesi;
      u_anglesi.real = this->angles[i];
 8002cba:	7e3b      	ldrb	r3, [r7, #24]
 8002cbc:	687a      	ldr	r2, [r7, #4]
 8002cbe:	330c      	adds	r3, #12
 8002cc0:	009b      	lsls	r3, r3, #2
 8002cc2:	4413      	add	r3, r2
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	60bb      	str	r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_anglesi.base >> (8 * 0)) & 0xFF;
 8002cc8:	69fb      	ldr	r3, [r7, #28]
 8002cca:	683a      	ldr	r2, [r7, #0]
 8002ccc:	4413      	add	r3, r2
 8002cce:	68ba      	ldr	r2, [r7, #8]
 8002cd0:	b2d2      	uxtb	r2, r2
 8002cd2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_anglesi.base >> (8 * 1)) & 0xFF;
 8002cd4:	69fb      	ldr	r3, [r7, #28]
 8002cd6:	3301      	adds	r3, #1
 8002cd8:	683a      	ldr	r2, [r7, #0]
 8002cda:	4413      	add	r3, r2
 8002cdc:	68ba      	ldr	r2, [r7, #8]
 8002cde:	0a12      	lsrs	r2, r2, #8
 8002ce0:	b2d2      	uxtb	r2, r2
 8002ce2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_anglesi.base >> (8 * 2)) & 0xFF;
 8002ce4:	69fb      	ldr	r3, [r7, #28]
 8002ce6:	3302      	adds	r3, #2
 8002ce8:	683a      	ldr	r2, [r7, #0]
 8002cea:	4413      	add	r3, r2
 8002cec:	68ba      	ldr	r2, [r7, #8]
 8002cee:	0c12      	lsrs	r2, r2, #16
 8002cf0:	b2d2      	uxtb	r2, r2
 8002cf2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_anglesi.base >> (8 * 3)) & 0xFF;
 8002cf4:	69fb      	ldr	r3, [r7, #28]
 8002cf6:	3303      	adds	r3, #3
 8002cf8:	683a      	ldr	r2, [r7, #0]
 8002cfa:	4413      	add	r3, r2
 8002cfc:	68ba      	ldr	r2, [r7, #8]
 8002cfe:	0e12      	lsrs	r2, r2, #24
 8002d00:	b2d2      	uxtb	r2, r2
 8002d02:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->angles[i]);
 8002d04:	69fb      	ldr	r3, [r7, #28]
 8002d06:	3304      	adds	r3, #4
 8002d08:	61fb      	str	r3, [r7, #28]
      for( uint8_t i = 0; i < 3; i++){
 8002d0a:	7e3b      	ldrb	r3, [r7, #24]
 8002d0c:	3301      	adds	r3, #1
 8002d0e:	763b      	strb	r3, [r7, #24]
 8002d10:	e7d0      	b.n	8002cb4 <_ZNK6kduino3Imu9serializeEPh+0x1d0>
      }
      return offset;
 8002d12:	69fb      	ldr	r3, [r7, #28]
    }
 8002d14:	4618      	mov	r0, r3
 8002d16:	3724      	adds	r7, #36	; 0x24
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr

08002d20 <_ZN6kduino3Imu11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002d20:	b480      	push	{r7}
 8002d22:	b089      	sub	sp, #36	; 0x24
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
 8002d28:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	61fb      	str	r3, [r7, #28]
      this->stamp.sec =  ((uint32_t) (*(inbuffer + offset)));
 8002d2e:	69fb      	ldr	r3, [r7, #28]
 8002d30:	683a      	ldr	r2, [r7, #0]
 8002d32:	4413      	add	r3, r2
 8002d34:	781b      	ldrb	r3, [r3, #0]
 8002d36:	461a      	mov	r2, r3
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	605a      	str	r2, [r3, #4]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	685a      	ldr	r2, [r3, #4]
 8002d40:	69fb      	ldr	r3, [r7, #28]
 8002d42:	3301      	adds	r3, #1
 8002d44:	6839      	ldr	r1, [r7, #0]
 8002d46:	440b      	add	r3, r1
 8002d48:	781b      	ldrb	r3, [r3, #0]
 8002d4a:	021b      	lsls	r3, r3, #8
 8002d4c:	431a      	orrs	r2, r3
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	605a      	str	r2, [r3, #4]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	685a      	ldr	r2, [r3, #4]
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	3302      	adds	r3, #2
 8002d5a:	6839      	ldr	r1, [r7, #0]
 8002d5c:	440b      	add	r3, r1
 8002d5e:	781b      	ldrb	r3, [r3, #0]
 8002d60:	041b      	lsls	r3, r3, #16
 8002d62:	431a      	orrs	r2, r3
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	605a      	str	r2, [r3, #4]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	685a      	ldr	r2, [r3, #4]
 8002d6c:	69fb      	ldr	r3, [r7, #28]
 8002d6e:	3303      	adds	r3, #3
 8002d70:	6839      	ldr	r1, [r7, #0]
 8002d72:	440b      	add	r3, r1
 8002d74:	781b      	ldrb	r3, [r3, #0]
 8002d76:	061b      	lsls	r3, r3, #24
 8002d78:	431a      	orrs	r2, r3
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->stamp.sec);
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	3304      	adds	r3, #4
 8002d82:	61fb      	str	r3, [r7, #28]
      this->stamp.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8002d84:	69fb      	ldr	r3, [r7, #28]
 8002d86:	683a      	ldr	r2, [r7, #0]
 8002d88:	4413      	add	r3, r2
 8002d8a:	781b      	ldrb	r3, [r3, #0]
 8002d8c:	461a      	mov	r2, r3
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	609a      	str	r2, [r3, #8]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	689a      	ldr	r2, [r3, #8]
 8002d96:	69fb      	ldr	r3, [r7, #28]
 8002d98:	3301      	adds	r3, #1
 8002d9a:	6839      	ldr	r1, [r7, #0]
 8002d9c:	440b      	add	r3, r1
 8002d9e:	781b      	ldrb	r3, [r3, #0]
 8002da0:	021b      	lsls	r3, r3, #8
 8002da2:	431a      	orrs	r2, r3
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	609a      	str	r2, [r3, #8]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	689a      	ldr	r2, [r3, #8]
 8002dac:	69fb      	ldr	r3, [r7, #28]
 8002dae:	3302      	adds	r3, #2
 8002db0:	6839      	ldr	r1, [r7, #0]
 8002db2:	440b      	add	r3, r1
 8002db4:	781b      	ldrb	r3, [r3, #0]
 8002db6:	041b      	lsls	r3, r3, #16
 8002db8:	431a      	orrs	r2, r3
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	609a      	str	r2, [r3, #8]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	689a      	ldr	r2, [r3, #8]
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	3303      	adds	r3, #3
 8002dc6:	6839      	ldr	r1, [r7, #0]
 8002dc8:	440b      	add	r3, r1
 8002dca:	781b      	ldrb	r3, [r3, #0]
 8002dcc:	061b      	lsls	r3, r3, #24
 8002dce:	431a      	orrs	r2, r3
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->stamp.nsec);
 8002dd4:	69fb      	ldr	r3, [r7, #28]
 8002dd6:	3304      	adds	r3, #4
 8002dd8:	61fb      	str	r3, [r7, #28]
      for( uint8_t i = 0; i < 3; i++){
 8002dda:	2300      	movs	r3, #0
 8002ddc:	76fb      	strb	r3, [r7, #27]
 8002dde:	7efb      	ldrb	r3, [r7, #27]
 8002de0:	2b02      	cmp	r3, #2
 8002de2:	dc32      	bgt.n	8002e4a <_ZN6kduino3Imu11deserializeEPh+0x12a>
      union {
        float real;
        uint32_t base;
      } u_acc_datai;
      u_acc_datai.base = 0;
 8002de4:	2300      	movs	r3, #0
 8002de6:	617b      	str	r3, [r7, #20]
      u_acc_datai.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	69fa      	ldr	r2, [r7, #28]
 8002dec:	6839      	ldr	r1, [r7, #0]
 8002dee:	440a      	add	r2, r1
 8002df0:	7812      	ldrb	r2, [r2, #0]
 8002df2:	4313      	orrs	r3, r2
 8002df4:	617b      	str	r3, [r7, #20]
      u_acc_datai.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002df6:	697a      	ldr	r2, [r7, #20]
 8002df8:	69fb      	ldr	r3, [r7, #28]
 8002dfa:	3301      	adds	r3, #1
 8002dfc:	6839      	ldr	r1, [r7, #0]
 8002dfe:	440b      	add	r3, r1
 8002e00:	781b      	ldrb	r3, [r3, #0]
 8002e02:	021b      	lsls	r3, r3, #8
 8002e04:	4313      	orrs	r3, r2
 8002e06:	617b      	str	r3, [r7, #20]
      u_acc_datai.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002e08:	697a      	ldr	r2, [r7, #20]
 8002e0a:	69fb      	ldr	r3, [r7, #28]
 8002e0c:	3302      	adds	r3, #2
 8002e0e:	6839      	ldr	r1, [r7, #0]
 8002e10:	440b      	add	r3, r1
 8002e12:	781b      	ldrb	r3, [r3, #0]
 8002e14:	041b      	lsls	r3, r3, #16
 8002e16:	4313      	orrs	r3, r2
 8002e18:	617b      	str	r3, [r7, #20]
      u_acc_datai.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002e1a:	697a      	ldr	r2, [r7, #20]
 8002e1c:	69fb      	ldr	r3, [r7, #28]
 8002e1e:	3303      	adds	r3, #3
 8002e20:	6839      	ldr	r1, [r7, #0]
 8002e22:	440b      	add	r3, r1
 8002e24:	781b      	ldrb	r3, [r3, #0]
 8002e26:	061b      	lsls	r3, r3, #24
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	617b      	str	r3, [r7, #20]
      this->acc_data[i] = u_acc_datai.real;
 8002e2c:	7efb      	ldrb	r3, [r7, #27]
 8002e2e:	697a      	ldr	r2, [r7, #20]
 8002e30:	6879      	ldr	r1, [r7, #4]
 8002e32:	3302      	adds	r3, #2
 8002e34:	009b      	lsls	r3, r3, #2
 8002e36:	440b      	add	r3, r1
 8002e38:	3304      	adds	r3, #4
 8002e3a:	601a      	str	r2, [r3, #0]
      offset += sizeof(this->acc_data[i]);
 8002e3c:	69fb      	ldr	r3, [r7, #28]
 8002e3e:	3304      	adds	r3, #4
 8002e40:	61fb      	str	r3, [r7, #28]
      for( uint8_t i = 0; i < 3; i++){
 8002e42:	7efb      	ldrb	r3, [r7, #27]
 8002e44:	3301      	adds	r3, #1
 8002e46:	76fb      	strb	r3, [r7, #27]
 8002e48:	e7c9      	b.n	8002dde <_ZN6kduino3Imu11deserializeEPh+0xbe>
      }
      for( uint8_t i = 0; i < 3; i++){
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	76bb      	strb	r3, [r7, #26]
 8002e4e:	7ebb      	ldrb	r3, [r7, #26]
 8002e50:	2b02      	cmp	r3, #2
 8002e52:	dc31      	bgt.n	8002eb8 <_ZN6kduino3Imu11deserializeEPh+0x198>
      union {
        float real;
        uint32_t base;
      } u_gyro_datai;
      u_gyro_datai.base = 0;
 8002e54:	2300      	movs	r3, #0
 8002e56:	613b      	str	r3, [r7, #16]
      u_gyro_datai.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	69fa      	ldr	r2, [r7, #28]
 8002e5c:	6839      	ldr	r1, [r7, #0]
 8002e5e:	440a      	add	r2, r1
 8002e60:	7812      	ldrb	r2, [r2, #0]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	613b      	str	r3, [r7, #16]
      u_gyro_datai.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002e66:	693a      	ldr	r2, [r7, #16]
 8002e68:	69fb      	ldr	r3, [r7, #28]
 8002e6a:	3301      	adds	r3, #1
 8002e6c:	6839      	ldr	r1, [r7, #0]
 8002e6e:	440b      	add	r3, r1
 8002e70:	781b      	ldrb	r3, [r3, #0]
 8002e72:	021b      	lsls	r3, r3, #8
 8002e74:	4313      	orrs	r3, r2
 8002e76:	613b      	str	r3, [r7, #16]
      u_gyro_datai.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002e78:	693a      	ldr	r2, [r7, #16]
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	3302      	adds	r3, #2
 8002e7e:	6839      	ldr	r1, [r7, #0]
 8002e80:	440b      	add	r3, r1
 8002e82:	781b      	ldrb	r3, [r3, #0]
 8002e84:	041b      	lsls	r3, r3, #16
 8002e86:	4313      	orrs	r3, r2
 8002e88:	613b      	str	r3, [r7, #16]
      u_gyro_datai.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002e8a:	693a      	ldr	r2, [r7, #16]
 8002e8c:	69fb      	ldr	r3, [r7, #28]
 8002e8e:	3303      	adds	r3, #3
 8002e90:	6839      	ldr	r1, [r7, #0]
 8002e92:	440b      	add	r3, r1
 8002e94:	781b      	ldrb	r3, [r3, #0]
 8002e96:	061b      	lsls	r3, r3, #24
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	613b      	str	r3, [r7, #16]
      this->gyro_data[i] = u_gyro_datai.real;
 8002e9c:	7ebb      	ldrb	r3, [r7, #26]
 8002e9e:	693a      	ldr	r2, [r7, #16]
 8002ea0:	6879      	ldr	r1, [r7, #4]
 8002ea2:	3306      	adds	r3, #6
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	440b      	add	r3, r1
 8002ea8:	601a      	str	r2, [r3, #0]
      offset += sizeof(this->gyro_data[i]);
 8002eaa:	69fb      	ldr	r3, [r7, #28]
 8002eac:	3304      	adds	r3, #4
 8002eae:	61fb      	str	r3, [r7, #28]
      for( uint8_t i = 0; i < 3; i++){
 8002eb0:	7ebb      	ldrb	r3, [r7, #26]
 8002eb2:	3301      	adds	r3, #1
 8002eb4:	76bb      	strb	r3, [r7, #26]
 8002eb6:	e7ca      	b.n	8002e4e <_ZN6kduino3Imu11deserializeEPh+0x12e>
      }
      for( uint8_t i = 0; i < 3; i++){
 8002eb8:	2300      	movs	r3, #0
 8002eba:	767b      	strb	r3, [r7, #25]
 8002ebc:	7e7b      	ldrb	r3, [r7, #25]
 8002ebe:	2b02      	cmp	r3, #2
 8002ec0:	dc32      	bgt.n	8002f28 <_ZN6kduino3Imu11deserializeEPh+0x208>
      union {
        float real;
        uint32_t base;
      } u_mag_datai;
      u_mag_datai.base = 0;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	60fb      	str	r3, [r7, #12]
      u_mag_datai.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	69fa      	ldr	r2, [r7, #28]
 8002eca:	6839      	ldr	r1, [r7, #0]
 8002ecc:	440a      	add	r2, r1
 8002ece:	7812      	ldrb	r2, [r2, #0]
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	60fb      	str	r3, [r7, #12]
      u_mag_datai.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002ed4:	68fa      	ldr	r2, [r7, #12]
 8002ed6:	69fb      	ldr	r3, [r7, #28]
 8002ed8:	3301      	adds	r3, #1
 8002eda:	6839      	ldr	r1, [r7, #0]
 8002edc:	440b      	add	r3, r1
 8002ede:	781b      	ldrb	r3, [r3, #0]
 8002ee0:	021b      	lsls	r3, r3, #8
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	60fb      	str	r3, [r7, #12]
      u_mag_datai.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002ee6:	68fa      	ldr	r2, [r7, #12]
 8002ee8:	69fb      	ldr	r3, [r7, #28]
 8002eea:	3302      	adds	r3, #2
 8002eec:	6839      	ldr	r1, [r7, #0]
 8002eee:	440b      	add	r3, r1
 8002ef0:	781b      	ldrb	r3, [r3, #0]
 8002ef2:	041b      	lsls	r3, r3, #16
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	60fb      	str	r3, [r7, #12]
      u_mag_datai.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002ef8:	68fa      	ldr	r2, [r7, #12]
 8002efa:	69fb      	ldr	r3, [r7, #28]
 8002efc:	3303      	adds	r3, #3
 8002efe:	6839      	ldr	r1, [r7, #0]
 8002f00:	440b      	add	r3, r1
 8002f02:	781b      	ldrb	r3, [r3, #0]
 8002f04:	061b      	lsls	r3, r3, #24
 8002f06:	4313      	orrs	r3, r2
 8002f08:	60fb      	str	r3, [r7, #12]
      this->mag_data[i] = u_mag_datai.real;
 8002f0a:	7e7b      	ldrb	r3, [r7, #25]
 8002f0c:	68fa      	ldr	r2, [r7, #12]
 8002f0e:	6879      	ldr	r1, [r7, #4]
 8002f10:	3308      	adds	r3, #8
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	440b      	add	r3, r1
 8002f16:	3304      	adds	r3, #4
 8002f18:	601a      	str	r2, [r3, #0]
      offset += sizeof(this->mag_data[i]);
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	3304      	adds	r3, #4
 8002f1e:	61fb      	str	r3, [r7, #28]
      for( uint8_t i = 0; i < 3; i++){
 8002f20:	7e7b      	ldrb	r3, [r7, #25]
 8002f22:	3301      	adds	r3, #1
 8002f24:	767b      	strb	r3, [r7, #25]
 8002f26:	e7c9      	b.n	8002ebc <_ZN6kduino3Imu11deserializeEPh+0x19c>
      }
      for( uint8_t i = 0; i < 3; i++){
 8002f28:	2300      	movs	r3, #0
 8002f2a:	763b      	strb	r3, [r7, #24]
 8002f2c:	7e3b      	ldrb	r3, [r7, #24]
 8002f2e:	2b02      	cmp	r3, #2
 8002f30:	dc31      	bgt.n	8002f96 <_ZN6kduino3Imu11deserializeEPh+0x276>
      union {
        float real;
        uint32_t base;
      } u_anglesi;
      u_anglesi.base = 0;
 8002f32:	2300      	movs	r3, #0
 8002f34:	60bb      	str	r3, [r7, #8]
      u_anglesi.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	69fa      	ldr	r2, [r7, #28]
 8002f3a:	6839      	ldr	r1, [r7, #0]
 8002f3c:	440a      	add	r2, r1
 8002f3e:	7812      	ldrb	r2, [r2, #0]
 8002f40:	4313      	orrs	r3, r2
 8002f42:	60bb      	str	r3, [r7, #8]
      u_anglesi.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002f44:	68ba      	ldr	r2, [r7, #8]
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	3301      	adds	r3, #1
 8002f4a:	6839      	ldr	r1, [r7, #0]
 8002f4c:	440b      	add	r3, r1
 8002f4e:	781b      	ldrb	r3, [r3, #0]
 8002f50:	021b      	lsls	r3, r3, #8
 8002f52:	4313      	orrs	r3, r2
 8002f54:	60bb      	str	r3, [r7, #8]
      u_anglesi.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002f56:	68ba      	ldr	r2, [r7, #8]
 8002f58:	69fb      	ldr	r3, [r7, #28]
 8002f5a:	3302      	adds	r3, #2
 8002f5c:	6839      	ldr	r1, [r7, #0]
 8002f5e:	440b      	add	r3, r1
 8002f60:	781b      	ldrb	r3, [r3, #0]
 8002f62:	041b      	lsls	r3, r3, #16
 8002f64:	4313      	orrs	r3, r2
 8002f66:	60bb      	str	r3, [r7, #8]
      u_anglesi.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002f68:	68ba      	ldr	r2, [r7, #8]
 8002f6a:	69fb      	ldr	r3, [r7, #28]
 8002f6c:	3303      	adds	r3, #3
 8002f6e:	6839      	ldr	r1, [r7, #0]
 8002f70:	440b      	add	r3, r1
 8002f72:	781b      	ldrb	r3, [r3, #0]
 8002f74:	061b      	lsls	r3, r3, #24
 8002f76:	4313      	orrs	r3, r2
 8002f78:	60bb      	str	r3, [r7, #8]
      this->angles[i] = u_anglesi.real;
 8002f7a:	7e3b      	ldrb	r3, [r7, #24]
 8002f7c:	68ba      	ldr	r2, [r7, #8]
 8002f7e:	6879      	ldr	r1, [r7, #4]
 8002f80:	330c      	adds	r3, #12
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	440b      	add	r3, r1
 8002f86:	601a      	str	r2, [r3, #0]
      offset += sizeof(this->angles[i]);
 8002f88:	69fb      	ldr	r3, [r7, #28]
 8002f8a:	3304      	adds	r3, #4
 8002f8c:	61fb      	str	r3, [r7, #28]
      for( uint8_t i = 0; i < 3; i++){
 8002f8e:	7e3b      	ldrb	r3, [r7, #24]
 8002f90:	3301      	adds	r3, #1
 8002f92:	763b      	strb	r3, [r7, #24]
 8002f94:	e7ca      	b.n	8002f2c <_ZN6kduino3Imu11deserializeEPh+0x20c>
      }
     return offset;
 8002f96:	69fb      	ldr	r3, [r7, #28]
    }
 8002f98:	4618      	mov	r0, r3
 8002f9a:	3724      	adds	r7, #36	; 0x24
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa2:	4770      	bx	lr

08002fa4 <_ZN6kduino3Imu7getTypeEv>:

    const char * getType(){ return "kduino/Imu"; };
 8002fa4:	b480      	push	{r7}
 8002fa6:	b083      	sub	sp, #12
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
 8002fac:	4b03      	ldr	r3, [pc, #12]	; (8002fbc <_ZN6kduino3Imu7getTypeEv+0x18>)
 8002fae:	4618      	mov	r0, r3
 8002fb0:	370c      	adds	r7, #12
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb8:	4770      	bx	lr
 8002fba:	bf00      	nop
 8002fbc:	0800c510 	.word	0x0800c510

08002fc0 <_ZN6kduino3Imu6getMD5Ev>:
    const char * getMD5(){ return "68b769ca85e5d9c44dbce51dc60e4be7"; };
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
 8002fc8:	4b03      	ldr	r3, [pc, #12]	; (8002fd8 <_ZN6kduino3Imu6getMD5Ev+0x18>)
 8002fca:	4618      	mov	r0, r3
 8002fcc:	370c      	adds	r7, #12
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr
 8002fd6:	bf00      	nop
 8002fd8:	0800c51c 	.word	0x0800c51c

08002fdc <_ZN6kduino11DesireCoordC1Ev>:
      float roll;
      float pitch;
      float yaw;
      uint8_t coord_type;

    DesireCoord():
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b082      	sub	sp, #8
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
      roll(0),
      pitch(0),
      yaw(0),
      coord_type(0)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f7fe fb4e 	bl	8001688 <_ZN3ros3MsgC1Ev>
 8002fec:	4a0b      	ldr	r2, [pc, #44]	; (800301c <_ZN6kduino11DesireCoordC1Ev+0x40>)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	601a      	str	r2, [r3, #0]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	f04f 0200 	mov.w	r2, #0
 8002ff8:	605a      	str	r2, [r3, #4]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	f04f 0200 	mov.w	r2, #0
 8003000:	609a      	str	r2, [r3, #8]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	f04f 0200 	mov.w	r2, #0
 8003008:	60da      	str	r2, [r3, #12]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2200      	movs	r2, #0
 800300e:	741a      	strb	r2, [r3, #16]
    {
    }
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	4618      	mov	r0, r3
 8003014:	3708      	adds	r7, #8
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	0800c6e4 	.word	0x0800c6e4

08003020 <_ZNK6kduino11DesireCoord9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8003020:	b480      	push	{r7}
 8003022:	b087      	sub	sp, #28
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
 8003028:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800302a:	2300      	movs	r3, #0
 800302c:	617b      	str	r3, [r7, #20]
      union {
        float real;
        uint32_t base;
      } u_roll;
      u_roll.real = this->roll;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_roll.base >> (8 * 0)) & 0xFF;
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	683a      	ldr	r2, [r7, #0]
 8003038:	4413      	add	r3, r2
 800303a:	693a      	ldr	r2, [r7, #16]
 800303c:	b2d2      	uxtb	r2, r2
 800303e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_roll.base >> (8 * 1)) & 0xFF;
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	3301      	adds	r3, #1
 8003044:	683a      	ldr	r2, [r7, #0]
 8003046:	4413      	add	r3, r2
 8003048:	693a      	ldr	r2, [r7, #16]
 800304a:	0a12      	lsrs	r2, r2, #8
 800304c:	b2d2      	uxtb	r2, r2
 800304e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_roll.base >> (8 * 2)) & 0xFF;
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	3302      	adds	r3, #2
 8003054:	683a      	ldr	r2, [r7, #0]
 8003056:	4413      	add	r3, r2
 8003058:	693a      	ldr	r2, [r7, #16]
 800305a:	0c12      	lsrs	r2, r2, #16
 800305c:	b2d2      	uxtb	r2, r2
 800305e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_roll.base >> (8 * 3)) & 0xFF;
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	3303      	adds	r3, #3
 8003064:	683a      	ldr	r2, [r7, #0]
 8003066:	4413      	add	r3, r2
 8003068:	693a      	ldr	r2, [r7, #16]
 800306a:	0e12      	lsrs	r2, r2, #24
 800306c:	b2d2      	uxtb	r2, r2
 800306e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->roll);
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	3304      	adds	r3, #4
 8003074:	617b      	str	r3, [r7, #20]
      union {
        float real;
        uint32_t base;
      } u_pitch;
      u_pitch.real = this->pitch;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_pitch.base >> (8 * 0)) & 0xFF;
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	683a      	ldr	r2, [r7, #0]
 8003080:	4413      	add	r3, r2
 8003082:	68fa      	ldr	r2, [r7, #12]
 8003084:	b2d2      	uxtb	r2, r2
 8003086:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_pitch.base >> (8 * 1)) & 0xFF;
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	3301      	adds	r3, #1
 800308c:	683a      	ldr	r2, [r7, #0]
 800308e:	4413      	add	r3, r2
 8003090:	68fa      	ldr	r2, [r7, #12]
 8003092:	0a12      	lsrs	r2, r2, #8
 8003094:	b2d2      	uxtb	r2, r2
 8003096:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_pitch.base >> (8 * 2)) & 0xFF;
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	3302      	adds	r3, #2
 800309c:	683a      	ldr	r2, [r7, #0]
 800309e:	4413      	add	r3, r2
 80030a0:	68fa      	ldr	r2, [r7, #12]
 80030a2:	0c12      	lsrs	r2, r2, #16
 80030a4:	b2d2      	uxtb	r2, r2
 80030a6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_pitch.base >> (8 * 3)) & 0xFF;
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	3303      	adds	r3, #3
 80030ac:	683a      	ldr	r2, [r7, #0]
 80030ae:	4413      	add	r3, r2
 80030b0:	68fa      	ldr	r2, [r7, #12]
 80030b2:	0e12      	lsrs	r2, r2, #24
 80030b4:	b2d2      	uxtb	r2, r2
 80030b6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->pitch);
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	3304      	adds	r3, #4
 80030bc:	617b      	str	r3, [r7, #20]
      union {
        float real;
        uint32_t base;
      } u_yaw;
      u_yaw.real = this->yaw;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	68db      	ldr	r3, [r3, #12]
 80030c2:	60bb      	str	r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_yaw.base >> (8 * 0)) & 0xFF;
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	683a      	ldr	r2, [r7, #0]
 80030c8:	4413      	add	r3, r2
 80030ca:	68ba      	ldr	r2, [r7, #8]
 80030cc:	b2d2      	uxtb	r2, r2
 80030ce:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_yaw.base >> (8 * 1)) & 0xFF;
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	3301      	adds	r3, #1
 80030d4:	683a      	ldr	r2, [r7, #0]
 80030d6:	4413      	add	r3, r2
 80030d8:	68ba      	ldr	r2, [r7, #8]
 80030da:	0a12      	lsrs	r2, r2, #8
 80030dc:	b2d2      	uxtb	r2, r2
 80030de:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_yaw.base >> (8 * 2)) & 0xFF;
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	3302      	adds	r3, #2
 80030e4:	683a      	ldr	r2, [r7, #0]
 80030e6:	4413      	add	r3, r2
 80030e8:	68ba      	ldr	r2, [r7, #8]
 80030ea:	0c12      	lsrs	r2, r2, #16
 80030ec:	b2d2      	uxtb	r2, r2
 80030ee:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_yaw.base >> (8 * 3)) & 0xFF;
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	3303      	adds	r3, #3
 80030f4:	683a      	ldr	r2, [r7, #0]
 80030f6:	4413      	add	r3, r2
 80030f8:	68ba      	ldr	r2, [r7, #8]
 80030fa:	0e12      	lsrs	r2, r2, #24
 80030fc:	b2d2      	uxtb	r2, r2
 80030fe:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->yaw);
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	3304      	adds	r3, #4
 8003104:	617b      	str	r3, [r7, #20]
      *(outbuffer + offset + 0) = (this->coord_type >> (8 * 0)) & 0xFF;
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	683a      	ldr	r2, [r7, #0]
 800310a:	4413      	add	r3, r2
 800310c:	687a      	ldr	r2, [r7, #4]
 800310e:	7c12      	ldrb	r2, [r2, #16]
 8003110:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->coord_type);
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	3301      	adds	r3, #1
 8003116:	617b      	str	r3, [r7, #20]
      return offset;
 8003118:	697b      	ldr	r3, [r7, #20]
    }
 800311a:	4618      	mov	r0, r3
 800311c:	371c      	adds	r7, #28
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr

08003126 <_ZN6kduino11DesireCoord11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8003126:	b480      	push	{r7}
 8003128:	b087      	sub	sp, #28
 800312a:	af00      	add	r7, sp, #0
 800312c:	6078      	str	r0, [r7, #4]
 800312e:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003130:	2300      	movs	r3, #0
 8003132:	617b      	str	r3, [r7, #20]
      union {
        float real;
        uint32_t base;
      } u_roll;
      u_roll.base = 0;
 8003134:	2300      	movs	r3, #0
 8003136:	613b      	str	r3, [r7, #16]
      u_roll.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	697a      	ldr	r2, [r7, #20]
 800313c:	6839      	ldr	r1, [r7, #0]
 800313e:	440a      	add	r2, r1
 8003140:	7812      	ldrb	r2, [r2, #0]
 8003142:	4313      	orrs	r3, r2
 8003144:	613b      	str	r3, [r7, #16]
      u_roll.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003146:	693a      	ldr	r2, [r7, #16]
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	3301      	adds	r3, #1
 800314c:	6839      	ldr	r1, [r7, #0]
 800314e:	440b      	add	r3, r1
 8003150:	781b      	ldrb	r3, [r3, #0]
 8003152:	021b      	lsls	r3, r3, #8
 8003154:	4313      	orrs	r3, r2
 8003156:	613b      	str	r3, [r7, #16]
      u_roll.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003158:	693a      	ldr	r2, [r7, #16]
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	3302      	adds	r3, #2
 800315e:	6839      	ldr	r1, [r7, #0]
 8003160:	440b      	add	r3, r1
 8003162:	781b      	ldrb	r3, [r3, #0]
 8003164:	041b      	lsls	r3, r3, #16
 8003166:	4313      	orrs	r3, r2
 8003168:	613b      	str	r3, [r7, #16]
      u_roll.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800316a:	693a      	ldr	r2, [r7, #16]
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	3303      	adds	r3, #3
 8003170:	6839      	ldr	r1, [r7, #0]
 8003172:	440b      	add	r3, r1
 8003174:	781b      	ldrb	r3, [r3, #0]
 8003176:	061b      	lsls	r3, r3, #24
 8003178:	4313      	orrs	r3, r2
 800317a:	613b      	str	r3, [r7, #16]
      this->roll = u_roll.real;
 800317c:	693a      	ldr	r2, [r7, #16]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->roll);
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	3304      	adds	r3, #4
 8003186:	617b      	str	r3, [r7, #20]
      union {
        float real;
        uint32_t base;
      } u_pitch;
      u_pitch.base = 0;
 8003188:	2300      	movs	r3, #0
 800318a:	60fb      	str	r3, [r7, #12]
      u_pitch.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	697a      	ldr	r2, [r7, #20]
 8003190:	6839      	ldr	r1, [r7, #0]
 8003192:	440a      	add	r2, r1
 8003194:	7812      	ldrb	r2, [r2, #0]
 8003196:	4313      	orrs	r3, r2
 8003198:	60fb      	str	r3, [r7, #12]
      u_pitch.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800319a:	68fa      	ldr	r2, [r7, #12]
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	3301      	adds	r3, #1
 80031a0:	6839      	ldr	r1, [r7, #0]
 80031a2:	440b      	add	r3, r1
 80031a4:	781b      	ldrb	r3, [r3, #0]
 80031a6:	021b      	lsls	r3, r3, #8
 80031a8:	4313      	orrs	r3, r2
 80031aa:	60fb      	str	r3, [r7, #12]
      u_pitch.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80031ac:	68fa      	ldr	r2, [r7, #12]
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	3302      	adds	r3, #2
 80031b2:	6839      	ldr	r1, [r7, #0]
 80031b4:	440b      	add	r3, r1
 80031b6:	781b      	ldrb	r3, [r3, #0]
 80031b8:	041b      	lsls	r3, r3, #16
 80031ba:	4313      	orrs	r3, r2
 80031bc:	60fb      	str	r3, [r7, #12]
      u_pitch.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80031be:	68fa      	ldr	r2, [r7, #12]
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	3303      	adds	r3, #3
 80031c4:	6839      	ldr	r1, [r7, #0]
 80031c6:	440b      	add	r3, r1
 80031c8:	781b      	ldrb	r3, [r3, #0]
 80031ca:	061b      	lsls	r3, r3, #24
 80031cc:	4313      	orrs	r3, r2
 80031ce:	60fb      	str	r3, [r7, #12]
      this->pitch = u_pitch.real;
 80031d0:	68fa      	ldr	r2, [r7, #12]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->pitch);
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	3304      	adds	r3, #4
 80031da:	617b      	str	r3, [r7, #20]
      union {
        float real;
        uint32_t base;
      } u_yaw;
      u_yaw.base = 0;
 80031dc:	2300      	movs	r3, #0
 80031de:	60bb      	str	r3, [r7, #8]
      u_yaw.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	697a      	ldr	r2, [r7, #20]
 80031e4:	6839      	ldr	r1, [r7, #0]
 80031e6:	440a      	add	r2, r1
 80031e8:	7812      	ldrb	r2, [r2, #0]
 80031ea:	4313      	orrs	r3, r2
 80031ec:	60bb      	str	r3, [r7, #8]
      u_yaw.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80031ee:	68ba      	ldr	r2, [r7, #8]
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	3301      	adds	r3, #1
 80031f4:	6839      	ldr	r1, [r7, #0]
 80031f6:	440b      	add	r3, r1
 80031f8:	781b      	ldrb	r3, [r3, #0]
 80031fa:	021b      	lsls	r3, r3, #8
 80031fc:	4313      	orrs	r3, r2
 80031fe:	60bb      	str	r3, [r7, #8]
      u_yaw.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003200:	68ba      	ldr	r2, [r7, #8]
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	3302      	adds	r3, #2
 8003206:	6839      	ldr	r1, [r7, #0]
 8003208:	440b      	add	r3, r1
 800320a:	781b      	ldrb	r3, [r3, #0]
 800320c:	041b      	lsls	r3, r3, #16
 800320e:	4313      	orrs	r3, r2
 8003210:	60bb      	str	r3, [r7, #8]
      u_yaw.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003212:	68ba      	ldr	r2, [r7, #8]
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	3303      	adds	r3, #3
 8003218:	6839      	ldr	r1, [r7, #0]
 800321a:	440b      	add	r3, r1
 800321c:	781b      	ldrb	r3, [r3, #0]
 800321e:	061b      	lsls	r3, r3, #24
 8003220:	4313      	orrs	r3, r2
 8003222:	60bb      	str	r3, [r7, #8]
      this->yaw = u_yaw.real;
 8003224:	68ba      	ldr	r2, [r7, #8]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	60da      	str	r2, [r3, #12]
      offset += sizeof(this->yaw);
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	3304      	adds	r3, #4
 800322e:	617b      	str	r3, [r7, #20]
      this->coord_type =  ((uint8_t) (*(inbuffer + offset)));
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	683a      	ldr	r2, [r7, #0]
 8003234:	4413      	add	r3, r2
 8003236:	781a      	ldrb	r2, [r3, #0]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	741a      	strb	r2, [r3, #16]
      offset += sizeof(this->coord_type);
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	3301      	adds	r3, #1
 8003240:	617b      	str	r3, [r7, #20]
     return offset;
 8003242:	697b      	ldr	r3, [r7, #20]
    }
 8003244:	4618      	mov	r0, r3
 8003246:	371c      	adds	r7, #28
 8003248:	46bd      	mov	sp, r7
 800324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324e:	4770      	bx	lr

08003250 <_ZN6kduino11DesireCoord7getTypeEv>:

    const char * getType(){ return "kduino/DesireCoord"; };
 8003250:	b480      	push	{r7}
 8003252:	b083      	sub	sp, #12
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
 8003258:	4b03      	ldr	r3, [pc, #12]	; (8003268 <_ZN6kduino11DesireCoord7getTypeEv+0x18>)
 800325a:	4618      	mov	r0, r3
 800325c:	370c      	adds	r7, #12
 800325e:	46bd      	mov	sp, r7
 8003260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003264:	4770      	bx	lr
 8003266:	bf00      	nop
 8003268:	0800c540 	.word	0x0800c540

0800326c <_ZN6kduino11DesireCoord6getMD5Ev>:
    const char * getMD5(){ return "6ccf1a68453182818d4a1d0d5013bd0d"; };
 800326c:	b480      	push	{r7}
 800326e:	b083      	sub	sp, #12
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
 8003274:	4b03      	ldr	r3, [pc, #12]	; (8003284 <_ZN6kduino11DesireCoord6getMD5Ev+0x18>)
 8003276:	4618      	mov	r0, r3
 8003278:	370c      	adds	r7, #12
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr
 8003282:	bf00      	nop
 8003284:	0800c554 	.word	0x0800c554

08003288 <_ZN18EstimatorAlgorithmC1Ev>:
#define DELTA_T 0.001f

class EstimatorAlgorithm
{
public:
  EstimatorAlgorithm():
 8003288:	b580      	push	{r7, lr}
 800328a:	b082      	sub	sp, #8
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
    acc_b_(), acc_v_(), gyro_b_(), gyro_v_(), mag_b_(), mag_v_(),q_(),
    desire_attitude_roll_(0), desire_attitude_pitch_(0),
    abs_rel_(ABSOLUTE_COORD)
 8003290:	4a23      	ldr	r2, [pc, #140]	; (8003320 <_ZN18EstimatorAlgorithmC1Ev+0x98>)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	601a      	str	r2, [r3, #0]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	3304      	adds	r3, #4
 800329a:	4618      	mov	r0, r3
 800329c:	f001 fd1c 	bl	8004cd8 <_ZN7Vector3IfEC1Ev>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	3310      	adds	r3, #16
 80032a4:	4618      	mov	r0, r3
 80032a6:	f001 fd17 	bl	8004cd8 <_ZN7Vector3IfEC1Ev>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	331c      	adds	r3, #28
 80032ae:	4618      	mov	r0, r3
 80032b0:	f001 fd12 	bl	8004cd8 <_ZN7Vector3IfEC1Ev>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	3328      	adds	r3, #40	; 0x28
 80032b8:	4618      	mov	r0, r3
 80032ba:	f001 fd0d 	bl	8004cd8 <_ZN7Vector3IfEC1Ev>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	3334      	adds	r3, #52	; 0x34
 80032c2:	4618      	mov	r0, r3
 80032c4:	f001 fd08 	bl	8004cd8 <_ZN7Vector3IfEC1Ev>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	3340      	adds	r3, #64	; 0x40
 80032cc:	4618      	mov	r0, r3
 80032ce:	f001 fd03 	bl	8004cd8 <_ZN7Vector3IfEC1Ev>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	334c      	adds	r3, #76	; 0x4c
 80032d6:	4618      	mov	r0, r3
 80032d8:	f001 fd8e 	bl	8004df8 <_ZN7Matrix3IfEC1Ev>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	3370      	adds	r3, #112	; 0x70
 80032e0:	4618      	mov	r0, r3
 80032e2:	f001 fcf9 	bl	8004cd8 <_ZN7Vector3IfEC1Ev>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	337c      	adds	r3, #124	; 0x7c
 80032ea:	4618      	mov	r0, r3
 80032ec:	f7ff f9c4 	bl	8002678 <_ZN10QuaternionC1Ev>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	f04f 0200 	mov.w	r2, #0
 80032f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	f04f 0200 	mov.w	r2, #0
 8003300:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2200      	movs	r2, #0
 8003308:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
  {
    r_.identity();;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	334c      	adds	r3, #76	; 0x4c
 8003310:	4618      	mov	r0, r3
 8003312:	f001 fd88 	bl	8004e26 <_ZN7Matrix3IfE8identityEv>
  };
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	4618      	mov	r0, r3
 800331a:	3708      	adds	r7, #8
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}
 8003320:	0800c6d8 	.word	0x0800c6d8

08003324 <_ZN18EstimatorAlgorithm16coordinateUpdateEff>:

  ~EstimatorAlgorithm(){}

  /* coodrinate change  */
  void coordinateUpdate(float desire_attitude_roll, float desire_attitude_pitch)
 8003324:	b580      	push	{r7, lr}
 8003326:	b084      	sub	sp, #16
 8003328:	af00      	add	r7, sp, #0
 800332a:	60f8      	str	r0, [r7, #12]
 800332c:	ed87 0a02 	vstr	s0, [r7, #8]
 8003330:	edc7 0a01 	vstr	s1, [r7, #4]
  {
    desire_attitude_roll_ = desire_attitude_roll; 
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	68ba      	ldr	r2, [r7, #8]
 8003338:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    desire_attitude_pitch_ = desire_attitude_pitch; 
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	687a      	ldr	r2, [r7, #4]
 8003340:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

    r_.from_euler(desire_attitude_roll_, desire_attitude_pitch_, 0);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 8003356:	ed9f 1a06 	vldr	s2, [pc, #24]	; 8003370 <_ZN18EstimatorAlgorithm16coordinateUpdateEff+0x4c>
 800335a:	eef0 0a47 	vmov.f32	s1, s14
 800335e:	eeb0 0a67 	vmov.f32	s0, s15
 8003362:	4610      	mov	r0, r2
 8003364:	f006 fc9a 	bl	8009c9c <_ZN7Matrix3IfE10from_eulerEfff>
    desire_attitude_r_[5] = -sin_roll;
    desire_attitude_r_[6] = -sin_pitch;
    desire_attitude_r_[7] = cos_pitch * sin_roll;
    desire_attitude_r_[8] = cos_pitch * cos_roll;
    */
  }
 8003368:	bf00      	nop
 800336a:	3710      	adds	r7, #16
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}
 8003370:	00000000 	.word	0x00000000

08003374 <_ZN18EstimatorAlgorithm6updateERK7Vector3IfES3_S3_>:


  void update(const Vector3f& gyro, const Vector3f& acc, const Vector3f& mag)
 8003374:	b590      	push	{r4, r7, lr}
 8003376:	b085      	sub	sp, #20
 8003378:	af00      	add	r7, sp, #0
 800337a:	60f8      	str	r0, [r7, #12]
 800337c:	60b9      	str	r1, [r7, #8]
 800337e:	607a      	str	r2, [r7, #4]
 8003380:	603b      	str	r3, [r7, #0]
  {
    /* the sensor data in body frame */
    acc_b_ = acc;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	687a      	ldr	r2, [r7, #4]
 8003386:	3304      	adds	r3, #4
 8003388:	ca07      	ldmia	r2, {r0, r1, r2}
 800338a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    gyro_b_ = gyro;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	68ba      	ldr	r2, [r7, #8]
 8003392:	331c      	adds	r3, #28
 8003394:	ca07      	ldmia	r2, {r0, r1, r2}
 8003396:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    mag_b_ = mag;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	683a      	ldr	r2, [r7, #0]
 800339e:	3334      	adds	r3, #52	; 0x34
 80033a0:	ca07      	ldmia	r2, {r0, r1, r2}
 80033a2:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    /* the sensor data in virtual frame */
    acc_v_ = r_* acc_b_;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	3304      	adds	r3, #4
 80033b0:	68fc      	ldr	r4, [r7, #12]
 80033b2:	4619      	mov	r1, r3
 80033b4:	4610      	mov	r0, r2
 80033b6:	f006 fd23 	bl	8009e00 <_ZNK7Matrix3IfEmlERK7Vector3IfE>
 80033ba:	eef0 6a40 	vmov.f32	s13, s0
 80033be:	eeb0 7a60 	vmov.f32	s14, s1
 80033c2:	eef0 7a41 	vmov.f32	s15, s2
 80033c6:	edc4 6a04 	vstr	s13, [r4, #16]
 80033ca:	ed84 7a05 	vstr	s14, [r4, #20]
 80033ce:	edc4 7a06 	vstr	s15, [r4, #24]
    gyro_v_ = r_*  gyro_b_;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	331c      	adds	r3, #28
 80033dc:	68fc      	ldr	r4, [r7, #12]
 80033de:	4619      	mov	r1, r3
 80033e0:	4610      	mov	r0, r2
 80033e2:	f006 fd0d 	bl	8009e00 <_ZNK7Matrix3IfEmlERK7Vector3IfE>
 80033e6:	eef0 6a40 	vmov.f32	s13, s0
 80033ea:	eeb0 7a60 	vmov.f32	s14, s1
 80033ee:	eef0 7a41 	vmov.f32	s15, s2
 80033f2:	edc4 6a0a 	vstr	s13, [r4, #40]	; 0x28
 80033f6:	ed84 7a0b 	vstr	s14, [r4, #44]	; 0x2c
 80033fa:	edc4 7a0c 	vstr	s15, [r4, #48]	; 0x30
    mag_v_ = r_ * mag_b_;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	3334      	adds	r3, #52	; 0x34
 8003408:	68fc      	ldr	r4, [r7, #12]
 800340a:	4619      	mov	r1, r3
 800340c:	4610      	mov	r0, r2
 800340e:	f006 fcf7 	bl	8009e00 <_ZNK7Matrix3IfEmlERK7Vector3IfE>
 8003412:	eef0 6a40 	vmov.f32	s13, s0
 8003416:	eeb0 7a60 	vmov.f32	s14, s1
 800341a:	eef0 7a41 	vmov.f32	s15, s2
 800341e:	edc4 6a10 	vstr	s13, [r4, #64]	; 0x40
 8003422:	ed84 7a11 	vstr	s14, [r4, #68]	; 0x44
 8003426:	edc4 7a12 	vstr	s15, [r4, #72]	; 0x48
    arm_mat_mult_f32(&desire_attitude_R_, &acc_b_vec_, &acc_v_vec_);
    arm_mat_mult_f32(&desire_attitude_R_, &gyro_b_vec_, &gyro_v_vec_);
    arm_mat_mult_f32(&desire_attitude_R_, &mag_b_vec_, &mag_v_vec_);
    */

    estimation();
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	68f8      	ldr	r0, [r7, #12]
 8003432:	4798      	blx	r3
  }
 8003434:	bf00      	nop
 8003436:	3714      	adds	r7, #20
 8003438:	46bd      	mov	sp, r7
 800343a:	bd90      	pop	{r4, r7, pc}

0800343c <_ZN18EstimatorAlgorithm10estimationEv>:

  virtual void estimation(){}; //please implementation!
 800343c:	b480      	push	{r7}
 800343e:	b083      	sub	sp, #12
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
 8003444:	bf00      	nop
 8003446:	370c      	adds	r7, #12
 8003448:	46bd      	mov	sp, r7
 800344a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344e:	4770      	bx	lr

08003450 <_ZN18EstimatorAlgorithm9getAnglesEv>:
  static const uint8_t RELATIVE_COORD = 1;
  static const uint8_t X = 0;
  static const uint8_t Y = 1;
  static const uint8_t Z = 2;

  Vector3f getAngles(){return rpy_;}
 8003450:	b480      	push	{r7}
 8003452:	b08b      	sub	sp, #44	; 0x2c
 8003454:	af00      	add	r7, sp, #0
 8003456:	6178      	str	r0, [r7, #20]
 8003458:	697a      	ldr	r2, [r7, #20]
 800345a:	f107 031c 	add.w	r3, r7, #28
 800345e:	3270      	adds	r2, #112	; 0x70
 8003460:	ca07      	ldmia	r2, {r0, r1, r2}
 8003462:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003466:	69f9      	ldr	r1, [r7, #28]
 8003468:	6a3a      	ldr	r2, [r7, #32]
 800346a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346c:	ee06 1a90 	vmov	s13, r1
 8003470:	ee07 2a10 	vmov	s14, r2
 8003474:	ee07 3a90 	vmov	s15, r3
 8003478:	eeb0 0a66 	vmov.f32	s0, s13
 800347c:	eef0 0a47 	vmov.f32	s1, s14
 8003480:	eeb0 1a67 	vmov.f32	s2, s15
 8003484:	372c      	adds	r7, #44	; 0x2c
 8003486:	46bd      	mov	sp, r7
 8003488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348c:	4770      	bx	lr
	...

08003490 <_ZN17ComplementaryAHRSC1Ev>:
*/

class ComplementaryAHRS: public EstimatorAlgorithm
{
public:
  ComplementaryAHRS():EstimatorAlgorithm(),
 8003490:	b580      	push	{r7, lr}
 8003492:	b082      	sub	sp, #8
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
                      est_g_v_(),  est_m_v_(),
                       est_g_b_(), est_m_b_()
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	4618      	mov	r0, r3
 800349c:	f7ff fef4 	bl	8003288 <_ZN18EstimatorAlgorithmC1Ev>
 80034a0:	4a0d      	ldr	r2, [pc, #52]	; (80034d8 <_ZN17ComplementaryAHRSC1Ev+0x48>)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	601a      	str	r2, [r3, #0]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	3398      	adds	r3, #152	; 0x98
 80034aa:	4618      	mov	r0, r3
 80034ac:	f001 fc14 	bl	8004cd8 <_ZN7Vector3IfEC1Ev>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	33a4      	adds	r3, #164	; 0xa4
 80034b4:	4618      	mov	r0, r3
 80034b6:	f001 fc0f 	bl	8004cd8 <_ZN7Vector3IfEC1Ev>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	33b0      	adds	r3, #176	; 0xb0
 80034be:	4618      	mov	r0, r3
 80034c0:	f001 fc0a 	bl	8004cd8 <_ZN7Vector3IfEC1Ev>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	33bc      	adds	r3, #188	; 0xbc
 80034c8:	4618      	mov	r0, r3
 80034ca:	f001 fc05 	bl	8004cd8 <_ZN7Vector3IfEC1Ev>
    arm_mat_init_f32(&est_g_v_, 3, 1, (float32_t *)EstGv_.A);
    arm_mat_init_f32(&est_m_v_, 3, 1, (float32_t *)EstMv_.A);
    arm_mat_init_f32(&est_g_b_, 3, 1, (float32_t *)EstGb_.A);
    arm_mat_init_f32(&est_m_b_, 3, 1, (float32_t *)EstMb_.A);
    */
  }
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	4618      	mov	r0, r3
 80034d2:	3708      	adds	r7, #8
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}
 80034d8:	0800c6cc 	.word	0x0800c6cc

080034dc <_ZN17ComplementaryAHRS10estimationEv>:
    v->y +=  delta[X]  * v_tmp.z - delta[Z]   * v_tmp.x;
  }
  */

  /* core esitmation process, using body frame */
  virtual void estimation() 
 80034dc:	b590      	push	{r4, r7, lr}
 80034de:	ed2d 8b02 	vpush	{d8}
 80034e2:	b0a7      	sub	sp, #156	; 0x9c
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  {
    int  valid_acc = 0;
 80034e8:	2300      	movs	r3, #0
 80034ea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      rotateV(&EstGb_.V,delta_gyro_angle);
      rotateV(&EstMb_.V,delta_gyro_angle);
 #endif

    float acc_magnitude = acc_b_ * acc_b_; //norm?
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	1d1a      	adds	r2, r3, #4
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	3304      	adds	r3, #4
 80034f6:	4619      	mov	r1, r3
 80034f8:	4610      	mov	r0, r2
 80034fa:	f006 fa01 	bl	8009900 <_ZNK7Vector3IfEmlERKS0_>
 80034fe:	eef0 7a40 	vmov.f32	s15, s0
 8003502:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
    Vector3f est_g_b_tmp = est_g_b_;
 8003506:	687a      	ldr	r2, [r7, #4]
 8003508:	f107 0318 	add.w	r3, r7, #24
 800350c:	32b0      	adds	r2, #176	; 0xb0
 800350e:	ca07      	ldmia	r2, {r0, r1, r2}
 8003510:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    Vector3f est_m_b_tmp = est_m_b_;
 8003514:	687a      	ldr	r2, [r7, #4]
 8003516:	f107 030c 	add.w	r3, r7, #12
 800351a:	32bc      	adds	r2, #188	; 0xbc
 800351c:	ca07      	ldmia	r2, {r0, r1, r2}
 800351e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    est_g_b_ += (est_g_b_tmp % (gyro_b_  * (DELTA_T * GYRO_AMP) )); //rotation by gyro
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	f103 04b0 	add.w	r4, r3, #176	; 0xb0
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	331c      	adds	r3, #28
 800352c:	ed9f 0a38 	vldr	s0, [pc, #224]	; 8003610 <_ZN17ComplementaryAHRS10estimationEv+0x134>
 8003530:	4618      	mov	r0, r3
 8003532:	f006 fad5 	bl	8009ae0 <_ZNK7Vector3IfEmlEf>
 8003536:	eef0 6a40 	vmov.f32	s13, s0
 800353a:	eeb0 7a60 	vmov.f32	s14, s1
 800353e:	eef0 7a41 	vmov.f32	s15, s2
 8003542:	edc7 6a0c 	vstr	s13, [r7, #48]	; 0x30
 8003546:	ed87 7a0d 	vstr	s14, [r7, #52]	; 0x34
 800354a:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
 800354e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003552:	f107 0318 	add.w	r3, r7, #24
 8003556:	4611      	mov	r1, r2
 8003558:	4618      	mov	r0, r3
 800355a:	f006 f971 	bl	8009840 <_ZNK7Vector3IfErmERKS0_>
 800355e:	eef0 6a40 	vmov.f32	s13, s0
 8003562:	eeb0 7a60 	vmov.f32	s14, s1
 8003566:	eef0 7a41 	vmov.f32	s15, s2
 800356a:	edc7 6a09 	vstr	s13, [r7, #36]	; 0x24
 800356e:	ed87 7a0a 	vstr	s14, [r7, #40]	; 0x28
 8003572:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
 8003576:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800357a:	4619      	mov	r1, r3
 800357c:	4620      	mov	r0, r4
 800357e:	f006 fa41 	bl	8009a04 <_ZN7Vector3IfEpLERKS0_>
    est_m_b_ += (est_m_b_tmp % (gyro_b_  * (DELTA_T * GYRO_AMP) )); //rotation by gyro
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	f103 04bc 	add.w	r4, r3, #188	; 0xbc
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	331c      	adds	r3, #28
 800358c:	ed9f 0a20 	vldr	s0, [pc, #128]	; 8003610 <_ZN17ComplementaryAHRS10estimationEv+0x134>
 8003590:	4618      	mov	r0, r3
 8003592:	f006 faa5 	bl	8009ae0 <_ZNK7Vector3IfEmlEf>
 8003596:	eef0 6a40 	vmov.f32	s13, s0
 800359a:	eeb0 7a60 	vmov.f32	s14, s1
 800359e:	eef0 7a41 	vmov.f32	s15, s2
 80035a2:	edc7 6a12 	vstr	s13, [r7, #72]	; 0x48
 80035a6:	ed87 7a13 	vstr	s14, [r7, #76]	; 0x4c
 80035aa:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
 80035ae:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80035b2:	f107 030c 	add.w	r3, r7, #12
 80035b6:	4611      	mov	r1, r2
 80035b8:	4618      	mov	r0, r3
 80035ba:	f006 f941 	bl	8009840 <_ZNK7Vector3IfErmERKS0_>
 80035be:	eef0 6a40 	vmov.f32	s13, s0
 80035c2:	eeb0 7a60 	vmov.f32	s14, s1
 80035c6:	eef0 7a41 	vmov.f32	s15, s2
 80035ca:	edc7 6a0f 	vstr	s13, [r7, #60]	; 0x3c
 80035ce:	ed87 7a10 	vstr	s14, [r7, #64]	; 0x40
 80035d2:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
 80035d6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80035da:	4619      	mov	r1, r3
 80035dc:	4620      	mov	r0, r4
 80035de:	f006 fa11 	bl	8009a04 <_ZN7Vector3IfEpLERKS0_>



    if( G_MIN < acc_magnitude && acc_magnitude < G_MAX) valid_acc = 1;
 80035e2:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80035e6:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8003614 <_ZN17ComplementaryAHRS10estimationEv+0x138>
 80035ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80035ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035f2:	dd13      	ble.n	800361c <_ZN17ComplementaryAHRS10estimationEv+0x140>
 80035f4:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80035f8:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8003618 <_ZN17ComplementaryAHRS10estimationEv+0x13c>
 80035fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003600:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003604:	d50a      	bpl.n	800361c <_ZN17ComplementaryAHRS10estimationEv+0x140>
 8003606:	2301      	movs	r3, #1
 8003608:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800360c:	e009      	b.n	8003622 <_ZN17ComplementaryAHRS10estimationEv+0x146>
 800360e:	bf00      	nop
 8003610:	3a955b47 	.word	0x3a955b47
 8003614:	42900000 	.word	0x42900000
 8003618:	43050000 	.word	0x43050000
    else valid_acc = 0;
 800361c:	2300      	movs	r3, #0
 800361e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    rpy_[Z] = atan2f( EstMv_.V.z * EstGv_.V.y - EstMv_.V.y * EstGv_.V.z,
                      EstMv_.V.x * invG * sqGY_sqGZ  - (EstMv_.V.y * EstGv_.V.y + EstMv_.V.z * EstGv_.V.z) * invG * EstGv_.V.x ) ;//+ MAG_DECLINIATION;
#endif


    est_g_b_tmp = est_g_b_;
 8003622:	687a      	ldr	r2, [r7, #4]
 8003624:	f107 0318 	add.w	r3, r7, #24
 8003628:	32b0      	adds	r2, #176	; 0xb0
 800362a:	ca07      	ldmia	r2, {r0, r1, r2}
 800362c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    est_m_b_tmp = est_m_b_;
 8003630:	687a      	ldr	r2, [r7, #4]
 8003632:	f107 030c 	add.w	r3, r7, #12
 8003636:	32bc      	adds	r2, #188	; 0xbc
 8003638:	ca07      	ldmia	r2, {r0, r1, r2}
 800363a:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    if ( valid_acc == 1 && cnt == 0)
 800363e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003642:	2b01      	cmp	r3, #1
 8003644:	d13e      	bne.n	80036c4 <_ZN17ComplementaryAHRS10estimationEv+0x1e8>
 8003646:	4bb4      	ldr	r3, [pc, #720]	; (8003918 <_ZN17ComplementaryAHRS10estimationEv+0x43c>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d13a      	bne.n	80036c4 <_ZN17ComplementaryAHRS10estimationEv+0x1e8>
      est_g_b_ = (est_g_b_tmp * GYR_CMPF_FACTOR + acc_b_) * INV_GYR_CMPF_FACTOR;
 800364e:	f107 0318 	add.w	r3, r7, #24
 8003652:	ed9f 0ab2 	vldr	s0, [pc, #712]	; 800391c <_ZN17ComplementaryAHRS10estimationEv+0x440>
 8003656:	4618      	mov	r0, r3
 8003658:	f006 fa42 	bl	8009ae0 <_ZNK7Vector3IfEmlEf>
 800365c:	eef0 6a40 	vmov.f32	s13, s0
 8003660:	eeb0 7a60 	vmov.f32	s14, s1
 8003664:	eef0 7a41 	vmov.f32	s15, s2
 8003668:	edc7 6a18 	vstr	s13, [r7, #96]	; 0x60
 800366c:	ed87 7a19 	vstr	s14, [r7, #100]	; 0x64
 8003670:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	1d1a      	adds	r2, r3, #4
 8003678:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800367c:	4611      	mov	r1, r2
 800367e:	4618      	mov	r0, r3
 8003680:	f006 fa6e 	bl	8009b60 <_ZNK7Vector3IfEplERKS0_>
 8003684:	eef0 6a40 	vmov.f32	s13, s0
 8003688:	eeb0 7a60 	vmov.f32	s14, s1
 800368c:	eef0 7a41 	vmov.f32	s15, s2
 8003690:	edc7 6a15 	vstr	s13, [r7, #84]	; 0x54
 8003694:	ed87 7a16 	vstr	s14, [r7, #88]	; 0x58
 8003698:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
 800369c:	687c      	ldr	r4, [r7, #4]
 800369e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80036a2:	ed9f 0a9f 	vldr	s0, [pc, #636]	; 8003920 <_ZN17ComplementaryAHRS10estimationEv+0x444>
 80036a6:	4618      	mov	r0, r3
 80036a8:	f006 fa1a 	bl	8009ae0 <_ZNK7Vector3IfEmlEf>
 80036ac:	eef0 6a40 	vmov.f32	s13, s0
 80036b0:	eeb0 7a60 	vmov.f32	s14, s1
 80036b4:	eef0 7a41 	vmov.f32	s15, s2
 80036b8:	edc4 6a2c 	vstr	s13, [r4, #176]	; 0xb0
 80036bc:	ed84 7a2d 	vstr	s14, [r4, #180]	; 0xb4
 80036c0:	edc4 7a2e 	vstr	s15, [r4, #184]	; 0xb8
    est_m_b_ = (est_m_b_tmp * GYR_CMPFM_FACTOR  + mag_b_) * INV_GYR_CMPFM_FACTOR;
 80036c4:	f107 030c 	add.w	r3, r7, #12
 80036c8:	ed9f 0a96 	vldr	s0, [pc, #600]	; 8003924 <_ZN17ComplementaryAHRS10estimationEv+0x448>
 80036cc:	4618      	mov	r0, r3
 80036ce:	f006 fa07 	bl	8009ae0 <_ZNK7Vector3IfEmlEf>
 80036d2:	eef0 6a40 	vmov.f32	s13, s0
 80036d6:	eeb0 7a60 	vmov.f32	s14, s1
 80036da:	eef0 7a41 	vmov.f32	s15, s2
 80036de:	edc7 6a1e 	vstr	s13, [r7, #120]	; 0x78
 80036e2:	ed87 7a1f 	vstr	s14, [r7, #124]	; 0x7c
 80036e6:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80036f0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80036f4:	4611      	mov	r1, r2
 80036f6:	4618      	mov	r0, r3
 80036f8:	f006 fa32 	bl	8009b60 <_ZNK7Vector3IfEplERKS0_>
 80036fc:	eef0 6a40 	vmov.f32	s13, s0
 8003700:	eeb0 7a60 	vmov.f32	s14, s1
 8003704:	eef0 7a41 	vmov.f32	s15, s2
 8003708:	edc7 6a1b 	vstr	s13, [r7, #108]	; 0x6c
 800370c:	ed87 7a1c 	vstr	s14, [r7, #112]	; 0x70
 8003710:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
 8003714:	687c      	ldr	r4, [r7, #4]
 8003716:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800371a:	ed9f 0a83 	vldr	s0, [pc, #524]	; 8003928 <_ZN17ComplementaryAHRS10estimationEv+0x44c>
 800371e:	4618      	mov	r0, r3
 8003720:	f006 f9de 	bl	8009ae0 <_ZNK7Vector3IfEmlEf>
 8003724:	eef0 6a40 	vmov.f32	s13, s0
 8003728:	eeb0 7a60 	vmov.f32	s14, s1
 800372c:	eef0 7a41 	vmov.f32	s15, s2
 8003730:	edc4 6a2f 	vstr	s13, [r4, #188]	; 0xbc
 8003734:	ed84 7a30 	vstr	s14, [r4, #192]	; 0xc0
 8003738:	edc4 7a31 	vstr	s15, [r4, #196]	; 0xc4

    est_g_v_ = r_ * est_g_b_;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	33b0      	adds	r3, #176	; 0xb0
 8003746:	687c      	ldr	r4, [r7, #4]
 8003748:	4619      	mov	r1, r3
 800374a:	4610      	mov	r0, r2
 800374c:	f006 fb58 	bl	8009e00 <_ZNK7Matrix3IfEmlERK7Vector3IfE>
 8003750:	eef0 6a40 	vmov.f32	s13, s0
 8003754:	eeb0 7a60 	vmov.f32	s14, s1
 8003758:	eef0 7a41 	vmov.f32	s15, s2
 800375c:	edc4 6a26 	vstr	s13, [r4, #152]	; 0x98
 8003760:	ed84 7a27 	vstr	s14, [r4, #156]	; 0x9c
 8003764:	edc4 7a28 	vstr	s15, [r4, #160]	; 0xa0
    est_m_v_ = r_ * est_m_b_;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	33bc      	adds	r3, #188	; 0xbc
 8003772:	687c      	ldr	r4, [r7, #4]
 8003774:	4619      	mov	r1, r3
 8003776:	4610      	mov	r0, r2
 8003778:	f006 fb42 	bl	8009e00 <_ZNK7Matrix3IfEmlERK7Vector3IfE>
 800377c:	eef0 6a40 	vmov.f32	s13, s0
 8003780:	eeb0 7a60 	vmov.f32	s14, s1
 8003784:	eef0 7a41 	vmov.f32	s15, s2
 8003788:	edc4 6a29 	vstr	s13, [r4, #164]	; 0xa4
 800378c:	ed84 7a2a 	vstr	s14, [r4, #168]	; 0xa8
 8003790:	edc4 7a2b 	vstr	s15, [r4, #172]	; 0xac

    // Attitude of the estimated vector
    float sq_g_x_sq_g_z = est_g_v_.x * est_g_v_.x + est_g_v_.z * est_g_v_.z;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 80037a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 80037b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80037b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037b8:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
    float sq_g_y_sq_g_z = est_g_v_.y * est_g_v_.y + est_g_v_.z * est_g_v_.z;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	ed93 7a27 	vldr	s14, [r3, #156]	; 0x9c
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 80037c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 80037d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80037dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037e0:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
    float invG = inv_sqrt(sq_g_x_sq_g_z + est_g_v_.y * est_g_v_.y);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	ed93 7a27 	vldr	s14, [r3, #156]	; 0x9c
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 80037f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80037f4:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80037f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037fc:	eeb0 0a67 	vmov.f32	s0, s15
 8003800:	f006 fb7c 	bl	8009efc <_Z8inv_sqrtf>
 8003804:	eef0 7a40 	vmov.f32	s15, s0
 8003808:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84

    rpy_.x = atan2f(est_g_v_.y , est_g_v_.z);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
 8003818:	eef0 0a47 	vmov.f32	s1, s14
 800381c:	eeb0 0a67 	vmov.f32	s0, s15
 8003820:	f007 f958 	bl	800aad4 <atan2f>
 8003824:	eef0 7a40 	vmov.f32	s15, s0
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
    rpy_.y = atan2f(-est_g_v_.x , inv_sqrt(sq_g_y_sq_g_z)* sq_g_y_sq_g_z);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 8003834:	eeb1 8a67 	vneg.f32	s16, s15
 8003838:	ed97 0a22 	vldr	s0, [r7, #136]	; 0x88
 800383c:	f006 fb5e 	bl	8009efc <_Z8inv_sqrtf>
 8003840:	eeb0 7a40 	vmov.f32	s14, s0
 8003844:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8003848:	ee67 7a27 	vmul.f32	s15, s14, s15
 800384c:	eef0 0a67 	vmov.f32	s1, s15
 8003850:	eeb0 0a48 	vmov.f32	s0, s16
 8003854:	f007 f93e 	bl	800aad4 <atan2f>
 8003858:	eef0 7a40 	vmov.f32	s15, s0
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
    rpy_.z = atan2f( est_m_v_.z * est_g_v_.y - est_m_v_.y * est_g_v_.z,
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	ed93 7a2b 	vldr	s14, [r3, #172]	; 0xac
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800386e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	edd3 6a2a 	vldr	s13, [r3, #168]	; 0xa8
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 800387e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003882:	ee77 5a67 	vsub.f32	s11, s14, s15
                      est_m_v_.x * invG * sq_g_y_sq_g_z  - (est_m_v_.y * est_g_v_.y + est_m_v_.z * est_g_v_.z) * invG * est_g_v_.x ) ;//+ MAG_DECLINIATION;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	ed93 7a29 	vldr	s14, [r3, #164]	; 0xa4
 800388c:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8003890:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003894:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8003898:	ee27 7a27 	vmul.f32	s14, s14, s15
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	edd3 6a2a 	vldr	s13, [r3, #168]	; 0xa8
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 80038a8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	ed93 6a2b 	vldr	s12, [r3, #172]	; 0xac
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 80038b8:	ee66 7a27 	vmul.f32	s15, s12, s15
 80038bc:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80038c0:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80038c4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 80038ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
    rpy_.z = atan2f( est_m_v_.z * est_g_v_.y - est_m_v_.y * est_g_v_.z,
 80038d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80038d6:	eef0 0a67 	vmov.f32	s1, s15
 80038da:	eeb0 0a65 	vmov.f32	s0, s11
 80038de:	f007 f8f9 	bl	800aad4 <atan2f>
 80038e2:	eef0 7a40 	vmov.f32	s15, s0
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
     //********************************************************************************:
     //** refrence1: https://sites.google.com/site/myimuestimationexperience/sensors/magnetometer
     //** refrence2: http://uav.xenocross.net/hdg.html
     //********************************************************************************
    /* update */
    if(valid_acc) cnt++;
 80038ec:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d004      	beq.n	80038fe <_ZN17ComplementaryAHRS10estimationEv+0x422>
 80038f4:	4b08      	ldr	r3, [pc, #32]	; (8003918 <_ZN17ComplementaryAHRS10estimationEv+0x43c>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	3301      	adds	r3, #1
 80038fa:	4a07      	ldr	r2, [pc, #28]	; (8003918 <_ZN17ComplementaryAHRS10estimationEv+0x43c>)
 80038fc:	6013      	str	r3, [r2, #0]
    if(cnt == PRESCLAER_ACC) cnt = 0;
 80038fe:	4b06      	ldr	r3, [pc, #24]	; (8003918 <_ZN17ComplementaryAHRS10estimationEv+0x43c>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	2b03      	cmp	r3, #3
 8003904:	d102      	bne.n	800390c <_ZN17ComplementaryAHRS10estimationEv+0x430>
 8003906:	4b04      	ldr	r3, [pc, #16]	; (8003918 <_ZN17ComplementaryAHRS10estimationEv+0x43c>)
 8003908:	2200      	movs	r2, #0
 800390a:	601a      	str	r2, [r3, #0]
  }
 800390c:	bf00      	nop
 800390e:	379c      	adds	r7, #156	; 0x9c
 8003910:	46bd      	mov	sp, r7
 8003912:	ecbd 8b02 	vpop	{d8}
 8003916:	bd90      	pop	{r4, r7, pc}
 8003918:	20000a78 	.word	0x20000a78
 800391c:	44160000 	.word	0x44160000
 8003920:	3ada1700 	.word	0x3ada1700
 8003924:	437a0000 	.word	0x437a0000
 8003928:	3b828cc0 	.word	0x3b828cc0

0800392c <_ZN16AttitudeEstimateC1Ev>:
#define ESTIMATE_TYPE COMPLEMENTARY

class AttitudeEstimate
{
public:
  AttitudeEstimate(){}
 800392c:	b580      	push	{r7, lr}
 800392e:	b082      	sub	sp, #8
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	3308      	adds	r3, #8
 8003938:	4618      	mov	r0, r3
 800393a:	f7ff f88b 	bl	8002a54 <_ZN6kduino3ImuC1Ev>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	4618      	mov	r0, r3
 8003942:	3708      	adds	r7, #8
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}

08003948 <_ZN16AttitudeEstimateD1Ev>:
  ~AttitudeEstimate(){}
 8003948:	b480      	push	{r7}
 800394a:	b083      	sub	sp, #12
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	4618      	mov	r0, r3
 8003954:	370c      	adds	r7, #12
 8003956:	46bd      	mov	sp, r7
 8003958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395c:	4770      	bx	lr
	...

08003960 <_ZN16AttitudeEstimate4initEP3IMUPN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EEE>:
  static const uint8_t PUB_PRESCALER = 1;
  //This is hHard coding, 1000Hz /2 = 500Hz

  static const uint8_t PUB_HZ = 2; // 500Hz

  void init(IMU* imu, ros::NodeHandle* nh)
 8003960:	b590      	push	{r4, r7, lr}
 8003962:	b089      	sub	sp, #36	; 0x24
 8003964:	af02      	add	r7, sp, #8
 8003966:	60f8      	str	r0, [r7, #12]
 8003968:	60b9      	str	r1, [r7, #8]
 800396a:	607a      	str	r2, [r7, #4]
  {
    nh_ = nh;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	687a      	ldr	r2, [r7, #4]
 8003970:	601a      	str	r2, [r3, #0]

    imu_pub_  = new ros::Publisher("imu", &imu_msg_);
 8003972:	2014      	movs	r0, #20
 8003974:	f006 fbaf 	bl	800a0d6 <_Znwj>
 8003978:	4603      	mov	r3, r0
 800397a:	461c      	mov	r4, r3
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	f103 0208 	add.w	r2, r3, #8
 8003982:	2300      	movs	r3, #0
 8003984:	4923      	ldr	r1, [pc, #140]	; (8003a14 <_ZN16AttitudeEstimate4initEP3IMUPN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EEE+0xb4>)
 8003986:	4620      	mov	r0, r4
 8003988:	f7fe fc5a 	bl	8002240 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	605c      	str	r4, [r3, #4]
    nh_->advertise(*imu_pub_);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	4619      	mov	r1, r3
 800399a:	4610      	mov	r0, r2
 800399c:	f001 f9ee 	bl	8004d7c <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE9advertiseERNS_9PublisherE>

    //desire_coord_sub_ = new ros::Subscriber2<aerial_robot_base::DesireCoord, AttitudeEstimate> ("/desire_coordinate", &AttitudeEstimate::desireCoordCallback, this );
    //nh_->subscribe<aerial_robot_base::DesireCoord, AttitudeEstimate>(*desire_coord_sub_);
    desire_coord_sub_ = new ros::Subscriber2<kduino::DesireCoord, AttitudeEstimate> ("/desire_coordinate", &AttitudeEstimate::desireCoordCallback, this );
 80039a0:	2030      	movs	r0, #48	; 0x30
 80039a2:	f006 fb98 	bl	800a0d6 <_Znwj>
 80039a6:	4603      	mov	r3, r0
 80039a8:	461c      	mov	r4, r3
 80039aa:	4b1b      	ldr	r3, [pc, #108]	; (8003a18 <_ZN16AttitudeEstimate4initEP3IMUPN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EEE+0xb8>)
 80039ac:	613b      	str	r3, [r7, #16]
 80039ae:	2300      	movs	r3, #0
 80039b0:	617b      	str	r3, [r7, #20]
 80039b2:	2301      	movs	r3, #1
 80039b4:	9301      	str	r3, [sp, #4]
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	9300      	str	r3, [sp, #0]
 80039ba:	f107 0310 	add.w	r3, r7, #16
 80039be:	cb0c      	ldmia	r3, {r2, r3}
 80039c0:	4916      	ldr	r1, [pc, #88]	; (8003a1c <_ZN16AttitudeEstimate4initEP3IMUPN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EEE+0xbc>)
 80039c2:	4620      	mov	r0, r4
 80039c4:	f001 fa70 	bl	8004ea8 <_ZN3ros11Subscriber2IN6kduino11DesireCoordE16AttitudeEstimateEC1EPKcMS3_FvRKS2_EPS3_i>
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	645c      	str	r4, [r3, #68]	; 0x44
    nh_->subscribe<kduino::DesireCoord, AttitudeEstimate>(*desire_coord_sub_);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039d4:	4619      	mov	r1, r3
 80039d6:	4610      	mov	r0, r2
 80039d8:	f001 fa92 	bl	8004f00 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE9subscribeIN6kduino11DesireCoordE16AttitudeEstimateEEbRNS_11Subscriber2IT_T0_EE>

    imu_ = imu;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	68ba      	ldr	r2, [r7, #8]
 80039e0:	64da      	str	r2, [r3, #76]	; 0x4c

    last_pub_time_ = HAL_GetTick();
 80039e2:	f003 ff95 	bl	8007910 <HAL_GetTick>
 80039e6:	4602      	mov	r2, r0
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	651a      	str	r2, [r3, #80]	; 0x50

#if ESTIMATE_TYPE == COMPLEMENTARY
    estimator_ = new ComplementaryAHRS();
 80039ec:	20c8      	movs	r0, #200	; 0xc8
 80039ee:	f006 fb72 	bl	800a0d6 <_Znwj>
 80039f2:	4603      	mov	r3, r0
 80039f4:	461c      	mov	r4, r3
 80039f6:	4620      	mov	r0, r4
 80039f8:	f7ff fd4a 	bl	8003490 <_ZN17ComplementaryAHRSC1Ev>
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	649c      	str	r4, [r3, #72]	; 0x48
#elif ESTIMATE_TYPE == MADWICK
    estimator_ = new MadgwickAHRS();
#else 
#error "no instance for estimator"
#endif
  }
 8003a00:	e004      	b.n	8003a0c <_ZN16AttitudeEstimate4initEP3IMUPN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EEE+0xac>
    desire_coord_sub_ = new ros::Subscriber2<kduino::DesireCoord, AttitudeEstimate> ("/desire_coordinate", &AttitudeEstimate::desireCoordCallback, this );
 8003a02:	4620      	mov	r0, r4
 8003a04:	f006 fb39 	bl	800a07a <_ZdlPv>
 8003a08:	f006 fb76 	bl	800a0f8 <__cxa_end_cleanup>
  }
 8003a0c:	371c      	adds	r7, #28
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd90      	pop	{r4, r7, pc}
 8003a12:	bf00      	nop
 8003a14:	0800c578 	.word	0x0800c578
 8003a18:	08003c79 	.word	0x08003c79
 8003a1c:	0800c57c 	.word	0x0800c57c

08003a20 <_ZN16AttitudeEstimate6updateEv>:

  void update()
 8003a20:	b590      	push	{r4, r7, lr}
 8003a22:	b08d      	sub	sp, #52	; 0x34
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  {

    if(imu_->getUpdate())
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f7fe febd 	bl	80027ac <_ZN3IMU9getUpdateEv>
 8003a32:	4603      	mov	r3, r0
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d05f      	beq.n	8003af8 <_ZN16AttitudeEstimate6updateEv+0xd8>
      {
        /* attitude estimation */
        if(!imu_->getCalibrated()) return;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f003 fa5b 	bl	8006ef8 <_ZN3IMU13getCalibratedEv>
 8003a42:	4603      	mov	r3, r0
 8003a44:	f083 0301 	eor.w	r3, r3, #1
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d153      	bne.n	8003af6 <_ZN16AttitudeEstimate6updateEv+0xd6>
        estimator_->update(imu_->getGyro(), imu_->getAcc(), imu_->getMag());
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a56:	4618      	mov	r0, r3
 8003a58:	f7fe fee4 	bl	8002824 <_ZN3IMU7getGyroEv>
 8003a5c:	eef0 6a40 	vmov.f32	s13, s0
 8003a60:	eeb0 7a60 	vmov.f32	s14, s1
 8003a64:	eef0 7a41 	vmov.f32	s15, s2
 8003a68:	edc7 6a03 	vstr	s13, [r7, #12]
 8003a6c:	ed87 7a04 	vstr	s14, [r7, #16]
 8003a70:	edc7 7a05 	vstr	s15, [r7, #20]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f7fe feb4 	bl	80027e6 <_ZN3IMU6getAccEv>
 8003a7e:	eef0 6a40 	vmov.f32	s13, s0
 8003a82:	eeb0 7a60 	vmov.f32	s14, s1
 8003a86:	eef0 7a41 	vmov.f32	s15, s2
 8003a8a:	edc7 6a06 	vstr	s13, [r7, #24]
 8003a8e:	ed87 7a07 	vstr	s14, [r7, #28]
 8003a92:	edc7 7a08 	vstr	s15, [r7, #32]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f7fe fee1 	bl	8002862 <_ZN3IMU6getMagEv>
 8003aa0:	eef0 6a40 	vmov.f32	s13, s0
 8003aa4:	eeb0 7a60 	vmov.f32	s14, s1
 8003aa8:	eef0 7a41 	vmov.f32	s15, s2
 8003aac:	edc7 6a09 	vstr	s13, [r7, #36]	; 0x24
 8003ab0:	ed87 7a0a 	vstr	s14, [r7, #40]	; 0x28
 8003ab4:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
 8003ab8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003abc:	f107 0218 	add.w	r2, r7, #24
 8003ac0:	f107 010c 	add.w	r1, r7, #12
 8003ac4:	4620      	mov	r0, r4
 8003ac6:	f7ff fc55 	bl	8003374 <_ZN18EstimatorAlgorithm6updateERK7Vector3IfES3_S3_>

        /* send message to ros*/
        if(nh_->connected())  publish();
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	3308      	adds	r3, #8
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	687a      	ldr	r2, [r7, #4]
 8003ad6:	6812      	ldr	r2, [r2, #0]
 8003ad8:	4610      	mov	r0, r2
 8003ada:	4798      	blx	r3
 8003adc:	4603      	mov	r3, r0
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d002      	beq.n	8003ae8 <_ZN16AttitudeEstimate6updateEv+0xc8>
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f000 f80b 	bl	8003afe <_ZN16AttitudeEstimate7publishEv>

        /* reset update status of imu*/
        imu_->setUpdate(false);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003aec:	2100      	movs	r1, #0
 8003aee:	4618      	mov	r0, r3
 8003af0:	f7fe fe69 	bl	80027c6 <_ZN3IMU9setUpdateEb>
 8003af4:	e000      	b.n	8003af8 <_ZN16AttitudeEstimate6updateEv+0xd8>
        if(!imu_->getCalibrated()) return;
 8003af6:	bf00      	nop
      }

  }
 8003af8:	3734      	adds	r7, #52	; 0x34
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd90      	pop	{r4, r7, pc}

08003afe <_ZN16AttitudeEstimate7publishEv>:

  /* send message via ros protocal */
  void publish()
 8003afe:	b590      	push	{r4, r7, lr}
 8003b00:	b093      	sub	sp, #76	; 0x4c
 8003b02:	af00      	add	r7, sp, #0
 8003b04:	60f8      	str	r0, [r7, #12]
  {
    uint32_t now_time = HAL_GetTick();
 8003b06:	f003 ff03 	bl	8007910 <HAL_GetTick>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	643b      	str	r3, [r7, #64]	; 0x40
    if( now_time - last_pub_time_ >= PUB_INTERVAL)
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b12:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	f240 80aa 	bls.w	8003c70 <_ZN16AttitudeEstimate7publishEv+0x172>
      {
        last_pub_time_ = now_time;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003b20:	651a      	str	r2, [r3, #80]	; 0x50
        imu_msg_.stamp = nh_->now();
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	68fc      	ldr	r4, [r7, #12]
 8003b28:	463b      	mov	r3, r7
 8003b2a:	4611      	mov	r1, r2
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f001 f8eb 	bl	8004d08 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE3nowEv>
 8003b32:	f104 030c 	add.w	r3, r4, #12
 8003b36:	463a      	mov	r2, r7
 8003b38:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003b3c:	e883 0003 	stmia.w	r3, {r0, r1}
        for(int i = 0; i < 3 ; i ++)
 8003b40:	2300      	movs	r3, #0
 8003b42:	647b      	str	r3, [r7, #68]	; 0x44
 8003b44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b46:	2b02      	cmp	r3, #2
 8003b48:	f300 808a 	bgt.w	8003c60 <_ZN16AttitudeEstimate7publishEv+0x162>
#if 0 //virtual coord
            imu_msg_.gyro_data[i] = estimator_->getGyroV()[i];
            imu_msg_.mag_data[i] = estimator_->getMagV()[i];
            imu_msg_.acc_data[i] = estimator_->getAccV()[i];
#else //raw data
            imu_msg_.gyro_data[i] = imu_->getGyro()[i];
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b50:	4618      	mov	r0, r3
 8003b52:	f7fe fe67 	bl	8002824 <_ZN3IMU7getGyroEv>
 8003b56:	eef0 6a40 	vmov.f32	s13, s0
 8003b5a:	eeb0 7a60 	vmov.f32	s14, s1
 8003b5e:	eef0 7a41 	vmov.f32	s15, s2
 8003b62:	edc7 6a04 	vstr	s13, [r7, #16]
 8003b66:	ed87 7a05 	vstr	s14, [r7, #20]
 8003b6a:	edc7 7a06 	vstr	s15, [r7, #24]
 8003b6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b70:	b2da      	uxtb	r2, r3
 8003b72:	f107 0310 	add.w	r3, r7, #16
 8003b76:	4611      	mov	r1, r2
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f001 f982 	bl	8004e82 <_ZN7Vector3IfEixEh>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	68f9      	ldr	r1, [r7, #12]
 8003b84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b86:	3308      	adds	r3, #8
 8003b88:	009b      	lsls	r3, r3, #2
 8003b8a:	440b      	add	r3, r1
 8003b8c:	601a      	str	r2, [r3, #0]
            imu_msg_.mag_data[i] = imu_->getMag()[i];
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b92:	4618      	mov	r0, r3
 8003b94:	f7fe fe65 	bl	8002862 <_ZN3IMU6getMagEv>
 8003b98:	eef0 6a40 	vmov.f32	s13, s0
 8003b9c:	eeb0 7a60 	vmov.f32	s14, s1
 8003ba0:	eef0 7a41 	vmov.f32	s15, s2
 8003ba4:	edc7 6a07 	vstr	s13, [r7, #28]
 8003ba8:	ed87 7a08 	vstr	s14, [r7, #32]
 8003bac:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 8003bb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003bb2:	b2da      	uxtb	r2, r3
 8003bb4:	f107 031c 	add.w	r3, r7, #28
 8003bb8:	4611      	mov	r1, r2
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f001 f961 	bl	8004e82 <_ZN7Vector3IfEixEh>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	68f9      	ldr	r1, [r7, #12]
 8003bc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003bc8:	330a      	adds	r3, #10
 8003bca:	009b      	lsls	r3, r3, #2
 8003bcc:	440b      	add	r3, r1
 8003bce:	3304      	adds	r3, #4
 8003bd0:	601a      	str	r2, [r3, #0]
            imu_msg_.acc_data[i] = imu_->getAcc()[i];
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f7fe fe05 	bl	80027e6 <_ZN3IMU6getAccEv>
 8003bdc:	eef0 6a40 	vmov.f32	s13, s0
 8003be0:	eeb0 7a60 	vmov.f32	s14, s1
 8003be4:	eef0 7a41 	vmov.f32	s15, s2
 8003be8:	edc7 6a0a 	vstr	s13, [r7, #40]	; 0x28
 8003bec:	ed87 7a0b 	vstr	s14, [r7, #44]	; 0x2c
 8003bf0:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 8003bf4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003bf6:	b2da      	uxtb	r2, r3
 8003bf8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003bfc:	4611      	mov	r1, r2
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f001 f93f 	bl	8004e82 <_ZN7Vector3IfEixEh>
 8003c04:	4603      	mov	r3, r0
 8003c06:	681a      	ldr	r2, [r3, #0]
 8003c08:	68f9      	ldr	r1, [r7, #12]
 8003c0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c0c:	3304      	adds	r3, #4
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	440b      	add	r3, r1
 8003c12:	3304      	adds	r3, #4
 8003c14:	601a      	str	r2, [r3, #0]
#endif
            imu_msg_.angles[i] = estimator_->getAngles()[i];
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f7ff fc18 	bl	8003450 <_ZN18EstimatorAlgorithm9getAnglesEv>
 8003c20:	eef0 6a40 	vmov.f32	s13, s0
 8003c24:	eeb0 7a60 	vmov.f32	s14, s1
 8003c28:	eef0 7a41 	vmov.f32	s15, s2
 8003c2c:	edc7 6a0d 	vstr	s13, [r7, #52]	; 0x34
 8003c30:	ed87 7a0e 	vstr	s14, [r7, #56]	; 0x38
 8003c34:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
 8003c38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c3a:	b2da      	uxtb	r2, r3
 8003c3c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003c40:	4611      	mov	r1, r2
 8003c42:	4618      	mov	r0, r3
 8003c44:	f001 f91d 	bl	8004e82 <_ZN7Vector3IfEixEh>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	68f9      	ldr	r1, [r7, #12]
 8003c4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c50:	330e      	adds	r3, #14
 8003c52:	009b      	lsls	r3, r3, #2
 8003c54:	440b      	add	r3, r1
 8003c56:	601a      	str	r2, [r3, #0]
        for(int i = 0; i < 3 ; i ++)
 8003c58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c5a:	3301      	adds	r3, #1
 8003c5c:	647b      	str	r3, [r7, #68]	; 0x44
 8003c5e:	e771      	b.n	8003b44 <_ZN16AttitudeEstimate7publishEv+0x46>
          }

        imu_pub_->publish(&imu_msg_);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	685a      	ldr	r2, [r3, #4]
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	3308      	adds	r3, #8
 8003c68:	4619      	mov	r1, r3
 8003c6a:	4610      	mov	r0, r2
 8003c6c:	f7fe faff 	bl	800226e <_ZN3ros9Publisher7publishEPKNS_3MsgE>
      }
  }
 8003c70:	bf00      	nop
 8003c72:	374c      	adds	r7, #76	; 0x4c
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd90      	pop	{r4, r7, pc}

08003c78 <_ZN16AttitudeEstimate19desireCoordCallbackERKN6kduino11DesireCoordE>:
  IMU* imu_;

  uint32_t last_pub_time_;

  //void desireCoordCallback(const aerial_robot_base::DesireCoord& coord_msg)
  void desireCoordCallback(const kduino::DesireCoord& coord_msg)
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b082      	sub	sp, #8
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
 8003c80:	6039      	str	r1, [r7, #0]
  {
    estimator_->coordinateUpdate(coord_msg.roll, coord_msg.pitch);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	edd3 7a01 	vldr	s15, [r3, #4]
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	ed93 7a02 	vldr	s14, [r3, #8]
 8003c92:	eef0 0a47 	vmov.f32	s1, s14
 8003c96:	eeb0 0a67 	vmov.f32	s0, s15
 8003c9a:	4610      	mov	r0, r2
 8003c9c:	f7ff fb42 	bl	8003324 <_ZN18EstimatorAlgorithm16coordinateUpdateEff>
  }
 8003ca0:	bf00      	nop
 8003ca2:	3708      	adds	r7, #8
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}

08003ca8 <_ZN17aerial_robot_msgs9BarometerC1Ev>:
      ros::Time stamp;
      float altitude;
      float pressure;
      float temperature;

    Barometer():
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b082      	sub	sp, #8
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
      stamp(),
      altitude(0),
      pressure(0),
      temperature(0)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f7fd fce8 	bl	8001688 <_ZN3ros3MsgC1Ev>
 8003cb8:	4a0c      	ldr	r2, [pc, #48]	; (8003cec <_ZN17aerial_robot_msgs9BarometerC1Ev+0x44>)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	601a      	str	r2, [r3, #0]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	3304      	adds	r3, #4
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f7fd fcce 	bl	8001664 <_ZN3ros4TimeC1Ev>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	f04f 0200 	mov.w	r2, #0
 8003cce:	60da      	str	r2, [r3, #12]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	f04f 0200 	mov.w	r2, #0
 8003cd6:	611a      	str	r2, [r3, #16]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	f04f 0200 	mov.w	r2, #0
 8003cde:	615a      	str	r2, [r3, #20]
    {
    }
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3708      	adds	r7, #8
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}
 8003cea:	bf00      	nop
 8003cec:	0800c69c 	.word	0x0800c69c

08003cf0 <_ZNK17aerial_robot_msgs9Barometer9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8003cf0:	b480      	push	{r7}
 8003cf2:	b087      	sub	sp, #28
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
 8003cf8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	617b      	str	r3, [r7, #20]
      *(outbuffer + offset + 0) = (this->stamp.sec >> (8 * 0)) & 0xFF;
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	683a      	ldr	r2, [r7, #0]
 8003d02:	4413      	add	r3, r2
 8003d04:	687a      	ldr	r2, [r7, #4]
 8003d06:	6852      	ldr	r2, [r2, #4]
 8003d08:	b2d2      	uxtb	r2, r2
 8003d0a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->stamp.sec >> (8 * 1)) & 0xFF;
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	3301      	adds	r3, #1
 8003d10:	683a      	ldr	r2, [r7, #0]
 8003d12:	4413      	add	r3, r2
 8003d14:	687a      	ldr	r2, [r7, #4]
 8003d16:	6852      	ldr	r2, [r2, #4]
 8003d18:	0a12      	lsrs	r2, r2, #8
 8003d1a:	b2d2      	uxtb	r2, r2
 8003d1c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->stamp.sec >> (8 * 2)) & 0xFF;
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	3302      	adds	r3, #2
 8003d22:	683a      	ldr	r2, [r7, #0]
 8003d24:	4413      	add	r3, r2
 8003d26:	687a      	ldr	r2, [r7, #4]
 8003d28:	6852      	ldr	r2, [r2, #4]
 8003d2a:	0c12      	lsrs	r2, r2, #16
 8003d2c:	b2d2      	uxtb	r2, r2
 8003d2e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->stamp.sec >> (8 * 3)) & 0xFF;
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	3303      	adds	r3, #3
 8003d34:	683a      	ldr	r2, [r7, #0]
 8003d36:	4413      	add	r3, r2
 8003d38:	687a      	ldr	r2, [r7, #4]
 8003d3a:	6852      	ldr	r2, [r2, #4]
 8003d3c:	0e12      	lsrs	r2, r2, #24
 8003d3e:	b2d2      	uxtb	r2, r2
 8003d40:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->stamp.sec);
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	3304      	adds	r3, #4
 8003d46:	617b      	str	r3, [r7, #20]
      *(outbuffer + offset + 0) = (this->stamp.nsec >> (8 * 0)) & 0xFF;
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	683a      	ldr	r2, [r7, #0]
 8003d4c:	4413      	add	r3, r2
 8003d4e:	687a      	ldr	r2, [r7, #4]
 8003d50:	6892      	ldr	r2, [r2, #8]
 8003d52:	b2d2      	uxtb	r2, r2
 8003d54:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->stamp.nsec >> (8 * 1)) & 0xFF;
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	3301      	adds	r3, #1
 8003d5a:	683a      	ldr	r2, [r7, #0]
 8003d5c:	4413      	add	r3, r2
 8003d5e:	687a      	ldr	r2, [r7, #4]
 8003d60:	6892      	ldr	r2, [r2, #8]
 8003d62:	0a12      	lsrs	r2, r2, #8
 8003d64:	b2d2      	uxtb	r2, r2
 8003d66:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->stamp.nsec >> (8 * 2)) & 0xFF;
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	3302      	adds	r3, #2
 8003d6c:	683a      	ldr	r2, [r7, #0]
 8003d6e:	4413      	add	r3, r2
 8003d70:	687a      	ldr	r2, [r7, #4]
 8003d72:	6892      	ldr	r2, [r2, #8]
 8003d74:	0c12      	lsrs	r2, r2, #16
 8003d76:	b2d2      	uxtb	r2, r2
 8003d78:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->stamp.nsec >> (8 * 3)) & 0xFF;
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	3303      	adds	r3, #3
 8003d7e:	683a      	ldr	r2, [r7, #0]
 8003d80:	4413      	add	r3, r2
 8003d82:	687a      	ldr	r2, [r7, #4]
 8003d84:	6892      	ldr	r2, [r2, #8]
 8003d86:	0e12      	lsrs	r2, r2, #24
 8003d88:	b2d2      	uxtb	r2, r2
 8003d8a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->stamp.nsec);
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	3304      	adds	r3, #4
 8003d90:	617b      	str	r3, [r7, #20]
      union {
        float real;
        uint32_t base;
      } u_altitude;
      u_altitude.real = this->altitude;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	68db      	ldr	r3, [r3, #12]
 8003d96:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_altitude.base >> (8 * 0)) & 0xFF;
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	683a      	ldr	r2, [r7, #0]
 8003d9c:	4413      	add	r3, r2
 8003d9e:	693a      	ldr	r2, [r7, #16]
 8003da0:	b2d2      	uxtb	r2, r2
 8003da2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_altitude.base >> (8 * 1)) & 0xFF;
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	3301      	adds	r3, #1
 8003da8:	683a      	ldr	r2, [r7, #0]
 8003daa:	4413      	add	r3, r2
 8003dac:	693a      	ldr	r2, [r7, #16]
 8003dae:	0a12      	lsrs	r2, r2, #8
 8003db0:	b2d2      	uxtb	r2, r2
 8003db2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_altitude.base >> (8 * 2)) & 0xFF;
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	3302      	adds	r3, #2
 8003db8:	683a      	ldr	r2, [r7, #0]
 8003dba:	4413      	add	r3, r2
 8003dbc:	693a      	ldr	r2, [r7, #16]
 8003dbe:	0c12      	lsrs	r2, r2, #16
 8003dc0:	b2d2      	uxtb	r2, r2
 8003dc2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_altitude.base >> (8 * 3)) & 0xFF;
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	3303      	adds	r3, #3
 8003dc8:	683a      	ldr	r2, [r7, #0]
 8003dca:	4413      	add	r3, r2
 8003dcc:	693a      	ldr	r2, [r7, #16]
 8003dce:	0e12      	lsrs	r2, r2, #24
 8003dd0:	b2d2      	uxtb	r2, r2
 8003dd2:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->altitude);
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	3304      	adds	r3, #4
 8003dd8:	617b      	str	r3, [r7, #20]
      union {
        float real;
        uint32_t base;
      } u_pressure;
      u_pressure.real = this->pressure;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	691b      	ldr	r3, [r3, #16]
 8003dde:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_pressure.base >> (8 * 0)) & 0xFF;
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	683a      	ldr	r2, [r7, #0]
 8003de4:	4413      	add	r3, r2
 8003de6:	68fa      	ldr	r2, [r7, #12]
 8003de8:	b2d2      	uxtb	r2, r2
 8003dea:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_pressure.base >> (8 * 1)) & 0xFF;
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	3301      	adds	r3, #1
 8003df0:	683a      	ldr	r2, [r7, #0]
 8003df2:	4413      	add	r3, r2
 8003df4:	68fa      	ldr	r2, [r7, #12]
 8003df6:	0a12      	lsrs	r2, r2, #8
 8003df8:	b2d2      	uxtb	r2, r2
 8003dfa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_pressure.base >> (8 * 2)) & 0xFF;
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	3302      	adds	r3, #2
 8003e00:	683a      	ldr	r2, [r7, #0]
 8003e02:	4413      	add	r3, r2
 8003e04:	68fa      	ldr	r2, [r7, #12]
 8003e06:	0c12      	lsrs	r2, r2, #16
 8003e08:	b2d2      	uxtb	r2, r2
 8003e0a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_pressure.base >> (8 * 3)) & 0xFF;
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	3303      	adds	r3, #3
 8003e10:	683a      	ldr	r2, [r7, #0]
 8003e12:	4413      	add	r3, r2
 8003e14:	68fa      	ldr	r2, [r7, #12]
 8003e16:	0e12      	lsrs	r2, r2, #24
 8003e18:	b2d2      	uxtb	r2, r2
 8003e1a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->pressure);
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	3304      	adds	r3, #4
 8003e20:	617b      	str	r3, [r7, #20]
      union {
        float real;
        uint32_t base;
      } u_temperature;
      u_temperature.real = this->temperature;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	695b      	ldr	r3, [r3, #20]
 8003e26:	60bb      	str	r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_temperature.base >> (8 * 0)) & 0xFF;
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	683a      	ldr	r2, [r7, #0]
 8003e2c:	4413      	add	r3, r2
 8003e2e:	68ba      	ldr	r2, [r7, #8]
 8003e30:	b2d2      	uxtb	r2, r2
 8003e32:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_temperature.base >> (8 * 1)) & 0xFF;
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	3301      	adds	r3, #1
 8003e38:	683a      	ldr	r2, [r7, #0]
 8003e3a:	4413      	add	r3, r2
 8003e3c:	68ba      	ldr	r2, [r7, #8]
 8003e3e:	0a12      	lsrs	r2, r2, #8
 8003e40:	b2d2      	uxtb	r2, r2
 8003e42:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_temperature.base >> (8 * 2)) & 0xFF;
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	3302      	adds	r3, #2
 8003e48:	683a      	ldr	r2, [r7, #0]
 8003e4a:	4413      	add	r3, r2
 8003e4c:	68ba      	ldr	r2, [r7, #8]
 8003e4e:	0c12      	lsrs	r2, r2, #16
 8003e50:	b2d2      	uxtb	r2, r2
 8003e52:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_temperature.base >> (8 * 3)) & 0xFF;
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	3303      	adds	r3, #3
 8003e58:	683a      	ldr	r2, [r7, #0]
 8003e5a:	4413      	add	r3, r2
 8003e5c:	68ba      	ldr	r2, [r7, #8]
 8003e5e:	0e12      	lsrs	r2, r2, #24
 8003e60:	b2d2      	uxtb	r2, r2
 8003e62:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->temperature);
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	3304      	adds	r3, #4
 8003e68:	617b      	str	r3, [r7, #20]
      return offset;
 8003e6a:	697b      	ldr	r3, [r7, #20]
    }
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	371c      	adds	r7, #28
 8003e70:	46bd      	mov	sp, r7
 8003e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e76:	4770      	bx	lr

08003e78 <_ZN17aerial_robot_msgs9Barometer11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8003e78:	b480      	push	{r7}
 8003e7a:	b087      	sub	sp, #28
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003e82:	2300      	movs	r3, #0
 8003e84:	617b      	str	r3, [r7, #20]
      this->stamp.sec =  ((uint32_t) (*(inbuffer + offset)));
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	683a      	ldr	r2, [r7, #0]
 8003e8a:	4413      	add	r3, r2
 8003e8c:	781b      	ldrb	r3, [r3, #0]
 8003e8e:	461a      	mov	r2, r3
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	605a      	str	r2, [r3, #4]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	685a      	ldr	r2, [r3, #4]
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	3301      	adds	r3, #1
 8003e9c:	6839      	ldr	r1, [r7, #0]
 8003e9e:	440b      	add	r3, r1
 8003ea0:	781b      	ldrb	r3, [r3, #0]
 8003ea2:	021b      	lsls	r3, r3, #8
 8003ea4:	431a      	orrs	r2, r3
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	605a      	str	r2, [r3, #4]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	685a      	ldr	r2, [r3, #4]
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	3302      	adds	r3, #2
 8003eb2:	6839      	ldr	r1, [r7, #0]
 8003eb4:	440b      	add	r3, r1
 8003eb6:	781b      	ldrb	r3, [r3, #0]
 8003eb8:	041b      	lsls	r3, r3, #16
 8003eba:	431a      	orrs	r2, r3
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	605a      	str	r2, [r3, #4]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	685a      	ldr	r2, [r3, #4]
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	3303      	adds	r3, #3
 8003ec8:	6839      	ldr	r1, [r7, #0]
 8003eca:	440b      	add	r3, r1
 8003ecc:	781b      	ldrb	r3, [r3, #0]
 8003ece:	061b      	lsls	r3, r3, #24
 8003ed0:	431a      	orrs	r2, r3
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->stamp.sec);
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	3304      	adds	r3, #4
 8003eda:	617b      	str	r3, [r7, #20]
      this->stamp.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	683a      	ldr	r2, [r7, #0]
 8003ee0:	4413      	add	r3, r2
 8003ee2:	781b      	ldrb	r3, [r3, #0]
 8003ee4:	461a      	mov	r2, r3
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	609a      	str	r2, [r3, #8]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	689a      	ldr	r2, [r3, #8]
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	3301      	adds	r3, #1
 8003ef2:	6839      	ldr	r1, [r7, #0]
 8003ef4:	440b      	add	r3, r1
 8003ef6:	781b      	ldrb	r3, [r3, #0]
 8003ef8:	021b      	lsls	r3, r3, #8
 8003efa:	431a      	orrs	r2, r3
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	609a      	str	r2, [r3, #8]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	689a      	ldr	r2, [r3, #8]
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	3302      	adds	r3, #2
 8003f08:	6839      	ldr	r1, [r7, #0]
 8003f0a:	440b      	add	r3, r1
 8003f0c:	781b      	ldrb	r3, [r3, #0]
 8003f0e:	041b      	lsls	r3, r3, #16
 8003f10:	431a      	orrs	r2, r3
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	609a      	str	r2, [r3, #8]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	689a      	ldr	r2, [r3, #8]
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	3303      	adds	r3, #3
 8003f1e:	6839      	ldr	r1, [r7, #0]
 8003f20:	440b      	add	r3, r1
 8003f22:	781b      	ldrb	r3, [r3, #0]
 8003f24:	061b      	lsls	r3, r3, #24
 8003f26:	431a      	orrs	r2, r3
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->stamp.nsec);
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	3304      	adds	r3, #4
 8003f30:	617b      	str	r3, [r7, #20]
      union {
        float real;
        uint32_t base;
      } u_altitude;
      u_altitude.base = 0;
 8003f32:	2300      	movs	r3, #0
 8003f34:	613b      	str	r3, [r7, #16]
      u_altitude.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	697a      	ldr	r2, [r7, #20]
 8003f3a:	6839      	ldr	r1, [r7, #0]
 8003f3c:	440a      	add	r2, r1
 8003f3e:	7812      	ldrb	r2, [r2, #0]
 8003f40:	4313      	orrs	r3, r2
 8003f42:	613b      	str	r3, [r7, #16]
      u_altitude.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003f44:	693a      	ldr	r2, [r7, #16]
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	3301      	adds	r3, #1
 8003f4a:	6839      	ldr	r1, [r7, #0]
 8003f4c:	440b      	add	r3, r1
 8003f4e:	781b      	ldrb	r3, [r3, #0]
 8003f50:	021b      	lsls	r3, r3, #8
 8003f52:	4313      	orrs	r3, r2
 8003f54:	613b      	str	r3, [r7, #16]
      u_altitude.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003f56:	693a      	ldr	r2, [r7, #16]
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	3302      	adds	r3, #2
 8003f5c:	6839      	ldr	r1, [r7, #0]
 8003f5e:	440b      	add	r3, r1
 8003f60:	781b      	ldrb	r3, [r3, #0]
 8003f62:	041b      	lsls	r3, r3, #16
 8003f64:	4313      	orrs	r3, r2
 8003f66:	613b      	str	r3, [r7, #16]
      u_altitude.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003f68:	693a      	ldr	r2, [r7, #16]
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	3303      	adds	r3, #3
 8003f6e:	6839      	ldr	r1, [r7, #0]
 8003f70:	440b      	add	r3, r1
 8003f72:	781b      	ldrb	r3, [r3, #0]
 8003f74:	061b      	lsls	r3, r3, #24
 8003f76:	4313      	orrs	r3, r2
 8003f78:	613b      	str	r3, [r7, #16]
      this->altitude = u_altitude.real;
 8003f7a:	693a      	ldr	r2, [r7, #16]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	60da      	str	r2, [r3, #12]
      offset += sizeof(this->altitude);
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	3304      	adds	r3, #4
 8003f84:	617b      	str	r3, [r7, #20]
      union {
        float real;
        uint32_t base;
      } u_pressure;
      u_pressure.base = 0;
 8003f86:	2300      	movs	r3, #0
 8003f88:	60fb      	str	r3, [r7, #12]
      u_pressure.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	697a      	ldr	r2, [r7, #20]
 8003f8e:	6839      	ldr	r1, [r7, #0]
 8003f90:	440a      	add	r2, r1
 8003f92:	7812      	ldrb	r2, [r2, #0]
 8003f94:	4313      	orrs	r3, r2
 8003f96:	60fb      	str	r3, [r7, #12]
      u_pressure.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003f98:	68fa      	ldr	r2, [r7, #12]
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	3301      	adds	r3, #1
 8003f9e:	6839      	ldr	r1, [r7, #0]
 8003fa0:	440b      	add	r3, r1
 8003fa2:	781b      	ldrb	r3, [r3, #0]
 8003fa4:	021b      	lsls	r3, r3, #8
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	60fb      	str	r3, [r7, #12]
      u_pressure.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003faa:	68fa      	ldr	r2, [r7, #12]
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	3302      	adds	r3, #2
 8003fb0:	6839      	ldr	r1, [r7, #0]
 8003fb2:	440b      	add	r3, r1
 8003fb4:	781b      	ldrb	r3, [r3, #0]
 8003fb6:	041b      	lsls	r3, r3, #16
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	60fb      	str	r3, [r7, #12]
      u_pressure.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003fbc:	68fa      	ldr	r2, [r7, #12]
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	3303      	adds	r3, #3
 8003fc2:	6839      	ldr	r1, [r7, #0]
 8003fc4:	440b      	add	r3, r1
 8003fc6:	781b      	ldrb	r3, [r3, #0]
 8003fc8:	061b      	lsls	r3, r3, #24
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	60fb      	str	r3, [r7, #12]
      this->pressure = u_pressure.real;
 8003fce:	68fa      	ldr	r2, [r7, #12]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	611a      	str	r2, [r3, #16]
      offset += sizeof(this->pressure);
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	3304      	adds	r3, #4
 8003fd8:	617b      	str	r3, [r7, #20]
      union {
        float real;
        uint32_t base;
      } u_temperature;
      u_temperature.base = 0;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	60bb      	str	r3, [r7, #8]
      u_temperature.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	697a      	ldr	r2, [r7, #20]
 8003fe2:	6839      	ldr	r1, [r7, #0]
 8003fe4:	440a      	add	r2, r1
 8003fe6:	7812      	ldrb	r2, [r2, #0]
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	60bb      	str	r3, [r7, #8]
      u_temperature.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003fec:	68ba      	ldr	r2, [r7, #8]
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	3301      	adds	r3, #1
 8003ff2:	6839      	ldr	r1, [r7, #0]
 8003ff4:	440b      	add	r3, r1
 8003ff6:	781b      	ldrb	r3, [r3, #0]
 8003ff8:	021b      	lsls	r3, r3, #8
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	60bb      	str	r3, [r7, #8]
      u_temperature.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003ffe:	68ba      	ldr	r2, [r7, #8]
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	3302      	adds	r3, #2
 8004004:	6839      	ldr	r1, [r7, #0]
 8004006:	440b      	add	r3, r1
 8004008:	781b      	ldrb	r3, [r3, #0]
 800400a:	041b      	lsls	r3, r3, #16
 800400c:	4313      	orrs	r3, r2
 800400e:	60bb      	str	r3, [r7, #8]
      u_temperature.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8004010:	68ba      	ldr	r2, [r7, #8]
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	3303      	adds	r3, #3
 8004016:	6839      	ldr	r1, [r7, #0]
 8004018:	440b      	add	r3, r1
 800401a:	781b      	ldrb	r3, [r3, #0]
 800401c:	061b      	lsls	r3, r3, #24
 800401e:	4313      	orrs	r3, r2
 8004020:	60bb      	str	r3, [r7, #8]
      this->temperature = u_temperature.real;
 8004022:	68ba      	ldr	r2, [r7, #8]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->temperature);
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	3304      	adds	r3, #4
 800402c:	617b      	str	r3, [r7, #20]
     return offset;
 800402e:	697b      	ldr	r3, [r7, #20]
    }
 8004030:	4618      	mov	r0, r3
 8004032:	371c      	adds	r7, #28
 8004034:	46bd      	mov	sp, r7
 8004036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403a:	4770      	bx	lr

0800403c <_ZN17aerial_robot_msgs9Barometer7getTypeEv>:

    const char * getType(){ return "aerial_robot_msgs/Barometer"; };
 800403c:	b480      	push	{r7}
 800403e:	b083      	sub	sp, #12
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
 8004044:	4b03      	ldr	r3, [pc, #12]	; (8004054 <_ZN17aerial_robot_msgs9Barometer7getTypeEv+0x18>)
 8004046:	4618      	mov	r0, r3
 8004048:	370c      	adds	r7, #12
 800404a:	46bd      	mov	sp, r7
 800404c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004050:	4770      	bx	lr
 8004052:	bf00      	nop
 8004054:	0800c590 	.word	0x0800c590

08004058 <_ZN17aerial_robot_msgs9Barometer6getMD5Ev>:
    const char * getMD5(){ return "b732c389660333d48fe976feb5768402"; };
 8004058:	b480      	push	{r7}
 800405a:	b083      	sub	sp, #12
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
 8004060:	4b03      	ldr	r3, [pc, #12]	; (8004070 <_ZN17aerial_robot_msgs9Barometer6getMD5Ev+0x18>)
 8004062:	4618      	mov	r0, r3
 8004064:	370c      	adds	r7, #12
 8004066:	46bd      	mov	sp, r7
 8004068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406c:	4770      	bx	lr
 800406e:	bf00      	nop
 8004070:	0800c5ac 	.word	0x0800c5ac

08004074 <_ZN16AltitudeEstimateC1Ev>:


class AltitudeEstimate
{
public:
  AltitudeEstimate(){}
 8004074:	b580      	push	{r7, lr}
 8004076:	b082      	sub	sp, #8
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	3308      	adds	r3, #8
 8004080:	4618      	mov	r0, r3
 8004082:	f7ff fe11 	bl	8003ca8 <_ZN17aerial_robot_msgs9BarometerC1Ev>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	4618      	mov	r0, r3
 800408a:	3708      	adds	r7, #8
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}

08004090 <_ZN16AltitudeEstimateD1Ev>:
  ~AltitudeEstimate(){}
 8004090:	b480      	push	{r7}
 8004092:	b083      	sub	sp, #12
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	4618      	mov	r0, r3
 800409c:	370c      	adds	r7, #12
 800409e:	46bd      	mov	sp, r7
 80040a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a4:	4770      	bx	lr
	...

080040a8 <_ZN16AltitudeEstimate4initEP3IMUP4BaroPN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EEE>:

  void  init(IMU* imu, Baro* baro, ros::NodeHandle* nh)
 80040a8:	b590      	push	{r4, r7, lr}
 80040aa:	b085      	sub	sp, #20
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	60f8      	str	r0, [r7, #12]
 80040b0:	60b9      	str	r1, [r7, #8]
 80040b2:	607a      	str	r2, [r7, #4]
 80040b4:	603b      	str	r3, [r7, #0]
  {
    nh_ = nh;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	683a      	ldr	r2, [r7, #0]
 80040ba:	601a      	str	r2, [r3, #0]
    baro_pub_  = new ros::Publisher("baro", &baro_msg_);
 80040bc:	2014      	movs	r0, #20
 80040be:	f006 f80a 	bl	800a0d6 <_Znwj>
 80040c2:	4603      	mov	r3, r0
 80040c4:	461c      	mov	r4, r3
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	f103 0208 	add.w	r2, r3, #8
 80040cc:	2300      	movs	r3, #0
 80040ce:	490c      	ldr	r1, [pc, #48]	; (8004100 <_ZN16AltitudeEstimate4initEP3IMUP4BaroPN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EEE+0x58>)
 80040d0:	4620      	mov	r0, r4
 80040d2:	f7fe f8b5 	bl	8002240 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	605c      	str	r4, [r3, #4]
    nh_->advertise(*baro_pub_);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	4619      	mov	r1, r3
 80040e4:	4610      	mov	r0, r2
 80040e6:	f000 fe49 	bl	8004d7c <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE9advertiseERNS_9PublisherE>

    imu_ = imu;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	68ba      	ldr	r2, [r7, #8]
 80040ee:	621a      	str	r2, [r3, #32]
    baro_= baro;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	687a      	ldr	r2, [r7, #4]
 80040f4:	625a      	str	r2, [r3, #36]	; 0x24
  }
 80040f6:	bf00      	nop
 80040f8:	3714      	adds	r7, #20
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd90      	pop	{r4, r7, pc}
 80040fe:	bf00      	nop
 8004100:	0800c5d0 	.word	0x0800c5d0

08004104 <_ZN16AltitudeEstimate6updateEv>:

  void update()
 8004104:	b580      	push	{r7, lr}
 8004106:	b082      	sub	sp, #8
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  {
    if(baro_->getUpdate())
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004110:	4618      	mov	r0, r3
 8004112:	f7fe fc27 	bl	8002964 <_ZN11BaroBackend9getUpdateEv>
 8004116:	4603      	mov	r3, r0
 8004118:	2b00      	cmp	r3, #0
 800411a:	d008      	beq.n	800412e <_ZN16AltitudeEstimate6updateEv+0x2a>
      {
        /* altitude estimation */
        //nav-ekf

        /* send message */
       publish();
 800411c:	6878      	ldr	r0, [r7, #4]
 800411e:	f000 f80a 	bl	8004136 <_ZN16AltitudeEstimate7publishEv>

        baro_->setUpdate(false);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004126:	2100      	movs	r1, #0
 8004128:	4618      	mov	r0, r3
 800412a:	f7fe fc28 	bl	800297e <_ZN11BaroBackend9setUpdateEb>
      }
  }
 800412e:	bf00      	nop
 8004130:	3708      	adds	r7, #8
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}

08004136 <_ZN16AltitudeEstimate7publishEv>:
  IMU* imu_;
  Baro* baro_;
  //nav-ekf


  void publish()
 8004136:	b590      	push	{r4, r7, lr}
 8004138:	b085      	sub	sp, #20
 800413a:	af00      	add	r7, sp, #0
 800413c:	60f8      	str	r0, [r7, #12]
  {
    baro_msg_.stamp = nh_->now();
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	68fc      	ldr	r4, [r7, #12]
 8004144:	463b      	mov	r3, r7
 8004146:	4611      	mov	r1, r2
 8004148:	4618      	mov	r0, r3
 800414a:	f000 fddd 	bl	8004d08 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE3nowEv>
 800414e:	f104 030c 	add.w	r3, r4, #12
 8004152:	463a      	mov	r2, r7
 8004154:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004158:	e883 0003 	stmia.w	r3, {r0, r1}
    baro_msg_.pressure = baro_->getPressure();
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004160:	4618      	mov	r0, r3
 8004162:	f7fe fc1c 	bl	800299e <_ZN11BaroBackend11getPressureEv>
 8004166:	eef0 7a40 	vmov.f32	s15, s0
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	edc3 7a06 	vstr	s15, [r3, #24]
    baro_msg_.temperature = baro_->getTemperature();
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004174:	4618      	mov	r0, r3
 8004176:	f7fe fc21 	bl	80029bc <_ZN11BaroBackend14getTemperatureEv>
 800417a:	eef0 7a40 	vmov.f32	s15, s0
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	edc3 7a07 	vstr	s15, [r3, #28]
    baro_msg_.altitude = baro_->getAltitude();
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004188:	4618      	mov	r0, r3
 800418a:	f7fe fc26 	bl	80029da <_ZN11BaroBackend11getAltitudeEv>
 800418e:	eef0 7a40 	vmov.f32	s15, s0
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	edc3 7a05 	vstr	s15, [r3, #20]
    baro_pub_->publish(&baro_msg_);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	685a      	ldr	r2, [r3, #4]
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	3308      	adds	r3, #8
 80041a0:	4619      	mov	r1, r3
 80041a2:	4610      	mov	r0, r2
 80041a4:	f7fe f863 	bl	800226e <_ZN3ros9Publisher7publishEPKNS_3MsgE>
  }
 80041a8:	bf00      	nop
 80041aa:	3714      	adds	r7, #20
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd90      	pop	{r4, r7, pc}

080041b0 <_ZN17aerial_robot_msgs3GpsC1Ev>:
      ros::Time stamp;
      float location[2];
      float velocity[2];
      uint8_t sat_num;

    Gps():
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b082      	sub	sp, #8
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
      stamp(),
      location(),
      velocity(),
      sat_num(0)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	4618      	mov	r0, r3
 80041bc:	f7fd fa64 	bl	8001688 <_ZN3ros3MsgC1Ev>
 80041c0:	4a13      	ldr	r2, [pc, #76]	; (8004210 <_ZN17aerial_robot_msgs3GpsC1Ev+0x60>)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	601a      	str	r2, [r3, #0]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	3304      	adds	r3, #4
 80041ca:	4618      	mov	r0, r3
 80041cc:	f7fd fa4a 	bl	8001664 <_ZN3ros4TimeC1Ev>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	f103 020c 	add.w	r2, r3, #12
 80041d6:	2301      	movs	r3, #1
 80041d8:	2b00      	cmp	r3, #0
 80041da:	db05      	blt.n	80041e8 <_ZN17aerial_robot_msgs3GpsC1Ev+0x38>
 80041dc:	f04f 0100 	mov.w	r1, #0
 80041e0:	6011      	str	r1, [r2, #0]
 80041e2:	3204      	adds	r2, #4
 80041e4:	3b01      	subs	r3, #1
 80041e6:	e7f7      	b.n	80041d8 <_ZN17aerial_robot_msgs3GpsC1Ev+0x28>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	f103 0214 	add.w	r2, r3, #20
 80041ee:	2301      	movs	r3, #1
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	db05      	blt.n	8004200 <_ZN17aerial_robot_msgs3GpsC1Ev+0x50>
 80041f4:	f04f 0100 	mov.w	r1, #0
 80041f8:	6011      	str	r1, [r2, #0]
 80041fa:	3204      	adds	r2, #4
 80041fc:	3b01      	subs	r3, #1
 80041fe:	e7f7      	b.n	80041f0 <_ZN17aerial_robot_msgs3GpsC1Ev+0x40>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2200      	movs	r2, #0
 8004204:	771a      	strb	r2, [r3, #28]
    {
    }
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	4618      	mov	r0, r3
 800420a:	3708      	adds	r7, #8
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}
 8004210:	0800c684 	.word	0x0800c684

08004214 <_ZNK17aerial_robot_msgs3Gps9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8004214:	b480      	push	{r7}
 8004216:	b087      	sub	sp, #28
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
 800421c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800421e:	2300      	movs	r3, #0
 8004220:	617b      	str	r3, [r7, #20]
      *(outbuffer + offset + 0) = (this->stamp.sec >> (8 * 0)) & 0xFF;
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	683a      	ldr	r2, [r7, #0]
 8004226:	4413      	add	r3, r2
 8004228:	687a      	ldr	r2, [r7, #4]
 800422a:	6852      	ldr	r2, [r2, #4]
 800422c:	b2d2      	uxtb	r2, r2
 800422e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->stamp.sec >> (8 * 1)) & 0xFF;
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	3301      	adds	r3, #1
 8004234:	683a      	ldr	r2, [r7, #0]
 8004236:	4413      	add	r3, r2
 8004238:	687a      	ldr	r2, [r7, #4]
 800423a:	6852      	ldr	r2, [r2, #4]
 800423c:	0a12      	lsrs	r2, r2, #8
 800423e:	b2d2      	uxtb	r2, r2
 8004240:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->stamp.sec >> (8 * 2)) & 0xFF;
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	3302      	adds	r3, #2
 8004246:	683a      	ldr	r2, [r7, #0]
 8004248:	4413      	add	r3, r2
 800424a:	687a      	ldr	r2, [r7, #4]
 800424c:	6852      	ldr	r2, [r2, #4]
 800424e:	0c12      	lsrs	r2, r2, #16
 8004250:	b2d2      	uxtb	r2, r2
 8004252:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->stamp.sec >> (8 * 3)) & 0xFF;
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	3303      	adds	r3, #3
 8004258:	683a      	ldr	r2, [r7, #0]
 800425a:	4413      	add	r3, r2
 800425c:	687a      	ldr	r2, [r7, #4]
 800425e:	6852      	ldr	r2, [r2, #4]
 8004260:	0e12      	lsrs	r2, r2, #24
 8004262:	b2d2      	uxtb	r2, r2
 8004264:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->stamp.sec);
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	3304      	adds	r3, #4
 800426a:	617b      	str	r3, [r7, #20]
      *(outbuffer + offset + 0) = (this->stamp.nsec >> (8 * 0)) & 0xFF;
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	683a      	ldr	r2, [r7, #0]
 8004270:	4413      	add	r3, r2
 8004272:	687a      	ldr	r2, [r7, #4]
 8004274:	6892      	ldr	r2, [r2, #8]
 8004276:	b2d2      	uxtb	r2, r2
 8004278:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->stamp.nsec >> (8 * 1)) & 0xFF;
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	3301      	adds	r3, #1
 800427e:	683a      	ldr	r2, [r7, #0]
 8004280:	4413      	add	r3, r2
 8004282:	687a      	ldr	r2, [r7, #4]
 8004284:	6892      	ldr	r2, [r2, #8]
 8004286:	0a12      	lsrs	r2, r2, #8
 8004288:	b2d2      	uxtb	r2, r2
 800428a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->stamp.nsec >> (8 * 2)) & 0xFF;
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	3302      	adds	r3, #2
 8004290:	683a      	ldr	r2, [r7, #0]
 8004292:	4413      	add	r3, r2
 8004294:	687a      	ldr	r2, [r7, #4]
 8004296:	6892      	ldr	r2, [r2, #8]
 8004298:	0c12      	lsrs	r2, r2, #16
 800429a:	b2d2      	uxtb	r2, r2
 800429c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->stamp.nsec >> (8 * 3)) & 0xFF;
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	3303      	adds	r3, #3
 80042a2:	683a      	ldr	r2, [r7, #0]
 80042a4:	4413      	add	r3, r2
 80042a6:	687a      	ldr	r2, [r7, #4]
 80042a8:	6892      	ldr	r2, [r2, #8]
 80042aa:	0e12      	lsrs	r2, r2, #24
 80042ac:	b2d2      	uxtb	r2, r2
 80042ae:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->stamp.nsec);
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	3304      	adds	r3, #4
 80042b4:	617b      	str	r3, [r7, #20]
      for( uint8_t i = 0; i < 2; i++){
 80042b6:	2300      	movs	r3, #0
 80042b8:	74fb      	strb	r3, [r7, #19]
 80042ba:	7cfb      	ldrb	r3, [r7, #19]
 80042bc:	2b01      	cmp	r3, #1
 80042be:	dc2c      	bgt.n	800431a <_ZNK17aerial_robot_msgs3Gps9serializeEPh+0x106>
      union {
        float real;
        uint32_t base;
      } u_locationi;
      u_locationi.real = this->location[i];
 80042c0:	7cfb      	ldrb	r3, [r7, #19]
 80042c2:	687a      	ldr	r2, [r7, #4]
 80042c4:	3302      	adds	r3, #2
 80042c6:	009b      	lsls	r3, r3, #2
 80042c8:	4413      	add	r3, r2
 80042ca:	3304      	adds	r3, #4
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_locationi.base >> (8 * 0)) & 0xFF;
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	683a      	ldr	r2, [r7, #0]
 80042d4:	4413      	add	r3, r2
 80042d6:	68fa      	ldr	r2, [r7, #12]
 80042d8:	b2d2      	uxtb	r2, r2
 80042da:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_locationi.base >> (8 * 1)) & 0xFF;
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	3301      	adds	r3, #1
 80042e0:	683a      	ldr	r2, [r7, #0]
 80042e2:	4413      	add	r3, r2
 80042e4:	68fa      	ldr	r2, [r7, #12]
 80042e6:	0a12      	lsrs	r2, r2, #8
 80042e8:	b2d2      	uxtb	r2, r2
 80042ea:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_locationi.base >> (8 * 2)) & 0xFF;
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	3302      	adds	r3, #2
 80042f0:	683a      	ldr	r2, [r7, #0]
 80042f2:	4413      	add	r3, r2
 80042f4:	68fa      	ldr	r2, [r7, #12]
 80042f6:	0c12      	lsrs	r2, r2, #16
 80042f8:	b2d2      	uxtb	r2, r2
 80042fa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_locationi.base >> (8 * 3)) & 0xFF;
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	3303      	adds	r3, #3
 8004300:	683a      	ldr	r2, [r7, #0]
 8004302:	4413      	add	r3, r2
 8004304:	68fa      	ldr	r2, [r7, #12]
 8004306:	0e12      	lsrs	r2, r2, #24
 8004308:	b2d2      	uxtb	r2, r2
 800430a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->location[i]);
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	3304      	adds	r3, #4
 8004310:	617b      	str	r3, [r7, #20]
      for( uint8_t i = 0; i < 2; i++){
 8004312:	7cfb      	ldrb	r3, [r7, #19]
 8004314:	3301      	adds	r3, #1
 8004316:	74fb      	strb	r3, [r7, #19]
 8004318:	e7cf      	b.n	80042ba <_ZNK17aerial_robot_msgs3Gps9serializeEPh+0xa6>
      }
      for( uint8_t i = 0; i < 2; i++){
 800431a:	2300      	movs	r3, #0
 800431c:	74bb      	strb	r3, [r7, #18]
 800431e:	7cbb      	ldrb	r3, [r7, #18]
 8004320:	2b01      	cmp	r3, #1
 8004322:	dc2c      	bgt.n	800437e <_ZNK17aerial_robot_msgs3Gps9serializeEPh+0x16a>
      union {
        float real;
        uint32_t base;
      } u_velocityi;
      u_velocityi.real = this->velocity[i];
 8004324:	7cbb      	ldrb	r3, [r7, #18]
 8004326:	687a      	ldr	r2, [r7, #4]
 8004328:	3304      	adds	r3, #4
 800432a:	009b      	lsls	r3, r3, #2
 800432c:	4413      	add	r3, r2
 800432e:	3304      	adds	r3, #4
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	60bb      	str	r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_velocityi.base >> (8 * 0)) & 0xFF;
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	683a      	ldr	r2, [r7, #0]
 8004338:	4413      	add	r3, r2
 800433a:	68ba      	ldr	r2, [r7, #8]
 800433c:	b2d2      	uxtb	r2, r2
 800433e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_velocityi.base >> (8 * 1)) & 0xFF;
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	3301      	adds	r3, #1
 8004344:	683a      	ldr	r2, [r7, #0]
 8004346:	4413      	add	r3, r2
 8004348:	68ba      	ldr	r2, [r7, #8]
 800434a:	0a12      	lsrs	r2, r2, #8
 800434c:	b2d2      	uxtb	r2, r2
 800434e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_velocityi.base >> (8 * 2)) & 0xFF;
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	3302      	adds	r3, #2
 8004354:	683a      	ldr	r2, [r7, #0]
 8004356:	4413      	add	r3, r2
 8004358:	68ba      	ldr	r2, [r7, #8]
 800435a:	0c12      	lsrs	r2, r2, #16
 800435c:	b2d2      	uxtb	r2, r2
 800435e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_velocityi.base >> (8 * 3)) & 0xFF;
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	3303      	adds	r3, #3
 8004364:	683a      	ldr	r2, [r7, #0]
 8004366:	4413      	add	r3, r2
 8004368:	68ba      	ldr	r2, [r7, #8]
 800436a:	0e12      	lsrs	r2, r2, #24
 800436c:	b2d2      	uxtb	r2, r2
 800436e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->velocity[i]);
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	3304      	adds	r3, #4
 8004374:	617b      	str	r3, [r7, #20]
      for( uint8_t i = 0; i < 2; i++){
 8004376:	7cbb      	ldrb	r3, [r7, #18]
 8004378:	3301      	adds	r3, #1
 800437a:	74bb      	strb	r3, [r7, #18]
 800437c:	e7cf      	b.n	800431e <_ZNK17aerial_robot_msgs3Gps9serializeEPh+0x10a>
      }
      *(outbuffer + offset + 0) = (this->sat_num >> (8 * 0)) & 0xFF;
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	683a      	ldr	r2, [r7, #0]
 8004382:	4413      	add	r3, r2
 8004384:	687a      	ldr	r2, [r7, #4]
 8004386:	7f12      	ldrb	r2, [r2, #28]
 8004388:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->sat_num);
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	3301      	adds	r3, #1
 800438e:	617b      	str	r3, [r7, #20]
      return offset;
 8004390:	697b      	ldr	r3, [r7, #20]
    }
 8004392:	4618      	mov	r0, r3
 8004394:	371c      	adds	r7, #28
 8004396:	46bd      	mov	sp, r7
 8004398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439c:	4770      	bx	lr

0800439e <_ZN17aerial_robot_msgs3Gps11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800439e:	b480      	push	{r7}
 80043a0:	b087      	sub	sp, #28
 80043a2:	af00      	add	r7, sp, #0
 80043a4:	6078      	str	r0, [r7, #4]
 80043a6:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80043a8:	2300      	movs	r3, #0
 80043aa:	617b      	str	r3, [r7, #20]
      this->stamp.sec =  ((uint32_t) (*(inbuffer + offset)));
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	683a      	ldr	r2, [r7, #0]
 80043b0:	4413      	add	r3, r2
 80043b2:	781b      	ldrb	r3, [r3, #0]
 80043b4:	461a      	mov	r2, r3
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	605a      	str	r2, [r3, #4]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	685a      	ldr	r2, [r3, #4]
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	3301      	adds	r3, #1
 80043c2:	6839      	ldr	r1, [r7, #0]
 80043c4:	440b      	add	r3, r1
 80043c6:	781b      	ldrb	r3, [r3, #0]
 80043c8:	021b      	lsls	r3, r3, #8
 80043ca:	431a      	orrs	r2, r3
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	605a      	str	r2, [r3, #4]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	685a      	ldr	r2, [r3, #4]
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	3302      	adds	r3, #2
 80043d8:	6839      	ldr	r1, [r7, #0]
 80043da:	440b      	add	r3, r1
 80043dc:	781b      	ldrb	r3, [r3, #0]
 80043de:	041b      	lsls	r3, r3, #16
 80043e0:	431a      	orrs	r2, r3
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	605a      	str	r2, [r3, #4]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	685a      	ldr	r2, [r3, #4]
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	3303      	adds	r3, #3
 80043ee:	6839      	ldr	r1, [r7, #0]
 80043f0:	440b      	add	r3, r1
 80043f2:	781b      	ldrb	r3, [r3, #0]
 80043f4:	061b      	lsls	r3, r3, #24
 80043f6:	431a      	orrs	r2, r3
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->stamp.sec);
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	3304      	adds	r3, #4
 8004400:	617b      	str	r3, [r7, #20]
      this->stamp.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	683a      	ldr	r2, [r7, #0]
 8004406:	4413      	add	r3, r2
 8004408:	781b      	ldrb	r3, [r3, #0]
 800440a:	461a      	mov	r2, r3
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	609a      	str	r2, [r3, #8]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	689a      	ldr	r2, [r3, #8]
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	3301      	adds	r3, #1
 8004418:	6839      	ldr	r1, [r7, #0]
 800441a:	440b      	add	r3, r1
 800441c:	781b      	ldrb	r3, [r3, #0]
 800441e:	021b      	lsls	r3, r3, #8
 8004420:	431a      	orrs	r2, r3
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	609a      	str	r2, [r3, #8]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	689a      	ldr	r2, [r3, #8]
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	3302      	adds	r3, #2
 800442e:	6839      	ldr	r1, [r7, #0]
 8004430:	440b      	add	r3, r1
 8004432:	781b      	ldrb	r3, [r3, #0]
 8004434:	041b      	lsls	r3, r3, #16
 8004436:	431a      	orrs	r2, r3
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	609a      	str	r2, [r3, #8]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	689a      	ldr	r2, [r3, #8]
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	3303      	adds	r3, #3
 8004444:	6839      	ldr	r1, [r7, #0]
 8004446:	440b      	add	r3, r1
 8004448:	781b      	ldrb	r3, [r3, #0]
 800444a:	061b      	lsls	r3, r3, #24
 800444c:	431a      	orrs	r2, r3
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->stamp.nsec);
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	3304      	adds	r3, #4
 8004456:	617b      	str	r3, [r7, #20]
      for( uint8_t i = 0; i < 2; i++){
 8004458:	2300      	movs	r3, #0
 800445a:	74fb      	strb	r3, [r7, #19]
 800445c:	7cfb      	ldrb	r3, [r7, #19]
 800445e:	2b01      	cmp	r3, #1
 8004460:	dc32      	bgt.n	80044c8 <_ZN17aerial_robot_msgs3Gps11deserializeEPh+0x12a>
      union {
        float real;
        uint32_t base;
      } u_locationi;
      u_locationi.base = 0;
 8004462:	2300      	movs	r3, #0
 8004464:	60fb      	str	r3, [r7, #12]
      u_locationi.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	697a      	ldr	r2, [r7, #20]
 800446a:	6839      	ldr	r1, [r7, #0]
 800446c:	440a      	add	r2, r1
 800446e:	7812      	ldrb	r2, [r2, #0]
 8004470:	4313      	orrs	r3, r2
 8004472:	60fb      	str	r3, [r7, #12]
      u_locationi.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8004474:	68fa      	ldr	r2, [r7, #12]
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	3301      	adds	r3, #1
 800447a:	6839      	ldr	r1, [r7, #0]
 800447c:	440b      	add	r3, r1
 800447e:	781b      	ldrb	r3, [r3, #0]
 8004480:	021b      	lsls	r3, r3, #8
 8004482:	4313      	orrs	r3, r2
 8004484:	60fb      	str	r3, [r7, #12]
      u_locationi.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8004486:	68fa      	ldr	r2, [r7, #12]
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	3302      	adds	r3, #2
 800448c:	6839      	ldr	r1, [r7, #0]
 800448e:	440b      	add	r3, r1
 8004490:	781b      	ldrb	r3, [r3, #0]
 8004492:	041b      	lsls	r3, r3, #16
 8004494:	4313      	orrs	r3, r2
 8004496:	60fb      	str	r3, [r7, #12]
      u_locationi.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8004498:	68fa      	ldr	r2, [r7, #12]
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	3303      	adds	r3, #3
 800449e:	6839      	ldr	r1, [r7, #0]
 80044a0:	440b      	add	r3, r1
 80044a2:	781b      	ldrb	r3, [r3, #0]
 80044a4:	061b      	lsls	r3, r3, #24
 80044a6:	4313      	orrs	r3, r2
 80044a8:	60fb      	str	r3, [r7, #12]
      this->location[i] = u_locationi.real;
 80044aa:	7cfb      	ldrb	r3, [r7, #19]
 80044ac:	68fa      	ldr	r2, [r7, #12]
 80044ae:	6879      	ldr	r1, [r7, #4]
 80044b0:	3302      	adds	r3, #2
 80044b2:	009b      	lsls	r3, r3, #2
 80044b4:	440b      	add	r3, r1
 80044b6:	3304      	adds	r3, #4
 80044b8:	601a      	str	r2, [r3, #0]
      offset += sizeof(this->location[i]);
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	3304      	adds	r3, #4
 80044be:	617b      	str	r3, [r7, #20]
      for( uint8_t i = 0; i < 2; i++){
 80044c0:	7cfb      	ldrb	r3, [r7, #19]
 80044c2:	3301      	adds	r3, #1
 80044c4:	74fb      	strb	r3, [r7, #19]
 80044c6:	e7c9      	b.n	800445c <_ZN17aerial_robot_msgs3Gps11deserializeEPh+0xbe>
      }
      for( uint8_t i = 0; i < 2; i++){
 80044c8:	2300      	movs	r3, #0
 80044ca:	74bb      	strb	r3, [r7, #18]
 80044cc:	7cbb      	ldrb	r3, [r7, #18]
 80044ce:	2b01      	cmp	r3, #1
 80044d0:	dc32      	bgt.n	8004538 <_ZN17aerial_robot_msgs3Gps11deserializeEPh+0x19a>
      union {
        float real;
        uint32_t base;
      } u_velocityi;
      u_velocityi.base = 0;
 80044d2:	2300      	movs	r3, #0
 80044d4:	60bb      	str	r3, [r7, #8]
      u_velocityi.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	697a      	ldr	r2, [r7, #20]
 80044da:	6839      	ldr	r1, [r7, #0]
 80044dc:	440a      	add	r2, r1
 80044de:	7812      	ldrb	r2, [r2, #0]
 80044e0:	4313      	orrs	r3, r2
 80044e2:	60bb      	str	r3, [r7, #8]
      u_velocityi.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80044e4:	68ba      	ldr	r2, [r7, #8]
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	3301      	adds	r3, #1
 80044ea:	6839      	ldr	r1, [r7, #0]
 80044ec:	440b      	add	r3, r1
 80044ee:	781b      	ldrb	r3, [r3, #0]
 80044f0:	021b      	lsls	r3, r3, #8
 80044f2:	4313      	orrs	r3, r2
 80044f4:	60bb      	str	r3, [r7, #8]
      u_velocityi.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80044f6:	68ba      	ldr	r2, [r7, #8]
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	3302      	adds	r3, #2
 80044fc:	6839      	ldr	r1, [r7, #0]
 80044fe:	440b      	add	r3, r1
 8004500:	781b      	ldrb	r3, [r3, #0]
 8004502:	041b      	lsls	r3, r3, #16
 8004504:	4313      	orrs	r3, r2
 8004506:	60bb      	str	r3, [r7, #8]
      u_velocityi.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8004508:	68ba      	ldr	r2, [r7, #8]
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	3303      	adds	r3, #3
 800450e:	6839      	ldr	r1, [r7, #0]
 8004510:	440b      	add	r3, r1
 8004512:	781b      	ldrb	r3, [r3, #0]
 8004514:	061b      	lsls	r3, r3, #24
 8004516:	4313      	orrs	r3, r2
 8004518:	60bb      	str	r3, [r7, #8]
      this->velocity[i] = u_velocityi.real;
 800451a:	7cbb      	ldrb	r3, [r7, #18]
 800451c:	68ba      	ldr	r2, [r7, #8]
 800451e:	6879      	ldr	r1, [r7, #4]
 8004520:	3304      	adds	r3, #4
 8004522:	009b      	lsls	r3, r3, #2
 8004524:	440b      	add	r3, r1
 8004526:	3304      	adds	r3, #4
 8004528:	601a      	str	r2, [r3, #0]
      offset += sizeof(this->velocity[i]);
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	3304      	adds	r3, #4
 800452e:	617b      	str	r3, [r7, #20]
      for( uint8_t i = 0; i < 2; i++){
 8004530:	7cbb      	ldrb	r3, [r7, #18]
 8004532:	3301      	adds	r3, #1
 8004534:	74bb      	strb	r3, [r7, #18]
 8004536:	e7c9      	b.n	80044cc <_ZN17aerial_robot_msgs3Gps11deserializeEPh+0x12e>
      }
      this->sat_num =  ((uint8_t) (*(inbuffer + offset)));
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	683a      	ldr	r2, [r7, #0]
 800453c:	4413      	add	r3, r2
 800453e:	781a      	ldrb	r2, [r3, #0]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	771a      	strb	r2, [r3, #28]
      offset += sizeof(this->sat_num);
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	3301      	adds	r3, #1
 8004548:	617b      	str	r3, [r7, #20]
     return offset;
 800454a:	697b      	ldr	r3, [r7, #20]
    }
 800454c:	4618      	mov	r0, r3
 800454e:	371c      	adds	r7, #28
 8004550:	46bd      	mov	sp, r7
 8004552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004556:	4770      	bx	lr

08004558 <_ZN17aerial_robot_msgs3Gps7getTypeEv>:

    const char * getType(){ return "aerial_robot_msgs/Gps"; };
 8004558:	b480      	push	{r7}
 800455a:	b083      	sub	sp, #12
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
 8004560:	4b03      	ldr	r3, [pc, #12]	; (8004570 <_ZN17aerial_robot_msgs3Gps7getTypeEv+0x18>)
 8004562:	4618      	mov	r0, r3
 8004564:	370c      	adds	r7, #12
 8004566:	46bd      	mov	sp, r7
 8004568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456c:	4770      	bx	lr
 800456e:	bf00      	nop
 8004570:	0800c5d8 	.word	0x0800c5d8

08004574 <_ZN17aerial_robot_msgs3Gps6getMD5Ev>:
    const char * getMD5(){ return "b9b55701ff5240f76ada29af2827853c"; };
 8004574:	b480      	push	{r7}
 8004576:	b083      	sub	sp, #12
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
 800457c:	4b03      	ldr	r3, [pc, #12]	; (800458c <_ZN17aerial_robot_msgs3Gps6getMD5Ev+0x18>)
 800457e:	4618      	mov	r0, r3
 8004580:	370c      	adds	r7, #12
 8004582:	46bd      	mov	sp, r7
 8004584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004588:	4770      	bx	lr
 800458a:	bf00      	nop
 800458c:	0800c5f0 	.word	0x0800c5f0

08004590 <_ZN11PosEstimateC1Ev>:
#include "sensors/gps/gps_ublox.h"

class PosEstimate
{
public:
  PosEstimate(){}
 8004590:	b580      	push	{r7, lr}
 8004592:	b082      	sub	sp, #8
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	3308      	adds	r3, #8
 800459c:	4618      	mov	r0, r3
 800459e:	f7ff fe07 	bl	80041b0 <_ZN17aerial_robot_msgs3GpsC1Ev>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	4618      	mov	r0, r3
 80045a6:	3708      	adds	r7, #8
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}

080045ac <_ZN11PosEstimateD1Ev>:
  ~PosEstimate(){}
 80045ac:	b480      	push	{r7}
 80045ae:	b083      	sub	sp, #12
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	4618      	mov	r0, r3
 80045b8:	370c      	adds	r7, #12
 80045ba:	46bd      	mov	sp, r7
 80045bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c0:	4770      	bx	lr
	...

080045c4 <_ZN11PosEstimate4initEP3IMUP3GPSPN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EEE>:

  void  init(IMU* imu, GPS* gps, ros::NodeHandle* nh)
 80045c4:	b590      	push	{r4, r7, lr}
 80045c6:	b085      	sub	sp, #20
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	60f8      	str	r0, [r7, #12]
 80045cc:	60b9      	str	r1, [r7, #8]
 80045ce:	607a      	str	r2, [r7, #4]
 80045d0:	603b      	str	r3, [r7, #0]
  {
    nh_ = nh;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	683a      	ldr	r2, [r7, #0]
 80045d6:	601a      	str	r2, [r3, #0]
   gps_pub_  = new ros::Publisher("gps", &gps_msg_);
 80045d8:	2014      	movs	r0, #20
 80045da:	f005 fd7c 	bl	800a0d6 <_Znwj>
 80045de:	4603      	mov	r3, r0
 80045e0:	461c      	mov	r4, r3
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	f103 0208 	add.w	r2, r3, #8
 80045e8:	2300      	movs	r3, #0
 80045ea:	490c      	ldr	r1, [pc, #48]	; (800461c <_ZN11PosEstimate4initEP3IMUP3GPSPN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EEE+0x58>)
 80045ec:	4620      	mov	r0, r4
 80045ee:	f7fd fe27 	bl	8002240 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	605c      	str	r4, [r3, #4]
    nh_->advertise(*gps_pub_);
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	4619      	mov	r1, r3
 8004600:	4610      	mov	r0, r2
 8004602:	f000 fbbb 	bl	8004d7c <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE9advertiseERNS_9PublisherE>

    imu_ = imu;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	68ba      	ldr	r2, [r7, #8]
 800460a:	629a      	str	r2, [r3, #40]	; 0x28
    gps_ = gps;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	62da      	str	r2, [r3, #44]	; 0x2c
  }
 8004612:	bf00      	nop
 8004614:	3714      	adds	r7, #20
 8004616:	46bd      	mov	sp, r7
 8004618:	bd90      	pop	{r4, r7, pc}
 800461a:	bf00      	nop
 800461c:	0800c614 	.word	0x0800c614

08004620 <_ZN11PosEstimate6updateEv>:

  void update()
 8004620:	b580      	push	{r7, lr}
 8004622:	b082      	sub	sp, #8
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  {
    if(gps_->getUpdate())
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800462c:	4618      	mov	r0, r3
 800462e:	f7fe f9f4 	bl	8002a1a <_ZN11GPS_Backend9getUpdateEv>
 8004632:	4603      	mov	r3, r0
 8004634:	2b00      	cmp	r3, #0
 8004636:	d008      	beq.n	800464a <_ZN11PosEstimate6updateEv+0x2a>
      {
        /* altitude estimation */
        //nav-ekf2

        /* send message */
        publish();
 8004638:	6878      	ldr	r0, [r7, #4]
 800463a:	f000 f80a 	bl	8004652 <_ZN11PosEstimate7publishEv>
        gps_->setUpdate(false);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004642:	2100      	movs	r1, #0
 8004644:	4618      	mov	r0, r3
 8004646:	f7fe f9f5 	bl	8002a34 <_ZN11GPS_Backend9setUpdateEb>
      }
  }
 800464a:	bf00      	nop
 800464c:	3708      	adds	r7, #8
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}

08004652 <_ZN11PosEstimate7publishEv>:

  IMU* imu_;
  GPS* gps_;
  //nav-ekf2

  void publish()
 8004652:	b590      	push	{r4, r7, lr}
 8004654:	b0df      	sub	sp, #380	; 0x17c
 8004656:	af00      	add	r7, sp, #0
 8004658:	f107 030c 	add.w	r3, r7, #12
 800465c:	6018      	str	r0, [r3, #0]
  {
    gps_msg_.stamp = nh_->now();
 800465e:	f107 030c 	add.w	r3, r7, #12
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	681a      	ldr	r2, [r3, #0]
 8004666:	f107 030c 	add.w	r3, r7, #12
 800466a:	681c      	ldr	r4, [r3, #0]
 800466c:	463b      	mov	r3, r7
 800466e:	4611      	mov	r1, r2
 8004670:	4618      	mov	r0, r3
 8004672:	f000 fb49 	bl	8004d08 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE3nowEv>
 8004676:	463a      	mov	r2, r7
 8004678:	f104 030c 	add.w	r3, r4, #12
 800467c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004680:	e883 0003 	stmia.w	r3, {r0, r1}

    gps_msg_.location[0] = gps_->getGosState().location.lat; // lat
 8004684:	f107 030c 	add.w	r3, r7, #12
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800468c:	461a      	mov	r2, r3
 800468e:	f107 0310 	add.w	r3, r7, #16
 8004692:	4611      	mov	r1, r2
 8004694:	4618      	mov	r0, r3
 8004696:	f7fe f9af 	bl	80029f8 <_ZN11GPS_Backend11getGosStateEv>
 800469a:	f107 0310 	add.w	r3, r7, #16
 800469e:	f8d3 300e 	ldr.w	r3, [r3, #14]
 80046a2:	ee07 3a90 	vmov	s15, r3
 80046a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80046aa:	f107 030c 	add.w	r3, r7, #12
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	edc3 7a05 	vstr	s15, [r3, #20]
    gps_msg_.location[1] = gps_->getGosState().location.lng; // lng
 80046b4:	f107 030c 	add.w	r3, r7, #12
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046bc:	461a      	mov	r2, r3
 80046be:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80046c2:	4611      	mov	r1, r2
 80046c4:	4618      	mov	r0, r3
 80046c6:	f7fe f997 	bl	80029f8 <_ZN11GPS_Backend11getGosStateEv>
 80046ca:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80046ce:	f8d3 3012 	ldr.w	r3, [r3, #18]
 80046d2:	ee07 3a90 	vmov	s15, r3
 80046d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80046da:	f107 030c 	add.w	r3, r7, #12
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	edc3 7a06 	vstr	s15, [r3, #24]

    gps_msg_.velocity[0] = gps_->getGosState().velocity.x;
 80046e4:	f107 030c 	add.w	r3, r7, #12
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ec:	461a      	mov	r2, r3
 80046ee:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80046f2:	4611      	mov	r1, r2
 80046f4:	4618      	mov	r0, r3
 80046f6:	f7fe f97f 	bl	80029f8 <_ZN11GPS_Backend11getGosStateEv>
 80046fa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80046fe:	f107 030c 	add.w	r3, r7, #12
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	61da      	str	r2, [r3, #28]
    gps_msg_.velocity[1] = gps_->getGosState().velocity.y;
 8004706:	f107 030c 	add.w	r3, r7, #12
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800470e:	461a      	mov	r2, r3
 8004710:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8004714:	4611      	mov	r1, r2
 8004716:	4618      	mov	r0, r3
 8004718:	f7fe f96e 	bl	80029f8 <_ZN11GPS_Backend11getGosStateEv>
 800471c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8004720:	f107 030c 	add.w	r3, r7, #12
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	621a      	str	r2, [r3, #32]

    gps_msg_.sat_num = gps_->getGosState().num_sats;
 8004728:	f107 030c 	add.w	r3, r7, #12
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004730:	461a      	mov	r2, r3
 8004732:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004736:	4611      	mov	r1, r2
 8004738:	4618      	mov	r0, r3
 800473a:	f7fe f95d 	bl	80029f8 <_ZN11GPS_Backend11getGosStateEv>
 800473e:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8004742:	f107 030c 	add.w	r3, r7, #12
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    gps_pub_->publish(&gps_msg_);
 800474c:	f107 030c 	add.w	r3, r7, #12
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	685a      	ldr	r2, [r3, #4]
 8004754:	f107 030c 	add.w	r3, r7, #12
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	3308      	adds	r3, #8
 800475c:	4619      	mov	r1, r3
 800475e:	4610      	mov	r0, r2
 8004760:	f7fd fd85 	bl	800226e <_ZN3ros9Publisher7publishEPKNS_3MsgE>
  }
 8004764:	bf00      	nop
 8004766:	f507 77be 	add.w	r7, r7, #380	; 0x17c
 800476a:	46bd      	mov	sp, r7
 800476c:	bd90      	pop	{r4, r7, pc}

0800476e <_ZN13StateEstimateC1Ev>:
#include "state_estimate/pos/pos_estimate.h"

class StateEstimate
{
public:
  StateEstimate()
 800476e:	b580      	push	{r7, lr}
 8004770:	b082      	sub	sp, #8
 8004772:	af00      	add	r7, sp, #0
 8004774:	6078      	str	r0, [r7, #4]
  {
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	3310      	adds	r3, #16
 800477a:	4618      	mov	r0, r3
 800477c:	f7ff f8d6 	bl	800392c <_ZN16AttitudeEstimateC1Ev>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	3364      	adds	r3, #100	; 0x64
 8004784:	4618      	mov	r0, r3
 8004786:	f7ff fc75 	bl	8004074 <_ZN16AltitudeEstimateC1Ev>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	338c      	adds	r3, #140	; 0x8c
 800478e:	4618      	mov	r0, r3
 8004790:	f7ff fefe 	bl	8004590 <_ZN11PosEstimateC1Ev>
  }
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	4618      	mov	r0, r3
 8004798:	3708      	adds	r7, #8
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}

0800479e <_ZN13StateEstimateD1Ev>:
  ~StateEstimate(){}
 800479e:	b580      	push	{r7, lr}
 80047a0:	b082      	sub	sp, #8
 80047a2:	af00      	add	r7, sp, #0
 80047a4:	6078      	str	r0, [r7, #4]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	338c      	adds	r3, #140	; 0x8c
 80047aa:	4618      	mov	r0, r3
 80047ac:	f7ff fefe 	bl	80045ac <_ZN11PosEstimateD1Ev>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	3364      	adds	r3, #100	; 0x64
 80047b4:	4618      	mov	r0, r3
 80047b6:	f7ff fc6b 	bl	8004090 <_ZN16AltitudeEstimateD1Ev>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	3310      	adds	r3, #16
 80047be:	4618      	mov	r0, r3
 80047c0:	f7ff f8c2 	bl	8003948 <_ZN16AttitudeEstimateD1Ev>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	4618      	mov	r0, r3
 80047c8:	3708      	adds	r7, #8
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}

080047ce <_ZN13StateEstimate4initEP3IMUP4BaroP3GPSPN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EEE>:

void  init(IMU* imu, Baro* baro, GPS* gps, ros::NodeHandle* nh)
 80047ce:	b580      	push	{r7, lr}
 80047d0:	b084      	sub	sp, #16
 80047d2:	af00      	add	r7, sp, #0
 80047d4:	60f8      	str	r0, [r7, #12]
 80047d6:	60b9      	str	r1, [r7, #8]
 80047d8:	607a      	str	r2, [r7, #4]
 80047da:	603b      	str	r3, [r7, #0]
  {
    nh_ = nh;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	69ba      	ldr	r2, [r7, #24]
 80047e0:	601a      	str	r2, [r3, #0]

    if(imu == NULL) 
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d104      	bne.n	80047f2 <_ZN13StateEstimate4initEP3IMUP4BaroP3GPSPN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EEE+0x24>
      {
        attitude_estimate_flag_ = false;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	2200      	movs	r2, #0
 80047ec:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
 80047f0:	e010      	b.n	8004814 <_ZN13StateEstimate4initEP3IMUP4BaroP3GPSPN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EEE+0x46>
      }
    else
      {
        attitude_estimate_flag_ = true;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2201      	movs	r2, #1
 80047f6:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
        imu_ = imu;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	68ba      	ldr	r2, [r7, #8]
 80047fe:	605a      	str	r2, [r3, #4]
        attitude_estimator_.init(imu_, nh_);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	f103 0010 	add.w	r0, r3, #16
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	6859      	ldr	r1, [r3, #4]
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	461a      	mov	r2, r3
 8004810:	f7ff f8a6 	bl	8003960 <_ZN16AttitudeEstimate4initEP3IMUPN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EEE>
      }

    if(baro == NULL)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d104      	bne.n	8004824 <_ZN13StateEstimate4initEP3IMUP4BaroP3GPSPN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EEE+0x56>
      {
        altitude_estimate_flag_ = false;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2200      	movs	r2, #0
 800481e:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
 8004822:	e011      	b.n	8004848 <_ZN13StateEstimate4initEP3IMUP4BaroP3GPSPN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EEE+0x7a>
      }
    else
      {
        altitude_estimate_flag_ = true;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	2201      	movs	r2, #1
 8004828:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
        baro_ = baro;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	687a      	ldr	r2, [r7, #4]
 8004830:	609a      	str	r2, [r3, #8]
        altitude_estimator_.init(imu_, baro_, nh_);
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	f103 0064 	add.w	r0, r3, #100	; 0x64
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	6859      	ldr	r1, [r3, #4]
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	689a      	ldr	r2, [r3, #8]
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f7ff fc30 	bl	80040a8 <_ZN16AltitudeEstimate4initEP3IMUP4BaroPN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EEE>
      }

    if(gps == NULL)
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d104      	bne.n	8004858 <_ZN13StateEstimate4initEP3IMUP4BaroP3GPSPN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EEE+0x8a>
      {
        pos_estimate_flag_ = false;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2200      	movs	r2, #0
 8004852:	f883 20be 	strb.w	r2, [r3, #190]	; 0xbe
      {
        pos_estimate_flag_ = true;
        gps_ = gps;
        pos_estimator_.init(imu_, gps_, nh_);
      }
  }
 8004856:	e011      	b.n	800487c <_ZN13StateEstimate4initEP3IMUP4BaroP3GPSPN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EEE+0xae>
        pos_estimate_flag_ = true;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2201      	movs	r2, #1
 800485c:	f883 20be 	strb.w	r2, [r3, #190]	; 0xbe
        gps_ = gps;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	683a      	ldr	r2, [r7, #0]
 8004864:	60da      	str	r2, [r3, #12]
        pos_estimator_.init(imu_, gps_, nh_);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	f103 008c 	add.w	r0, r3, #140	; 0x8c
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	6859      	ldr	r1, [r3, #4]
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	68da      	ldr	r2, [r3, #12]
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f7ff fea4 	bl	80045c4 <_ZN11PosEstimate4initEP3IMUP3GPSPN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EEE>
  }
 800487c:	bf00      	nop
 800487e:	3710      	adds	r7, #16
 8004880:	46bd      	mov	sp, r7
 8004882:	bd80      	pop	{r7, pc}

08004884 <_ZN13StateEstimate6updateEv>:

  void update()
 8004884:	b580      	push	{r7, lr}
 8004886:	b082      	sub	sp, #8
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  {
    if(attitude_estimate_flag_) attitude_estimator_.update();
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8004892:	2b00      	cmp	r3, #0
 8004894:	d004      	beq.n	80048a0 <_ZN13StateEstimate6updateEv+0x1c>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	3310      	adds	r3, #16
 800489a:	4618      	mov	r0, r3
 800489c:	f7ff f8c0 	bl	8003a20 <_ZN16AttitudeEstimate6updateEv>
    if(altitude_estimate_flag_) altitude_estimator_.update();
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d004      	beq.n	80048b4 <_ZN13StateEstimate6updateEv+0x30>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	3364      	adds	r3, #100	; 0x64
 80048ae:	4618      	mov	r0, r3
 80048b0:	f7ff fc28 	bl	8004104 <_ZN16AltitudeEstimate6updateEv>
    if(pos_estimate_flag_) pos_estimator_.update();
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	f893 30be 	ldrb.w	r3, [r3, #190]	; 0xbe
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d004      	beq.n	80048c8 <_ZN13StateEstimate6updateEv+0x44>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	338c      	adds	r3, #140	; 0x8c
 80048c2:	4618      	mov	r0, r3
 80048c4:	f7ff feac 	bl	8004620 <_ZN11PosEstimate6updateEv>
  }
 80048c8:	bf00      	nop
 80048ca:	3708      	adds	r7, #8
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd80      	pop	{r7, pc}

080048d0 <HAL_SYSTICK_Callback>:
static int LEDcounter = 0;

// attitude estimate and  control is at sys timer it callback
// update interrupt
void HAL_SYSTICK_Callback(void)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b082      	sub	sp, #8
 80048d4:	af00      	add	r7, sp, #0
	static uint32_t last_time = HAL_GetTick();
 80048d6:	4b1e      	ldr	r3, [pc, #120]	; (8004950 <HAL_SYSTICK_Callback+0x80>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f003 0301 	and.w	r3, r3, #1
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d107      	bne.n	80048f2 <HAL_SYSTICK_Callback+0x22>
 80048e2:	f003 f815 	bl	8007910 <HAL_GetTick>
 80048e6:	4602      	mov	r2, r0
 80048e8:	4b1a      	ldr	r3, [pc, #104]	; (8004954 <HAL_SYSTICK_Callback+0x84>)
 80048ea:	601a      	str	r2, [r3, #0]
 80048ec:	4b18      	ldr	r3, [pc, #96]	; (8004950 <HAL_SYSTICK_Callback+0x80>)
 80048ee:	2201      	movs	r2, #1
 80048f0:	601a      	str	r2, [r3, #0]
	uint32_t now_time = HAL_GetTick();
 80048f2:	f003 f80d 	bl	8007910 <HAL_GetTick>
 80048f6:	4603      	mov	r3, r0
 80048f8:	607b      	str	r3, [r7, #4]


	/* ros spin func, mainly subscribing  data from ROS network */
	nh_.spinOnce();
 80048fa:	4817      	ldr	r0, [pc, #92]	; (8004958 <HAL_SYSTICK_Callback+0x88>)
 80048fc:	f000 fbc0 	bl	8005080 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv>

	if(!start_process_flag_)
 8004900:	4b16      	ldr	r3, [pc, #88]	; (800495c <HAL_SYSTICK_Callback+0x8c>)
 8004902:	781b      	ldrb	r3, [r3, #0]
 8004904:	f083 0301 	eor.w	r3, r3, #1
 8004908:	b2db      	uxtb	r3, r3
 800490a:	2b00      	cmp	r3, #0
 800490c:	d11c      	bne.n	8004948 <HAL_SYSTICK_Callback+0x78>
		return;
	/* please check whether connection between ros and mcu is build */
	if(nh_.connected())
 800490e:	4812      	ldr	r0, [pc, #72]	; (8004958 <HAL_SYSTICK_Callback+0x88>)
 8004910:	f000 fb21 	bl	8004f56 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE9connectedEv>
 8004914:	4603      	mov	r3, r0
 8004916:	2b00      	cmp	r3, #0
 8004918:	d017      	beq.n	800494a <HAL_SYSTICK_Callback+0x7a>
	{
		/* publish message */
			/* state estimate */
		if(counter++>8)
 800491a:	4b11      	ldr	r3, [pc, #68]	; (8004960 <HAL_SYSTICK_Callback+0x90>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	1c5a      	adds	r2, r3, #1
 8004920:	490f      	ldr	r1, [pc, #60]	; (8004960 <HAL_SYSTICK_Callback+0x90>)
 8004922:	600a      	str	r2, [r1, #0]
 8004924:	2b08      	cmp	r3, #8
 8004926:	bfcc      	ite	gt
 8004928:	2301      	movgt	r3, #1
 800492a:	2300      	movle	r3, #0
 800492c:	b2db      	uxtb	r3, r3
 800492e:	2b00      	cmp	r3, #0
 8004930:	d00b      	beq.n	800494a <HAL_SYSTICK_Callback+0x7a>
		{
			counter = 0;
 8004932:	4b0b      	ldr	r3, [pc, #44]	; (8004960 <HAL_SYSTICK_Callback+0x90>)
 8004934:	2200      	movs	r2, #0
 8004936:	601a      	str	r2, [r3, #0]
			imu_.update();
 8004938:	210a      	movs	r1, #10
 800493a:	480a      	ldr	r0, [pc, #40]	; (8004964 <HAL_SYSTICK_Callback+0x94>)
 800493c:	f002 ff64 	bl	8007808 <_ZN3IMU6updateEt>
//				estimator_.attitude_estimator_.imu_msg_.gyro_data[i] = estimator_.attitude_estimator_.imu_->getGyro()[i];
//				estimator_.attitude_estimator_.imu_msg_.mag_data[i] = estimator_.attitude_estimator_.imu_->getMag()[i];
//				estimator_.attitude_estimator_.imu_msg_.acc_data[i] = estimator_.attitude_estimator_.imu_->getAcc()[i];
//			}
//			estimator_.attitude_estimator_.imu_pub_->publish(&estimator_.attitude_estimator_.imu_msg_);
			estimator_.update();
 8004940:	4809      	ldr	r0, [pc, #36]	; (8004968 <HAL_SYSTICK_Callback+0x98>)
 8004942:	f7ff ff9f 	bl	8004884 <_ZN13StateEstimate6updateEv>
 8004946:	e000      	b.n	800494a <HAL_SYSTICK_Callback+0x7a>
		return;
 8004948:	bf00      	nop
		}
	}



}
 800494a:	3708      	adds	r7, #8
 800494c:	46bd      	mov	sp, r7
 800494e:	bd80      	pop	{r7, pc}
 8004950:	20000a28 	.word	0x20000a28
 8004954:	20000a24 	.word	0x20000a24
 8004958:	20000534 	.word	0x20000534
 800495c:	20000a18 	.word	0x20000a18
 8004960:	20000a1c 	.word	0x20000a1c
 8004964:	20000844 	.word	0x20000844
 8004968:	20000958 	.word	0x20000958

0800496c <main>:
/* USER CODE END 0 */

int main(void)
{
 800496c:	b590      	push	{r4, r7, lr}
 800496e:	b087      	sub	sp, #28
 8004970:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004972:	f002 ffab 	bl	80078cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004976:	f000 f881 	bl	8004a7c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800497a:	f7fc fe1f 	bl	80015bc <MX_GPIO_Init>
  MX_DMA_Init();
 800497e:	f7fc fdfb 	bl	8001578 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8004982:	f002 f9cd 	bl	8006d20 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 8004986:	f002 f91f 	bl	8006bc8 <MX_SPI1_Init>
  MX_ADC1_Init();
 800498a:	f7fc fd7d 	bl	8001488 <MX_ADC1_Init>
  //MX_IWDG_Init();

  /* USER CODE BEGIN 2 */
  /**********************************/
  {
	  nh_.initNode(&huart1);
 800498e:	4931      	ldr	r1, [pc, #196]	; (8004a54 <main+0xe8>)
 8004990:	4831      	ldr	r0, [pc, #196]	; (8004a58 <main+0xec>)
 8004992:	f000 fd2f 	bl	80053f4 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8initNodeEP18UART_HandleTypeDef>
	  /* ugv ros node */
	  testnode = new RosNode(&nh_);
 8004996:	201c      	movs	r0, #28
 8004998:	f005 fb9d 	bl	800a0d6 <_Znwj>
 800499c:	4603      	mov	r3, r0
 800499e:	461c      	mov	r4, r3
 80049a0:	492d      	ldr	r1, [pc, #180]	; (8004a58 <main+0xec>)
 80049a2:	4620      	mov	r0, r4
 80049a4:	f7fd ff7c 	bl	80028a0 <_ZN7RosNodeC1EPN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EEE>
 80049a8:	4b2c      	ldr	r3, [pc, #176]	; (8004a5c <main+0xf0>)
 80049aa:	601c      	str	r4, [r3, #0]
	  /* Sensors */
#if IMU_FLAG
	  imu_.init(&hspi1, &nh_);
 80049ac:	4a2a      	ldr	r2, [pc, #168]	; (8004a58 <main+0xec>)
 80049ae:	492c      	ldr	r1, [pc, #176]	; (8004a60 <main+0xf4>)
 80049b0:	482c      	ldr	r0, [pc, #176]	; (8004a64 <main+0xf8>)
 80049b2:	f002 fbf9 	bl	80071a8 <_ZN3IMU4initEP19__SPI_HandleTypeDefPN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EEE>
	  /* State Estimation */
	  estimator_.init(&imu_, NULL, NULL, &nh_);  // imu  => att
 80049b6:	4b28      	ldr	r3, [pc, #160]	; (8004a58 <main+0xec>)
 80049b8:	9300      	str	r3, [sp, #0]
 80049ba:	2300      	movs	r3, #0
 80049bc:	2200      	movs	r2, #0
 80049be:	4929      	ldr	r1, [pc, #164]	; (8004a64 <main+0xf8>)
 80049c0:	4829      	ldr	r0, [pc, #164]	; (8004a68 <main+0xfc>)
 80049c2:	f7ff ff04 	bl	80047ce <_ZN13StateEstimate4initEP3IMUP4BaroP3GPSPN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EEE>
#endif

	  /* all process can start right now! */
	  start_process_flag_ = true;
 80049c6:	4b29      	ldr	r3, [pc, #164]	; (8004a6c <main+0x100>)
 80049c8:	2201      	movs	r2, #1
 80049ca:	701a      	strb	r2, [r3, #0]
  while (1)
  {
  /* USER CODE END WHILE */

  /* USER CODE BEGIN 3 */
	  if(start_process_flag_){
 80049cc:	4b27      	ldr	r3, [pc, #156]	; (8004a6c <main+0x100>)
 80049ce:	781b      	ldrb	r3, [r3, #0]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d010      	beq.n	80049f6 <main+0x8a>
		  if(LEDcounter >= 10){
 80049d4:	4b26      	ldr	r3, [pc, #152]	; (8004a70 <main+0x104>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	2b09      	cmp	r3, #9
 80049da:	dd07      	ble.n	80049ec <main+0x80>
			  HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_13);
 80049dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80049e0:	4824      	ldr	r0, [pc, #144]	; (8004a74 <main+0x108>)
 80049e2:	f003 fe46 	bl	8008672 <HAL_GPIO_TogglePin>
			  LEDcounter = 0;
 80049e6:	4b22      	ldr	r3, [pc, #136]	; (8004a70 <main+0x104>)
 80049e8:	2200      	movs	r2, #0
 80049ea:	601a      	str	r2, [r3, #0]
		  }
		  LEDcounter++;
 80049ec:	4b20      	ldr	r3, [pc, #128]	; (8004a70 <main+0x104>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	3301      	adds	r3, #1
 80049f2:	4a1f      	ldr	r2, [pc, #124]	; (8004a70 <main+0x104>)
 80049f4:	6013      	str	r3, [r2, #0]
	  }
	  HAL_Delay(10);
 80049f6:	200a      	movs	r0, #10
 80049f8:	f002 ff90 	bl	800791c <HAL_Delay>
	  //uint8_t c[5]={1,2,3,4,5};

	  HAL_ADC_Start(&hadc1);
 80049fc:	481e      	ldr	r0, [pc, #120]	; (8004a78 <main+0x10c>)
 80049fe:	f003 f841 	bl	8007a84 <HAL_ADC_Start>
	  for(int i=0; i<4; i++){
 8004a02:	2300      	movs	r3, #0
 8004a04:	60fb      	str	r3, [r7, #12]
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2b03      	cmp	r3, #3
 8004a0a:	dc13      	bgt.n	8004a34 <main+0xc8>
		  HAL_ADC_PollForConversion(&hadc1, 1);
 8004a0c:	2101      	movs	r1, #1
 8004a0e:	481a      	ldr	r0, [pc, #104]	; (8004a78 <main+0x10c>)
 8004a10:	f003 f8b6 	bl	8007b80 <HAL_ADC_PollForConversion>
		  ADC_value[i] = HAL_ADC_GetValue(&hadc1);
 8004a14:	4818      	ldr	r0, [pc, #96]	; (8004a78 <main+0x10c>)
 8004a16:	f003 f902 	bl	8007c1e <HAL_ADC_GetValue>
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	b29a      	uxth	r2, r3
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	005b      	lsls	r3, r3, #1
 8004a22:	f107 0110 	add.w	r1, r7, #16
 8004a26:	440b      	add	r3, r1
 8004a28:	f823 2c0c 	strh.w	r2, [r3, #-12]
	  for(int i=0; i<4; i++){
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	3301      	adds	r3, #1
 8004a30:	60fb      	str	r3, [r7, #12]
 8004a32:	e7e8      	b.n	8004a06 <main+0x9a>
	  }
	  testnode->publish(ADC_value);
 8004a34:	4b09      	ldr	r3, [pc, #36]	; (8004a5c <main+0xf0>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	1d3a      	adds	r2, r7, #4
 8004a3a:	4611      	mov	r1, r2
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	f7fd ff5d 	bl	80028fc <_ZN7RosNode7publishEPt>
	  HAL_ADC_Stop(&hadc1);
 8004a42:	480d      	ldr	r0, [pc, #52]	; (8004a78 <main+0x10c>)
 8004a44:	f003 f87e 	bl	8007b44 <HAL_ADC_Stop>

		  //imu_.update();
	 // HAL_IWDG_Refresh(&hiwdg);

  }
 8004a48:	e7c0      	b.n	80049cc <main+0x60>
	  testnode = new RosNode(&nh_);
 8004a4a:	4620      	mov	r0, r4
 8004a4c:	f005 fb15 	bl	800a07a <_ZdlPv>
 8004a50:	f005 fb52 	bl	800a0f8 <__cxa_end_cleanup>
 8004a54:	20003cac 	.word	0x20003cac
 8004a58:	20000534 	.word	0x20000534
 8004a5c:	20000840 	.word	0x20000840
 8004a60:	20003b94 	.word	0x20003b94
 8004a64:	20000844 	.word	0x20000844
 8004a68:	20000958 	.word	0x20000958
 8004a6c:	20000a18 	.word	0x20000a18
 8004a70:	20000a20 	.word	0x20000a20
 8004a74:	40020800 	.word	0x40020800
 8004a78:	20000a30 	.word	0x20000a30

08004a7c <_Z18SystemClock_Configv>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b094      	sub	sp, #80	; 0x50
 8004a80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004a82:	2300      	movs	r3, #0
 8004a84:	607b      	str	r3, [r7, #4]
 8004a86:	4a3a      	ldr	r2, [pc, #232]	; (8004b70 <_Z18SystemClock_Configv+0xf4>)
 8004a88:	4b39      	ldr	r3, [pc, #228]	; (8004b70 <_Z18SystemClock_Configv+0xf4>)
 8004a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a90:	6413      	str	r3, [r2, #64]	; 0x40
 8004a92:	4b37      	ldr	r3, [pc, #220]	; (8004b70 <_Z18SystemClock_Configv+0xf4>)
 8004a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a9a:	607b      	str	r3, [r7, #4]
 8004a9c:	687b      	ldr	r3, [r7, #4]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	603b      	str	r3, [r7, #0]
 8004aa2:	4a34      	ldr	r2, [pc, #208]	; (8004b74 <_Z18SystemClock_Configv+0xf8>)
 8004aa4:	4b33      	ldr	r3, [pc, #204]	; (8004b74 <_Z18SystemClock_Configv+0xf8>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004aac:	6013      	str	r3, [r2, #0]
 8004aae:	4b31      	ldr	r3, [pc, #196]	; (8004b74 <_Z18SystemClock_Configv+0xf8>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004ab6:	603b      	str	r3, [r7, #0]
 8004ab8:	683b      	ldr	r3, [r7, #0]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8004aba:	2309      	movs	r3, #9
 8004abc:	61fb      	str	r3, [r7, #28]
   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004abe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004ac2:	623b      	str	r3, [r7, #32]
   RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	633b      	str	r3, [r7, #48]	; 0x30
   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004ac8:	2302      	movs	r3, #2
 8004aca:	637b      	str	r3, [r7, #52]	; 0x34
   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004acc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004ad0:	63bb      	str	r3, [r7, #56]	; 0x38
   RCC_OscInitStruct.PLL.PLLM = 4;
 8004ad2:	2304      	movs	r3, #4
 8004ad4:	63fb      	str	r3, [r7, #60]	; 0x3c
   RCC_OscInitStruct.PLL.PLLN = 100;
 8004ad6:	2364      	movs	r3, #100	; 0x64
 8004ad8:	643b      	str	r3, [r7, #64]	; 0x40
   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004ada:	2302      	movs	r3, #2
 8004adc:	647b      	str	r3, [r7, #68]	; 0x44
   RCC_OscInitStruct.PLL.PLLQ = 4;
 8004ade:	2304      	movs	r3, #4
 8004ae0:	64bb      	str	r3, [r7, #72]	; 0x48
   RCC_OscInitStruct.PLL.PLLR = 2;
 8004ae2:	2302      	movs	r3, #2
 8004ae4:	64fb      	str	r3, [r7, #76]	; 0x4c
   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004ae6:	f107 031c 	add.w	r3, r7, #28
 8004aea:	4618      	mov	r0, r3
 8004aec:	f003 feb4 	bl	8008858 <HAL_RCC_OscConfig>
 8004af0:	4603      	mov	r3, r0
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	bf14      	ite	ne
 8004af6:	2301      	movne	r3, #1
 8004af8:	2300      	moveq	r3, #0
 8004afa:	b2db      	uxtb	r3, r3
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d003      	beq.n	8004b08 <_Z18SystemClock_Configv+0x8c>
   {
     _Error_Handler(__FILE__, __LINE__);
 8004b00:	21e3      	movs	r1, #227	; 0xe3
 8004b02:	481d      	ldr	r0, [pc, #116]	; (8004b78 <_Z18SystemClock_Configv+0xfc>)
 8004b04:	f000 f83c 	bl	8004b80 <_Error_Handler>
   }


    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004b08:	230f      	movs	r3, #15
 8004b0a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004b0c:	2302      	movs	r3, #2
 8004b0e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004b10:	2300      	movs	r3, #0
 8004b12:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004b14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004b18:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8004b1e:	f107 0308 	add.w	r3, r7, #8
 8004b22:	2103      	movs	r1, #3
 8004b24:	4618      	mov	r0, r3
 8004b26:	f003 fdd7 	bl	80086d8 <HAL_RCC_ClockConfig>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	bf14      	ite	ne
 8004b30:	2301      	movne	r3, #1
 8004b32:	2300      	moveq	r3, #0
 8004b34:	b2db      	uxtb	r3, r3
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d003      	beq.n	8004b42 <_Z18SystemClock_Configv+0xc6>
  {
    _Error_Handler(__FILE__, __LINE__);
 8004b3a:	21f2      	movs	r1, #242	; 0xf2
 8004b3c:	480e      	ldr	r0, [pc, #56]	; (8004b78 <_Z18SystemClock_Configv+0xfc>)
 8004b3e:	f000 f81f 	bl	8004b80 <_Error_Handler>
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8004b42:	f003 fe63 	bl	800880c <HAL_RCC_GetHCLKFreq>
 8004b46:	4602      	mov	r2, r0
 8004b48:	4b0c      	ldr	r3, [pc, #48]	; (8004b7c <_Z18SystemClock_Configv+0x100>)
 8004b4a:	fba3 2302 	umull	r2, r3, r3, r2
 8004b4e:	099b      	lsrs	r3, r3, #6
 8004b50:	4618      	mov	r0, r3
 8004b52:	f003 f94d 	bl	8007df0 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8004b56:	2004      	movs	r0, #4
 8004b58:	f003 f960 	bl	8007e1c <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	2100      	movs	r1, #0
 8004b60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004b64:	f003 f904 	bl	8007d70 <HAL_NVIC_SetPriority>
}
 8004b68:	bf00      	nop
 8004b6a:	3750      	adds	r7, #80	; 0x50
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}
 8004b70:	40023800 	.word	0x40023800
 8004b74:	40007000 	.word	0x40007000
 8004b78:	0800c618 	.word	0x0800c618
 8004b7c:	10624dd3 	.word	0x10624dd3

08004b80 <_Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void _Error_Handler(char * file, int line)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b083      	sub	sp, #12
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
 8004b88:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1) 
 8004b8a:	e7fe      	b.n	8004b8a <_Error_Handler+0xa>

08004b8c <_ZN10UartDriverI18UART_HandleTypeDefLi50ELi250ELi400ELi8EEC1EPS0_>:
  UartDriver(Hardware *huart): huart_(huart)
 8004b8c:	b590      	push	{r4, r7, lr}
 8004b8e:	b083      	sub	sp, #12
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
 8004b94:	6039      	str	r1, [r7, #0]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	683a      	ldr	r2, [r7, #0]
 8004b9a:	601a      	str	r2, [r3, #0]
    rx_ = new RxBuffer<Hardware, MAX_RX_BUFFER, RX_BURST_SIZE>(huart_);
 8004b9c:	2004      	movs	r0, #4
 8004b9e:	f005 fa9a 	bl	800a0d6 <_Znwj>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	461c      	mov	r4, r3
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4619      	mov	r1, r3
 8004bac:	4620      	mov	r0, r4
 8004bae:	f000 fc41 	bl	8005434 <_ZN8RxBufferI18UART_HandleTypeDefLi400ELi8EEC1EPS0_>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	605c      	str	r4, [r3, #4]
    tx_ = new TxBuffer<Hardware, MAX_TX_BUFFER, MAX_TX_BUFFER_LENGTH>(huart_);
 8004bb6:	2004      	movs	r0, #4
 8004bb8:	f005 fa8d 	bl	800a0d6 <_Znwj>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	461c      	mov	r4, r3
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4619      	mov	r1, r3
 8004bc6:	4620      	mov	r0, r4
 8004bc8:	f000 fc68 	bl	800549c <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EEC1EPS0_>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	609c      	str	r4, [r3, #8]
  }
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	e009      	b.n	8004be8 <_ZN10UartDriverI18UART_HandleTypeDefLi50ELi250ELi400ELi8EEC1EPS0_+0x5c>
    rx_ = new RxBuffer<Hardware, MAX_RX_BUFFER, RX_BURST_SIZE>(huart_);
 8004bd4:	4620      	mov	r0, r4
 8004bd6:	f005 fa50 	bl	800a07a <_ZdlPv>
 8004bda:	f005 fa8d 	bl	800a0f8 <__cxa_end_cleanup>
    tx_ = new TxBuffer<Hardware, MAX_TX_BUFFER, MAX_TX_BUFFER_LENGTH>(huart_);
 8004bde:	4620      	mov	r0, r4
 8004be0:	f005 fa4b 	bl	800a07a <_ZdlPv>
 8004be4:	f005 fa88 	bl	800a0f8 <__cxa_end_cleanup>
  }
 8004be8:	4618      	mov	r0, r3
 8004bea:	370c      	adds	r7, #12
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd90      	pop	{r4, r7, pc}

08004bf0 <_ZN10UartDriverI18UART_HandleTypeDefLi50ELi250ELi400ELi8EE5beginEm>:
  void begin(uint32_t baud_rate)
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b082      	sub	sp, #8
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
 8004bf8:	6039      	str	r1, [r7, #0]
    huart_->Init.BaudRate = baud_rate;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	683a      	ldr	r2, [r7, #0]
 8004c00:	605a      	str	r2, [r3, #4]
    HAL_UART_Init(huart_);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4618      	mov	r0, r3
 8004c08:	f004 fc1a 	bl	8009440 <HAL_UART_Init>
  }
 8004c0c:	bf00      	nop
 8004c0e:	3708      	adds	r7, #8
 8004c10:	46bd      	mov	sp, r7
 8004c12:	bd80      	pop	{r7, pc}

08004c14 <_ZN10UartDriverI18UART_HandleTypeDefLi50ELi250ELi400ELi8EE4readEv>:
  int read()
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b082      	sub	sp, #8
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
    return rx_->read();
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	4618      	mov	r0, r3
 8004c22:	f000 fc9d 	bl	8005560 <_ZN8RxBufferI18UART_HandleTypeDefLi400ELi8EE4readEv>
 8004c26:	4603      	mov	r3, r0
  }
 8004c28:	4618      	mov	r0, r3
 8004c2a:	3708      	adds	r7, #8
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bd80      	pop	{r7, pc}

08004c30 <_ZN10UartDriverI18UART_HandleTypeDefLi50ELi250ELi400ELi8EE5writeEPhh>:
  void write(uint8_t * data_byte, uint8_t size)
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b084      	sub	sp, #16
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	60f8      	str	r0, [r7, #12]
 8004c38:	60b9      	str	r1, [r7, #8]
 8004c3a:	4613      	mov	r3, r2
 8004c3c:	71fb      	strb	r3, [r7, #7]
    tx_->write(data_byte, size);
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	689b      	ldr	r3, [r3, #8]
 8004c42:	79fa      	ldrb	r2, [r7, #7]
 8004c44:	68b9      	ldr	r1, [r7, #8]
 8004c46:	4618      	mov	r0, r3
 8004c48:	f000 fcaa 	bl	80055a0 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh>
  }
 8004c4c:	bf00      	nop
 8004c4e:	3710      	adds	r7, #16
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd80      	pop	{r7, pc}

08004c54 <_ZN7SENSOR_I7Vector3IfEEC1Ev>:
 **/
template<typename T>
class SENSOR_
{
public:
  SENSOR_(){};
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b082      	sub	sp, #8
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f000 f812 	bl	8004c88 <_ZNSt6vectorI7Vector3IfESaIS1_EEC1Ev>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	4618      	mov	r0, r3
 8004c68:	3708      	adds	r7, #8
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}

08004c6e <_ZN7SENSOR_I7Vector3IfEED1Ev>:
  ~SENSOR_(){};
 8004c6e:	b580      	push	{r7, lr}
 8004c70:	b082      	sub	sp, #8
 8004c72:	af00      	add	r7, sp, #0
 8004c74:	6078      	str	r0, [r7, #4]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	4618      	mov	r0, r3
 8004c7a:	f000 f812 	bl	8004ca2 <_ZNSt6vectorI7Vector3IfESaIS1_EED1Ev>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	4618      	mov	r0, r3
 8004c82:	3708      	adds	r7, #8
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bd80      	pop	{r7, pc}

08004c88 <_ZNSt6vectorI7Vector3IfESaIS1_EEC1Ev>:
      // (assign() and get_allocator() are also listed in this section)

      /**
       *  @brief  Creates a %vector with no elements.
       */
      vector()
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b082      	sub	sp, #8
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
#if __cplusplus >= 201103L
      noexcept(is_nothrow_default_constructible<_Alloc>::value)
#endif
      : _Base() { }
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	4618      	mov	r0, r3
 8004c94:	f000 ffde 	bl	8005c54 <_ZNSt12_Vector_baseI7Vector3IfESaIS1_EEC1Ev>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	3708      	adds	r7, #8
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}

08004ca2 <_ZNSt6vectorI7Vector3IfESaIS1_EED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
 8004ca2:	b5b0      	push	{r4, r5, r7, lr}
 8004ca4:	b082      	sub	sp, #8
 8004ca6:	af00      	add	r7, sp, #0
 8004ca8:	6078      	str	r0, [r7, #4]
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681c      	ldr	r4, [r3, #0]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator()); }
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	f000 fffb 	bl	8005cb0 <_ZNSt12_Vector_baseI7Vector3IfESaIS1_EE19_M_get_Tp_allocatorEv>
 8004cba:	4603      	mov	r3, r0
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8004cbc:	461a      	mov	r2, r3
 8004cbe:	4629      	mov	r1, r5
 8004cc0:	4620      	mov	r0, r4
 8004cc2:	f001 f800 	bl	8005cc6 <_ZSt8_DestroyIP7Vector3IfES1_EvT_S3_RSaIT0_E>
		      _M_get_Tp_allocator()); }
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	4618      	mov	r0, r3
 8004cca:	f000 ffd1 	bl	8005c70 <_ZNSt12_Vector_baseI7Vector3IfESaIS1_EED1Ev>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	3708      	adds	r7, #8
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bdb0      	pop	{r4, r5, r7, pc}

08004cd8 <_ZN7Vector3IfEC1Ev>:

public:
    T        x, y, z;

    // trivial ctor
    Vector3<T>() {
 8004cd8:	b480      	push	{r7}
 8004cda:	b083      	sub	sp, #12
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
        x = y = z = 0;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	f04f 0200 	mov.w	r2, #0
 8004ce6:	609a      	str	r2, [r3, #8]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	689a      	ldr	r2, [r3, #8]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	605a      	str	r2, [r3, #4]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	685a      	ldr	r2, [r3, #4]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	601a      	str	r2, [r3, #0]
    }
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	370c      	adds	r7, #12
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d04:	4770      	bx	lr
	...

08004d08 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE3nowEv>:

      this->setNow(t.data);
      last_sync_receive_time = hardware_.time();
    }

    Time now()
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b084      	sub	sp, #16
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
 8004d10:	6039      	str	r1, [r7, #0]
    {
      uint32_t ms = hardware_.time();
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	3304      	adds	r3, #4
 8004d16:	4618      	mov	r0, r3
 8004d18:	f7fd fb1b 	bl	8002352 <_ZN13STMF4Hardware4timeEv>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	60fb      	str	r3, [r7, #12]
      Time current_time;
 8004d20:	6878      	ldr	r0, [r7, #4]
 8004d22:	f7fc fc9f 	bl	8001664 <_ZN3ros4TimeC1Ev>
      current_time.sec = ms/1000 + sec_offset;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	4a12      	ldr	r2, [pc, #72]	; (8004d74 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE3nowEv+0x6c>)
 8004d2a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d2e:	099a      	lsrs	r2, r3, #6
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	695b      	ldr	r3, [r3, #20]
 8004d34:	441a      	add	r2, r3
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	601a      	str	r2, [r3, #0]
      current_time.nsec = (ms%1000)*1000000UL + nsec_offset;
 8004d3a:	68fa      	ldr	r2, [r7, #12]
 8004d3c:	4b0d      	ldr	r3, [pc, #52]	; (8004d74 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE3nowEv+0x6c>)
 8004d3e:	fba3 1302 	umull	r1, r3, r3, r2
 8004d42:	099b      	lsrs	r3, r3, #6
 8004d44:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004d48:	fb01 f303 	mul.w	r3, r1, r3
 8004d4c:	1ad3      	subs	r3, r2, r3
 8004d4e:	4a0a      	ldr	r2, [pc, #40]	; (8004d78 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE3nowEv+0x70>)
 8004d50:	fb02 f203 	mul.w	r2, r2, r3
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	699b      	ldr	r3, [r3, #24]
 8004d58:	441a      	add	r2, r3
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	605a      	str	r2, [r3, #4]
      normalizeSecNSec(current_time.sec, current_time.nsec);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	3304      	adds	r3, #4
 8004d62:	4619      	mov	r1, r3
 8004d64:	6878      	ldr	r0, [r7, #4]
 8004d66:	f002 fd69 	bl	800783c <_ZN3ros16normalizeSecNSecERmS0_>
      return current_time;
 8004d6a:	bf00      	nop
    }
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	3710      	adds	r7, #16
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bd80      	pop	{r7, pc}
 8004d74:	10624dd3 	.word	0x10624dd3
 8004d78:	000f4240 	.word	0x000f4240

08004d7c <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE9advertiseERNS_9PublisherE>:
    /********************************************************************
     * Topic Management
     */

    /* Register a new publisher */
    bool advertise(Publisher & p)
 8004d7c:	b480      	push	{r7}
 8004d7e:	b085      	sub	sp, #20
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
 8004d84:	6039      	str	r1, [r7, #0]
    {
      for(int i = 0; i < MAX_PUBLISHERS; i++){
 8004d86:	2300      	movs	r3, #0
 8004d88:	60fb      	str	r3, [r7, #12]
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2b13      	cmp	r3, #19
 8004d8e:	dc1c      	bgt.n	8004dca <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE9advertiseERNS_9PublisherE+0x4e>
        if(publishers[i] == 0){ // empty slot
 8004d90:	687a      	ldr	r2, [r7, #4]
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	3386      	adds	r3, #134	; 0x86
 8004d96:	009b      	lsls	r3, r3, #2
 8004d98:	4413      	add	r3, r2
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d110      	bne.n	8004dc2 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE9advertiseERNS_9PublisherE+0x46>
          publishers[i] = &p;
 8004da0:	687a      	ldr	r2, [r7, #4]
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	3386      	adds	r3, #134	; 0x86
 8004da6:	009b      	lsls	r3, r3, #2
 8004da8:	4413      	add	r3, r2
 8004daa:	683a      	ldr	r2, [r7, #0]
 8004dac:	605a      	str	r2, [r3, #4]
          p.id_ = i+100+MAX_SUBSCRIBERS;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	f103 0278 	add.w	r2, r3, #120	; 0x78
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	609a      	str	r2, [r3, #8]
          p.nh_ = this;
 8004db8:	687a      	ldr	r2, [r7, #4]
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	60da      	str	r2, [r3, #12]
          return true;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	e004      	b.n	8004dcc <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE9advertiseERNS_9PublisherE+0x50>
      for(int i = 0; i < MAX_PUBLISHERS; i++){
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	3301      	adds	r3, #1
 8004dc6:	60fb      	str	r3, [r7, #12]
 8004dc8:	e7df      	b.n	8004d8a <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE9advertiseERNS_9PublisherE+0xe>
        }
      }
      return false;
 8004dca:	2300      	movs	r3, #0
    }
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3714      	adds	r7, #20
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd6:	4770      	bx	lr

08004dd8 <_ZN3ros11Subscriber_C1Ev>:
#include <functional>

namespace ros {

  /* Base class for objects subscribers. */
  class Subscriber_
 8004dd8:	b480      	push	{r7}
 8004dda:	b083      	sub	sp, #12
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
 8004de0:	4a04      	ldr	r2, [pc, #16]	; (8004df4 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	601a      	str	r2, [r3, #0]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	4618      	mov	r0, r3
 8004dea:	370c      	adds	r7, #12
 8004dec:	46bd      	mov	sp, r7
 8004dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df2:	4770      	bx	lr
 8004df4:	0800c740 	.word	0x0800c740

08004df8 <_ZN7Matrix3IfEC1Ev>:
    // Vectors comprising the rows of the matrix
    Vector3<T>        a, b, c;

    // trivial ctor
    // note that the Vector3 ctor will zero the vector elements
    Matrix3<T>() {
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b082      	sub	sp, #8
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	4618      	mov	r0, r3
 8004e04:	f7ff ff68 	bl	8004cd8 <_ZN7Vector3IfEC1Ev>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	330c      	adds	r3, #12
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	f7ff ff63 	bl	8004cd8 <_ZN7Vector3IfEC1Ev>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	3318      	adds	r3, #24
 8004e16:	4618      	mov	r0, r3
 8004e18:	f7ff ff5e 	bl	8004cd8 <_ZN7Vector3IfEC1Ev>
    }
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	4618      	mov	r0, r3
 8004e20:	3708      	adds	r7, #8
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}

08004e26 <_ZN7Matrix3IfE8identityEv>:

    // zero the matrix
    void        zero(void);

    // setup the identity matrix
    void        identity(void) {
 8004e26:	b480      	push	{r7}
 8004e28:	b083      	sub	sp, #12
 8004e2a:	af00      	add	r7, sp, #0
 8004e2c:	6078      	str	r0, [r7, #4]
        a.x = b.y = c.z = 1;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004e34:	621a      	str	r2, [r3, #32]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6a1a      	ldr	r2, [r3, #32]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	611a      	str	r2, [r3, #16]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	691a      	ldr	r2, [r3, #16]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	601a      	str	r2, [r3, #0]
        a.y = a.z = 0;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	f04f 0200 	mov.w	r2, #0
 8004e4c:	609a      	str	r2, [r3, #8]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	689a      	ldr	r2, [r3, #8]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	605a      	str	r2, [r3, #4]
        b.x = b.z = 0;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	f04f 0200 	mov.w	r2, #0
 8004e5c:	615a      	str	r2, [r3, #20]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	695a      	ldr	r2, [r3, #20]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	60da      	str	r2, [r3, #12]
        c.x = c.y = 0;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	f04f 0200 	mov.w	r2, #0
 8004e6c:	61da      	str	r2, [r3, #28]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	69da      	ldr	r2, [r3, #28]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	619a      	str	r2, [r3, #24]
    }
 8004e76:	bf00      	nop
 8004e78:	370c      	adds	r7, #12
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e80:	4770      	bx	lr

08004e82 <_ZN7Vector3IfEixEh>:

    // uniform scaling
    Vector3<T> &operator /=(const T num);

    // allow a vector3 to be used as an array, 0 indexed
    T & operator[](uint8_t i) {
 8004e82:	b480      	push	{r7}
 8004e84:	b085      	sub	sp, #20
 8004e86:	af00      	add	r7, sp, #0
 8004e88:	6078      	str	r0, [r7, #4]
 8004e8a:	460b      	mov	r3, r1
 8004e8c:	70fb      	strb	r3, [r7, #3]
        T *_v = &x;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	60fb      	str	r3, [r7, #12]
#if MATH_CHECK_INDEXES
        assert(i >= 0 && i < 3);
#endif
        return _v[i];
 8004e92:	78fb      	ldrb	r3, [r7, #3]
 8004e94:	009b      	lsls	r3, r3, #2
 8004e96:	68fa      	ldr	r2, [r7, #12]
 8004e98:	4413      	add	r3, r2
    }
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	3714      	adds	r7, #20
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea4:	4770      	bx	lr
	...

08004ea8 <_ZN3ros11Subscriber2IN6kduino11DesireCoordE16AttitudeEstimateEC1EPKcMS3_FvRKS2_EPS3_i>:
  class Subscriber2: public Subscriber_{
    public:
      typedef void(T::*CallbackT)(const MsgT&);
      MsgT msg;

      Subscriber2(const char * topic_name, CallbackT cb, T *obj,  int endpoint=rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b084      	sub	sp, #16
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	60f8      	str	r0, [r7, #12]
 8004eb0:	60b9      	str	r1, [r7, #8]
 8004eb2:	4639      	mov	r1, r7
 8004eb4:	e881 000c 	stmia.w	r1, {r2, r3}
        obj_(obj), fun_obj_(cb), endpoint_(endpoint)
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	4618      	mov	r0, r3
 8004ebc:	f7ff ff8c 	bl	8004dd8 <_ZN3ros11Subscriber_C1Ev>
 8004ec0:	4a0e      	ldr	r2, [pc, #56]	; (8004efc <_ZN3ros11Subscriber2IN6kduino11DesireCoordE16AttitudeEstimateEC1EPKcMS3_FvRKS2_EPS3_i+0x54>)
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	601a      	str	r2, [r3, #0]
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	330c      	adds	r3, #12
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f7fe f886 	bl	8002fdc <_ZN6kduino11DesireCoordC1Ev>
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	69ba      	ldr	r2, [r7, #24]
 8004ed4:	621a      	str	r2, [r3, #32]
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8004edc:	463b      	mov	r3, r7
 8004ede:	e893 0006 	ldmia.w	r3, {r1, r2}
 8004ee2:	f000 ff09 	bl	8005cf8 <_ZNSt10mem_fun1_tIv16AttitudeEstimateRKN6kduino11DesireCoordEEC1EMS0_FvS4_E>
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	69fa      	ldr	r2, [r7, #28]
 8004eea:	62da      	str	r2, [r3, #44]	; 0x2c
      {
        //std::binder1st t  = std::bind1st(std::mem_fun1_t())
        topic_ = topic_name;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	68ba      	ldr	r2, [r7, #8]
 8004ef0:	609a      	str	r2, [r3, #8]
      };
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	3710      	adds	r7, #16
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}
 8004efc:	0800c6b4 	.word	0x0800c6b4

08004f00 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE9subscribeIN6kduino11DesireCoordE16AttitudeEstimateEEbRNS_11Subscriber2IT_T0_EE>:
      }
      return false;
    }
    /* Register a new subscriber, which is a member of class*/
    template<typename MsgT, class T>
    bool subscribe(Subscriber2< MsgT, T> & s){
 8004f00:	b480      	push	{r7}
 8004f02:	b085      	sub	sp, #20
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
 8004f08:	6039      	str	r1, [r7, #0]
      for(int i = 0; i < MAX_SUBSCRIBERS; i++){
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	60fb      	str	r3, [r7, #12]
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	2b13      	cmp	r3, #19
 8004f12:	dc19      	bgt.n	8004f48 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE9subscribeIN6kduino11DesireCoordE16AttitudeEstimateEEbRNS_11Subscriber2IT_T0_EE+0x48>
        if(subscribers[i] == 0){ // empty slot
 8004f14:	687a      	ldr	r2, [r7, #4]
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	339a      	adds	r3, #154	; 0x9a
 8004f1a:	009b      	lsls	r3, r3, #2
 8004f1c:	4413      	add	r3, r2
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d10d      	bne.n	8004f40 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE9subscribeIN6kduino11DesireCoordE16AttitudeEstimateEEbRNS_11Subscriber2IT_T0_EE+0x40>
          subscribers[i] = (Subscriber_*) &s;
 8004f24:	683a      	ldr	r2, [r7, #0]
 8004f26:	6879      	ldr	r1, [r7, #4]
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	339a      	adds	r3, #154	; 0x9a
 8004f2c:	009b      	lsls	r3, r3, #2
 8004f2e:	440b      	add	r3, r1
 8004f30:	605a      	str	r2, [r3, #4]
          s.id_ = i+100;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	605a      	str	r2, [r3, #4]
          return true;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	e004      	b.n	8004f4a <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE9subscribeIN6kduino11DesireCoordE16AttitudeEstimateEEbRNS_11Subscriber2IT_T0_EE+0x4a>
      for(int i = 0; i < MAX_SUBSCRIBERS; i++){
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	3301      	adds	r3, #1
 8004f44:	60fb      	str	r3, [r7, #12]
 8004f46:	e7e2      	b.n	8004f0e <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE9subscribeIN6kduino11DesireCoordE16AttitudeEstimateEEbRNS_11Subscriber2IT_T0_EE+0xe>
        }
      }
      return false;
 8004f48:	2300      	movs	r3, #0
    }
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	3714      	adds	r7, #20
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f54:	4770      	bx	lr

08004f56 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE9connectedEv>:
    virtual bool connected() {
 8004f56:	b480      	push	{r7}
 8004f58:	b083      	sub	sp, #12
 8004f5a:	af00      	add	r7, sp, #0
 8004f5c:	6078      	str	r0, [r7, #4]
      return configured_;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	f893 32d0 	ldrb.w	r3, [r3, #720]	; 0x2d0
    };
 8004f64:	4618      	mov	r0, r3
 8004f66:	370c      	adds	r7, #12
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6e:	4770      	bx	lr

08004f70 <_ZN3ros15NodeHandleBase_C1Ev>:
  class NodeHandleBase_{
 8004f70:	b480      	push	{r7}
 8004f72:	b083      	sub	sp, #12
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
 8004f78:	4a04      	ldr	r2, [pc, #16]	; (8004f8c <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	601a      	str	r2, [r3, #0]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	4618      	mov	r0, r3
 8004f82:	370c      	adds	r7, #12
 8004f84:	46bd      	mov	sp, r7
 8004f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8a:	4770      	bx	lr
 8004f8c:	0800c758 	.word	0x0800c758

08004f90 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EEC1Ev>:
    NodeHandle_() : configured_(false) {
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b086      	sub	sp, #24
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	f7ff ffe8 	bl	8004f70 <_ZN3ros15NodeHandleBase_C1Ev>
 8004fa0:	4a36      	ldr	r2, [pc, #216]	; (800507c <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EEC1Ev+0xec>)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	601a      	str	r2, [r3, #0]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	3304      	adds	r3, #4
 8004faa:	4618      	mov	r0, r3
 8004fac:	f7fd f980 	bl	80022b0 <_ZN13STMF4HardwareC1Ev>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	f883 22d0 	strb.w	r2, [r3, #720]	; 0x2d0
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	f503 7339 	add.w	r3, r3, #740	; 0x2e4
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	f7fc fec6 	bl	8001d50 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
      for(unsigned int i=0; i< MAX_PUBLISHERS; i++)
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	617b      	str	r3, [r7, #20]
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	2b13      	cmp	r3, #19
 8004fcc:	d80a      	bhi.n	8004fe4 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EEC1Ev+0x54>
        publishers[i] = 0;
 8004fce:	687a      	ldr	r2, [r7, #4]
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	3386      	adds	r3, #134	; 0x86
 8004fd4:	009b      	lsls	r3, r3, #2
 8004fd6:	4413      	add	r3, r2
 8004fd8:	2200      	movs	r2, #0
 8004fda:	605a      	str	r2, [r3, #4]
      for(unsigned int i=0; i< MAX_PUBLISHERS; i++)
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	3301      	adds	r3, #1
 8004fe0:	617b      	str	r3, [r7, #20]
 8004fe2:	e7f1      	b.n	8004fc8 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EEC1Ev+0x38>
      for(unsigned int i=0; i< MAX_SUBSCRIBERS; i++)
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	613b      	str	r3, [r7, #16]
 8004fe8:	693b      	ldr	r3, [r7, #16]
 8004fea:	2b13      	cmp	r3, #19
 8004fec:	d80a      	bhi.n	8005004 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EEC1Ev+0x74>
        subscribers[i] = 0;
 8004fee:	687a      	ldr	r2, [r7, #4]
 8004ff0:	693b      	ldr	r3, [r7, #16]
 8004ff2:	339a      	adds	r3, #154	; 0x9a
 8004ff4:	009b      	lsls	r3, r3, #2
 8004ff6:	4413      	add	r3, r2
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	605a      	str	r2, [r3, #4]
      for(unsigned int i=0; i< MAX_SUBSCRIBERS; i++)
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	3301      	adds	r3, #1
 8005000:	613b      	str	r3, [r7, #16]
 8005002:	e7f1      	b.n	8004fe8 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EEC1Ev+0x58>
      for(unsigned int i=0; i< INPUT_SIZE; i++)
 8005004:	2300      	movs	r3, #0
 8005006:	60fb      	str	r3, [r7, #12]
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	2bfe      	cmp	r3, #254	; 0xfe
 800500c:	d809      	bhi.n	8005022 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EEC1Ev+0x92>
        message_in[i] = 0;
 800500e:	687a      	ldr	r2, [r7, #4]
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	4413      	add	r3, r2
 8005014:	331c      	adds	r3, #28
 8005016:	2200      	movs	r2, #0
 8005018:	701a      	strb	r2, [r3, #0]
      for(unsigned int i=0; i< INPUT_SIZE; i++)
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	3301      	adds	r3, #1
 800501e:	60fb      	str	r3, [r7, #12]
 8005020:	e7f2      	b.n	8005008 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EEC1Ev+0x78>
      for(unsigned int i=0; i< OUTPUT_SIZE; i++)
 8005022:	2300      	movs	r3, #0
 8005024:	60bb      	str	r3, [r7, #8]
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	2bfe      	cmp	r3, #254	; 0xfe
 800502a:	d80a      	bhi.n	8005042 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EEC1Ev+0xb2>
        message_out[i] = 0;
 800502c:	687a      	ldr	r2, [r7, #4]
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	4413      	add	r3, r2
 8005032:	f203 131b 	addw	r3, r3, #283	; 0x11b
 8005036:	2200      	movs	r2, #0
 8005038:	701a      	strb	r2, [r3, #0]
      for(unsigned int i=0; i< OUTPUT_SIZE; i++)
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	3301      	adds	r3, #1
 800503e:	60bb      	str	r3, [r7, #8]
 8005040:	e7f1      	b.n	8005026 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EEC1Ev+0x96>
      req_param_resp.ints_length = 0;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2200      	movs	r2, #0
 8005046:	f883 22e8 	strb.w	r2, [r3, #744]	; 0x2e8
      req_param_resp.ints = NULL;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2200      	movs	r2, #0
 800504e:	f8c3 22f0 	str.w	r2, [r3, #752]	; 0x2f0
      req_param_resp.floats_length = 0;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2200      	movs	r2, #0
 8005056:	f883 22f4 	strb.w	r2, [r3, #756]	; 0x2f4
      req_param_resp.floats = NULL;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2200      	movs	r2, #0
 800505e:	f8c3 22fc 	str.w	r2, [r3, #764]	; 0x2fc
      req_param_resp.ints_length = 0;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2200      	movs	r2, #0
 8005066:	f883 22e8 	strb.w	r2, [r3, #744]	; 0x2e8
      req_param_resp.ints = NULL;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2200      	movs	r2, #0
 800506e:	f8c3 22f0 	str.w	r2, [r3, #752]	; 0x2f0
    }
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	4618      	mov	r0, r3
 8005076:	3718      	adds	r7, #24
 8005078:	46bd      	mov	sp, r7
 800507a:	bd80      	pop	{r7, pc}
 800507c:	0800c714 	.word	0x0800c714

08005080 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv>:
    virtual int spinOnce(){
 8005080:	b580      	push	{r7, lr}
 8005082:	b084      	sub	sp, #16
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
      uint32_t c_time = hardware_.time();
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	3304      	adds	r3, #4
 800508c:	4618      	mov	r0, r3
 800508e:	f7fd f960 	bl	8002352 <_ZN13STMF4Hardware4timeEv>
 8005092:	4603      	mov	r3, r0
 8005094:	60fb      	str	r3, [r7, #12]
      if( (c_time - last_sync_receive_time) > (SYNC_SECONDS*2200) ){
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800509c:	68fa      	ldr	r2, [r7, #12]
 800509e:	1ad3      	subs	r3, r2, r3
 80050a0:	f642 22f8 	movw	r2, #11000	; 0x2af8
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d903      	bls.n	80050b0 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x30>
        configured_ = false;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2200      	movs	r2, #0
 80050ac:	f883 22d0 	strb.w	r2, [r3, #720]	; 0x2d0
      if ( mode_ != MODE_FIRST_FF){
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d009      	beq.n	80050ce <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x4e>
        if (c_time > last_msg_timeout_time){
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	f8d3 22dc 	ldr.w	r2, [r3, #732]	; 0x2dc
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	429a      	cmp	r2, r3
 80050c4:	d203      	bcs.n	80050ce <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x4e>
          mode_ = MODE_FIRST_FF;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2200      	movs	r2, #0
 80050ca:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
          int data = hardware_.read();
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	3304      	adds	r3, #4
 80050d2:	4618      	mov	r0, r3
 80050d4:	f7fd f91d 	bl	8002312 <_ZN13STMF4Hardware4readEv>
 80050d8:	4603      	mov	r3, r0
 80050da:	60bb      	str	r3, [r7, #8]
          if( data < 0 )
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	f2c0 816d 	blt.w	80053be <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x33e>
          checksum_ += data;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	f8d3 22cc 	ldr.w	r2, [r3, #716]	; 0x2cc
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	441a      	add	r2, r3
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
          if( mode_ == MODE_MESSAGE ){        /* message data being recieved */
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80050fa:	2b07      	cmp	r3, #7
 80050fc:	d11d      	bne.n	800513a <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0xba>
            message_in[index_++] = data;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8005104:	1c59      	adds	r1, r3, #1
 8005106:	687a      	ldr	r2, [r7, #4]
 8005108:	f8c2 12c8 	str.w	r1, [r2, #712]	; 0x2c8
 800510c:	68ba      	ldr	r2, [r7, #8]
 800510e:	b2d1      	uxtb	r1, r2
 8005110:	687a      	ldr	r2, [r7, #4]
 8005112:	4413      	add	r3, r2
 8005114:	460a      	mov	r2, r1
 8005116:	771a      	strb	r2, [r3, #28]
            bytes_--;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800511e:	1e5a      	subs	r2, r3, #1
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
            if(bytes_ == 0)                  /* is message complete? if so, checksum */
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800512c:	2b00      	cmp	r3, #0
 800512e:	d1ce      	bne.n	80050ce <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x4e>
              mode_ = MODE_MSG_CHECKSUM;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2208      	movs	r2, #8
 8005134:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
 8005138:	e7c9      	b.n	80050ce <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x4e>
          }else if( mode_ == MODE_FIRST_FF ){
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005140:	2b00      	cmp	r3, #0
 8005142:	d126      	bne.n	8005192 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x112>
            if(data == 0xff){
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	2bff      	cmp	r3, #255	; 0xff
 8005148:	d10d      	bne.n	8005166 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0xe6>
              mode_++;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005150:	1c5a      	adds	r2, r3, #1
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
              last_msg_timeout_time = c_time + MSG_TIMEOUT;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	f103 0214 	add.w	r2, r3, #20
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	f8c3 22dc 	str.w	r2, [r3, #732]	; 0x2dc
 8005164:	e7b3      	b.n	80050ce <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x4e>
            else if( hardware_.time() - c_time > (SYNC_SECONDS)){
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	3304      	adds	r3, #4
 800516a:	4618      	mov	r0, r3
 800516c:	f7fd f8f1 	bl	8002352 <_ZN13STMF4Hardware4timeEv>
 8005170:	4602      	mov	r2, r0
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	1ad3      	subs	r3, r2, r3
 8005176:	2b05      	cmp	r3, #5
 8005178:	bf8c      	ite	hi
 800517a:	2301      	movhi	r3, #1
 800517c:	2300      	movls	r3, #0
 800517e:	b2db      	uxtb	r3, r3
 8005180:	2b00      	cmp	r3, #0
 8005182:	d0a4      	beq.n	80050ce <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x4e>
              configured_=false;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2200      	movs	r2, #0
 8005188:	f883 22d0 	strb.w	r2, [r3, #720]	; 0x2d0
              return -2;
 800518c:	f06f 0301 	mvn.w	r3, #1
 8005190:	e12c      	b.n	80053ec <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x36c>
          }else if( mode_ == MODE_PROTOCOL_VER ){
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005198:	2b01      	cmp	r3, #1
 800519a:	d11a      	bne.n	80051d2 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x152>
            if(data == PROTOCOL_VER){
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	2bfe      	cmp	r3, #254	; 0xfe
 80051a0:	d107      	bne.n	80051b2 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x132>
              mode_++;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80051a8:	1c5a      	adds	r2, r3, #1
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
 80051b0:	e78d      	b.n	80050ce <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x4e>
              mode_ = MODE_FIRST_FF;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2200      	movs	r2, #0
 80051b6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
              if (configured_ == false)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	f893 32d0 	ldrb.w	r3, [r3, #720]	; 0x2d0
 80051c0:	f083 0301 	eor.w	r3, r3, #1
 80051c4:	b2db      	uxtb	r3, r3
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d081      	beq.n	80050ce <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x4e>
                requestSyncTime(); 	/* send a msg back showing our protocol version */
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f000 fdaa 	bl	8005d24 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE15requestSyncTimeEv>
 80051d0:	e77d      	b.n	80050ce <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x4e>
          }else if( mode_ == MODE_SIZE_L ){   /* bottom half of message size */
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80051d8:	2b02      	cmp	r3, #2
 80051da:	d113      	bne.n	8005204 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x184>
            bytes_ = data;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	68ba      	ldr	r2, [r7, #8]
 80051e0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
            index_ = 0;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2200      	movs	r2, #0
 80051e8:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8
            mode_++;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80051f2:	1c5a      	adds	r2, r3, #1
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
            checksum_ = data;               /* first byte for calculating size checksum */
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	68ba      	ldr	r2, [r7, #8]
 80051fe:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
 8005202:	e764      	b.n	80050ce <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x4e>
          }else if( mode_ == MODE_SIZE_H ){   /* top half of message size */
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800520a:	2b03      	cmp	r3, #3
 800520c:	d110      	bne.n	8005230 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x1b0>
            bytes_ += data<<8;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	f8d3 22c0 	ldr.w	r2, [r3, #704]	; 0x2c0
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	021b      	lsls	r3, r3, #8
 8005218:	441a      	add	r2, r3
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
            mode_++;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005226:	1c5a      	adds	r2, r3, #1
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
 800522e:	e74e      	b.n	80050ce <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x4e>
          }else if( mode_ == MODE_SIZE_CHECKSUM ){
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005236:	2b04      	cmp	r3, #4
 8005238:	d116      	bne.n	8005268 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x1e8>
            if( (checksum_%256) == 255)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8005240:	425a      	negs	r2, r3
 8005242:	b2db      	uxtb	r3, r3
 8005244:	b2d2      	uxtb	r2, r2
 8005246:	bf58      	it	pl
 8005248:	4253      	negpl	r3, r2
 800524a:	2bff      	cmp	r3, #255	; 0xff
 800524c:	d107      	bne.n	800525e <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x1de>
              mode_++;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005254:	1c5a      	adds	r2, r3, #1
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
 800525c:	e737      	b.n	80050ce <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x4e>
              mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2200      	movs	r2, #0
 8005262:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
 8005266:	e732      	b.n	80050ce <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x4e>
          }else if( mode_ == MODE_TOPIC_L ){  /* bottom half of topic id */
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800526e:	2b05      	cmp	r3, #5
 8005270:	d10f      	bne.n	8005292 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x212>
            topic_ = data;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	68ba      	ldr	r2, [r7, #8]
 8005276:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
            mode_++;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005280:	1c5a      	adds	r2, r3, #1
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
            checksum_ = data;               /* first byte included in checksum */
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	68ba      	ldr	r2, [r7, #8]
 800528c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
 8005290:	e71d      	b.n	80050ce <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x4e>
          }else if( mode_ == MODE_TOPIC_H ){  /* top half of topic id */
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005298:	2b06      	cmp	r3, #6
 800529a:	d117      	bne.n	80052cc <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x24c>
            topic_ += data<<8;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	f8d3 22c4 	ldr.w	r2, [r3, #708]	; 0x2c4
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	021b      	lsls	r3, r3, #8
 80052a6:	441a      	add	r2, r3
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
            mode_ = MODE_MESSAGE;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2207      	movs	r2, #7
 80052b2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
            if(bytes_ == 0)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80052bc:	2b00      	cmp	r3, #0
 80052be:	f47f af06 	bne.w	80050ce <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x4e>
              mode_ = MODE_MSG_CHECKSUM;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2208      	movs	r2, #8
 80052c6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
 80052ca:	e700      	b.n	80050ce <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x4e>
          }else if( mode_ == MODE_MSG_CHECKSUM ){ /* do checksum */
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80052d2:	2b08      	cmp	r3, #8
 80052d4:	f47f aefb 	bne.w	80050ce <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x4e>
            mode_ = MODE_FIRST_FF;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2200      	movs	r2, #0
 80052dc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
            if( (checksum_%256) == 255){
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 80052e6:	425a      	negs	r2, r3
 80052e8:	b2db      	uxtb	r3, r3
 80052ea:	b2d2      	uxtb	r2, r2
 80052ec:	bf58      	it	pl
 80052ee:	4253      	negpl	r3, r2
 80052f0:	2bff      	cmp	r3, #255	; 0xff
 80052f2:	f47f aeec 	bne.w	80050ce <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x4e>
              if(topic_ == TopicInfo::ID_PUBLISHER){
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d110      	bne.n	8005322 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x2a2>
                requestSyncTime();
 8005300:	6878      	ldr	r0, [r7, #4]
 8005302:	f000 fd0f 	bl	8005d24 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE15requestSyncTimeEv>
                negotiateTopics();
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	f000 fd29 	bl	8005d5e <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE15negotiateTopicsEv>
                last_sync_time = c_time;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	68fa      	ldr	r2, [r7, #12]
 8005310:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                last_sync_receive_time = c_time;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	68fa      	ldr	r2, [r7, #12]
 8005318:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8
                return -1;
 800531c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005320:	e064      	b.n	80053ec <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x36c>
              }else if(topic_ == TopicInfo::ID_TIME){
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005328:	2b0a      	cmp	r3, #10
 800532a:	d106      	bne.n	800533a <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x2ba>
                syncTime(message_in);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	331c      	adds	r3, #28
 8005330:	4619      	mov	r1, r3
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f000 fde8 	bl	8005f08 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8syncTimeEPh>
 8005338:	e6c9      	b.n	80050ce <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x4e>
              }else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST){
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005340:	2b06      	cmp	r3, #6
 8005342:	d10d      	bne.n	8005360 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x2e0>
                req_param_resp.deserialize(message_in);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	f503 7239 	add.w	r2, r3, #740	; 0x2e4
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	331c      	adds	r3, #28
 800534e:	4619      	mov	r1, r3
 8005350:	4610      	mov	r0, r2
 8005352:	f7fc fe25 	bl	8001fa0 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
                param_recieved= true;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2201      	movs	r2, #1
 800535a:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
 800535e:	e6b6      	b.n	80050ce <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x4e>
              }else if(topic_ == TopicInfo::ID_TX_STOP){
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005366:	2b0b      	cmp	r3, #11
 8005368:	d104      	bne.n	8005374 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x2f4>
                configured_ = false;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2200      	movs	r2, #0
 800536e:	f883 22d0 	strb.w	r2, [r3, #720]	; 0x2d0
 8005372:	e6ac      	b.n	80050ce <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x4e>
                if(subscribers[topic_-100])
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800537a:	3b64      	subs	r3, #100	; 0x64
 800537c:	687a      	ldr	r2, [r7, #4]
 800537e:	339a      	adds	r3, #154	; 0x9a
 8005380:	009b      	lsls	r3, r3, #2
 8005382:	4413      	add	r3, r2
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	2b00      	cmp	r3, #0
 8005388:	f43f aea1 	beq.w	80050ce <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x4e>
                  subscribers[topic_-100]->callback( message_in );
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005392:	3b64      	subs	r3, #100	; 0x64
 8005394:	687a      	ldr	r2, [r7, #4]
 8005396:	339a      	adds	r3, #154	; 0x9a
 8005398:	009b      	lsls	r3, r3, #2
 800539a:	4413      	add	r3, r2
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	681a      	ldr	r2, [r3, #0]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80053a8:	3b64      	subs	r3, #100	; 0x64
 80053aa:	6879      	ldr	r1, [r7, #4]
 80053ac:	339a      	adds	r3, #154	; 0x9a
 80053ae:	009b      	lsls	r3, r3, #2
 80053b0:	440b      	add	r3, r1
 80053b2:	6858      	ldr	r0, [r3, #4]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	331c      	adds	r3, #28
 80053b8:	4619      	mov	r1, r3
 80053ba:	4790      	blx	r2
      while( true )
 80053bc:	e687      	b.n	80050ce <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x4e>
            break;
 80053be:	bf00      	nop
      if( configured_ && ((c_time-last_sync_time) > (SYNC_SECONDS*500) )){
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	f893 32d0 	ldrb.w	r3, [r3, #720]	; 0x2d0
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d00f      	beq.n	80053ea <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x36a>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80053d0:	68fa      	ldr	r2, [r7, #12]
 80053d2:	1ad3      	subs	r3, r2, r3
 80053d4:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80053d8:	4293      	cmp	r3, r2
 80053da:	d906      	bls.n	80053ea <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x36a>
        requestSyncTime();
 80053dc:	6878      	ldr	r0, [r7, #4]
 80053de:	f000 fca1 	bl	8005d24 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE15requestSyncTimeEv>
        last_sync_time = c_time;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	68fa      	ldr	r2, [r7, #12]
 80053e6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
      return 0;
 80053ea:	2300      	movs	r3, #0
    }
 80053ec:	4618      	mov	r0, r3
 80053ee:	3710      	adds	r7, #16
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bd80      	pop	{r7, pc}

080053f4 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8initNodeEP18UART_HandleTypeDef>:
    void initNode(typename Hardware::serial_class* port){
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b082      	sub	sp, #8
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
 80053fc:	6039      	str	r1, [r7, #0]
      hardware_.init(port);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	3304      	adds	r3, #4
 8005402:	6839      	ldr	r1, [r7, #0]
 8005404:	4618      	mov	r0, r3
 8005406:	f7fc ff63 	bl	80022d0 <_ZN13STMF4Hardware4initEP18UART_HandleTypeDef>
      mode_ = 0;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2200      	movs	r2, #0
 800540e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
      bytes_ = 0;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2200      	movs	r2, #0
 8005416:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
      index_ = 0;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2200      	movs	r2, #0
 800541e:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8
      topic_ = 0;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2200      	movs	r2, #0
 8005426:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
    };
 800542a:	bf00      	nop
 800542c:	3708      	adds	r7, #8
 800542e:	46bd      	mov	sp, r7
 8005430:	bd80      	pop	{r7, pc}
	...

08005434 <_ZN8RxBufferI18UART_HandleTypeDefLi400ELi8EEC1EPS0_>:
  RxBuffer(Hardware *huart):huart_(huart)
 8005434:	b590      	push	{r4, r7, lr}
 8005436:	b083      	sub	sp, #12
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
 800543c:	6039      	str	r1, [r7, #0]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	683a      	ldr	r2, [r7, #0]
 8005442:	601a      	str	r2, [r3, #0]
    ring_buf_ = new RingBuffer<uint8_t, RX_SIZE>();
 8005444:	f44f 70cb 	mov.w	r0, #406	; 0x196
 8005448:	f004 fe45 	bl	800a0d6 <_Znwj>
 800544c:	4603      	mov	r3, r0
 800544e:	461c      	mov	r4, r3
 8005450:	4620      	mov	r0, r4
 8005452:	f000 fda3 	bl	8005f9c <_ZN10RingBufferIhLi400EEC1Ev>
 8005456:	4b0e      	ldr	r3, [pc, #56]	; (8005490 <_ZN8RxBufferI18UART_HandleTypeDefLi400ELi8EEC1EPS0_+0x5c>)
 8005458:	601c      	str	r4, [r3, #0]
    HAL_UART_Receive_DMA(huart_, rx_value_, RX_BURST_SIZE); //1byte receive protocal
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	2208      	movs	r2, #8
 8005460:	490c      	ldr	r1, [pc, #48]	; (8005494 <_ZN8RxBufferI18UART_HandleTypeDefLi400ELi8EEC1EPS0_+0x60>)
 8005462:	4618      	mov	r0, r3
 8005464:	f004 f854 	bl	8009510 <HAL_UART_Receive_DMA>
    huart_->hdmarx->XferCpltCallback = ReceiveCplt;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800546e:	4a0a      	ldr	r2, [pc, #40]	; (8005498 <_ZN8RxBufferI18UART_HandleTypeDefLi400ELi8EEC1EPS0_+0x64>)
 8005470:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_UART_DISABLE_IT(huart_, UART_IT_RXNE);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	687a      	ldr	r2, [r7, #4]
 800547a:	6812      	ldr	r2, [r2, #0]
 800547c:	6812      	ldr	r2, [r2, #0]
 800547e:	68d2      	ldr	r2, [r2, #12]
 8005480:	f022 0220 	bic.w	r2, r2, #32
 8005484:	60da      	str	r2, [r3, #12]
  }
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	4618      	mov	r0, r3
 800548a:	370c      	adds	r7, #12
 800548c:	46bd      	mov	sp, r7
 800548e:	bd90      	pop	{r4, r7, pc}
 8005490:	20000a7c 	.word	0x20000a7c
 8005494:	20000a80 	.word	0x20000a80
 8005498:	08005fcd 	.word	0x08005fcd

0800549c <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EEC1EPS0_>:
  TxBuffer(Hardware *huart): huart_(huart)
 800549c:	b580      	push	{r7, lr}
 800549e:	b084      	sub	sp, #16
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
 80054a4:	6039      	str	r1, [r7, #0]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	683a      	ldr	r2, [r7, #0]
 80054aa:	601a      	str	r2, [r3, #0]
    idle_flag_ = true;
 80054ac:	4b27      	ldr	r3, [pc, #156]	; (800554c <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EEC1EPS0_+0xb0>)
 80054ae:	2201      	movs	r2, #1
 80054b0:	701a      	strb	r2, [r3, #0]
    subscript_in_progress_ = 0;
 80054b2:	4b27      	ldr	r3, [pc, #156]	; (8005550 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EEC1EPS0_+0xb4>)
 80054b4:	2200      	movs	r2, #0
 80054b6:	701a      	strb	r2, [r3, #0]
    subscript_to_add_ = 0;
 80054b8:	4b26      	ldr	r3, [pc, #152]	; (8005554 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EEC1EPS0_+0xb8>)
 80054ba:	2200      	movs	r2, #0
 80054bc:	701a      	strb	r2, [r3, #0]
    for(int i = 0; i < TX_SIZE; i++) 
 80054be:	2300      	movs	r3, #0
 80054c0:	60fb      	str	r3, [r7, #12]
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	2b31      	cmp	r3, #49	; 0x31
 80054c6:	dc23      	bgt.n	8005510 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EEC1EPS0_+0x74>
        tx_buffer_unit_[i].tx_len_ = 1;
 80054c8:	4923      	ldr	r1, [pc, #140]	; (8005558 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EEC1EPS0_+0xbc>)
 80054ca:	68fa      	ldr	r2, [r7, #12]
 80054cc:	4613      	mov	r3, r2
 80054ce:	019b      	lsls	r3, r3, #6
 80054d0:	1a9b      	subs	r3, r3, r2
 80054d2:	009b      	lsls	r3, r3, #2
 80054d4:	1a9b      	subs	r3, r3, r2
 80054d6:	440b      	add	r3, r1
 80054d8:	33fa      	adds	r3, #250	; 0xfa
 80054da:	2201      	movs	r2, #1
 80054dc:	701a      	strb	r2, [r3, #0]
        for(int j = 0; j < BUFFER_LENGTH; j++)
 80054de:	2300      	movs	r3, #0
 80054e0:	60bb      	str	r3, [r7, #8]
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	2bf9      	cmp	r3, #249	; 0xf9
 80054e6:	dc0f      	bgt.n	8005508 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EEC1EPS0_+0x6c>
          tx_buffer_unit_[i].tx_data_[j]  = 1;
 80054e8:	491b      	ldr	r1, [pc, #108]	; (8005558 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EEC1EPS0_+0xbc>)
 80054ea:	68fa      	ldr	r2, [r7, #12]
 80054ec:	4613      	mov	r3, r2
 80054ee:	019b      	lsls	r3, r3, #6
 80054f0:	1a9b      	subs	r3, r3, r2
 80054f2:	009b      	lsls	r3, r3, #2
 80054f4:	1a9b      	subs	r3, r3, r2
 80054f6:	18ca      	adds	r2, r1, r3
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	4413      	add	r3, r2
 80054fc:	2201      	movs	r2, #1
 80054fe:	701a      	strb	r2, [r3, #0]
        for(int j = 0; j < BUFFER_LENGTH; j++)
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	3301      	adds	r3, #1
 8005504:	60bb      	str	r3, [r7, #8]
 8005506:	e7ec      	b.n	80054e2 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EEC1EPS0_+0x46>
    for(int i = 0; i < TX_SIZE; i++) 
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	3301      	adds	r3, #1
 800550c:	60fb      	str	r3, [r7, #12]
 800550e:	e7d8      	b.n	80054c2 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EEC1EPS0_+0x26>
    HAL_UART_Transmit_DMA(huart_, (uint8_t*)tx_buffer_unit_[0].tx_data_, tx_buffer_unit_[0].tx_len_);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6818      	ldr	r0, [r3, #0]
 8005514:	4b10      	ldr	r3, [pc, #64]	; (8005558 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EEC1EPS0_+0xbc>)
 8005516:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800551a:	b29b      	uxth	r3, r3
 800551c:	461a      	mov	r2, r3
 800551e:	490e      	ldr	r1, [pc, #56]	; (8005558 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EEC1EPS0_+0xbc>)
 8005520:	f003 ffbc 	bl	800949c <HAL_UART_Transmit_DMA>
    huart_->Instance->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DMAT);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	687a      	ldr	r2, [r7, #4]
 800552c:	6812      	ldr	r2, [r2, #0]
 800552e:	6812      	ldr	r2, [r2, #0]
 8005530:	6952      	ldr	r2, [r2, #20]
 8005532:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005536:	615a      	str	r2, [r3, #20]
    huart_->hdmatx->XferCpltCallback = TransmitCplt;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800553e:	4a07      	ldr	r2, [pc, #28]	; (800555c <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EEC1EPS0_+0xc0>)
 8005540:	63da      	str	r2, [r3, #60]	; 0x3c
  }
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	4618      	mov	r0, r3
 8005546:	3710      	adds	r7, #16
 8005548:	46bd      	mov	sp, r7
 800554a:	bd80      	pop	{r7, pc}
 800554c:	20003b90 	.word	0x20003b90
 8005550:	20003b8e 	.word	0x20003b8e
 8005554:	20003b8f 	.word	0x20003b8f
 8005558:	20000a88 	.word	0x20000a88
 800555c:	08006065 	.word	0x08006065

08005560 <_ZN8RxBufferI18UART_HandleTypeDefLi400ELi8EE4readEv>:
  int read()
 8005560:	b580      	push	{r7, lr}
 8005562:	b084      	sub	sp, #16
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
    if(!available()) return -1;
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	f001 f867 	bl	800663c <_ZN8RxBufferI18UART_HandleTypeDefLi400ELi8EE9availableEv>
 800556e:	4603      	mov	r3, r0
 8005570:	f083 0301 	eor.w	r3, r3, #1
 8005574:	b2db      	uxtb	r3, r3
 8005576:	2b00      	cmp	r3, #0
 8005578:	d002      	beq.n	8005580 <_ZN8RxBufferI18UART_HandleTypeDefLi400ELi8EE4readEv+0x20>
 800557a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800557e:	e008      	b.n	8005592 <_ZN8RxBufferI18UART_HandleTypeDefLi400ELi8EE4readEv+0x32>
    ring_buf_->pop(r_data);
 8005580:	4b06      	ldr	r3, [pc, #24]	; (800559c <_ZN8RxBufferI18UART_HandleTypeDefLi400ELi8EE4readEv+0x3c>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f107 020f 	add.w	r2, r7, #15
 8005588:	4611      	mov	r1, r2
 800558a:	4618      	mov	r0, r3
 800558c:	f001 f86c 	bl	8006668 <_ZN10RingBufferIhLi400EE3popERh>
    return  r_data;
 8005590:	7bfb      	ldrb	r3, [r7, #15]
  }
 8005592:	4618      	mov	r0, r3
 8005594:	3710      	adds	r7, #16
 8005596:	46bd      	mov	sp, r7
 8005598:	bd80      	pop	{r7, pc}
 800559a:	bf00      	nop
 800559c:	20000a7c 	.word	0x20000a7c

080055a0 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh>:
  void write(uint8_t * new_data, uint8_t new_size)
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b086      	sub	sp, #24
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	60f8      	str	r0, [r7, #12]
 80055a8:	60b9      	str	r1, [r7, #8]
 80055aa:	4613      	mov	r3, r2
 80055ac:	71fb      	strb	r3, [r7, #7]
    if (subscript_in_progress_ == subscript_to_add_ + 1 || ( subscript_to_add_ == TX_SIZE - 1 && subscript_in_progress_ == 0) )
 80055ae:	4b9c      	ldr	r3, [pc, #624]	; (8005820 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x280>)
 80055b0:	781b      	ldrb	r3, [r3, #0]
 80055b2:	461a      	mov	r2, r3
 80055b4:	4b9b      	ldr	r3, [pc, #620]	; (8005824 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x284>)
 80055b6:	781b      	ldrb	r3, [r3, #0]
 80055b8:	3301      	adds	r3, #1
 80055ba:	429a      	cmp	r2, r3
 80055bc:	d007      	beq.n	80055ce <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x2e>
 80055be:	4b99      	ldr	r3, [pc, #612]	; (8005824 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x284>)
 80055c0:	781b      	ldrb	r3, [r3, #0]
 80055c2:	2b31      	cmp	r3, #49	; 0x31
 80055c4:	d114      	bne.n	80055f0 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x50>
 80055c6:	4b96      	ldr	r3, [pc, #600]	; (8005820 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x280>)
 80055c8:	781b      	ldrb	r3, [r3, #0]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d110      	bne.n	80055f0 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x50>
		while(subscript_in_progress_ == subscript_to_add_ + 1 || ( subscript_to_add_ == TX_SIZE - 1 && subscript_in_progress_ == 0)){}
 80055ce:	4b94      	ldr	r3, [pc, #592]	; (8005820 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x280>)
 80055d0:	781b      	ldrb	r3, [r3, #0]
 80055d2:	461a      	mov	r2, r3
 80055d4:	4b93      	ldr	r3, [pc, #588]	; (8005824 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x284>)
 80055d6:	781b      	ldrb	r3, [r3, #0]
 80055d8:	3301      	adds	r3, #1
 80055da:	429a      	cmp	r2, r3
 80055dc:	d0f7      	beq.n	80055ce <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x2e>
 80055de:	4b91      	ldr	r3, [pc, #580]	; (8005824 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x284>)
 80055e0:	781b      	ldrb	r3, [r3, #0]
 80055e2:	2b31      	cmp	r3, #49	; 0x31
 80055e4:	d104      	bne.n	80055f0 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x50>
 80055e6:	4b8e      	ldr	r3, [pc, #568]	; (8005820 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x280>)
 80055e8:	781b      	ldrb	r3, [r3, #0]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d100      	bne.n	80055f0 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x50>
 80055ee:	e7ee      	b.n	80055ce <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x2e>
    tx_buffer_unit_[subscript_to_add_].tx_len_ = new_size;
 80055f0:	4b8c      	ldr	r3, [pc, #560]	; (8005824 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x284>)
 80055f2:	781b      	ldrb	r3, [r3, #0]
 80055f4:	461a      	mov	r2, r3
 80055f6:	498c      	ldr	r1, [pc, #560]	; (8005828 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x288>)
 80055f8:	4613      	mov	r3, r2
 80055fa:	019b      	lsls	r3, r3, #6
 80055fc:	1a9b      	subs	r3, r3, r2
 80055fe:	009b      	lsls	r3, r3, #2
 8005600:	1a9b      	subs	r3, r3, r2
 8005602:	440b      	add	r3, r1
 8005604:	33fa      	adds	r3, #250	; 0xfa
 8005606:	79fa      	ldrb	r2, [r7, #7]
 8005608:	701a      	strb	r2, [r3, #0]
    memcpy(tx_buffer_unit_[subscript_to_add_].tx_data_, new_data, new_size);
 800560a:	4b86      	ldr	r3, [pc, #536]	; (8005824 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x284>)
 800560c:	781b      	ldrb	r3, [r3, #0]
 800560e:	461a      	mov	r2, r3
 8005610:	4613      	mov	r3, r2
 8005612:	019b      	lsls	r3, r3, #6
 8005614:	1a9b      	subs	r3, r3, r2
 8005616:	009b      	lsls	r3, r3, #2
 8005618:	1a9b      	subs	r3, r3, r2
 800561a:	4a83      	ldr	r2, [pc, #524]	; (8005828 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x288>)
 800561c:	4413      	add	r3, r2
 800561e:	79fa      	ldrb	r2, [r7, #7]
 8005620:	68b9      	ldr	r1, [r7, #8]
 8005622:	4618      	mov	r0, r3
 8005624:	f006 fb0e 	bl	800bc44 <memcpy>
    subscript_to_add_++;
 8005628:	4b7e      	ldr	r3, [pc, #504]	; (8005824 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x284>)
 800562a:	781b      	ldrb	r3, [r3, #0]
 800562c:	3301      	adds	r3, #1
 800562e:	b2da      	uxtb	r2, r3
 8005630:	4b7c      	ldr	r3, [pc, #496]	; (8005824 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x284>)
 8005632:	701a      	strb	r2, [r3, #0]
    if (subscript_to_add_ == TX_SIZE)
 8005634:	4b7b      	ldr	r3, [pc, #492]	; (8005824 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x284>)
 8005636:	781b      	ldrb	r3, [r3, #0]
 8005638:	2b32      	cmp	r3, #50	; 0x32
 800563a:	d102      	bne.n	8005642 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0xa2>
      subscript_to_add_ = 0;
 800563c:	4b79      	ldr	r3, [pc, #484]	; (8005824 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x284>)
 800563e:	2200      	movs	r2, #0
 8005640:	701a      	strb	r2, [r3, #0]
    if (idle_flag_ )
 8005642:	4b7a      	ldr	r3, [pc, #488]	; (800582c <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x28c>)
 8005644:	781b      	ldrb	r3, [r3, #0]
 8005646:	2b00      	cmp	r3, #0
 8005648:	f000 82da 	beq.w	8005c00 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x660>
        if ((subscript_in_progress_ == (subscript_to_add_-1)) || (subscript_in_progress_ == TX_SIZE -1 && subscript_to_add_ == 0)) idle_flag_= false;
 800564c:	4b74      	ldr	r3, [pc, #464]	; (8005820 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x280>)
 800564e:	781b      	ldrb	r3, [r3, #0]
 8005650:	461a      	mov	r2, r3
 8005652:	4b74      	ldr	r3, [pc, #464]	; (8005824 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x284>)
 8005654:	781b      	ldrb	r3, [r3, #0]
 8005656:	3b01      	subs	r3, #1
 8005658:	429a      	cmp	r2, r3
 800565a:	d007      	beq.n	800566c <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0xcc>
 800565c:	4b70      	ldr	r3, [pc, #448]	; (8005820 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x280>)
 800565e:	781b      	ldrb	r3, [r3, #0]
 8005660:	2b31      	cmp	r3, #49	; 0x31
 8005662:	d106      	bne.n	8005672 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0xd2>
 8005664:	4b6f      	ldr	r3, [pc, #444]	; (8005824 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x284>)
 8005666:	781b      	ldrb	r3, [r3, #0]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d102      	bne.n	8005672 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0xd2>
 800566c:	4b6f      	ldr	r3, [pc, #444]	; (800582c <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x28c>)
 800566e:	2200      	movs	r2, #0
 8005670:	701a      	strb	r2, [r3, #0]
        huart_->Instance->CR3 &= (uint32_t)(~USART_CR3_DMAT);
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	68fa      	ldr	r2, [r7, #12]
 800567a:	6812      	ldr	r2, [r2, #0]
 800567c:	6812      	ldr	r2, [r2, #0]
 800567e:	6952      	ldr	r2, [r2, #20]
 8005680:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005684:	615a      	str	r2, [r3, #20]
        __HAL_DMA_DISABLE(huart_->hdmatx);
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	68fa      	ldr	r2, [r7, #12]
 8005690:	6812      	ldr	r2, [r2, #0]
 8005692:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005694:	6812      	ldr	r2, [r2, #0]
 8005696:	6812      	ldr	r2, [r2, #0]
 8005698:	f022 0201 	bic.w	r2, r2, #1
 800569c:	601a      	str	r2, [r3, #0]
        uint8_t* tmp8 = tx_buffer_unit_[subscript_in_progress_].tx_data_;
 800569e:	4b60      	ldr	r3, [pc, #384]	; (8005820 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x280>)
 80056a0:	781b      	ldrb	r3, [r3, #0]
 80056a2:	461a      	mov	r2, r3
 80056a4:	4613      	mov	r3, r2
 80056a6:	019b      	lsls	r3, r3, #6
 80056a8:	1a9b      	subs	r3, r3, r2
 80056aa:	009b      	lsls	r3, r3, #2
 80056ac:	1a9b      	subs	r3, r3, r2
 80056ae:	4a5e      	ldr	r2, [pc, #376]	; (8005828 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x288>)
 80056b0:	4413      	add	r3, r2
 80056b2:	613b      	str	r3, [r7, #16]
        uint32_t *tmp32 = (uint32_t*)&tmp8;
 80056b4:	f107 0310 	add.w	r3, r7, #16
 80056b8:	617b      	str	r3, [r7, #20]
        huart_->hdmatx->Instance->NDTR = (uint32_t)tx_buffer_unit_[subscript_in_progress_].tx_len_;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056c0:	6819      	ldr	r1, [r3, #0]
 80056c2:	4b57      	ldr	r3, [pc, #348]	; (8005820 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x280>)
 80056c4:	781b      	ldrb	r3, [r3, #0]
 80056c6:	461a      	mov	r2, r3
 80056c8:	4857      	ldr	r0, [pc, #348]	; (8005828 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x288>)
 80056ca:	4613      	mov	r3, r2
 80056cc:	019b      	lsls	r3, r3, #6
 80056ce:	1a9b      	subs	r3, r3, r2
 80056d0:	009b      	lsls	r3, r3, #2
 80056d2:	1a9b      	subs	r3, r3, r2
 80056d4:	4403      	add	r3, r0
 80056d6:	33fa      	adds	r3, #250	; 0xfa
 80056d8:	781b      	ldrb	r3, [r3, #0]
 80056da:	604b      	str	r3, [r1, #4]
        huart_->hdmatx->Instance->M0AR = *(uint32_t*)tmp32;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	697a      	ldr	r2, [r7, #20]
 80056e6:	6812      	ldr	r2, [r2, #0]
 80056e8:	60da      	str	r2, [r3, #12]
        huart_->Instance->CR3 |= USART_CR3_DMAT;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	68fa      	ldr	r2, [r7, #12]
 80056f2:	6812      	ldr	r2, [r2, #0]
 80056f4:	6812      	ldr	r2, [r2, #0]
 80056f6:	6952      	ldr	r2, [r2, #20]
 80056f8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80056fc:	615a      	str	r2, [r3, #20]
        __HAL_DMA_ENABLE(huart_->hdmatx);
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	68fa      	ldr	r2, [r7, #12]
 8005708:	6812      	ldr	r2, [r2, #0]
 800570a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800570c:	6812      	ldr	r2, [r2, #0]
 800570e:	6812      	ldr	r2, [r2, #0]
 8005710:	f042 0201 	orr.w	r2, r2, #1
 8005714:	601a      	str	r2, [r3, #0]
        __HAL_DMA_CLEAR_FLAG(huart_->hdmatx, __HAL_DMA_GET_TC_FLAG_INDEX(huart_->hdmatx));
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	461a      	mov	r2, r3
 8005720:	4b43      	ldr	r3, [pc, #268]	; (8005830 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x290>)
 8005722:	429a      	cmp	r2, r3
 8005724:	f240 80ac 	bls.w	8005880 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x2e0>
 8005728:	4a42      	ldr	r2, [pc, #264]	; (8005834 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x294>)
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4619      	mov	r1, r3
 8005734:	4b40      	ldr	r3, [pc, #256]	; (8005838 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x298>)
 8005736:	4299      	cmp	r1, r3
 8005738:	f000 809f 	beq.w	800587a <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x2da>
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4619      	mov	r1, r3
 8005746:	4b3d      	ldr	r3, [pc, #244]	; (800583c <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x29c>)
 8005748:	4299      	cmp	r1, r3
 800574a:	f000 8094 	beq.w	8005876 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x2d6>
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4619      	mov	r1, r3
 8005758:	4b39      	ldr	r3, [pc, #228]	; (8005840 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x2a0>)
 800575a:	4299      	cmp	r1, r3
 800575c:	f000 8089 	beq.w	8005872 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x2d2>
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4619      	mov	r1, r3
 800576a:	4b36      	ldr	r3, [pc, #216]	; (8005844 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x2a4>)
 800576c:	4299      	cmp	r1, r3
 800576e:	d07e      	beq.n	800586e <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x2ce>
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4619      	mov	r1, r3
 800577a:	4b33      	ldr	r3, [pc, #204]	; (8005848 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x2a8>)
 800577c:	4299      	cmp	r1, r3
 800577e:	d073      	beq.n	8005868 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x2c8>
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4619      	mov	r1, r3
 800578a:	4b30      	ldr	r3, [pc, #192]	; (800584c <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x2ac>)
 800578c:	4299      	cmp	r1, r3
 800578e:	d044      	beq.n	800581a <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x27a>
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4619      	mov	r1, r3
 800579a:	4b2d      	ldr	r3, [pc, #180]	; (8005850 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x2b0>)
 800579c:	4299      	cmp	r1, r3
 800579e:	d039      	beq.n	8005814 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x274>
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4619      	mov	r1, r3
 80057aa:	4b2a      	ldr	r3, [pc, #168]	; (8005854 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x2b4>)
 80057ac:	4299      	cmp	r1, r3
 80057ae:	d02e      	beq.n	800580e <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x26e>
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4619      	mov	r1, r3
 80057ba:	4b27      	ldr	r3, [pc, #156]	; (8005858 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x2b8>)
 80057bc:	4299      	cmp	r1, r3
 80057be:	d023      	beq.n	8005808 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x268>
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4619      	mov	r1, r3
 80057ca:	4b24      	ldr	r3, [pc, #144]	; (800585c <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x2bc>)
 80057cc:	4299      	cmp	r1, r3
 80057ce:	d018      	beq.n	8005802 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x262>
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4619      	mov	r1, r3
 80057da:	4b21      	ldr	r3, [pc, #132]	; (8005860 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x2c0>)
 80057dc:	4299      	cmp	r1, r3
 80057de:	d00d      	beq.n	80057fc <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x25c>
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4619      	mov	r1, r3
 80057ea:	4b1e      	ldr	r3, [pc, #120]	; (8005864 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x2c4>)
 80057ec:	4299      	cmp	r1, r3
 80057ee:	d102      	bne.n	80057f6 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x256>
 80057f0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80057f4:	e042      	b.n	800587c <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x2dc>
 80057f6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80057fa:	e03f      	b.n	800587c <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x2dc>
 80057fc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005800:	e03c      	b.n	800587c <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x2dc>
 8005802:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005806:	e039      	b.n	800587c <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x2dc>
 8005808:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800580c:	e036      	b.n	800587c <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x2dc>
 800580e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005812:	e033      	b.n	800587c <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x2dc>
 8005814:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005818:	e030      	b.n	800587c <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x2dc>
 800581a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800581e:	e02d      	b.n	800587c <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x2dc>
 8005820:	20003b8e 	.word	0x20003b8e
 8005824:	20003b8f 	.word	0x20003b8f
 8005828:	20000a88 	.word	0x20000a88
 800582c:	20003b90 	.word	0x20003b90
 8005830:	40026458 	.word	0x40026458
 8005834:	40026400 	.word	0x40026400
 8005838:	40026010 	.word	0x40026010
 800583c:	40026410 	.word	0x40026410
 8005840:	40026070 	.word	0x40026070
 8005844:	40026470 	.word	0x40026470
 8005848:	40026028 	.word	0x40026028
 800584c:	40026428 	.word	0x40026428
 8005850:	40026088 	.word	0x40026088
 8005854:	40026488 	.word	0x40026488
 8005858:	40026040 	.word	0x40026040
 800585c:	40026440 	.word	0x40026440
 8005860:	400260a0 	.word	0x400260a0
 8005864:	400264a0 	.word	0x400264a0
 8005868:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800586c:	e006      	b.n	800587c <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x2dc>
 800586e:	2320      	movs	r3, #32
 8005870:	e004      	b.n	800587c <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x2dc>
 8005872:	2320      	movs	r3, #32
 8005874:	e002      	b.n	800587c <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x2dc>
 8005876:	2320      	movs	r3, #32
 8005878:	e000      	b.n	800587c <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x2dc>
 800587a:	2320      	movs	r3, #32
 800587c:	60d3      	str	r3, [r2, #12]
  }
 800587e:	e1bf      	b.n	8005c00 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x660>
        __HAL_DMA_CLEAR_FLAG(huart_->hdmatx, __HAL_DMA_GET_TC_FLAG_INDEX(huart_->hdmatx));
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	461a      	mov	r2, r3
 800588a:	4b8b      	ldr	r3, [pc, #556]	; (8005ab8 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x518>)
 800588c:	429a      	cmp	r2, r3
 800588e:	f240 8085 	bls.w	800599c <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x3fc>
 8005892:	4a8a      	ldr	r2, [pc, #552]	; (8005abc <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x51c>)
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4619      	mov	r1, r3
 800589e:	4b88      	ldr	r3, [pc, #544]	; (8005ac0 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x520>)
 80058a0:	4299      	cmp	r1, r3
 80058a2:	d078      	beq.n	8005996 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x3f6>
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4619      	mov	r1, r3
 80058ae:	4b85      	ldr	r3, [pc, #532]	; (8005ac4 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x524>)
 80058b0:	4299      	cmp	r1, r3
 80058b2:	d06e      	beq.n	8005992 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x3f2>
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4619      	mov	r1, r3
 80058be:	4b82      	ldr	r3, [pc, #520]	; (8005ac8 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x528>)
 80058c0:	4299      	cmp	r1, r3
 80058c2:	d064      	beq.n	800598e <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x3ee>
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4619      	mov	r1, r3
 80058ce:	4b7f      	ldr	r3, [pc, #508]	; (8005acc <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x52c>)
 80058d0:	4299      	cmp	r1, r3
 80058d2:	d05a      	beq.n	800598a <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x3ea>
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4619      	mov	r1, r3
 80058de:	4b7c      	ldr	r3, [pc, #496]	; (8005ad0 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x530>)
 80058e0:	4299      	cmp	r1, r3
 80058e2:	d04f      	beq.n	8005984 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x3e4>
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4619      	mov	r1, r3
 80058ee:	4b79      	ldr	r3, [pc, #484]	; (8005ad4 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x534>)
 80058f0:	4299      	cmp	r1, r3
 80058f2:	d044      	beq.n	800597e <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x3de>
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4619      	mov	r1, r3
 80058fe:	4b76      	ldr	r3, [pc, #472]	; (8005ad8 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x538>)
 8005900:	4299      	cmp	r1, r3
 8005902:	d039      	beq.n	8005978 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x3d8>
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4619      	mov	r1, r3
 800590e:	4b73      	ldr	r3, [pc, #460]	; (8005adc <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x53c>)
 8005910:	4299      	cmp	r1, r3
 8005912:	d02e      	beq.n	8005972 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x3d2>
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4619      	mov	r1, r3
 800591e:	4b70      	ldr	r3, [pc, #448]	; (8005ae0 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x540>)
 8005920:	4299      	cmp	r1, r3
 8005922:	d023      	beq.n	800596c <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x3cc>
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4619      	mov	r1, r3
 800592e:	4b6d      	ldr	r3, [pc, #436]	; (8005ae4 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x544>)
 8005930:	4299      	cmp	r1, r3
 8005932:	d018      	beq.n	8005966 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x3c6>
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4619      	mov	r1, r3
 800593e:	4b6a      	ldr	r3, [pc, #424]	; (8005ae8 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x548>)
 8005940:	4299      	cmp	r1, r3
 8005942:	d00d      	beq.n	8005960 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x3c0>
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4619      	mov	r1, r3
 800594e:	4b67      	ldr	r3, [pc, #412]	; (8005aec <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x54c>)
 8005950:	4299      	cmp	r1, r3
 8005952:	d102      	bne.n	800595a <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x3ba>
 8005954:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005958:	e01e      	b.n	8005998 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x3f8>
 800595a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800595e:	e01b      	b.n	8005998 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x3f8>
 8005960:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005964:	e018      	b.n	8005998 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x3f8>
 8005966:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800596a:	e015      	b.n	8005998 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x3f8>
 800596c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005970:	e012      	b.n	8005998 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x3f8>
 8005972:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005976:	e00f      	b.n	8005998 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x3f8>
 8005978:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800597c:	e00c      	b.n	8005998 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x3f8>
 800597e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005982:	e009      	b.n	8005998 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x3f8>
 8005984:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005988:	e006      	b.n	8005998 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x3f8>
 800598a:	2320      	movs	r3, #32
 800598c:	e004      	b.n	8005998 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x3f8>
 800598e:	2320      	movs	r3, #32
 8005990:	e002      	b.n	8005998 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x3f8>
 8005992:	2320      	movs	r3, #32
 8005994:	e000      	b.n	8005998 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x3f8>
 8005996:	2320      	movs	r3, #32
 8005998:	6093      	str	r3, [r2, #8]
  }
 800599a:	e131      	b.n	8005c00 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x660>
        __HAL_DMA_CLEAR_FLAG(huart_->hdmatx, __HAL_DMA_GET_TC_FLAG_INDEX(huart_->hdmatx));
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	461a      	mov	r2, r3
 80059a6:	4b52      	ldr	r3, [pc, #328]	; (8005af0 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x550>)
 80059a8:	429a      	cmp	r2, r3
 80059aa:	f240 80a5 	bls.w	8005af8 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x558>
 80059ae:	4a51      	ldr	r2, [pc, #324]	; (8005af4 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x554>)
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4619      	mov	r1, r3
 80059ba:	4b41      	ldr	r3, [pc, #260]	; (8005ac0 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x520>)
 80059bc:	4299      	cmp	r1, r3
 80059be:	d078      	beq.n	8005ab2 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x512>
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4619      	mov	r1, r3
 80059ca:	4b3e      	ldr	r3, [pc, #248]	; (8005ac4 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x524>)
 80059cc:	4299      	cmp	r1, r3
 80059ce:	d06e      	beq.n	8005aae <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x50e>
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4619      	mov	r1, r3
 80059da:	4b3b      	ldr	r3, [pc, #236]	; (8005ac8 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x528>)
 80059dc:	4299      	cmp	r1, r3
 80059de:	d064      	beq.n	8005aaa <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x50a>
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4619      	mov	r1, r3
 80059ea:	4b38      	ldr	r3, [pc, #224]	; (8005acc <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x52c>)
 80059ec:	4299      	cmp	r1, r3
 80059ee:	d05a      	beq.n	8005aa6 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x506>
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4619      	mov	r1, r3
 80059fa:	4b35      	ldr	r3, [pc, #212]	; (8005ad0 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x530>)
 80059fc:	4299      	cmp	r1, r3
 80059fe:	d04f      	beq.n	8005aa0 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x500>
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4619      	mov	r1, r3
 8005a0a:	4b32      	ldr	r3, [pc, #200]	; (8005ad4 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x534>)
 8005a0c:	4299      	cmp	r1, r3
 8005a0e:	d044      	beq.n	8005a9a <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x4fa>
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4619      	mov	r1, r3
 8005a1a:	4b2f      	ldr	r3, [pc, #188]	; (8005ad8 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x538>)
 8005a1c:	4299      	cmp	r1, r3
 8005a1e:	d039      	beq.n	8005a94 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x4f4>
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4619      	mov	r1, r3
 8005a2a:	4b2c      	ldr	r3, [pc, #176]	; (8005adc <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x53c>)
 8005a2c:	4299      	cmp	r1, r3
 8005a2e:	d02e      	beq.n	8005a8e <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x4ee>
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4619      	mov	r1, r3
 8005a3a:	4b29      	ldr	r3, [pc, #164]	; (8005ae0 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x540>)
 8005a3c:	4299      	cmp	r1, r3
 8005a3e:	d023      	beq.n	8005a88 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x4e8>
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4619      	mov	r1, r3
 8005a4a:	4b26      	ldr	r3, [pc, #152]	; (8005ae4 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x544>)
 8005a4c:	4299      	cmp	r1, r3
 8005a4e:	d018      	beq.n	8005a82 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x4e2>
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4619      	mov	r1, r3
 8005a5a:	4b23      	ldr	r3, [pc, #140]	; (8005ae8 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x548>)
 8005a5c:	4299      	cmp	r1, r3
 8005a5e:	d00d      	beq.n	8005a7c <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x4dc>
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4619      	mov	r1, r3
 8005a6a:	4b20      	ldr	r3, [pc, #128]	; (8005aec <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x54c>)
 8005a6c:	4299      	cmp	r1, r3
 8005a6e:	d102      	bne.n	8005a76 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x4d6>
 8005a70:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005a74:	e01e      	b.n	8005ab4 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x514>
 8005a76:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005a7a:	e01b      	b.n	8005ab4 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x514>
 8005a7c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005a80:	e018      	b.n	8005ab4 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x514>
 8005a82:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005a86:	e015      	b.n	8005ab4 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x514>
 8005a88:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005a8c:	e012      	b.n	8005ab4 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x514>
 8005a8e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005a92:	e00f      	b.n	8005ab4 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x514>
 8005a94:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005a98:	e00c      	b.n	8005ab4 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x514>
 8005a9a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005a9e:	e009      	b.n	8005ab4 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x514>
 8005aa0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005aa4:	e006      	b.n	8005ab4 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x514>
 8005aa6:	2320      	movs	r3, #32
 8005aa8:	e004      	b.n	8005ab4 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x514>
 8005aaa:	2320      	movs	r3, #32
 8005aac:	e002      	b.n	8005ab4 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x514>
 8005aae:	2320      	movs	r3, #32
 8005ab0:	e000      	b.n	8005ab4 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x514>
 8005ab2:	2320      	movs	r3, #32
 8005ab4:	60d3      	str	r3, [r2, #12]
  }
 8005ab6:	e0a3      	b.n	8005c00 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x660>
 8005ab8:	400260b8 	.word	0x400260b8
 8005abc:	40026400 	.word	0x40026400
 8005ac0:	40026010 	.word	0x40026010
 8005ac4:	40026410 	.word	0x40026410
 8005ac8:	40026070 	.word	0x40026070
 8005acc:	40026470 	.word	0x40026470
 8005ad0:	40026028 	.word	0x40026028
 8005ad4:	40026428 	.word	0x40026428
 8005ad8:	40026088 	.word	0x40026088
 8005adc:	40026488 	.word	0x40026488
 8005ae0:	40026040 	.word	0x40026040
 8005ae4:	40026440 	.word	0x40026440
 8005ae8:	400260a0 	.word	0x400260a0
 8005aec:	400264a0 	.word	0x400264a0
 8005af0:	40026058 	.word	0x40026058
 8005af4:	40026000 	.word	0x40026000
        __HAL_DMA_CLEAR_FLAG(huart_->hdmatx, __HAL_DMA_GET_TC_FLAG_INDEX(huart_->hdmatx));
 8005af8:	4a43      	ldr	r2, [pc, #268]	; (8005c08 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x668>)
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4619      	mov	r1, r3
 8005b04:	4b41      	ldr	r3, [pc, #260]	; (8005c0c <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x66c>)
 8005b06:	4299      	cmp	r1, r3
 8005b08:	d078      	beq.n	8005bfc <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x65c>
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4619      	mov	r1, r3
 8005b14:	4b3e      	ldr	r3, [pc, #248]	; (8005c10 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x670>)
 8005b16:	4299      	cmp	r1, r3
 8005b18:	d06e      	beq.n	8005bf8 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x658>
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4619      	mov	r1, r3
 8005b24:	4b3b      	ldr	r3, [pc, #236]	; (8005c14 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x674>)
 8005b26:	4299      	cmp	r1, r3
 8005b28:	d064      	beq.n	8005bf4 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x654>
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4619      	mov	r1, r3
 8005b34:	4b38      	ldr	r3, [pc, #224]	; (8005c18 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x678>)
 8005b36:	4299      	cmp	r1, r3
 8005b38:	d05a      	beq.n	8005bf0 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x650>
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4619      	mov	r1, r3
 8005b44:	4b35      	ldr	r3, [pc, #212]	; (8005c1c <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x67c>)
 8005b46:	4299      	cmp	r1, r3
 8005b48:	d04f      	beq.n	8005bea <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x64a>
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4619      	mov	r1, r3
 8005b54:	4b32      	ldr	r3, [pc, #200]	; (8005c20 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x680>)
 8005b56:	4299      	cmp	r1, r3
 8005b58:	d044      	beq.n	8005be4 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x644>
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4619      	mov	r1, r3
 8005b64:	4b2f      	ldr	r3, [pc, #188]	; (8005c24 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x684>)
 8005b66:	4299      	cmp	r1, r3
 8005b68:	d039      	beq.n	8005bde <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x63e>
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4619      	mov	r1, r3
 8005b74:	4b2c      	ldr	r3, [pc, #176]	; (8005c28 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x688>)
 8005b76:	4299      	cmp	r1, r3
 8005b78:	d02e      	beq.n	8005bd8 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x638>
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4619      	mov	r1, r3
 8005b84:	4b29      	ldr	r3, [pc, #164]	; (8005c2c <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x68c>)
 8005b86:	4299      	cmp	r1, r3
 8005b88:	d023      	beq.n	8005bd2 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x632>
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4619      	mov	r1, r3
 8005b94:	4b26      	ldr	r3, [pc, #152]	; (8005c30 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x690>)
 8005b96:	4299      	cmp	r1, r3
 8005b98:	d018      	beq.n	8005bcc <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x62c>
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4619      	mov	r1, r3
 8005ba4:	4b23      	ldr	r3, [pc, #140]	; (8005c34 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x694>)
 8005ba6:	4299      	cmp	r1, r3
 8005ba8:	d00d      	beq.n	8005bc6 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x626>
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4619      	mov	r1, r3
 8005bb4:	4b20      	ldr	r3, [pc, #128]	; (8005c38 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x698>)
 8005bb6:	4299      	cmp	r1, r3
 8005bb8:	d102      	bne.n	8005bc0 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x620>
 8005bba:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005bbe:	e01e      	b.n	8005bfe <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x65e>
 8005bc0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005bc4:	e01b      	b.n	8005bfe <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x65e>
 8005bc6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005bca:	e018      	b.n	8005bfe <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x65e>
 8005bcc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005bd0:	e015      	b.n	8005bfe <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x65e>
 8005bd2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005bd6:	e012      	b.n	8005bfe <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x65e>
 8005bd8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005bdc:	e00f      	b.n	8005bfe <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x65e>
 8005bde:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005be2:	e00c      	b.n	8005bfe <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x65e>
 8005be4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005be8:	e009      	b.n	8005bfe <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x65e>
 8005bea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005bee:	e006      	b.n	8005bfe <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x65e>
 8005bf0:	2320      	movs	r3, #32
 8005bf2:	e004      	b.n	8005bfe <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x65e>
 8005bf4:	2320      	movs	r3, #32
 8005bf6:	e002      	b.n	8005bfe <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x65e>
 8005bf8:	2320      	movs	r3, #32
 8005bfa:	e000      	b.n	8005bfe <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE5writeEPhh+0x65e>
 8005bfc:	2320      	movs	r3, #32
 8005bfe:	6093      	str	r3, [r2, #8]
  }
 8005c00:	bf00      	nop
 8005c02:	3718      	adds	r7, #24
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bd80      	pop	{r7, pc}
 8005c08:	40026000 	.word	0x40026000
 8005c0c:	40026010 	.word	0x40026010
 8005c10:	40026410 	.word	0x40026410
 8005c14:	40026070 	.word	0x40026070
 8005c18:	40026470 	.word	0x40026470
 8005c1c:	40026028 	.word	0x40026028
 8005c20:	40026428 	.word	0x40026428
 8005c24:	40026088 	.word	0x40026088
 8005c28:	40026488 	.word	0x40026488
 8005c2c:	40026040 	.word	0x40026040
 8005c30:	40026440 	.word	0x40026440
 8005c34:	400260a0 	.word	0x400260a0
 8005c38:	400264a0 	.word	0x400264a0

08005c3c <_ZNSt12_Vector_baseI7Vector3IfESaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl 
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b082      	sub	sp, #8
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
 8005c44:	6878      	ldr	r0, [r7, #4]
 8005c46:	f000 fd59 	bl	80066fc <_ZNSaI7Vector3IfEED1Ev>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	3708      	adds	r7, #8
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bd80      	pop	{r7, pc}

08005c54 <_ZNSt12_Vector_baseI7Vector3IfESaIS1_EEC1Ev>:
      _Vector_base()
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b082      	sub	sp, #8
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
      : _M_impl() { }
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	4618      	mov	r0, r3
 8005c60:	f000 fd37 	bl	80066d2 <_ZNSt12_Vector_baseI7Vector3IfESaIS1_EE12_Vector_implC1Ev>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	4618      	mov	r0, r3
 8005c68:	3708      	adds	r7, #8
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd80      	pop	{r7, pc}
	...

08005c70 <_ZNSt12_Vector_baseI7Vector3IfESaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b082      	sub	sp, #8
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6819      	ldr	r1, [r3, #0]
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	689b      	ldr	r3, [r3, #8]
		      - this->_M_impl._M_start); }
 8005c80:	461a      	mov	r2, r3
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	1ad3      	subs	r3, r2, r3
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 8005c88:	109b      	asrs	r3, r3, #2
 8005c8a:	4a08      	ldr	r2, [pc, #32]	; (8005cac <_ZNSt12_Vector_baseI7Vector3IfESaIS1_EED1Ev+0x3c>)
 8005c8c:	fb02 f303 	mul.w	r3, r2, r3
 8005c90:	461a      	mov	r2, r3
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	f000 fd3e 	bl	8006714 <_ZNSt12_Vector_baseI7Vector3IfESaIS1_EE13_M_deallocateEPS1_j>
		      - this->_M_impl._M_start); }
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	f7ff ffce 	bl	8005c3c <_ZNSt12_Vector_baseI7Vector3IfESaIS1_EE12_Vector_implD1Ev>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	3708      	adds	r7, #8
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bd80      	pop	{r7, pc}
 8005caa:	bf00      	nop
 8005cac:	aaaaaaab 	.word	0xaaaaaaab

08005cb0 <_ZNSt12_Vector_baseI7Vector3IfESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8005cb0:	b480      	push	{r7}
 8005cb2:	b083      	sub	sp, #12
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	4618      	mov	r0, r3
 8005cbc:	370c      	adds	r7, #12
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc4:	4770      	bx	lr

08005cc6 <_ZSt8_DestroyIP7Vector3IfES1_EvT_S3_RSaIT0_E>:
	__traits::destroy(__alloc, std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8005cc6:	b580      	push	{r7, lr}
 8005cc8:	b084      	sub	sp, #16
 8005cca:	af00      	add	r7, sp, #0
 8005ccc:	60f8      	str	r0, [r7, #12]
 8005cce:	60b9      	str	r1, [r7, #8]
 8005cd0:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8005cd2:	68b9      	ldr	r1, [r7, #8]
 8005cd4:	68f8      	ldr	r0, [r7, #12]
 8005cd6:	f000 fd30 	bl	800673a <_ZSt8_DestroyIP7Vector3IfEEvT_S3_>
    }
 8005cda:	bf00      	nop
 8005cdc:	3710      	adds	r7, #16
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bd80      	pop	{r7, pc}

08005ce2 <_ZNSt15binary_functionIP16AttitudeEstimateRKN6kduino11DesireCoordEvEC1Ev>:

  /**
   *  This is one of the @link functors functor base classes@endlink.
   */
  template<typename _Arg1, typename _Arg2, typename _Result>
    struct binary_function
 8005ce2:	b480      	push	{r7}
 8005ce4:	b083      	sub	sp, #12
 8005ce6:	af00      	add	r7, sp, #0
 8005ce8:	6078      	str	r0, [r7, #4]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	4618      	mov	r0, r3
 8005cee:	370c      	adds	r7, #12
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf6:	4770      	bx	lr

08005cf8 <_ZNSt10mem_fun1_tIv16AttitudeEstimateRKN6kduino11DesireCoordEEC1EMS0_FvS4_E>:
  template<typename _Ret, typename _Tp, typename _Arg>
    class mem_fun1_t : public binary_function<_Tp*, _Arg, _Ret>
    {
    public:
      explicit
      mem_fun1_t(_Ret (_Tp::*__pf)(_Arg))
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b084      	sub	sp, #16
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	60f8      	str	r0, [r7, #12]
 8005d00:	1d3b      	adds	r3, r7, #4
 8005d02:	e883 0006 	stmia.w	r3, {r1, r2}
      : _M_f(__pf) { }
 8005d06:	68f8      	ldr	r0, [r7, #12]
 8005d08:	f7ff ffeb 	bl	8005ce2 <_ZNSt15binary_functionIP16AttitudeEstimateRKN6kduino11DesireCoordEvEC1Ev>
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	461a      	mov	r2, r3
 8005d10:	1d3b      	adds	r3, r7, #4
 8005d12:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005d16:	e882 0003 	stmia.w	r2, {r0, r1}
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	3710      	adds	r7, #16
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bd80      	pop	{r7, pc}

08005d24 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE15requestSyncTimeEv>:
    void requestSyncTime()
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b086      	sub	sp, #24
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
      std_msgs::Time t;
 8005d2c:	f107 030c 	add.w	r3, r7, #12
 8005d30:	4618      	mov	r0, r3
 8005d32:	f7fb fcb9 	bl	80016a8 <_ZN8std_msgs4TimeC1Ev>
      publish(TopicInfo::ID_TIME, &t);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f107 020c 	add.w	r2, r7, #12
 8005d40:	210a      	movs	r1, #10
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	4798      	blx	r3
      rt_time = hardware_.time();
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	3304      	adds	r3, #4
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	f7fc fb01 	bl	8002352 <_ZN13STMF4Hardware4timeEv>
 8005d50:	4602      	mov	r2, r0
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	611a      	str	r2, [r3, #16]
    }
 8005d56:	bf00      	nop
 8005d58:	3718      	adds	r7, #24
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bd80      	pop	{r7, pc}

08005d5e <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE15negotiateTopicsEv>:
        }
      }
      return false;
    }

    void negotiateTopics()
 8005d5e:	b590      	push	{r4, r7, lr}
 8005d60:	b08b      	sub	sp, #44	; 0x2c
 8005d62:	af00      	add	r7, sp, #0
 8005d64:	6078      	str	r0, [r7, #4]
    {
      rosserial_msgs::TopicInfo ti;
 8005d66:	f107 030c 	add.w	r3, r7, #12
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f7fb fd8c 	bl	8001888 <_ZN14rosserial_msgs9TopicInfoC1Ev>
      int i;
      for(i = 0; i < MAX_PUBLISHERS; i++)
 8005d70:	2300      	movs	r3, #0
 8005d72:	627b      	str	r3, [r7, #36]	; 0x24
 8005d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d76:	2b13      	cmp	r3, #19
 8005d78:	dc5a      	bgt.n	8005e30 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE15negotiateTopicsEv+0xd2>
        {
          if(publishers[i] != 0) // non-empty slot
 8005d7a:	687a      	ldr	r2, [r7, #4]
 8005d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d7e:	3386      	adds	r3, #134	; 0x86
 8005d80:	009b      	lsls	r3, r3, #2
 8005d82:	4413      	add	r3, r2
 8005d84:	685b      	ldr	r3, [r3, #4]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d04e      	beq.n	8005e28 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE15negotiateTopicsEv+0xca>
            {
              ti.topic_id = publishers[i]->id_;
 8005d8a:	687a      	ldr	r2, [r7, #4]
 8005d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d8e:	3386      	adds	r3, #134	; 0x86
 8005d90:	009b      	lsls	r3, r3, #2
 8005d92:	4413      	add	r3, r2
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	689b      	ldr	r3, [r3, #8]
 8005d98:	b29b      	uxth	r3, r3
 8005d9a:	823b      	strh	r3, [r7, #16]
              ti.topic_name = (char *) publishers[i]->topic_;
 8005d9c:	687a      	ldr	r2, [r7, #4]
 8005d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da0:	3386      	adds	r3, #134	; 0x86
 8005da2:	009b      	lsls	r3, r3, #2
 8005da4:	4413      	add	r3, r2
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	617b      	str	r3, [r7, #20]
              ti.message_type = (char *) publishers[i]->msg_->getType();
 8005dac:	687a      	ldr	r2, [r7, #4]
 8005dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db0:	3386      	adds	r3, #134	; 0x86
 8005db2:	009b      	lsls	r3, r3, #2
 8005db4:	4413      	add	r3, r2
 8005db6:	685b      	ldr	r3, [r3, #4]
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	3308      	adds	r3, #8
 8005dbe:	681a      	ldr	r2, [r3, #0]
 8005dc0:	6879      	ldr	r1, [r7, #4]
 8005dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc4:	3386      	adds	r3, #134	; 0x86
 8005dc6:	009b      	lsls	r3, r3, #2
 8005dc8:	440b      	add	r3, r1
 8005dca:	685b      	ldr	r3, [r3, #4]
 8005dcc:	685b      	ldr	r3, [r3, #4]
 8005dce:	4618      	mov	r0, r3
 8005dd0:	4790      	blx	r2
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	61bb      	str	r3, [r7, #24]
              ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8005dd6:	687a      	ldr	r2, [r7, #4]
 8005dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dda:	3386      	adds	r3, #134	; 0x86
 8005ddc:	009b      	lsls	r3, r3, #2
 8005dde:	4413      	add	r3, r2
 8005de0:	685b      	ldr	r3, [r3, #4]
 8005de2:	685b      	ldr	r3, [r3, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	330c      	adds	r3, #12
 8005de8:	681a      	ldr	r2, [r3, #0]
 8005dea:	6879      	ldr	r1, [r7, #4]
 8005dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dee:	3386      	adds	r3, #134	; 0x86
 8005df0:	009b      	lsls	r3, r3, #2
 8005df2:	440b      	add	r3, r1
 8005df4:	685b      	ldr	r3, [r3, #4]
 8005df6:	685b      	ldr	r3, [r3, #4]
 8005df8:	4618      	mov	r0, r3
 8005dfa:	4790      	blx	r2
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	61fb      	str	r3, [r7, #28]
              ti.buffer_size = OUTPUT_SIZE;
 8005e00:	23ff      	movs	r3, #255	; 0xff
 8005e02:	623b      	str	r3, [r7, #32]
              publish( publishers[i]->getEndpointType(), &ti );
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	681c      	ldr	r4, [r3, #0]
 8005e0a:	687a      	ldr	r2, [r7, #4]
 8005e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e0e:	3386      	adds	r3, #134	; 0x86
 8005e10:	009b      	lsls	r3, r3, #2
 8005e12:	4413      	add	r3, r2
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	4618      	mov	r0, r3
 8005e18:	f7fc fa3d 	bl	8002296 <_ZN3ros9Publisher15getEndpointTypeEv>
 8005e1c:	4601      	mov	r1, r0
 8005e1e:	f107 030c 	add.w	r3, r7, #12
 8005e22:	461a      	mov	r2, r3
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	47a0      	blx	r4
      for(i = 0; i < MAX_PUBLISHERS; i++)
 8005e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e2a:	3301      	adds	r3, #1
 8005e2c:	627b      	str	r3, [r7, #36]	; 0x24
 8005e2e:	e7a1      	b.n	8005d74 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE15negotiateTopicsEv+0x16>
            }
        }
      for(i = 0; i < MAX_SUBSCRIBERS; i++)
 8005e30:	2300      	movs	r3, #0
 8005e32:	627b      	str	r3, [r7, #36]	; 0x24
 8005e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e36:	2b13      	cmp	r3, #19
 8005e38:	dc5e      	bgt.n	8005ef8 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE15negotiateTopicsEv+0x19a>
        {
          if(subscribers[i] != 0) // non-empty slot
 8005e3a:	687a      	ldr	r2, [r7, #4]
 8005e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e3e:	339a      	adds	r3, #154	; 0x9a
 8005e40:	009b      	lsls	r3, r3, #2
 8005e42:	4413      	add	r3, r2
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d052      	beq.n	8005ef0 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE15negotiateTopicsEv+0x192>
            {
              ti.topic_id = subscribers[i]->id_;
 8005e4a:	687a      	ldr	r2, [r7, #4]
 8005e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e4e:	339a      	adds	r3, #154	; 0x9a
 8005e50:	009b      	lsls	r3, r3, #2
 8005e52:	4413      	add	r3, r2
 8005e54:	685b      	ldr	r3, [r3, #4]
 8005e56:	685b      	ldr	r3, [r3, #4]
 8005e58:	b29b      	uxth	r3, r3
 8005e5a:	823b      	strh	r3, [r7, #16]
              ti.topic_name = (char *) subscribers[i]->topic_;
 8005e5c:	687a      	ldr	r2, [r7, #4]
 8005e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e60:	339a      	adds	r3, #154	; 0x9a
 8005e62:	009b      	lsls	r3, r3, #2
 8005e64:	4413      	add	r3, r2
 8005e66:	685b      	ldr	r3, [r3, #4]
 8005e68:	689b      	ldr	r3, [r3, #8]
 8005e6a:	617b      	str	r3, [r7, #20]
              ti.message_type = (char *) subscribers[i]->getMsgType();
 8005e6c:	687a      	ldr	r2, [r7, #4]
 8005e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e70:	339a      	adds	r3, #154	; 0x9a
 8005e72:	009b      	lsls	r3, r3, #2
 8005e74:	4413      	add	r3, r2
 8005e76:	685b      	ldr	r3, [r3, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	3308      	adds	r3, #8
 8005e7c:	681a      	ldr	r2, [r3, #0]
 8005e7e:	6879      	ldr	r1, [r7, #4]
 8005e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e82:	339a      	adds	r3, #154	; 0x9a
 8005e84:	009b      	lsls	r3, r3, #2
 8005e86:	440b      	add	r3, r1
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	4790      	blx	r2
 8005e8e:	4603      	mov	r3, r0
 8005e90:	61bb      	str	r3, [r7, #24]
              ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8005e92:	687a      	ldr	r2, [r7, #4]
 8005e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e96:	339a      	adds	r3, #154	; 0x9a
 8005e98:	009b      	lsls	r3, r3, #2
 8005e9a:	4413      	add	r3, r2
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	330c      	adds	r3, #12
 8005ea2:	681a      	ldr	r2, [r3, #0]
 8005ea4:	6879      	ldr	r1, [r7, #4]
 8005ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea8:	339a      	adds	r3, #154	; 0x9a
 8005eaa:	009b      	lsls	r3, r3, #2
 8005eac:	440b      	add	r3, r1
 8005eae:	685b      	ldr	r3, [r3, #4]
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	4790      	blx	r2
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	61fb      	str	r3, [r7, #28]
              ti.buffer_size = INPUT_SIZE;
 8005eb8:	23ff      	movs	r3, #255	; 0xff
 8005eba:	623b      	str	r3, [r7, #32]
              publish( subscribers[i]->getEndpointType(), &ti );
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	681c      	ldr	r4, [r3, #0]
 8005ec2:	687a      	ldr	r2, [r7, #4]
 8005ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec6:	339a      	adds	r3, #154	; 0x9a
 8005ec8:	009b      	lsls	r3, r3, #2
 8005eca:	4413      	add	r3, r2
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	3304      	adds	r3, #4
 8005ed2:	681a      	ldr	r2, [r3, #0]
 8005ed4:	6879      	ldr	r1, [r7, #4]
 8005ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed8:	339a      	adds	r3, #154	; 0x9a
 8005eda:	009b      	lsls	r3, r3, #2
 8005edc:	440b      	add	r3, r1
 8005ede:	685b      	ldr	r3, [r3, #4]
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	4790      	blx	r2
 8005ee4:	4601      	mov	r1, r0
 8005ee6:	f107 030c 	add.w	r3, r7, #12
 8005eea:	461a      	mov	r2, r3
 8005eec:	6878      	ldr	r0, [r7, #4]
 8005eee:	47a0      	blx	r4
      for(i = 0; i < MAX_SUBSCRIBERS; i++)
 8005ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef2:	3301      	adds	r3, #1
 8005ef4:	627b      	str	r3, [r7, #36]	; 0x24
 8005ef6:	e79d      	b.n	8005e34 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE15negotiateTopicsEv+0xd6>
            }
        }
      configured_ = true;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2201      	movs	r2, #1
 8005efc:	f883 22d0 	strb.w	r2, [r3, #720]	; 0x2d0
    }
 8005f00:	bf00      	nop
 8005f02:	372c      	adds	r7, #44	; 0x2c
 8005f04:	46bd      	mov	sp, r7
 8005f06:	bd90      	pop	{r4, r7, pc}

08005f08 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8syncTimeEPh>:
    void syncTime(uint8_t * data)
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b086      	sub	sp, #24
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
 8005f10:	6039      	str	r1, [r7, #0]
      std_msgs::Time t;
 8005f12:	f107 0308 	add.w	r3, r7, #8
 8005f16:	4618      	mov	r0, r3
 8005f18:	f7fb fbc6 	bl	80016a8 <_ZN8std_msgs4TimeC1Ev>
      uint32_t offset = hardware_.time() - rt_time;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	3304      	adds	r3, #4
 8005f20:	4618      	mov	r0, r3
 8005f22:	f7fc fa16 	bl	8002352 <_ZN13STMF4Hardware4timeEv>
 8005f26:	4602      	mov	r2, r0
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	691b      	ldr	r3, [r3, #16]
 8005f2c:	1ad3      	subs	r3, r2, r3
 8005f2e:	617b      	str	r3, [r7, #20]
      t.deserialize(data);
 8005f30:	f107 0308 	add.w	r3, r7, #8
 8005f34:	6839      	ldr	r1, [r7, #0]
 8005f36:	4618      	mov	r0, r3
 8005f38:	f7fb fc26 	bl	8001788 <_ZN8std_msgs4Time11deserializeEPh>
      t.data.sec += offset/1000;
 8005f3c:	68fa      	ldr	r2, [r7, #12]
 8005f3e:	697b      	ldr	r3, [r7, #20]
 8005f40:	4914      	ldr	r1, [pc, #80]	; (8005f94 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8syncTimeEPh+0x8c>)
 8005f42:	fba1 1303 	umull	r1, r3, r1, r3
 8005f46:	099b      	lsrs	r3, r3, #6
 8005f48:	4413      	add	r3, r2
 8005f4a:	60fb      	str	r3, [r7, #12]
      t.data.nsec += (offset%1000)*1000000UL;
 8005f4c:	6939      	ldr	r1, [r7, #16]
 8005f4e:	697a      	ldr	r2, [r7, #20]
 8005f50:	4b10      	ldr	r3, [pc, #64]	; (8005f94 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8syncTimeEPh+0x8c>)
 8005f52:	fba3 0302 	umull	r0, r3, r3, r2
 8005f56:	099b      	lsrs	r3, r3, #6
 8005f58:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005f5c:	fb00 f303 	mul.w	r3, r0, r3
 8005f60:	1ad3      	subs	r3, r2, r3
 8005f62:	4a0d      	ldr	r2, [pc, #52]	; (8005f98 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8syncTimeEPh+0x90>)
 8005f64:	fb02 f303 	mul.w	r3, r2, r3
 8005f68:	440b      	add	r3, r1
 8005f6a:	613b      	str	r3, [r7, #16]
      this->setNow(t.data);
 8005f6c:	f107 0308 	add.w	r3, r7, #8
 8005f70:	3304      	adds	r3, #4
 8005f72:	4619      	mov	r1, r3
 8005f74:	6878      	ldr	r0, [r7, #4]
 8005f76:	f000 fc7d 	bl	8006874 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE6setNowERNS_4TimeE>
      last_sync_receive_time = hardware_.time();
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	3304      	adds	r3, #4
 8005f7e:	4618      	mov	r0, r3
 8005f80:	f7fc f9e7 	bl	8002352 <_ZN13STMF4Hardware4timeEv>
 8005f84:	4602      	mov	r2, r0
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8
    }
 8005f8c:	bf00      	nop
 8005f8e:	3718      	adds	r7, #24
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bd80      	pop	{r7, pc}
 8005f94:	10624dd3 	.word	0x10624dd3
 8005f98:	000f4240 	.word	0x000f4240

08005f9c <_ZN10RingBufferIhLi400EEC1Ev>:
  RingBuffer()
 8005f9c:	b480      	push	{r7}
 8005f9e:	b083      	sub	sp, #12
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
    byte_in_progress_ = 0;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	f8a3 2190 	strh.w	r2, [r3, #400]	; 0x190
    byte_to_add_ = 0;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	f8a3 2192 	strh.w	r2, [r3, #402]	; 0x192
    buffer_length_ = (uint16_t)SIZE;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8005fba:	f8a3 2194 	strh.w	r2, [r3, #404]	; 0x194
  }
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	370c      	adds	r7, #12
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fca:	4770      	bx	lr

08005fcc <_ZN8RxBufferI18UART_HandleTypeDefLi400ELi8EE11ReceiveCpltEP19__DMA_HandleTypeDef>:
  static void ReceiveCplt(DMA_HandleTypeDef *hdma)
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b084      	sub	sp, #16
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
    Hardware* huart = ( Hardware* )(hdma)->Parent;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fd8:	60bb      	str	r3, [r7, #8]
    if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	bf0c      	ite	eq
 8005fe8:	2301      	moveq	r3, #1
 8005fea:	2300      	movne	r3, #0
 8005fec:	b2db      	uxtb	r3, r3
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d01e      	beq.n	8006030 <_ZN8RxBufferI18UART_HandleTypeDefLi400ELi8EE11ReceiveCpltEP19__DMA_HandleTypeDef+0x64>
        huart->RxXferCount = 0;
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	85da      	strh	r2, [r3, #46]	; 0x2e
        huart->Instance->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DMAR);
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	68ba      	ldr	r2, [r7, #8]
 8005ffe:	6812      	ldr	r2, [r2, #0]
 8006000:	6952      	ldr	r2, [r2, #20]
 8006002:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006006:	615a      	str	r2, [r3, #20]
        if(huart->gState == HAL_UART_STATE_BUSY_TX_RX)
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800600e:	b2db      	uxtb	r3, r3
 8006010:	2b23      	cmp	r3, #35	; 0x23
 8006012:	bf0c      	ite	eq
 8006014:	2301      	moveq	r3, #1
 8006016:	2300      	movne	r3, #0
 8006018:	b2db      	uxtb	r3, r3
 800601a:	2b00      	cmp	r3, #0
 800601c:	d004      	beq.n	8006028 <_ZN8RxBufferI18UART_HandleTypeDefLi400ELi8EE11ReceiveCpltEP19__DMA_HandleTypeDef+0x5c>
          huart->gState = HAL_UART_STATE_BUSY_TX;
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	2221      	movs	r2, #33	; 0x21
 8006022:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8006026:	e003      	b.n	8006030 <_ZN8RxBufferI18UART_HandleTypeDefLi400ELi8EE11ReceiveCpltEP19__DMA_HandleTypeDef+0x64>
          huart->gState = HAL_UART_STATE_READY;
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	2220      	movs	r2, #32
 800602c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
for(int i = 0; i < RX_BURST_SIZE; i++)
 8006030:	2300      	movs	r3, #0
 8006032:	60fb      	str	r3, [r7, #12]
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	2b07      	cmp	r3, #7
 8006038:	dc0c      	bgt.n	8006054 <_ZN8RxBufferI18UART_HandleTypeDefLi400ELi8EE11ReceiveCpltEP19__DMA_HandleTypeDef+0x88>
    ring_buf_->push(rx_value_[i]);
 800603a:	4b08      	ldr	r3, [pc, #32]	; (800605c <_ZN8RxBufferI18UART_HandleTypeDefLi400ELi8EE11ReceiveCpltEP19__DMA_HandleTypeDef+0x90>)
 800603c:	6818      	ldr	r0, [r3, #0]
 800603e:	4a08      	ldr	r2, [pc, #32]	; (8006060 <_ZN8RxBufferI18UART_HandleTypeDefLi400ELi8EE11ReceiveCpltEP19__DMA_HandleTypeDef+0x94>)
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	4413      	add	r3, r2
 8006044:	781b      	ldrb	r3, [r3, #0]
 8006046:	4619      	mov	r1, r3
 8006048:	f000 fc52 	bl	80068f0 <_ZN10RingBufferIhLi400EE4pushEh>
for(int i = 0; i < RX_BURST_SIZE; i++)
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	3301      	adds	r3, #1
 8006050:	60fb      	str	r3, [r7, #12]
 8006052:	e7ef      	b.n	8006034 <_ZN8RxBufferI18UART_HandleTypeDefLi400ELi8EE11ReceiveCpltEP19__DMA_HandleTypeDef+0x68>
  }
 8006054:	bf00      	nop
 8006056:	3710      	adds	r7, #16
 8006058:	46bd      	mov	sp, r7
 800605a:	bd80      	pop	{r7, pc}
 800605c:	20000a7c 	.word	0x20000a7c
 8006060:	20000a80 	.word	0x20000a80

08006064 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef>:
  static void TransmitCplt(DMA_HandleTypeDef *hdma)
 8006064:	b480      	push	{r7}
 8006066:	b087      	sub	sp, #28
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
    Hardware* huart = ( Hardware* )(hdma)->Parent;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006070:	617b      	str	r3, [r7, #20]
    if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800607c:	2b00      	cmp	r3, #0
 800607e:	bf0c      	ite	eq
 8006080:	2301      	moveq	r3, #1
 8006082:	2300      	movne	r3, #0
 8006084:	b2db      	uxtb	r3, r3
 8006086:	2b00      	cmp	r3, #0
 8006088:	d013      	beq.n	80060b2 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x4e>
        huart->TxXferCount = 0;
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	2200      	movs	r2, #0
 800608e:	84da      	strh	r2, [r3, #38]	; 0x26
        huart->Instance->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DMAT);
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	697a      	ldr	r2, [r7, #20]
 8006096:	6812      	ldr	r2, [r2, #0]
 8006098:	6952      	ldr	r2, [r2, #20]
 800609a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800609e:	615a      	str	r2, [r3, #20]
    __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80060a0:	697b      	ldr	r3, [r7, #20]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	697a      	ldr	r2, [r7, #20]
 80060a6:	6812      	ldr	r2, [r2, #0]
 80060a8:	68d2      	ldr	r2, [r2, #12]
 80060aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80060ae:	60da      	str	r2, [r3, #12]
  }
 80060b0:	e2a4      	b.n	80065fc <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x598>
        huart->Instance->CR3 &= (uint32_t)(~USART_CR3_DMAT);
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	697a      	ldr	r2, [r7, #20]
 80060b8:	6812      	ldr	r2, [r2, #0]
 80060ba:	6952      	ldr	r2, [r2, #20]
 80060bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80060c0:	615a      	str	r2, [r3, #20]
        if(!idle_flag_)
 80060c2:	4b6f      	ldr	r3, [pc, #444]	; (8006280 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x21c>)
 80060c4:	781b      	ldrb	r3, [r3, #0]
 80060c6:	f083 0301 	eor.w	r3, r3, #1
 80060ca:	b2db      	uxtb	r3, r3
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d056      	beq.n	800617e <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x11a>
            subscript_in_progress_++;
 80060d0:	4b6c      	ldr	r3, [pc, #432]	; (8006284 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x220>)
 80060d2:	781b      	ldrb	r3, [r3, #0]
 80060d4:	3301      	adds	r3, #1
 80060d6:	b2da      	uxtb	r2, r3
 80060d8:	4b6a      	ldr	r3, [pc, #424]	; (8006284 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x220>)
 80060da:	701a      	strb	r2, [r3, #0]
            if (subscript_in_progress_ == TX_SIZE)
 80060dc:	4b69      	ldr	r3, [pc, #420]	; (8006284 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x220>)
 80060de:	781b      	ldrb	r3, [r3, #0]
 80060e0:	2b32      	cmp	r3, #50	; 0x32
 80060e2:	d102      	bne.n	80060ea <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x86>
                subscript_in_progress_ = 0;
 80060e4:	4b67      	ldr	r3, [pc, #412]	; (8006284 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x220>)
 80060e6:	2200      	movs	r2, #0
 80060e8:	701a      	strb	r2, [r3, #0]
            if (subscript_in_progress_ != subscript_to_add_)
 80060ea:	4b66      	ldr	r3, [pc, #408]	; (8006284 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x220>)
 80060ec:	781a      	ldrb	r2, [r3, #0]
 80060ee:	4b66      	ldr	r3, [pc, #408]	; (8006288 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x224>)
 80060f0:	781b      	ldrb	r3, [r3, #0]
 80060f2:	429a      	cmp	r2, r3
 80060f4:	d040      	beq.n	8006178 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x114>
                __HAL_DMA_DISABLE(huart->hdmatx);
 80060f6:	697b      	ldr	r3, [r7, #20]
 80060f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	697a      	ldr	r2, [r7, #20]
 80060fe:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006100:	6812      	ldr	r2, [r2, #0]
 8006102:	6812      	ldr	r2, [r2, #0]
 8006104:	f022 0201 	bic.w	r2, r2, #1
 8006108:	601a      	str	r2, [r3, #0]
                uint8_t* tmp8 = tx_buffer_unit_[subscript_in_progress_].tx_data_;
 800610a:	4b5e      	ldr	r3, [pc, #376]	; (8006284 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x220>)
 800610c:	781b      	ldrb	r3, [r3, #0]
 800610e:	461a      	mov	r2, r3
 8006110:	4613      	mov	r3, r2
 8006112:	019b      	lsls	r3, r3, #6
 8006114:	1a9b      	subs	r3, r3, r2
 8006116:	009b      	lsls	r3, r3, #2
 8006118:	1a9b      	subs	r3, r3, r2
 800611a:	4a5c      	ldr	r2, [pc, #368]	; (800628c <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x228>)
 800611c:	4413      	add	r3, r2
 800611e:	60fb      	str	r3, [r7, #12]
                uint32_t * tmp32 = (uint32_t*)&tmp8;
 8006120:	f107 030c 	add.w	r3, r7, #12
 8006124:	613b      	str	r3, [r7, #16]
                huart->hdmatx->Instance->NDTR = (uint32_t)tx_buffer_unit_[subscript_in_progress_].tx_len_;
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800612a:	6819      	ldr	r1, [r3, #0]
 800612c:	4b55      	ldr	r3, [pc, #340]	; (8006284 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x220>)
 800612e:	781b      	ldrb	r3, [r3, #0]
 8006130:	461a      	mov	r2, r3
 8006132:	4856      	ldr	r0, [pc, #344]	; (800628c <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x228>)
 8006134:	4613      	mov	r3, r2
 8006136:	019b      	lsls	r3, r3, #6
 8006138:	1a9b      	subs	r3, r3, r2
 800613a:	009b      	lsls	r3, r3, #2
 800613c:	1a9b      	subs	r3, r3, r2
 800613e:	4403      	add	r3, r0
 8006140:	33fa      	adds	r3, #250	; 0xfa
 8006142:	781b      	ldrb	r3, [r3, #0]
 8006144:	604b      	str	r3, [r1, #4]
                huart->hdmatx->Instance->M0AR = *(uint32_t*)tmp32;
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	693a      	ldr	r2, [r7, #16]
 800614e:	6812      	ldr	r2, [r2, #0]
 8006150:	60da      	str	r2, [r3, #12]
                huart->Instance->CR3 |= USART_CR3_DMAT; //enable dma request in hsuart side
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	697a      	ldr	r2, [r7, #20]
 8006158:	6812      	ldr	r2, [r2, #0]
 800615a:	6952      	ldr	r2, [r2, #20]
 800615c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006160:	615a      	str	r2, [r3, #20]
                __HAL_DMA_ENABLE(huart->hdmatx);
 8006162:	697b      	ldr	r3, [r7, #20]
 8006164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	697a      	ldr	r2, [r7, #20]
 800616a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800616c:	6812      	ldr	r2, [r2, #0]
 800616e:	6812      	ldr	r2, [r2, #0]
 8006170:	f042 0201 	orr.w	r2, r2, #1
 8006174:	601a      	str	r2, [r3, #0]
 8006176:	e002      	b.n	800617e <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x11a>
                idle_flag_ = true;
 8006178:	4b41      	ldr	r3, [pc, #260]	; (8006280 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x21c>)
 800617a:	2201      	movs	r2, #1
 800617c:	701a      	strb	r2, [r3, #0]
        __HAL_DMA_CLEAR_FLAG(huart->hdmatx, __HAL_DMA_GET_TC_FLAG_INDEX(huart->hdmatx));
 800617e:	697b      	ldr	r3, [r7, #20]
 8006180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	461a      	mov	r2, r3
 8006186:	4b42      	ldr	r3, [pc, #264]	; (8006290 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x22c>)
 8006188:	429a      	cmp	r2, r3
 800618a:	f240 809d 	bls.w	80062c8 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x264>
 800618e:	4a41      	ldr	r2, [pc, #260]	; (8006294 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x230>)
 8006190:	697b      	ldr	r3, [r7, #20]
 8006192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4619      	mov	r1, r3
 8006198:	4b3f      	ldr	r3, [pc, #252]	; (8006298 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x234>)
 800619a:	4299      	cmp	r1, r3
 800619c:	d06d      	beq.n	800627a <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x216>
 800619e:	697b      	ldr	r3, [r7, #20]
 80061a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4619      	mov	r1, r3
 80061a6:	4b3d      	ldr	r3, [pc, #244]	; (800629c <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x238>)
 80061a8:	4299      	cmp	r1, r3
 80061aa:	d064      	beq.n	8006276 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x212>
 80061ac:	697b      	ldr	r3, [r7, #20]
 80061ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	4619      	mov	r1, r3
 80061b4:	4b3a      	ldr	r3, [pc, #232]	; (80062a0 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x23c>)
 80061b6:	4299      	cmp	r1, r3
 80061b8:	d05b      	beq.n	8006272 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x20e>
 80061ba:	697b      	ldr	r3, [r7, #20]
 80061bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4619      	mov	r1, r3
 80061c2:	4b38      	ldr	r3, [pc, #224]	; (80062a4 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x240>)
 80061c4:	4299      	cmp	r1, r3
 80061c6:	d052      	beq.n	800626e <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x20a>
 80061c8:	697b      	ldr	r3, [r7, #20]
 80061ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	4619      	mov	r1, r3
 80061d0:	4b35      	ldr	r3, [pc, #212]	; (80062a8 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x244>)
 80061d2:	4299      	cmp	r1, r3
 80061d4:	d048      	beq.n	8006268 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x204>
 80061d6:	697b      	ldr	r3, [r7, #20]
 80061d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4619      	mov	r1, r3
 80061de:	4b33      	ldr	r3, [pc, #204]	; (80062ac <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x248>)
 80061e0:	4299      	cmp	r1, r3
 80061e2:	d03e      	beq.n	8006262 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x1fe>
 80061e4:	697b      	ldr	r3, [r7, #20]
 80061e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4619      	mov	r1, r3
 80061ec:	4b30      	ldr	r3, [pc, #192]	; (80062b0 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x24c>)
 80061ee:	4299      	cmp	r1, r3
 80061f0:	d034      	beq.n	800625c <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x1f8>
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4619      	mov	r1, r3
 80061fa:	4b2e      	ldr	r3, [pc, #184]	; (80062b4 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x250>)
 80061fc:	4299      	cmp	r1, r3
 80061fe:	d02a      	beq.n	8006256 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x1f2>
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4619      	mov	r1, r3
 8006208:	4b2b      	ldr	r3, [pc, #172]	; (80062b8 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x254>)
 800620a:	4299      	cmp	r1, r3
 800620c:	d020      	beq.n	8006250 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x1ec>
 800620e:	697b      	ldr	r3, [r7, #20]
 8006210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4619      	mov	r1, r3
 8006216:	4b29      	ldr	r3, [pc, #164]	; (80062bc <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x258>)
 8006218:	4299      	cmp	r1, r3
 800621a:	d016      	beq.n	800624a <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x1e6>
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4619      	mov	r1, r3
 8006224:	4b26      	ldr	r3, [pc, #152]	; (80062c0 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x25c>)
 8006226:	4299      	cmp	r1, r3
 8006228:	d00c      	beq.n	8006244 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x1e0>
 800622a:	697b      	ldr	r3, [r7, #20]
 800622c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4619      	mov	r1, r3
 8006232:	4b24      	ldr	r3, [pc, #144]	; (80062c4 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x260>)
 8006234:	4299      	cmp	r1, r3
 8006236:	d102      	bne.n	800623e <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x1da>
 8006238:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800623c:	e01e      	b.n	800627c <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x218>
 800623e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006242:	e01b      	b.n	800627c <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x218>
 8006244:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006248:	e018      	b.n	800627c <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x218>
 800624a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800624e:	e015      	b.n	800627c <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x218>
 8006250:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006254:	e012      	b.n	800627c <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x218>
 8006256:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800625a:	e00f      	b.n	800627c <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x218>
 800625c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006260:	e00c      	b.n	800627c <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x218>
 8006262:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006266:	e009      	b.n	800627c <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x218>
 8006268:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800626c:	e006      	b.n	800627c <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x218>
 800626e:	2320      	movs	r3, #32
 8006270:	e004      	b.n	800627c <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x218>
 8006272:	2320      	movs	r3, #32
 8006274:	e002      	b.n	800627c <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x218>
 8006276:	2320      	movs	r3, #32
 8006278:	e000      	b.n	800627c <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x218>
 800627a:	2320      	movs	r3, #32
 800627c:	60d3      	str	r3, [r2, #12]
  }
 800627e:	e1bd      	b.n	80065fc <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x598>
 8006280:	20003b90 	.word	0x20003b90
 8006284:	20003b8e 	.word	0x20003b8e
 8006288:	20003b8f 	.word	0x20003b8f
 800628c:	20000a88 	.word	0x20000a88
 8006290:	40026458 	.word	0x40026458
 8006294:	40026400 	.word	0x40026400
 8006298:	40026010 	.word	0x40026010
 800629c:	40026410 	.word	0x40026410
 80062a0:	40026070 	.word	0x40026070
 80062a4:	40026470 	.word	0x40026470
 80062a8:	40026028 	.word	0x40026028
 80062ac:	40026428 	.word	0x40026428
 80062b0:	40026088 	.word	0x40026088
 80062b4:	40026488 	.word	0x40026488
 80062b8:	40026040 	.word	0x40026040
 80062bc:	40026440 	.word	0x40026440
 80062c0:	400260a0 	.word	0x400260a0
 80062c4:	400264a0 	.word	0x400264a0
        __HAL_DMA_CLEAR_FLAG(huart->hdmatx, __HAL_DMA_GET_TC_FLAG_INDEX(huart->hdmatx));
 80062c8:	697b      	ldr	r3, [r7, #20]
 80062ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	461a      	mov	r2, r3
 80062d0:	4b7e      	ldr	r3, [pc, #504]	; (80064cc <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x468>)
 80062d2:	429a      	cmp	r2, r3
 80062d4:	d978      	bls.n	80063c8 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x364>
 80062d6:	4a7e      	ldr	r2, [pc, #504]	; (80064d0 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x46c>)
 80062d8:	697b      	ldr	r3, [r7, #20]
 80062da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4619      	mov	r1, r3
 80062e0:	4b7c      	ldr	r3, [pc, #496]	; (80064d4 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x470>)
 80062e2:	4299      	cmp	r1, r3
 80062e4:	d06d      	beq.n	80063c2 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x35e>
 80062e6:	697b      	ldr	r3, [r7, #20]
 80062e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4619      	mov	r1, r3
 80062ee:	4b7a      	ldr	r3, [pc, #488]	; (80064d8 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x474>)
 80062f0:	4299      	cmp	r1, r3
 80062f2:	d064      	beq.n	80063be <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x35a>
 80062f4:	697b      	ldr	r3, [r7, #20]
 80062f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4619      	mov	r1, r3
 80062fc:	4b77      	ldr	r3, [pc, #476]	; (80064dc <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x478>)
 80062fe:	4299      	cmp	r1, r3
 8006300:	d05b      	beq.n	80063ba <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x356>
 8006302:	697b      	ldr	r3, [r7, #20]
 8006304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4619      	mov	r1, r3
 800630a:	4b75      	ldr	r3, [pc, #468]	; (80064e0 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x47c>)
 800630c:	4299      	cmp	r1, r3
 800630e:	d052      	beq.n	80063b6 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x352>
 8006310:	697b      	ldr	r3, [r7, #20]
 8006312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4619      	mov	r1, r3
 8006318:	4b72      	ldr	r3, [pc, #456]	; (80064e4 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x480>)
 800631a:	4299      	cmp	r1, r3
 800631c:	d048      	beq.n	80063b0 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x34c>
 800631e:	697b      	ldr	r3, [r7, #20]
 8006320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4619      	mov	r1, r3
 8006326:	4b70      	ldr	r3, [pc, #448]	; (80064e8 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x484>)
 8006328:	4299      	cmp	r1, r3
 800632a:	d03e      	beq.n	80063aa <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x346>
 800632c:	697b      	ldr	r3, [r7, #20]
 800632e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4619      	mov	r1, r3
 8006334:	4b6d      	ldr	r3, [pc, #436]	; (80064ec <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x488>)
 8006336:	4299      	cmp	r1, r3
 8006338:	d034      	beq.n	80063a4 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x340>
 800633a:	697b      	ldr	r3, [r7, #20]
 800633c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4619      	mov	r1, r3
 8006342:	4b6b      	ldr	r3, [pc, #428]	; (80064f0 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x48c>)
 8006344:	4299      	cmp	r1, r3
 8006346:	d02a      	beq.n	800639e <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x33a>
 8006348:	697b      	ldr	r3, [r7, #20]
 800634a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	4619      	mov	r1, r3
 8006350:	4b68      	ldr	r3, [pc, #416]	; (80064f4 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x490>)
 8006352:	4299      	cmp	r1, r3
 8006354:	d020      	beq.n	8006398 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x334>
 8006356:	697b      	ldr	r3, [r7, #20]
 8006358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4619      	mov	r1, r3
 800635e:	4b66      	ldr	r3, [pc, #408]	; (80064f8 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x494>)
 8006360:	4299      	cmp	r1, r3
 8006362:	d016      	beq.n	8006392 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x32e>
 8006364:	697b      	ldr	r3, [r7, #20]
 8006366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4619      	mov	r1, r3
 800636c:	4b63      	ldr	r3, [pc, #396]	; (80064fc <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x498>)
 800636e:	4299      	cmp	r1, r3
 8006370:	d00c      	beq.n	800638c <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x328>
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4619      	mov	r1, r3
 800637a:	4b61      	ldr	r3, [pc, #388]	; (8006500 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x49c>)
 800637c:	4299      	cmp	r1, r3
 800637e:	d102      	bne.n	8006386 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x322>
 8006380:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006384:	e01e      	b.n	80063c4 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x360>
 8006386:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800638a:	e01b      	b.n	80063c4 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x360>
 800638c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006390:	e018      	b.n	80063c4 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x360>
 8006392:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006396:	e015      	b.n	80063c4 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x360>
 8006398:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800639c:	e012      	b.n	80063c4 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x360>
 800639e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80063a2:	e00f      	b.n	80063c4 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x360>
 80063a4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80063a8:	e00c      	b.n	80063c4 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x360>
 80063aa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80063ae:	e009      	b.n	80063c4 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x360>
 80063b0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80063b4:	e006      	b.n	80063c4 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x360>
 80063b6:	2320      	movs	r3, #32
 80063b8:	e004      	b.n	80063c4 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x360>
 80063ba:	2320      	movs	r3, #32
 80063bc:	e002      	b.n	80063c4 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x360>
 80063be:	2320      	movs	r3, #32
 80063c0:	e000      	b.n	80063c4 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x360>
 80063c2:	2320      	movs	r3, #32
 80063c4:	6093      	str	r3, [r2, #8]
  }
 80063c6:	e119      	b.n	80065fc <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x598>
        __HAL_DMA_CLEAR_FLAG(huart->hdmatx, __HAL_DMA_GET_TC_FLAG_INDEX(huart->hdmatx));
 80063c8:	697b      	ldr	r3, [r7, #20]
 80063ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	461a      	mov	r2, r3
 80063d0:	4b4c      	ldr	r3, [pc, #304]	; (8006504 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x4a0>)
 80063d2:	429a      	cmp	r2, r3
 80063d4:	f240 809a 	bls.w	800650c <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x4a8>
 80063d8:	4a4b      	ldr	r2, [pc, #300]	; (8006508 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x4a4>)
 80063da:	697b      	ldr	r3, [r7, #20]
 80063dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4619      	mov	r1, r3
 80063e2:	4b3c      	ldr	r3, [pc, #240]	; (80064d4 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x470>)
 80063e4:	4299      	cmp	r1, r3
 80063e6:	d06d      	beq.n	80064c4 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x460>
 80063e8:	697b      	ldr	r3, [r7, #20]
 80063ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	4619      	mov	r1, r3
 80063f0:	4b39      	ldr	r3, [pc, #228]	; (80064d8 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x474>)
 80063f2:	4299      	cmp	r1, r3
 80063f4:	d064      	beq.n	80064c0 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x45c>
 80063f6:	697b      	ldr	r3, [r7, #20]
 80063f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4619      	mov	r1, r3
 80063fe:	4b37      	ldr	r3, [pc, #220]	; (80064dc <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x478>)
 8006400:	4299      	cmp	r1, r3
 8006402:	d05b      	beq.n	80064bc <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x458>
 8006404:	697b      	ldr	r3, [r7, #20]
 8006406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4619      	mov	r1, r3
 800640c:	4b34      	ldr	r3, [pc, #208]	; (80064e0 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x47c>)
 800640e:	4299      	cmp	r1, r3
 8006410:	d052      	beq.n	80064b8 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x454>
 8006412:	697b      	ldr	r3, [r7, #20]
 8006414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4619      	mov	r1, r3
 800641a:	4b32      	ldr	r3, [pc, #200]	; (80064e4 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x480>)
 800641c:	4299      	cmp	r1, r3
 800641e:	d048      	beq.n	80064b2 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x44e>
 8006420:	697b      	ldr	r3, [r7, #20]
 8006422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4619      	mov	r1, r3
 8006428:	4b2f      	ldr	r3, [pc, #188]	; (80064e8 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x484>)
 800642a:	4299      	cmp	r1, r3
 800642c:	d03e      	beq.n	80064ac <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x448>
 800642e:	697b      	ldr	r3, [r7, #20]
 8006430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4619      	mov	r1, r3
 8006436:	4b2d      	ldr	r3, [pc, #180]	; (80064ec <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x488>)
 8006438:	4299      	cmp	r1, r3
 800643a:	d034      	beq.n	80064a6 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x442>
 800643c:	697b      	ldr	r3, [r7, #20]
 800643e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4619      	mov	r1, r3
 8006444:	4b2a      	ldr	r3, [pc, #168]	; (80064f0 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x48c>)
 8006446:	4299      	cmp	r1, r3
 8006448:	d02a      	beq.n	80064a0 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x43c>
 800644a:	697b      	ldr	r3, [r7, #20]
 800644c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4619      	mov	r1, r3
 8006452:	4b28      	ldr	r3, [pc, #160]	; (80064f4 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x490>)
 8006454:	4299      	cmp	r1, r3
 8006456:	d020      	beq.n	800649a <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x436>
 8006458:	697b      	ldr	r3, [r7, #20]
 800645a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4619      	mov	r1, r3
 8006460:	4b25      	ldr	r3, [pc, #148]	; (80064f8 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x494>)
 8006462:	4299      	cmp	r1, r3
 8006464:	d016      	beq.n	8006494 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x430>
 8006466:	697b      	ldr	r3, [r7, #20]
 8006468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4619      	mov	r1, r3
 800646e:	4b23      	ldr	r3, [pc, #140]	; (80064fc <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x498>)
 8006470:	4299      	cmp	r1, r3
 8006472:	d00c      	beq.n	800648e <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x42a>
 8006474:	697b      	ldr	r3, [r7, #20]
 8006476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4619      	mov	r1, r3
 800647c:	4b20      	ldr	r3, [pc, #128]	; (8006500 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x49c>)
 800647e:	4299      	cmp	r1, r3
 8006480:	d102      	bne.n	8006488 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x424>
 8006482:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006486:	e01e      	b.n	80064c6 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x462>
 8006488:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800648c:	e01b      	b.n	80064c6 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x462>
 800648e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006492:	e018      	b.n	80064c6 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x462>
 8006494:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006498:	e015      	b.n	80064c6 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x462>
 800649a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800649e:	e012      	b.n	80064c6 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x462>
 80064a0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80064a4:	e00f      	b.n	80064c6 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x462>
 80064a6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80064aa:	e00c      	b.n	80064c6 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x462>
 80064ac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80064b0:	e009      	b.n	80064c6 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x462>
 80064b2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80064b6:	e006      	b.n	80064c6 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x462>
 80064b8:	2320      	movs	r3, #32
 80064ba:	e004      	b.n	80064c6 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x462>
 80064bc:	2320      	movs	r3, #32
 80064be:	e002      	b.n	80064c6 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x462>
 80064c0:	2320      	movs	r3, #32
 80064c2:	e000      	b.n	80064c6 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x462>
 80064c4:	2320      	movs	r3, #32
 80064c6:	60d3      	str	r3, [r2, #12]
  }
 80064c8:	e098      	b.n	80065fc <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x598>
 80064ca:	bf00      	nop
 80064cc:	400260b8 	.word	0x400260b8
 80064d0:	40026400 	.word	0x40026400
 80064d4:	40026010 	.word	0x40026010
 80064d8:	40026410 	.word	0x40026410
 80064dc:	40026070 	.word	0x40026070
 80064e0:	40026470 	.word	0x40026470
 80064e4:	40026028 	.word	0x40026028
 80064e8:	40026428 	.word	0x40026428
 80064ec:	40026088 	.word	0x40026088
 80064f0:	40026488 	.word	0x40026488
 80064f4:	40026040 	.word	0x40026040
 80064f8:	40026440 	.word	0x40026440
 80064fc:	400260a0 	.word	0x400260a0
 8006500:	400264a0 	.word	0x400264a0
 8006504:	40026058 	.word	0x40026058
 8006508:	40026000 	.word	0x40026000
        __HAL_DMA_CLEAR_FLAG(huart->hdmatx, __HAL_DMA_GET_TC_FLAG_INDEX(huart->hdmatx));
 800650c:	4a3e      	ldr	r2, [pc, #248]	; (8006608 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x5a4>)
 800650e:	697b      	ldr	r3, [r7, #20]
 8006510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	4619      	mov	r1, r3
 8006516:	4b3d      	ldr	r3, [pc, #244]	; (800660c <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x5a8>)
 8006518:	4299      	cmp	r1, r3
 800651a:	d06d      	beq.n	80065f8 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x594>
 800651c:	697b      	ldr	r3, [r7, #20]
 800651e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4619      	mov	r1, r3
 8006524:	4b3a      	ldr	r3, [pc, #232]	; (8006610 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x5ac>)
 8006526:	4299      	cmp	r1, r3
 8006528:	d064      	beq.n	80065f4 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x590>
 800652a:	697b      	ldr	r3, [r7, #20]
 800652c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4619      	mov	r1, r3
 8006532:	4b38      	ldr	r3, [pc, #224]	; (8006614 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x5b0>)
 8006534:	4299      	cmp	r1, r3
 8006536:	d05b      	beq.n	80065f0 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x58c>
 8006538:	697b      	ldr	r3, [r7, #20]
 800653a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4619      	mov	r1, r3
 8006540:	4b35      	ldr	r3, [pc, #212]	; (8006618 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x5b4>)
 8006542:	4299      	cmp	r1, r3
 8006544:	d052      	beq.n	80065ec <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x588>
 8006546:	697b      	ldr	r3, [r7, #20]
 8006548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	4619      	mov	r1, r3
 800654e:	4b33      	ldr	r3, [pc, #204]	; (800661c <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x5b8>)
 8006550:	4299      	cmp	r1, r3
 8006552:	d048      	beq.n	80065e6 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x582>
 8006554:	697b      	ldr	r3, [r7, #20]
 8006556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4619      	mov	r1, r3
 800655c:	4b30      	ldr	r3, [pc, #192]	; (8006620 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x5bc>)
 800655e:	4299      	cmp	r1, r3
 8006560:	d03e      	beq.n	80065e0 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x57c>
 8006562:	697b      	ldr	r3, [r7, #20]
 8006564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4619      	mov	r1, r3
 800656a:	4b2e      	ldr	r3, [pc, #184]	; (8006624 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x5c0>)
 800656c:	4299      	cmp	r1, r3
 800656e:	d034      	beq.n	80065da <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x576>
 8006570:	697b      	ldr	r3, [r7, #20]
 8006572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	4619      	mov	r1, r3
 8006578:	4b2b      	ldr	r3, [pc, #172]	; (8006628 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x5c4>)
 800657a:	4299      	cmp	r1, r3
 800657c:	d02a      	beq.n	80065d4 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x570>
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4619      	mov	r1, r3
 8006586:	4b29      	ldr	r3, [pc, #164]	; (800662c <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x5c8>)
 8006588:	4299      	cmp	r1, r3
 800658a:	d020      	beq.n	80065ce <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x56a>
 800658c:	697b      	ldr	r3, [r7, #20]
 800658e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4619      	mov	r1, r3
 8006594:	4b26      	ldr	r3, [pc, #152]	; (8006630 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x5cc>)
 8006596:	4299      	cmp	r1, r3
 8006598:	d016      	beq.n	80065c8 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x564>
 800659a:	697b      	ldr	r3, [r7, #20]
 800659c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4619      	mov	r1, r3
 80065a2:	4b24      	ldr	r3, [pc, #144]	; (8006634 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x5d0>)
 80065a4:	4299      	cmp	r1, r3
 80065a6:	d00c      	beq.n	80065c2 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x55e>
 80065a8:	697b      	ldr	r3, [r7, #20]
 80065aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	4619      	mov	r1, r3
 80065b0:	4b21      	ldr	r3, [pc, #132]	; (8006638 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x5d4>)
 80065b2:	4299      	cmp	r1, r3
 80065b4:	d102      	bne.n	80065bc <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x558>
 80065b6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80065ba:	e01e      	b.n	80065fa <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x596>
 80065bc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80065c0:	e01b      	b.n	80065fa <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x596>
 80065c2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80065c6:	e018      	b.n	80065fa <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x596>
 80065c8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80065cc:	e015      	b.n	80065fa <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x596>
 80065ce:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80065d2:	e012      	b.n	80065fa <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x596>
 80065d4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80065d8:	e00f      	b.n	80065fa <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x596>
 80065da:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80065de:	e00c      	b.n	80065fa <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x596>
 80065e0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80065e4:	e009      	b.n	80065fa <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x596>
 80065e6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80065ea:	e006      	b.n	80065fa <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x596>
 80065ec:	2320      	movs	r3, #32
 80065ee:	e004      	b.n	80065fa <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x596>
 80065f0:	2320      	movs	r3, #32
 80065f2:	e002      	b.n	80065fa <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x596>
 80065f4:	2320      	movs	r3, #32
 80065f6:	e000      	b.n	80065fa <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x596>
 80065f8:	2320      	movs	r3, #32
 80065fa:	6093      	str	r3, [r2, #8]
  }
 80065fc:	bf00      	nop
 80065fe:	371c      	adds	r7, #28
 8006600:	46bd      	mov	sp, r7
 8006602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006606:	4770      	bx	lr
 8006608:	40026000 	.word	0x40026000
 800660c:	40026010 	.word	0x40026010
 8006610:	40026410 	.word	0x40026410
 8006614:	40026070 	.word	0x40026070
 8006618:	40026470 	.word	0x40026470
 800661c:	40026028 	.word	0x40026028
 8006620:	40026428 	.word	0x40026428
 8006624:	40026088 	.word	0x40026088
 8006628:	40026488 	.word	0x40026488
 800662c:	40026040 	.word	0x40026040
 8006630:	40026440 	.word	0x40026440
 8006634:	400260a0 	.word	0x400260a0
 8006638:	400264a0 	.word	0x400264a0

0800663c <_ZN8RxBufferI18UART_HandleTypeDefLi400ELi8EE9availableEv>:
  bool available() { return ring_buf_->length(); }
 800663c:	b580      	push	{r7, lr}
 800663e:	b082      	sub	sp, #8
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
 8006644:	4b07      	ldr	r3, [pc, #28]	; (8006664 <_ZN8RxBufferI18UART_HandleTypeDefLi400ELi8EE9availableEv+0x28>)
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4618      	mov	r0, r3
 800664a:	f000 f97c 	bl	8006946 <_ZN10RingBufferIhLi400EE6lengthEv>
 800664e:	4603      	mov	r3, r0
 8006650:	2b00      	cmp	r3, #0
 8006652:	bf14      	ite	ne
 8006654:	2301      	movne	r3, #1
 8006656:	2300      	moveq	r3, #0
 8006658:	b2db      	uxtb	r3, r3
 800665a:	4618      	mov	r0, r3
 800665c:	3708      	adds	r7, #8
 800665e:	46bd      	mov	sp, r7
 8006660:	bd80      	pop	{r7, pc}
 8006662:	bf00      	nop
 8006664:	20000a7c 	.word	0x20000a7c

08006668 <_ZN10RingBufferIhLi400EE3popERh>:
  bool pop(T& pop_value)
 8006668:	b480      	push	{r7}
 800666a:	b083      	sub	sp, #12
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
 8006670:	6039      	str	r1, [r7, #0]
    if (byte_in_progress_ != byte_to_add_)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	f9b3 2190 	ldrsh.w	r2, [r3, #400]	; 0x190
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	f9b3 3192 	ldrsh.w	r3, [r3, #402]	; 0x192
 800667e:	429a      	cmp	r2, r3
 8006680:	d020      	beq.n	80066c4 <_ZN10RingBufferIhLi400EE3popERh+0x5c>
        pop_value =  buf_[byte_in_progress_];
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	f9b3 3190 	ldrsh.w	r3, [r3, #400]	; 0x190
 8006688:	461a      	mov	r2, r3
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	5c9a      	ldrb	r2, [r3, r2]
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	701a      	strb	r2, [r3, #0]
        byte_in_progress_++;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	f9b3 3190 	ldrsh.w	r3, [r3, #400]	; 0x190
 8006698:	b29b      	uxth	r3, r3
 800669a:	3301      	adds	r3, #1
 800669c:	b29b      	uxth	r3, r3
 800669e:	b21a      	sxth	r2, r3
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	f8a3 2190 	strh.w	r2, [r3, #400]	; 0x190
        if (byte_in_progress_ == buffer_length_)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	f9b3 3190 	ldrsh.w	r3, [r3, #400]	; 0x190
 80066ac:	461a      	mov	r2, r3
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	f8b3 3194 	ldrh.w	r3, [r3, #404]	; 0x194
 80066b4:	429a      	cmp	r2, r3
 80066b6:	d103      	bne.n	80066c0 <_ZN10RingBufferIhLi400EE3popERh+0x58>
          byte_in_progress_ = 0;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2200      	movs	r2, #0
 80066bc:	f8a3 2190 	strh.w	r2, [r3, #400]	; 0x190
        return true;
 80066c0:	2301      	movs	r3, #1
 80066c2:	e000      	b.n	80066c6 <_ZN10RingBufferIhLi400EE3popERh+0x5e>
    return false;
 80066c4:	2300      	movs	r3, #0
  }
 80066c6:	4618      	mov	r0, r3
 80066c8:	370c      	adds	r7, #12
 80066ca:	46bd      	mov	sp, r7
 80066cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d0:	4770      	bx	lr

080066d2 <_ZNSt12_Vector_baseI7Vector3IfESaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl()
 80066d2:	b580      	push	{r7, lr}
 80066d4:	b082      	sub	sp, #8
 80066d6:	af00      	add	r7, sp, #0
 80066d8:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	f000 f961 	bl	80069a2 <_ZNSaI7Vector3IfEEC1Ev>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2200      	movs	r2, #0
 80066e4:	601a      	str	r2, [r3, #0]
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2200      	movs	r2, #0
 80066ea:	605a      	str	r2, [r3, #4]
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2200      	movs	r2, #0
 80066f0:	609a      	str	r2, [r3, #8]
	{ }
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	4618      	mov	r0, r3
 80066f6:	3708      	adds	r7, #8
 80066f8:	46bd      	mov	sp, r7
 80066fa:	bd80      	pop	{r7, pc}

080066fc <_ZNSaI7Vector3IfEED1Ev>:
      : __allocator_base<_Tp>(__a) { }

      template<typename _Tp1>
        allocator(const allocator<_Tp1>&) throw() { }

      ~allocator() throw() { }
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b082      	sub	sp, #8
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
 8006704:	6878      	ldr	r0, [r7, #4]
 8006706:	f000 f958 	bl	80069ba <_ZN9__gnu_cxx13new_allocatorI7Vector3IfEED1Ev>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	4618      	mov	r0, r3
 800670e:	3708      	adds	r7, #8
 8006710:	46bd      	mov	sp, r7
 8006712:	bd80      	pop	{r7, pc}

08006714 <_ZNSt12_Vector_baseI7Vector3IfESaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 8006714:	b580      	push	{r7, lr}
 8006716:	b084      	sub	sp, #16
 8006718:	af00      	add	r7, sp, #0
 800671a:	60f8      	str	r0, [r7, #12]
 800671c:	60b9      	str	r1, [r7, #8]
 800671e:	607a      	str	r2, [r7, #4]
	if (__p)
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d005      	beq.n	8006732 <_ZNSt12_Vector_baseI7Vector3IfESaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	687a      	ldr	r2, [r7, #4]
 800672a:	68b9      	ldr	r1, [r7, #8]
 800672c:	4618      	mov	r0, r3
 800672e:	f000 f94f 	bl	80069d0 <_ZNSt16allocator_traitsISaI7Vector3IfEEE10deallocateERS2_PS1_j>
      }
 8006732:	bf00      	nop
 8006734:	3710      	adds	r7, #16
 8006736:	46bd      	mov	sp, r7
 8006738:	bd80      	pop	{r7, pc}

0800673a <_ZSt8_DestroyIP7Vector3IfEEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800673a:	b580      	push	{r7, lr}
 800673c:	b082      	sub	sp, #8
 800673e:	af00      	add	r7, sp, #0
 8006740:	6078      	str	r0, [r7, #4]
 8006742:	6039      	str	r1, [r7, #0]
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
 8006744:	6839      	ldr	r1, [r7, #0]
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	f000 f951 	bl	80069ee <_ZNSt12_Destroy_auxILb1EE9__destroyIP7Vector3IfEEEvT_S5_>
    }
 800674c:	bf00      	nop
 800674e:	3708      	adds	r7, #8
 8006750:	46bd      	mov	sp, r7
 8006752:	bd80      	pop	{r7, pc}

08006754 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE>:

    virtual int publish(int id, const Msg * msg)
 8006754:	b580      	push	{r7, lr}
 8006756:	b088      	sub	sp, #32
 8006758:	af00      	add	r7, sp, #0
 800675a:	60f8      	str	r0, [r7, #12]
 800675c:	60b9      	str	r1, [r7, #8]
 800675e:	607a      	str	r2, [r7, #4]
    {
      if(id >= 100 && !configured_)
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	2b63      	cmp	r3, #99	; 0x63
 8006764:	dd09      	ble.n	800677a <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x26>
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	f893 32d0 	ldrb.w	r3, [r3, #720]	; 0x2d0
 800676c:	f083 0301 	eor.w	r3, r3, #1
 8006770:	b2db      	uxtb	r3, r3
 8006772:	2b00      	cmp	r3, #0
 8006774:	d001      	beq.n	800677a <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x26>
        return 0;
 8006776:	2300      	movs	r3, #0
 8006778:	e076      	b.n	8006868 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x114>

      /* serialize message */
      uint16_t l = msg->serialize(message_out+7);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	68fa      	ldr	r2, [r7, #12]
 8006782:	f202 121b 	addw	r2, r2, #283	; 0x11b
 8006786:	3207      	adds	r2, #7
 8006788:	4611      	mov	r1, r2
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	4798      	blx	r3
 800678e:	4603      	mov	r3, r0
 8006790:	82fb      	strh	r3, [r7, #22]

      /* setup the header */
      message_out[0] = 0xff;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	22ff      	movs	r2, #255	; 0xff
 8006796:	f883 211b 	strb.w	r2, [r3, #283]	; 0x11b
      message_out[1] = PROTOCOL_VER;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	22fe      	movs	r2, #254	; 0xfe
 800679e:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c
      message_out[2] = (uint8_t) ((uint16_t)l&255);
 80067a2:	8afb      	ldrh	r3, [r7, #22]
 80067a4:	b2da      	uxtb	r2, r3
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
      message_out[3] = (uint8_t) ((uint16_t)l>>8);
 80067ac:	8afb      	ldrh	r3, [r7, #22]
 80067ae:	121b      	asrs	r3, r3, #8
 80067b0:	b2da      	uxtb	r2, r3
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	f883 211e 	strb.w	r2, [r3, #286]	; 0x11e
      message_out[4] = 255 - ((message_out[2] + message_out[3])%256);
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	f893 211d 	ldrb.w	r2, [r3, #285]	; 0x11d
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	f893 311e 	ldrb.w	r3, [r3, #286]	; 0x11e
 80067c4:	4413      	add	r3, r2
 80067c6:	b2db      	uxtb	r3, r3
 80067c8:	43db      	mvns	r3, r3
 80067ca:	b2da      	uxtb	r2, r3
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	f883 211f 	strb.w	r2, [r3, #287]	; 0x11f
      message_out[5] = (uint8_t) ((int16_t)id&255);
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	b2da      	uxtb	r2, r3
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	f883 2120 	strb.w	r2, [r3, #288]	; 0x120
      message_out[6] = (uint8_t) ((int16_t)id>>8);
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	b21b      	sxth	r3, r3
 80067e0:	121b      	asrs	r3, r3, #8
 80067e2:	b2da      	uxtb	r2, r3
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	f883 2121 	strb.w	r2, [r3, #289]	; 0x121

      /* calculate checksum */
      int chk = 0;
 80067ea:	2300      	movs	r3, #0
 80067ec:	61fb      	str	r3, [r7, #28]
      for(int i =5; i<l+7; i++)
 80067ee:	2305      	movs	r3, #5
 80067f0:	61bb      	str	r3, [r7, #24]
 80067f2:	8afb      	ldrh	r3, [r7, #22]
 80067f4:	1dda      	adds	r2, r3, #7
 80067f6:	69bb      	ldr	r3, [r7, #24]
 80067f8:	429a      	cmp	r2, r3
 80067fa:	dd0d      	ble.n	8006818 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0xc4>
        chk += message_out[i];
 80067fc:	68fa      	ldr	r2, [r7, #12]
 80067fe:	69bb      	ldr	r3, [r7, #24]
 8006800:	4413      	add	r3, r2
 8006802:	f203 131b 	addw	r3, r3, #283	; 0x11b
 8006806:	781b      	ldrb	r3, [r3, #0]
 8006808:	461a      	mov	r2, r3
 800680a:	69fb      	ldr	r3, [r7, #28]
 800680c:	4413      	add	r3, r2
 800680e:	61fb      	str	r3, [r7, #28]
      for(int i =5; i<l+7; i++)
 8006810:	69bb      	ldr	r3, [r7, #24]
 8006812:	3301      	adds	r3, #1
 8006814:	61bb      	str	r3, [r7, #24]
 8006816:	e7ec      	b.n	80067f2 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x9e>
      l += 7;
 8006818:	8afb      	ldrh	r3, [r7, #22]
 800681a:	3307      	adds	r3, #7
 800681c:	82fb      	strh	r3, [r7, #22]
      message_out[l++] = 255 - (chk%256);
 800681e:	8afb      	ldrh	r3, [r7, #22]
 8006820:	1c5a      	adds	r2, r3, #1
 8006822:	82fa      	strh	r2, [r7, #22]
 8006824:	4619      	mov	r1, r3
 8006826:	69fb      	ldr	r3, [r7, #28]
 8006828:	425a      	negs	r2, r3
 800682a:	b2db      	uxtb	r3, r3
 800682c:	b2d2      	uxtb	r2, r2
 800682e:	bf58      	it	pl
 8006830:	4253      	negpl	r3, r2
 8006832:	b2db      	uxtb	r3, r3
 8006834:	43db      	mvns	r3, r3
 8006836:	b2da      	uxtb	r2, r3
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	440b      	add	r3, r1
 800683c:	f883 211b 	strb.w	r2, [r3, #283]	; 0x11b
        {
          uint8_t reminder = l % DMA_TX_BURST_SIZE;
          if(reminder != 0) l = (l / DMA_TX_BURST_SIZE + 1) * DMA_TX_BURST_SIZE;
        }

      if( l <= OUTPUT_SIZE ){
 8006840:	8afb      	ldrh	r3, [r7, #22]
 8006842:	2bff      	cmp	r3, #255	; 0xff
 8006844:	dc0a      	bgt.n	800685c <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x108>
        hardware_.write(message_out, l);
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	1d18      	adds	r0, r3, #4
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	f203 131b 	addw	r3, r3, #283	; 0x11b
 8006850:	8afa      	ldrh	r2, [r7, #22]
 8006852:	4619      	mov	r1, r3
 8006854:	f7fb fd6b 	bl	800232e <_ZN13STMF4Hardware5writeEPhi>
        return l;
 8006858:	8afb      	ldrh	r3, [r7, #22]
 800685a:	e005      	b.n	8006868 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x114>
      }else{
        logerror("Message from device dropped: message larger than buffer.");
 800685c:	4904      	ldr	r1, [pc, #16]	; (8006870 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x11c>)
 800685e:	68f8      	ldr	r0, [r7, #12]
 8006860:	f000 f8d0 	bl	8006a04 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8logerrorEPKc>
        return -1;
 8006864:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
      }
    }
 8006868:	4618      	mov	r0, r3
 800686a:	3720      	adds	r7, #32
 800686c:	46bd      	mov	sp, r7
 800686e:	bd80      	pop	{r7, pc}
 8006870:	0800c630 	.word	0x0800c630

08006874 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE6setNowERNS_4TimeE>:
    void setNow( Time & new_now )
 8006874:	b580      	push	{r7, lr}
 8006876:	b084      	sub	sp, #16
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
 800687c:	6039      	str	r1, [r7, #0]
      uint32_t ms = hardware_.time();
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	3304      	adds	r3, #4
 8006882:	4618      	mov	r0, r3
 8006884:	f7fb fd65 	bl	8002352 <_ZN13STMF4Hardware4timeEv>
 8006888:	4603      	mov	r3, r0
 800688a:	60fb      	str	r3, [r7, #12]
      sec_offset = new_now.sec - ms/1000 - 1;
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	681a      	ldr	r2, [r3, #0]
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	4914      	ldr	r1, [pc, #80]	; (80068e4 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE6setNowERNS_4TimeE+0x70>)
 8006894:	fba1 1303 	umull	r1, r3, r1, r3
 8006898:	099b      	lsrs	r3, r3, #6
 800689a:	1ad3      	subs	r3, r2, r3
 800689c:	1e5a      	subs	r2, r3, #1
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	615a      	str	r2, [r3, #20]
      nsec_offset = new_now.nsec - (ms%1000)*1000000UL + 1000000000UL;
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	6859      	ldr	r1, [r3, #4]
 80068a6:	68fa      	ldr	r2, [r7, #12]
 80068a8:	4b0e      	ldr	r3, [pc, #56]	; (80068e4 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE6setNowERNS_4TimeE+0x70>)
 80068aa:	fba3 0302 	umull	r0, r3, r3, r2
 80068ae:	099b      	lsrs	r3, r3, #6
 80068b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80068b4:	fb00 f303 	mul.w	r3, r0, r3
 80068b8:	1ad3      	subs	r3, r2, r3
 80068ba:	4a0b      	ldr	r2, [pc, #44]	; (80068e8 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE6setNowERNS_4TimeE+0x74>)
 80068bc:	fb02 f303 	mul.w	r3, r2, r3
 80068c0:	1aca      	subs	r2, r1, r3
 80068c2:	4b0a      	ldr	r3, [pc, #40]	; (80068ec <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE6setNowERNS_4TimeE+0x78>)
 80068c4:	4413      	add	r3, r2
 80068c6:	687a      	ldr	r2, [r7, #4]
 80068c8:	6193      	str	r3, [r2, #24]
      normalizeSecNSec(sec_offset, nsec_offset);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	f103 0214 	add.w	r2, r3, #20
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	3318      	adds	r3, #24
 80068d4:	4619      	mov	r1, r3
 80068d6:	4610      	mov	r0, r2
 80068d8:	f000 ffb0 	bl	800783c <_ZN3ros16normalizeSecNSecERmS0_>
    }
 80068dc:	bf00      	nop
 80068de:	3710      	adds	r7, #16
 80068e0:	46bd      	mov	sp, r7
 80068e2:	bd80      	pop	{r7, pc}
 80068e4:	10624dd3 	.word	0x10624dd3
 80068e8:	000f4240 	.word	0x000f4240
 80068ec:	3b9aca00 	.word	0x3b9aca00

080068f0 <_ZN10RingBufferIhLi400EE4pushEh>:
  bool push(T new_value)
 80068f0:	b480      	push	{r7}
 80068f2:	b083      	sub	sp, #12
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
 80068f8:	460b      	mov	r3, r1
 80068fa:	70fb      	strb	r3, [r7, #3]
    buf_[byte_to_add_] = new_value;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	f9b3 3192 	ldrsh.w	r3, [r3, #402]	; 0x192
 8006902:	4619      	mov	r1, r3
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	78fa      	ldrb	r2, [r7, #3]
 8006908:	545a      	strb	r2, [r3, r1]
    byte_to_add_++;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	f9b3 3192 	ldrsh.w	r3, [r3, #402]	; 0x192
 8006910:	b29b      	uxth	r3, r3
 8006912:	3301      	adds	r3, #1
 8006914:	b29b      	uxth	r3, r3
 8006916:	b21a      	sxth	r2, r3
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	f8a3 2192 	strh.w	r2, [r3, #402]	; 0x192
    if (byte_to_add_ == buffer_length_)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	f9b3 3192 	ldrsh.w	r3, [r3, #402]	; 0x192
 8006924:	461a      	mov	r2, r3
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	f8b3 3194 	ldrh.w	r3, [r3, #404]	; 0x194
 800692c:	429a      	cmp	r2, r3
 800692e:	d103      	bne.n	8006938 <_ZN10RingBufferIhLi400EE4pushEh+0x48>
        byte_to_add_ = 0;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2200      	movs	r2, #0
 8006934:	f8a3 2192 	strh.w	r2, [r3, #402]	; 0x192
    return true;
 8006938:	2301      	movs	r3, #1
  }
 800693a:	4618      	mov	r0, r3
 800693c:	370c      	adds	r7, #12
 800693e:	46bd      	mov	sp, r7
 8006940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006944:	4770      	bx	lr

08006946 <_ZN10RingBufferIhLi400EE6lengthEv>:
  uint16_t length()
 8006946:	b480      	push	{r7}
 8006948:	b083      	sub	sp, #12
 800694a:	af00      	add	r7, sp, #0
 800694c:	6078      	str	r0, [r7, #4]
    if(byte_to_add_ - byte_in_progress_ >= 0)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	f9b3 3192 	ldrsh.w	r3, [r3, #402]	; 0x192
 8006954:	461a      	mov	r2, r3
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	f9b3 3190 	ldrsh.w	r3, [r3, #400]	; 0x190
 800695c:	1ad3      	subs	r3, r2, r3
 800695e:	2b00      	cmp	r3, #0
 8006960:	db0a      	blt.n	8006978 <_ZN10RingBufferIhLi400EE6lengthEv+0x32>
      return (byte_to_add_ - byte_in_progress_);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	f9b3 3192 	ldrsh.w	r3, [r3, #402]	; 0x192
 8006968:	b29a      	uxth	r2, r3
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	f9b3 3190 	ldrsh.w	r3, [r3, #400]	; 0x190
 8006970:	b29b      	uxth	r3, r3
 8006972:	1ad3      	subs	r3, r2, r3
 8006974:	b29b      	uxth	r3, r3
 8006976:	e00e      	b.n	8006996 <_ZN10RingBufferIhLi400EE6lengthEv+0x50>
      return (byte_to_add_ - (buffer_length_ - byte_in_progress_));
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	f9b3 3192 	ldrsh.w	r3, [r3, #402]	; 0x192
 800697e:	b29a      	uxth	r2, r3
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	f9b3 3190 	ldrsh.w	r3, [r3, #400]	; 0x190
 8006986:	b299      	uxth	r1, r3
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	f8b3 3194 	ldrh.w	r3, [r3, #404]	; 0x194
 800698e:	1acb      	subs	r3, r1, r3
 8006990:	b29b      	uxth	r3, r3
 8006992:	4413      	add	r3, r2
 8006994:	b29b      	uxth	r3, r3
  }
 8006996:	4618      	mov	r0, r3
 8006998:	370c      	adds	r7, #12
 800699a:	46bd      	mov	sp, r7
 800699c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a0:	4770      	bx	lr

080069a2 <_ZNSaI7Vector3IfEEC1Ev>:
      allocator() throw() { }
 80069a2:	b580      	push	{r7, lr}
 80069a4:	b082      	sub	sp, #8
 80069a6:	af00      	add	r7, sp, #0
 80069a8:	6078      	str	r0, [r7, #4]
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	f000 f838 	bl	8006a20 <_ZN9__gnu_cxx13new_allocatorI7Vector3IfEEC1Ev>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	4618      	mov	r0, r3
 80069b4:	3708      	adds	r7, #8
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bd80      	pop	{r7, pc}

080069ba <_ZN9__gnu_cxx13new_allocatorI7Vector3IfEED1Ev>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }

      template<typename _Tp1>
        new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80069ba:	b480      	push	{r7}
 80069bc:	b083      	sub	sp, #12
 80069be:	af00      	add	r7, sp, #0
 80069c0:	6078      	str	r0, [r7, #4]
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	4618      	mov	r0, r3
 80069c6:	370c      	adds	r7, #12
 80069c8:	46bd      	mov	sp, r7
 80069ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ce:	4770      	bx	lr

080069d0 <_ZNSt16allocator_traitsISaI7Vector3IfEEE10deallocateERS2_PS1_j>:
       *  @param  __n  The number of objects space was allocated for.
       *
       *  Calls <tt> a.deallocate(p, n) </tt>
      */
      static void
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b084      	sub	sp, #16
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	60f8      	str	r0, [r7, #12]
 80069d8:	60b9      	str	r1, [r7, #8]
 80069da:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80069dc:	687a      	ldr	r2, [r7, #4]
 80069de:	68b9      	ldr	r1, [r7, #8]
 80069e0:	68f8      	ldr	r0, [r7, #12]
 80069e2:	f000 f828 	bl	8006a36 <_ZN9__gnu_cxx13new_allocatorI7Vector3IfEE10deallocateEPS2_j>
 80069e6:	bf00      	nop
 80069e8:	3710      	adds	r7, #16
 80069ea:	46bd      	mov	sp, r7
 80069ec:	bd80      	pop	{r7, pc}

080069ee <_ZNSt12_Destroy_auxILb1EE9__destroyIP7Vector3IfEEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 80069ee:	b480      	push	{r7}
 80069f0:	b083      	sub	sp, #12
 80069f2:	af00      	add	r7, sp, #0
 80069f4:	6078      	str	r0, [r7, #4]
 80069f6:	6039      	str	r1, [r7, #0]
 80069f8:	bf00      	nop
 80069fa:	370c      	adds	r7, #12
 80069fc:	46bd      	mov	sp, r7
 80069fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a02:	4770      	bx	lr

08006a04 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE8logerrorEPKc>:
      log(rosserial_msgs::Log::INFO, msg);
    }
    void logwarn(const char *msg){
      log(rosserial_msgs::Log::WARN, msg);
    }
    void logerror(const char*msg){
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b082      	sub	sp, #8
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
 8006a0c:	6039      	str	r1, [r7, #0]
      log(rosserial_msgs::Log::ERROR, msg);
 8006a0e:	683a      	ldr	r2, [r7, #0]
 8006a10:	2103      	movs	r1, #3
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	f000 f81c 	bl	8006a50 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE3logEcPKc>
    }
 8006a18:	bf00      	nop
 8006a1a:	3708      	adds	r7, #8
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	bd80      	pop	{r7, pc}

08006a20 <_ZN9__gnu_cxx13new_allocatorI7Vector3IfEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8006a20:	b480      	push	{r7}
 8006a22:	b083      	sub	sp, #12
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	370c      	adds	r7, #12
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a34:	4770      	bx	lr

08006a36 <_ZN9__gnu_cxx13new_allocatorI7Vector3IfEE10deallocateEPS2_j>:
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
 8006a36:	b580      	push	{r7, lr}
 8006a38:	b084      	sub	sp, #16
 8006a3a:	af00      	add	r7, sp, #0
 8006a3c:	60f8      	str	r0, [r7, #12]
 8006a3e:	60b9      	str	r1, [r7, #8]
 8006a40:	607a      	str	r2, [r7, #4]
      { ::operator delete(__p); }
 8006a42:	68b8      	ldr	r0, [r7, #8]
 8006a44:	f003 fb19 	bl	800a07a <_ZdlPv>
 8006a48:	bf00      	nop
 8006a4a:	3710      	adds	r7, #16
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	bd80      	pop	{r7, pc}

08006a50 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EE3logEcPKc>:
    void log(char byte, const char * msg){
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b088      	sub	sp, #32
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	60f8      	str	r0, [r7, #12]
 8006a58:	460b      	mov	r3, r1
 8006a5a:	607a      	str	r2, [r7, #4]
 8006a5c:	72fb      	strb	r3, [r7, #11]
      rosserial_msgs::Log l;
 8006a5e:	f107 0314 	add.w	r3, r7, #20
 8006a62:	4618      	mov	r0, r3
 8006a64:	f7fb f8c6 	bl	8001bf4 <_ZN14rosserial_msgs3LogC1Ev>
      l.level= byte;
 8006a68:	7afb      	ldrb	r3, [r7, #11]
 8006a6a:	763b      	strb	r3, [r7, #24]
      l.msg = (char*)msg;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	61fb      	str	r3, [r7, #28]
      publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f107 0214 	add.w	r2, r7, #20
 8006a7a:	2107      	movs	r1, #7
 8006a7c:	68f8      	ldr	r0, [r7, #12]
 8006a7e:	4798      	blx	r3
    }
 8006a80:	bf00      	nop
 8006a82:	3720      	adds	r7, #32
 8006a84:	46bd      	mov	sp, r7
 8006a86:	bd80      	pop	{r7, pc}

08006a88 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */ 
}
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b082      	sub	sp, #8
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
 8006a90:	6039      	str	r1, [r7, #0]
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2b01      	cmp	r3, #1
 8006a96:	d117      	bne.n	8006ac8 <_Z41__static_initialization_and_destruction_0ii+0x40>
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d112      	bne.n	8006ac8 <_Z41__static_initialization_and_destruction_0ii+0x40>
//encoder::ENCODER_ Enc_handle_left;
//encoder::ENCODER_ Enc_handle_right;

/* ros related */
//ros node_handler
ros::NodeHandle  nh_;
 8006aa2:	480b      	ldr	r0, [pc, #44]	; (8006ad0 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8006aa4:	f7fe fa74 	bl	8004f90 <_ZN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EEC1Ev>
//ros node  ugvnode
static RosNode *testnode;

/* sensors */
#if IMU_FLAG
IMU imu_;
 8006aa8:	480a      	ldr	r0, [pc, #40]	; (8006ad4 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8006aaa:	f7fb fe00 	bl	80026ae <_ZN3IMUC1Ev>
 8006aae:	4a0a      	ldr	r2, [pc, #40]	; (8006ad8 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8006ab0:	490a      	ldr	r1, [pc, #40]	; (8006adc <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8006ab2:	4808      	ldr	r0, [pc, #32]	; (8006ad4 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8006ab4:	f003 fae3 	bl	800a07e <__aeabi_atexit>
#if GPS_FLAG
GPS gps_;
#endif
//
#if ATTITUDE_ESTIMATE_FLAG || HEIGHT_ESTIMATE_FLAG || POS_ESTIMATE_FLAG
StateEstimate estimator_;
 8006ab8:	4809      	ldr	r0, [pc, #36]	; (8006ae0 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8006aba:	f7fd fe58 	bl	800476e <_ZN13StateEstimateC1Ev>
 8006abe:	4a06      	ldr	r2, [pc, #24]	; (8006ad8 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8006ac0:	4908      	ldr	r1, [pc, #32]	; (8006ae4 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8006ac2:	4807      	ldr	r0, [pc, #28]	; (8006ae0 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8006ac4:	f003 fadb 	bl	800a07e <__aeabi_atexit>
 8006ac8:	bf00      	nop
 8006aca:	3708      	adds	r7, #8
 8006acc:	46bd      	mov	sp, r7
 8006ace:	bd80      	pop	{r7, pc}
 8006ad0:	20000534 	.word	0x20000534
 8006ad4:	20000844 	.word	0x20000844
 8006ad8:	20000000 	.word	0x20000000
 8006adc:	08002789 	.word	0x08002789
 8006ae0:	20000958 	.word	0x20000958
 8006ae4:	0800479f 	.word	0x0800479f

08006ae8 <_ZN3ros11Subscriber2IN6kduino11DesireCoordE16AttitudeEstimateE8callbackEPh>:

      virtual void callback(unsigned char* data){
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b082      	sub	sp, #8
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
 8006af0:	6039      	str	r1, [r7, #0]
        msg.deserialize(data);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	330c      	adds	r3, #12
 8006af6:	6839      	ldr	r1, [r7, #0]
 8006af8:	4618      	mov	r0, r3
 8006afa:	f7fc fb14 	bl	8003126 <_ZN6kduino11DesireCoord11deserializeEPh>
        this->fun_obj_(obj_, msg);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6a19      	ldr	r1, [r3, #32]
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	330c      	adds	r3, #12
 8006b0c:	461a      	mov	r2, r3
 8006b0e:	f000 f82c 	bl	8006b6a <_ZNKSt10mem_fun1_tIv16AttitudeEstimateRKN6kduino11DesireCoordEEclEPS0_S4_>
      }
 8006b12:	bf00      	nop
 8006b14:	3708      	adds	r7, #8
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bd80      	pop	{r7, pc}

08006b1a <_ZN3ros11Subscriber2IN6kduino11DesireCoordE16AttitudeEstimateE15getEndpointTypeEv>:

      virtual const char * getMsgType(){ return this->msg.getType(); }
      virtual const char * getMsgMD5(){ return this->msg.getMD5(); }
      virtual int getEndpointType(){ return endpoint_; }
 8006b1a:	b480      	push	{r7}
 8006b1c:	b083      	sub	sp, #12
 8006b1e:	af00      	add	r7, sp, #0
 8006b20:	6078      	str	r0, [r7, #4]
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b26:	4618      	mov	r0, r3
 8006b28:	370c      	adds	r7, #12
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b30:	4770      	bx	lr

08006b32 <_ZN3ros11Subscriber2IN6kduino11DesireCoordE16AttitudeEstimateE10getMsgTypeEv>:
      virtual const char * getMsgType(){ return this->msg.getType(); }
 8006b32:	b580      	push	{r7, lr}
 8006b34:	b082      	sub	sp, #8
 8006b36:	af00      	add	r7, sp, #0
 8006b38:	6078      	str	r0, [r7, #4]
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	330c      	adds	r3, #12
 8006b3e:	4618      	mov	r0, r3
 8006b40:	f7fc fb86 	bl	8003250 <_ZN6kduino11DesireCoord7getTypeEv>
 8006b44:	4603      	mov	r3, r0
 8006b46:	4618      	mov	r0, r3
 8006b48:	3708      	adds	r7, #8
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bd80      	pop	{r7, pc}

08006b4e <_ZN3ros11Subscriber2IN6kduino11DesireCoordE16AttitudeEstimateE9getMsgMD5Ev>:
      virtual const char * getMsgMD5(){ return this->msg.getMD5(); }
 8006b4e:	b580      	push	{r7, lr}
 8006b50:	b082      	sub	sp, #8
 8006b52:	af00      	add	r7, sp, #0
 8006b54:	6078      	str	r0, [r7, #4]
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	330c      	adds	r3, #12
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	f7fc fb86 	bl	800326c <_ZN6kduino11DesireCoord6getMD5Ev>
 8006b60:	4603      	mov	r3, r0
 8006b62:	4618      	mov	r0, r3
 8006b64:	3708      	adds	r7, #8
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bd80      	pop	{r7, pc}

08006b6a <_ZNKSt10mem_fun1_tIv16AttitudeEstimateRKN6kduino11DesireCoordEEclEPS0_S4_>:

      _Ret
      operator()(_Tp* __p, _Arg __x) const
 8006b6a:	b580      	push	{r7, lr}
 8006b6c:	b084      	sub	sp, #16
 8006b6e:	af00      	add	r7, sp, #0
 8006b70:	60f8      	str	r0, [r7, #12]
 8006b72:	60b9      	str	r1, [r7, #8]
 8006b74:	607a      	str	r2, [r7, #4]
      { return (__p->*_M_f)(__x); }
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	685b      	ldr	r3, [r3, #4]
 8006b7a:	f003 0301 	and.w	r3, r3, #1
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d102      	bne.n	8006b88 <_ZNKSt10mem_fun1_tIv16AttitudeEstimateRKN6kduino11DesireCoordEEclEPS0_S4_+0x1e>
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	e00a      	b.n	8006b9e <_ZNKSt10mem_fun1_tIv16AttitudeEstimateRKN6kduino11DesireCoordEEclEPS0_S4_+0x34>
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	685b      	ldr	r3, [r3, #4]
 8006b8c:	105b      	asrs	r3, r3, #1
 8006b8e:	461a      	mov	r2, r3
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	4413      	add	r3, r2
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	68fa      	ldr	r2, [r7, #12]
 8006b98:	6812      	ldr	r2, [r2, #0]
 8006b9a:	4413      	add	r3, r2
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	68fa      	ldr	r2, [r7, #12]
 8006ba0:	6852      	ldr	r2, [r2, #4]
 8006ba2:	1052      	asrs	r2, r2, #1
 8006ba4:	4611      	mov	r1, r2
 8006ba6:	68ba      	ldr	r2, [r7, #8]
 8006ba8:	440a      	add	r2, r1
 8006baa:	6879      	ldr	r1, [r7, #4]
 8006bac:	4610      	mov	r0, r2
 8006bae:	4798      	blx	r3
 8006bb0:	3710      	adds	r7, #16
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bd80      	pop	{r7, pc}

08006bb6 <_GLOBAL__sub_I_nh_>:
 8006bb6:	b580      	push	{r7, lr}
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006bbe:	2001      	movs	r0, #1
 8006bc0:	f7ff ff62 	bl	8006a88 <_Z41__static_initialization_and_destruction_0ii>
 8006bc4:	bd80      	pop	{r7, pc}
	...

08006bc8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8006bc8:	b508      	push	{r3, lr}

  hspi1.Instance = SPI1;
 8006bca:	480f      	ldr	r0, [pc, #60]	; (8006c08 <MX_SPI1_Init+0x40>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8006bcc:	4b0f      	ldr	r3, [pc, #60]	; (8006c0c <MX_SPI1_Init+0x44>)
 8006bce:	f44f 7e82 	mov.w	lr, #260	; 0x104
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8006bd2:	f44f 7200 	mov.w	r2, #512	; 0x200
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8006bd6:	e880 4008 	stmia.w	r0, {r3, lr}
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8006bda:	2300      	movs	r3, #0
 8006bdc:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8006bde:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006be0:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006be2:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8006be4:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006be6:	6203      	str	r3, [r0, #32]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8006be8:	2230      	movs	r2, #48	; 0x30
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8006bea:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006bec:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 15;
 8006bee:	230f      	movs	r3, #15
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8006bf0:	61c2      	str	r2, [r0, #28]
  hspi1.Init.CRCPolynomial = 15;
 8006bf2:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8006bf4:	f001 fffa 	bl	8008bec <HAL_SPI_Init>
 8006bf8:	b128      	cbz	r0, 8006c06 <MX_SPI1_Init+0x3e>
  {
    _Error_Handler(__FILE__, __LINE__);
 8006bfa:	2145      	movs	r1, #69	; 0x45
 8006bfc:	4804      	ldr	r0, [pc, #16]	; (8006c10 <MX_SPI1_Init+0x48>)
  }

}
 8006bfe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8006c02:	f7fd bfbd 	b.w	8004b80 <_Error_Handler>
 8006c06:	bd08      	pop	{r3, pc}
 8006c08:	20003b94 	.word	0x20003b94
 8006c0c:	40013000 	.word	0x40013000
 8006c10:	0800ca5b 	.word	0x0800ca5b

08006c14 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8006c14:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(spiHandle->Instance==SPI1)
 8006c16:	6802      	ldr	r2, [r0, #0]
 8006c18:	4b13      	ldr	r3, [pc, #76]	; (8006c68 <HAL_SPI_MspInit+0x54>)
 8006c1a:	429a      	cmp	r2, r3
{
 8006c1c:	b086      	sub	sp, #24
  if(spiHandle->Instance==SPI1)
 8006c1e:	d120      	bne.n	8006c62 <HAL_SPI_MspInit+0x4e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8006c20:	2400      	movs	r4, #0
 8006c22:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 8006c26:	9400      	str	r4, [sp, #0]
 8006c28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006c2a:	4810      	ldr	r0, [pc, #64]	; (8006c6c <HAL_SPI_MspInit+0x58>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8006c2c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006c30:	645a      	str	r2, [r3, #68]	; 0x44
 8006c32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c34:	9403      	str	r4, [sp, #12]
    __HAL_RCC_SPI1_CLK_ENABLE();
 8006c36:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006c3a:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8006c3c:	2338      	movs	r3, #56	; 0x38
 8006c3e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c40:	2302      	movs	r3, #2
 8006c42:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006c44:	2303      	movs	r3, #3
 8006c46:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006c48:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8006c4a:	2305      	movs	r3, #5
 8006c4c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006c4e:	f001 fc51 	bl	80084f4 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8006c52:	2023      	movs	r0, #35	; 0x23
 8006c54:	4622      	mov	r2, r4
 8006c56:	4621      	mov	r1, r4
 8006c58:	f001 f88a 	bl	8007d70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8006c5c:	2023      	movs	r0, #35	; 0x23
 8006c5e:	f001 f8bb 	bl	8007dd8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8006c62:	b006      	add	sp, #24
 8006c64:	bd10      	pop	{r4, pc}
 8006c66:	bf00      	nop
 8006c68:	40013000 	.word	0x40013000
 8006c6c:	40020400 	.word	0x40020400

08006c70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006c70:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8006c72:	2005      	movs	r0, #5
 8006c74:	f001 f86a 	bl	8007d4c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8006c78:	2200      	movs	r2, #0
 8006c7a:	4611      	mov	r1, r2
 8006c7c:	f06f 000b 	mvn.w	r0, #11
 8006c80:	f001 f876 	bl	8007d70 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8006c84:	2200      	movs	r2, #0
 8006c86:	4611      	mov	r1, r2
 8006c88:	f06f 000a 	mvn.w	r0, #10
 8006c8c:	f001 f870 	bl	8007d70 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8006c90:	2200      	movs	r2, #0
 8006c92:	4611      	mov	r1, r2
 8006c94:	f06f 0009 	mvn.w	r0, #9
 8006c98:	f001 f86a 	bl	8007d70 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	4611      	mov	r1, r2
 8006ca0:	f06f 0004 	mvn.w	r0, #4
 8006ca4:	f001 f864 	bl	8007d70 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8006ca8:	2200      	movs	r2, #0
 8006caa:	4611      	mov	r1, r2
 8006cac:	f06f 0003 	mvn.w	r0, #3
 8006cb0:	f001 f85e 	bl	8007d70 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	4611      	mov	r1, r2
 8006cb8:	f06f 0001 	mvn.w	r0, #1
 8006cbc:	f001 f858 	bl	8007d70 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 1);
 8006cc0:	2201      	movs	r2, #1
 8006cc2:	2100      	movs	r1, #0
 8006cc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006cc8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 1);
 8006ccc:	f001 b850 	b.w	8007d70 <HAL_NVIC_SetPriority>

08006cd0 <NMI_Handler>:
 8006cd0:	4770      	bx	lr

08006cd2 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8006cd2:	e7fe      	b.n	8006cd2 <HardFault_Handler>

08006cd4 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8006cd4:	e7fe      	b.n	8006cd4 <MemManage_Handler>

08006cd6 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8006cd6:	e7fe      	b.n	8006cd6 <BusFault_Handler>

08006cd8 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8006cd8:	e7fe      	b.n	8006cd8 <UsageFault_Handler>

08006cda <SVC_Handler>:
 8006cda:	4770      	bx	lr

08006cdc <DebugMon_Handler>:
 8006cdc:	4770      	bx	lr

08006cde <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8006cde:	4770      	bx	lr

08006ce0 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8006ce0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006ce2:	f000 fe0d 	bl	8007900 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006ce6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8006cea:	f001 b8a3 	b.w	8007e34 <HAL_SYSTICK_IRQHandler>
	...

08006cf0 <SPI1_IRQHandler>:
void SPI1_IRQHandler(void)
{
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8006cf0:	4801      	ldr	r0, [pc, #4]	; (8006cf8 <SPI1_IRQHandler+0x8>)
 8006cf2:	f002 ba05 	b.w	8009100 <HAL_SPI_IRQHandler>
 8006cf6:	bf00      	nop
 8006cf8:	20003b94 	.word	0x20003b94

08006cfc <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8006cfc:	4801      	ldr	r0, [pc, #4]	; (8006d04 <USART1_IRQHandler+0x8>)
 8006cfe:	f002 bcf3 	b.w	80096e8 <HAL_UART_IRQHandler>
 8006d02:	bf00      	nop
 8006d04:	20003cac 	.word	0x20003cac

08006d08 <DMA2_Stream2_IRQHandler>:
void DMA2_Stream2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8006d08:	4801      	ldr	r0, [pc, #4]	; (8006d10 <DMA2_Stream2_IRQHandler+0x8>)
 8006d0a:	f001 b97b 	b.w	8008004 <HAL_DMA_IRQHandler>
 8006d0e:	bf00      	nop
 8006d10:	20003bec 	.word	0x20003bec

08006d14 <DMA2_Stream7_IRQHandler>:
void DMA2_Stream7_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8006d14:	4801      	ldr	r0, [pc, #4]	; (8006d1c <DMA2_Stream7_IRQHandler+0x8>)
 8006d16:	f001 b975 	b.w	8008004 <HAL_DMA_IRQHandler>
 8006d1a:	bf00      	nop
 8006d1c:	20003c4c 	.word	0x20003c4c

08006d20 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8006d20:	b508      	push	{r3, lr}

  huart1.Instance = USART1;
 8006d22:	480c      	ldr	r0, [pc, #48]	; (8006d54 <MX_USART1_UART_Init+0x34>)
  huart1.Init.BaudRate = 921600;
 8006d24:	4b0c      	ldr	r3, [pc, #48]	; (8006d58 <MX_USART1_UART_Init+0x38>)
 8006d26:	f44f 2e61 	mov.w	lr, #921600	; 0xe1000
 8006d2a:	e880 4008 	stmia.w	r0, {r3, lr}
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 8006d2e:	220c      	movs	r2, #12
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006d30:	2300      	movs	r3, #0
 8006d32:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8006d34:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8006d36:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8006d38:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006d3a:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006d3c:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8006d3e:	f002 fb7f 	bl	8009440 <HAL_UART_Init>
 8006d42:	b128      	cbz	r0, 8006d50 <MX_USART1_UART_Init+0x30>
  {
    _Error_Handler(__FILE__, __LINE__);
 8006d44:	2145      	movs	r1, #69	; 0x45
 8006d46:	4805      	ldr	r0, [pc, #20]	; (8006d5c <MX_USART1_UART_Init+0x3c>)
  }

}
 8006d48:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8006d4c:	f7fd bf18 	b.w	8004b80 <_Error_Handler>
 8006d50:	bd08      	pop	{r3, pc}
 8006d52:	bf00      	nop
 8006d54:	20003cac 	.word	0x20003cac
 8006d58:	40011000 	.word	0x40011000
 8006d5c:	0800ca6e 	.word	0x0800ca6e

08006d60 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006d60:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==USART1)
 8006d62:	6802      	ldr	r2, [r0, #0]
 8006d64:	4b36      	ldr	r3, [pc, #216]	; (8006e40 <HAL_UART_MspInit+0xe0>)
 8006d66:	429a      	cmp	r2, r3
{
 8006d68:	b087      	sub	sp, #28
 8006d6a:	4606      	mov	r6, r0
  if(uartHandle->Instance==USART1)
 8006d6c:	d165      	bne.n	8006e3a <HAL_UART_MspInit+0xda>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8006d6e:	2500      	movs	r5, #0
 8006d70:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 8006d74:	9500      	str	r5, [sp, #0]
 8006d76:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006d78:	4832      	ldr	r0, [pc, #200]	; (8006e44 <HAL_UART_MspInit+0xe4>)

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8006d7a:	4c33      	ldr	r4, [pc, #204]	; (8006e48 <HAL_UART_MspInit+0xe8>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8006d7c:	f042 0210 	orr.w	r2, r2, #16
 8006d80:	645a      	str	r2, [r3, #68]	; 0x44
 8006d82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d84:	f003 0310 	and.w	r3, r3, #16
 8006d88:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8006d8a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8006d8e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d90:	2302      	movs	r3, #2
 8006d92:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006d94:	2303      	movs	r3, #3
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006d96:	2701      	movs	r7, #1
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006d98:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006d9a:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006d9c:	2307      	movs	r3, #7
 8006d9e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006da0:	9703      	str	r7, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006da2:	f001 fba7 	bl	80084f4 <HAL_GPIO_Init>
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8006da6:	4b29      	ldr	r3, [pc, #164]	; (8006e4c <HAL_UART_MspInit+0xec>)
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006da8:	60a5      	str	r5, [r4, #8]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8006daa:	f04f 6e00 	mov.w	lr, #134217728	; 0x8000000
 8006dae:	e884 4008 	stmia.w	r4, {r3, lr}
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006db2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006db6:	6123      	str	r3, [r4, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8006db8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006dbc:	61e3      	str	r3, [r4, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8006dbe:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8006dc2:	6223      	str	r3, [r4, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8006dc4:	2304      	movs	r3, #4
 8006dc6:	6263      	str	r3, [r4, #36]	; 0x24
    hdma_usart1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
    hdma_usart1_rx.Init.MemBurst = DMA_MBURST_INC8;
    hdma_usart1_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8006dc8:	4620      	mov	r0, r4
    hdma_usart1_rx.Init.MemBurst = DMA_MBURST_INC8;
 8006dca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006dce:	60e5      	str	r5, [r4, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006dd0:	6165      	str	r5, [r4, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006dd2:	61a5      	str	r5, [r4, #24]
    hdma_usart1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 8006dd4:	62a7      	str	r7, [r4, #40]	; 0x28
    hdma_usart1_rx.Init.MemBurst = DMA_MBURST_INC8;
 8006dd6:	62e3      	str	r3, [r4, #44]	; 0x2c
    hdma_usart1_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8006dd8:	6325      	str	r5, [r4, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8006dda:	f001 f845 	bl	8007e68 <HAL_DMA_Init>
 8006dde:	b118      	cbz	r0, 8006de8 <HAL_UART_MspInit+0x88>
    {
      _Error_Handler(__FILE__, __LINE__);
 8006de0:	2172      	movs	r1, #114	; 0x72
 8006de2:	481b      	ldr	r0, [pc, #108]	; (8006e50 <HAL_UART_MspInit+0xf0>)
 8006de4:	f7fd fecc 	bl	8004b80 <_Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8006de8:	6374      	str	r4, [r6, #52]	; 0x34
 8006dea:	63a6      	str	r6, [r4, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8006dec:	4c19      	ldr	r4, [pc, #100]	; (8006e54 <HAL_UART_MspInit+0xf4>)
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006dee:	4b1a      	ldr	r3, [pc, #104]	; (8006e58 <HAL_UART_MspInit+0xf8>)
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006df0:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006df4:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
 8006df8:	2740      	movs	r7, #64	; 0x40
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006dfa:	6122      	str	r2, [r4, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart1_tx.Init.Mode = DMA_CIRCULAR;
 8006dfc:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006e00:	e884 00a8 	stmia.w	r4, {r3, r5, r7}
    hdma_usart1_tx.Init.Mode = DMA_CIRCULAR;
 8006e04:	61e2      	str	r2, [r4, #28]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006e06:	2300      	movs	r3, #0
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8006e08:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8006e0c:	4620      	mov	r0, r4
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006e0e:	60e3      	str	r3, [r4, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006e10:	6163      	str	r3, [r4, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006e12:	61a3      	str	r3, [r4, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8006e14:	6222      	str	r2, [r4, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006e16:	6263      	str	r3, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8006e18:	f001 f826 	bl	8007e68 <HAL_DMA_Init>
 8006e1c:	b118      	cbz	r0, 8006e26 <HAL_UART_MspInit+0xc6>
    {
      _Error_Handler(__FILE__, __LINE__);
 8006e1e:	2184      	movs	r1, #132	; 0x84
 8006e20:	480b      	ldr	r0, [pc, #44]	; (8006e50 <HAL_UART_MspInit+0xf0>)
 8006e22:	f7fd fead 	bl	8004b80 <_Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8006e26:	2200      	movs	r2, #0
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8006e28:	6334      	str	r4, [r6, #48]	; 0x30
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8006e2a:	2025      	movs	r0, #37	; 0x25
 8006e2c:	4611      	mov	r1, r2
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8006e2e:	63a6      	str	r6, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8006e30:	f000 ff9e 	bl	8007d70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8006e34:	2025      	movs	r0, #37	; 0x25
 8006e36:	f000 ffcf 	bl	8007dd8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8006e3a:	b007      	add	sp, #28
 8006e3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e3e:	bf00      	nop
 8006e40:	40011000 	.word	0x40011000
 8006e44:	40020000 	.word	0x40020000
 8006e48:	20003bec 	.word	0x20003bec
 8006e4c:	40026440 	.word	0x40026440
 8006e50:	0800ca6e 	.word	0x0800ca6e
 8006e54:	20003c4c 	.word	0x20003c4c
 8006e58:	400264b8 	.word	0x400264b8

08006e5c <_ZNK8std_msgs5UInt89serializeEPh>:
    }

    virtual int serialize(unsigned char *outbuffer) const
    {
      int offset = 0;
      *(outbuffer + offset + 0) = (this->data >> (8 * 0)) & 0xFF;
 8006e5c:	7903      	ldrb	r3, [r0, #4]
 8006e5e:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->data);
      return offset;
    }
 8006e60:	2001      	movs	r0, #1
 8006e62:	4770      	bx	lr

08006e64 <_ZN8std_msgs5UInt811deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
    {
      int offset = 0;
      this->data =  ((uint8_t) (*(inbuffer + offset)));
 8006e64:	780b      	ldrb	r3, [r1, #0]
 8006e66:	7103      	strb	r3, [r0, #4]
      offset += sizeof(this->data);
     return offset;
    }
 8006e68:	2001      	movs	r0, #1
 8006e6a:	4770      	bx	lr

08006e6c <_ZN8std_msgs5UInt87getTypeEv>:

    const char * getType(){ return "std_msgs/UInt8"; };
 8006e6c:	4800      	ldr	r0, [pc, #0]	; (8006e70 <_ZN8std_msgs5UInt87getTypeEv+0x4>)
 8006e6e:	4770      	bx	lr
 8006e70:	0800cb2d 	.word	0x0800cb2d

08006e74 <_ZN8std_msgs5UInt86getMD5Ev>:
    const char * getMD5(){ return "7c8164229e7d2c17eb95e9231617fdee"; };
 8006e74:	4800      	ldr	r0, [pc, #0]	; (8006e78 <_ZN8std_msgs5UInt86getMD5Ev+0x4>)
 8006e76:	4770      	bx	lr
 8006e78:	0800cb0c 	.word	0x0800cb0c

08006e7c <_ZN3ros11Subscriber2IN8std_msgs5UInt8E3IMUE15getEndpointTypeEv>:
      virtual int getEndpointType(){ return endpoint_; }
 8006e7c:	6a00      	ldr	r0, [r0, #32]
 8006e7e:	4770      	bx	lr

08006e80 <_ZN3ros11Subscriber2IN8std_msgs5UInt8E3IMUE10getMsgTypeEv>:
      virtual const char * getMsgType(){ return this->msg.getType(); }
 8006e80:	4800      	ldr	r0, [pc, #0]	; (8006e84 <_ZN3ros11Subscriber2IN8std_msgs5UInt8E3IMUE10getMsgTypeEv+0x4>)
 8006e82:	4770      	bx	lr
 8006e84:	0800cb2d 	.word	0x0800cb2d

08006e88 <_ZN3ros11Subscriber2IN8std_msgs5UInt8E3IMUE9getMsgMD5Ev>:
      virtual const char * getMsgMD5(){ return this->msg.getMD5(); }
 8006e88:	4800      	ldr	r0, [pc, #0]	; (8006e8c <_ZN3ros11Subscriber2IN8std_msgs5UInt8E3IMUE9getMsgMD5Ev+0x4>)
 8006e8a:	4770      	bx	lr
 8006e8c:	0800cb0c 	.word	0x0800cb0c

08006e90 <_ZN3ros11Subscriber2IN8std_msgs5UInt8E3IMUE8callbackEPh>:
      virtual void callback(unsigned char* data){
 8006e90:	b410      	push	{r4}
 8006e92:	69c2      	ldr	r2, [r0, #28]
      this->data =  ((uint8_t) (*(inbuffer + offset)));
 8006e94:	780b      	ldrb	r3, [r1, #0]
        this->fun_obj_(obj_, msg);
 8006e96:	6944      	ldr	r4, [r0, #20]
 8006e98:	7403      	strb	r3, [r0, #16]
 8006e9a:	f012 0f01 	tst.w	r2, #1
 8006e9e:	ea4f 0262 	mov.w	r2, r2, asr #1
 8006ea2:	6983      	ldr	r3, [r0, #24]
 8006ea4:	f100 010c 	add.w	r1, r0, #12
 8006ea8:	bf1c      	itt	ne
 8006eaa:	58a0      	ldrne	r0, [r4, r2]
 8006eac:	58c3      	ldrne	r3, [r0, r3]
 8006eae:	18a0      	adds	r0, r4, r2
      }
 8006eb0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006eb4:	4718      	bx	r3

08006eb6 <_ZN3IMU17imuConfigCallbackERKN8std_msgs5UInt8E>:
	}
}

void IMU::imuConfigCallback(const std_msgs::UInt8& config_msg)
{
	switch(config_msg.data)
 8006eb6:	790b      	ldrb	r3, [r1, #4]
 8006eb8:	2b01      	cmp	r3, #1
 8006eba:	d011      	beq.n	8006ee0 <_ZN3IMU17imuConfigCallbackERKN8std_msgs5UInt8E+0x2a>
 8006ebc:	d302      	bcc.n	8006ec4 <_ZN3IMU17imuConfigCallbackERKN8std_msgs5UInt8E+0xe>
 8006ebe:	2b02      	cmp	r3, #2
 8006ec0:	d015      	beq.n	8006eee <_ZN3IMU17imuConfigCallbackERKN8std_msgs5UInt8E+0x38>
 8006ec2:	4770      	bx	lr
    }

    // zero the vector
    void zero()
    {
        x = y = z = 0;
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	f8c0 30d8 	str.w	r3, [r0, #216]	; 0xd8
 8006eca:	f8c0 30d4 	str.w	r3, [r0, #212]	; 0xd4
 8006ece:	f8c0 30d0 	str.w	r3, [r0, #208]	; 0xd0
 8006ed2:	f8c0 30f0 	str.w	r3, [r0, #240]	; 0xf0
 8006ed6:	f8c0 30ec 	str.w	r3, [r0, #236]	; 0xec
 8006eda:	f8c0 30e8 	str.w	r3, [r0, #232]	; 0xe8
 8006ede:	4770      	bx	lr
		acc_offset_.zero();
		mag_offset_.zero();
		//writeCalibData(); //no need?
		break;
	case MPU_ACC_GYRO_CALIB_CMD:
		calibrate_gyro_ = CALIBRATING_STEP;
 8006ee0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006ee4:	f8c0 30c8 	str.w	r3, [r0, #200]	; 0xc8
		calibrate_acc_ = CALIBRATING_STEP;
 8006ee8:	f8c0 30c4 	str.w	r3, [r0, #196]	; 0xc4
		break;
 8006eec:	4770      	bx	lr
	case MPU_MAG_CALIB_CMD:
		calibrate_mag_ = CALIBRATING_MAG_STEP;
 8006eee:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8006ef2:	f8c0 30cc 	str.w	r3, [r0, #204]	; 0xcc
 8006ef6:	4770      	bx	lr

08006ef8 <_ZN3IMU13getCalibratedEv>:
	if(!calibrate_acc_ && !calibrate_gyro_ && !calibrate_mag_) return true;
 8006ef8:	f8d0 30c4 	ldr.w	r3, [r0, #196]	; 0xc4
 8006efc:	b943      	cbnz	r3, 8006f10 <_ZN3IMU13getCalibratedEv+0x18>
 8006efe:	f8d0 20c8 	ldr.w	r2, [r0, #200]	; 0xc8
 8006f02:	b92a      	cbnz	r2, 8006f10 <_ZN3IMU13getCalibratedEv+0x18>
 8006f04:	f8d0 00cc 	ldr.w	r0, [r0, #204]	; 0xcc
 8006f08:	fab0 f080 	clz	r0, r0
 8006f0c:	0940      	lsrs	r0, r0, #5
 8006f0e:	4770      	bx	lr
	else return false;
 8006f10:	2000      	movs	r0, #0
 8006f12:	4770      	bx	lr

08006f14 <_ZN3IMU13readCalibDataEv>:
{
 8006f14:	b510      	push	{r4, lr}
 8006f16:	4604      	mov	r4, r0
	status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006f18:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006f1c:	f001 f9c6 	bl	80082ac <FLASH_WaitForLastOperation>
	if(status == HAL_OK)
 8006f20:	b9e0      	cbnz	r0, 8006f5c <_ZN3IMU13readCalibDataEv+0x48>
			acc_offset_[i] = (*(__IO float*)(CALIB_DATA_ADDRESS + CALIB_ACC_ADDRESS + 4 * i));
 8006f22:	4b0f      	ldr	r3, [pc, #60]	; (8006f60 <_ZN3IMU13readCalibDataEv+0x4c>)
		FLASH->CR &= (~FLASH_CR_PG);
 8006f24:	4a0f      	ldr	r2, [pc, #60]	; (8006f64 <_ZN3IMU13readCalibDataEv+0x50>)
			acc_offset_[i] = (*(__IO float*)(CALIB_DATA_ADDRESS + CALIB_ACC_ADDRESS + 4 * i));
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
			mag_offset_[i] = (*(__IO float*)(CALIB_DATA_ADDRESS + CALIB_MAG_ADDRESS + 4 * i));
 8006f2c:	4b0e      	ldr	r3, [pc, #56]	; (8006f68 <_ZN3IMU13readCalibDataEv+0x54>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
			acc_offset_[i] = (*(__IO float*)(CALIB_DATA_ADDRESS + CALIB_ACC_ADDRESS + 4 * i));
 8006f34:	4b0d      	ldr	r3, [pc, #52]	; (8006f6c <_ZN3IMU13readCalibDataEv+0x58>)
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
			mag_offset_[i] = (*(__IO float*)(CALIB_DATA_ADDRESS + CALIB_MAG_ADDRESS + 4 * i));
 8006f3c:	4b0c      	ldr	r3, [pc, #48]	; (8006f70 <_ZN3IMU13readCalibDataEv+0x5c>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
			acc_offset_[i] = (*(__IO float*)(CALIB_DATA_ADDRESS + CALIB_ACC_ADDRESS + 4 * i));
 8006f44:	4b0b      	ldr	r3, [pc, #44]	; (8006f74 <_ZN3IMU13readCalibDataEv+0x60>)
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
			mag_offset_[i] = (*(__IO float*)(CALIB_DATA_ADDRESS + CALIB_MAG_ADDRESS + 4 * i));
 8006f4c:	4b0a      	ldr	r3, [pc, #40]	; (8006f78 <_ZN3IMU13readCalibDataEv+0x64>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0
		FLASH->CR &= (~FLASH_CR_PG);
 8006f54:	6913      	ldr	r3, [r2, #16]
 8006f56:	f023 0301 	bic.w	r3, r3, #1
 8006f5a:	6113      	str	r3, [r2, #16]
 8006f5c:	bd10      	pop	{r4, pc}
 8006f5e:	bf00      	nop
 8006f60:	08010000 	.word	0x08010000
 8006f64:	40023c00 	.word	0x40023c00
 8006f68:	0801000c 	.word	0x0801000c
 8006f6c:	08010004 	.word	0x08010004
 8006f70:	08010010 	.word	0x08010010
 8006f74:	08010008 	.word	0x08010008
 8006f78:	08010014 	.word	0x08010014

08006f7c <_ZN3IMU14writeCalibDataEv>:
{
 8006f7c:	b570      	push	{r4, r5, r6, lr}
 8006f7e:	b086      	sub	sp, #24
 8006f80:	4604      	mov	r4, r0
	r = HAL_FLASH_Unlock();
 8006f82:	f001 f977 	bl	8008274 <HAL_FLASH_Unlock>
	if( r != HAL_OK ) return;
 8006f86:	bb18      	cbnz	r0, 8006fd0 <_ZN3IMU14writeCalibDataEv+0x54>
	EraseInitStruct.Sector = CALIB_DATA_SECTOR ;
 8006f88:	2304      	movs	r3, #4
 8006f8a:	9303      	str	r3, [sp, #12]
	EraseInitStruct.NbSectors = 1;
 8006f8c:	2301      	movs	r3, #1
	uint32_t SectorError = 0;
 8006f8e:	9000      	str	r0, [sp, #0]
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 8006f90:	9001      	str	r0, [sp, #4]
	EraseInitStruct.NbSectors = 1;
 8006f92:	9304      	str	r3, [sp, #16]
	r = HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError);
 8006f94:	4669      	mov	r1, sp
	EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8006f96:	2302      	movs	r3, #2
	r = HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError);
 8006f98:	a801      	add	r0, sp, #4
	EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8006f9a:	9305      	str	r3, [sp, #20]
	r = HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError);
 8006f9c:	f001 fa5c 	bl	8008458 <HAL_FLASHEx_Erase>
	if ( r != HAL_OK )
 8006fa0:	b9b0      	cbnz	r0, 8006fd0 <_ZN3IMU14writeCalibDataEv+0x54>
 8006fa2:	4d0c      	ldr	r5, [pc, #48]	; (8006fd4 <_ZN3IMU14writeCalibDataEv+0x58>)
	for(int i = 0; i < 3; i++)
 8006fa4:	4e0c      	ldr	r6, [pc, #48]	; (8006fd8 <_ZN3IMU14writeCalibDataEv+0x5c>)
 8006fa6:	34d0      	adds	r4, #208	; 0xd0
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, CALIB_DATA_ADDRESS + CALIB_ACC_ADDRESS + 4 * i, (*(__IO uint64_t*)(&acc_offset_[i])));
 8006fa8:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006fac:	4629      	mov	r1, r5
 8006fae:	2002      	movs	r0, #2
 8006fb0:	f001 f9a6 	bl	8008300 <HAL_FLASH_Program>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, CALIB_DATA_ADDRESS + CALIB_MAG_ADDRESS + 4 * i, (*(__IO uint64_t*)(&mag_offset_[i])));
 8006fb4:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8006fb8:	f105 010c 	add.w	r1, r5, #12
 8006fbc:	2002      	movs	r0, #2
 8006fbe:	3504      	adds	r5, #4
 8006fc0:	f001 f99e 	bl	8008300 <HAL_FLASH_Program>
	for(int i = 0; i < 3; i++)
 8006fc4:	42b5      	cmp	r5, r6
 8006fc6:	f104 0404 	add.w	r4, r4, #4
 8006fca:	d1ed      	bne.n	8006fa8 <_ZN3IMU14writeCalibDataEv+0x2c>
	r = HAL_FLASH_Lock();
 8006fcc:	f001 f964 	bl	8008298 <HAL_FLASH_Lock>
}
 8006fd0:	b006      	add	sp, #24
 8006fd2:	bd70      	pop	{r4, r5, r6, pc}
 8006fd4:	08010000 	.word	0x08010000
 8006fd8:	0801000c 	.word	0x0801000c

08006fdc <_ZN3IMU8mpuWriteEhh>:
{
 8006fdc:	b537      	push	{r0, r1, r2, r4, r5, lr}
	IMU_SPI_CS_L;
 8006fde:	4c11      	ldr	r4, [pc, #68]	; (8007024 <_ZN3IMU8mpuWriteEhh+0x48>)
{
 8006fe0:	f88d 1007 	strb.w	r1, [sp, #7]
 8006fe4:	4605      	mov	r5, r0
 8006fe6:	f88d 2006 	strb.w	r2, [sp, #6]
	IMU_SPI_CS_L;
 8006fea:	4620      	mov	r0, r4
 8006fec:	2200      	movs	r2, #0
 8006fee:	2140      	movs	r1, #64	; 0x40
 8006ff0:	f001 fb3a 	bl	8008668 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi_, &address, 1, 1000);
 8006ff4:	f10d 0107 	add.w	r1, sp, #7
 8006ff8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006ffc:	2201      	movs	r2, #1
 8006ffe:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8007000:	f001 fe31 	bl	8008c66 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(hspi_, &value, 1, 1000);
 8007004:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007008:	f10d 0106 	add.w	r1, sp, #6
 800700c:	2201      	movs	r2, #1
 800700e:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8007010:	f001 fe29 	bl	8008c66 <HAL_SPI_Transmit>
	IMU_SPI_CS_H;
 8007014:	2201      	movs	r2, #1
 8007016:	2140      	movs	r1, #64	; 0x40
 8007018:	4620      	mov	r0, r4
 800701a:	f001 fb25 	bl	8008668 <HAL_GPIO_WritePin>
}
 800701e:	b003      	add	sp, #12
 8007020:	bd30      	pop	{r4, r5, pc}
 8007022:	bf00      	nop
 8007024:	40020400 	.word	0x40020400

08007028 <_ZN3IMU8gyroInitEv>:
{
 8007028:	b510      	push	{r4, lr}
 800702a:	4604      	mov	r4, r0
	HAL_Delay(100);
 800702c:	2064      	movs	r0, #100	; 0x64
 800702e:	f000 fc75 	bl	800791c <HAL_Delay>
	mpuWrite( 0x6B, 0x80);             //PWR_MGMT_1    -- DEVICE_RESET 1
 8007032:	2280      	movs	r2, #128	; 0x80
 8007034:	216b      	movs	r1, #107	; 0x6b
 8007036:	4620      	mov	r0, r4
 8007038:	f7ff ffd0 	bl	8006fdc <_ZN3IMU8mpuWriteEhh>
	HAL_Delay(10);
 800703c:	200a      	movs	r0, #10
 800703e:	f000 fc6d 	bl	800791c <HAL_Delay>
	HAL_Delay(1); //very important!, some duration for process the setting
 8007042:	2001      	movs	r0, #1
 8007044:	f000 fc6a 	bl	800791c <HAL_Delay>
	mpuWrite( 0x6A, 0x10);             //disable i2c communication
 8007048:	2210      	movs	r2, #16
 800704a:	216a      	movs	r1, #106	; 0x6a
 800704c:	4620      	mov	r0, r4
 800704e:	f7ff ffc5 	bl	8006fdc <_ZN3IMU8mpuWriteEhh>
	HAL_Delay(1); //very importnat! between gyro and acc
 8007052:	2001      	movs	r0, #1
 8007054:	f000 fc62 	bl	800791c <HAL_Delay>
	mpuWrite( 0x1A, GYRO_DLPF_CFG); //CONFIG        -- EXT_SYNC_SET 0 (disable input pin for data sync) ; default DLPF_CFG = 0 => ACC bandwidth = 260Hz  GYRO bandwidth = 256Hz)
 8007058:	2201      	movs	r2, #1
 800705a:	211a      	movs	r1, #26
 800705c:	4620      	mov	r0, r4
 800705e:	f7ff ffbd 	bl	8006fdc <_ZN3IMU8mpuWriteEhh>
	HAL_Delay(1); //very importnat! between gyro and acc
 8007062:	2001      	movs	r0, #1
 8007064:	f000 fc5a 	bl	800791c <HAL_Delay>
	mpuWrite( 0x1B, 0x18);             //GYRO_CONFIG   -- FS_SEL = 3: Full scale set to 2000 deg/sec
 8007068:	2218      	movs	r2, #24
 800706a:	211b      	movs	r1, #27
 800706c:	4620      	mov	r0, r4
 800706e:	f7ff ffb5 	bl	8006fdc <_ZN3IMU8mpuWriteEhh>
	HAL_Delay(10); //very importnat! between gyro and acc
 8007072:	200a      	movs	r0, #10
 8007074:	f000 fc52 	bl	800791c <HAL_Delay>
	calibrate_gyro_ = 10; //CALIBRATING_STEP;
 8007078:	230a      	movs	r3, #10
 800707a:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
 800707e:	2300      	movs	r3, #0
 8007080:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
 8007084:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
 8007088:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
 800708c:	bd10      	pop	{r4, pc}

0800708e <_ZN3IMU7accInitEv>:
void IMU::accInit (void) {
 800708e:	b510      	push	{r4, lr}
	mpuWrite( 0x1C, 0x10); //ACCEL_CONFIG  -- AFS_SEL=2 (Full Scale = +/-8G)  ; ACCELL_HPF=0   //note something is wrong in the spec.
 8007090:	2210      	movs	r2, #16
 8007092:	211c      	movs	r1, #28
void IMU::accInit (void) {
 8007094:	4604      	mov	r4, r0
	mpuWrite( 0x1C, 0x10); //ACCEL_CONFIG  -- AFS_SEL=2 (Full Scale = +/-8G)  ; ACCELL_HPF=0   //note something is wrong in the spec.
 8007096:	f7ff ffa1 	bl	8006fdc <_ZN3IMU8mpuWriteEhh>
	HAL_Delay(1);
 800709a:	2001      	movs	r0, #1
 800709c:	f000 fc3e 	bl	800791c <HAL_Delay>
	mpuWrite( 0x1D, ACC_DLPF_CFG);
 80070a0:	2203      	movs	r2, #3
 80070a2:	211d      	movs	r1, #29
 80070a4:	4620      	mov	r0, r4
 80070a6:	f7ff ff99 	bl	8006fdc <_ZN3IMU8mpuWriteEhh>
	HAL_Delay(10);
 80070aa:	200a      	movs	r0, #10
 80070ac:	f000 fc36 	bl	800791c <HAL_Delay>
	calibrate_acc_ = 0;
 80070b0:	2300      	movs	r3, #0
 80070b2:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
 80070b6:	2300      	movs	r3, #0
 80070b8:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
 80070bc:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
 80070c0:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
 80070c4:	bd10      	pop	{r4, pc}

080070c6 <_ZN3IMU7magInitEv>:
{
 80070c6:	b510      	push	{r4, lr}
 80070c8:	4604      	mov	r4, r0
	HAL_Delay(10);
 80070ca:	200a      	movs	r0, #10
 80070cc:	f000 fc26 	bl	800791c <HAL_Delay>
	mpuWrite( 0x6A, 0x20); //USER_CTRL -- DMP_EN=0 ; FIFO_EN=0 ; I2C_MST_EN=1 (I2C master mode) ; I2C_IF_DIS=0 ; FIFO_RESET=0 ; I2C_MST_RESET=0 ; SIG_COND_RESET=0
 80070d0:	2220      	movs	r2, #32
 80070d2:	216a      	movs	r1, #106	; 0x6a
 80070d4:	4620      	mov	r0, r4
 80070d6:	f7ff ff81 	bl	8006fdc <_ZN3IMU8mpuWriteEhh>
	HAL_Delay(10);
 80070da:	200a      	movs	r0, #10
 80070dc:	f000 fc1e 	bl	800791c <HAL_Delay>
	mpuWrite( 0x37, 0x00); //INT_PIN_CFG -- INT_LEVEL=0 ; INT_OPEN=0 ; LATCH_INT_EN=0 ; INT_RD_CLEAR=0 ; FSYNC_INT_LEVEL=0 ; FSYNC_INT_EN=0 ; I2C_BYPASS_EN=0 ; CLKOUT_EN=0
 80070e0:	2200      	movs	r2, #0
 80070e2:	2137      	movs	r1, #55	; 0x37
 80070e4:	4620      	mov	r0, r4
 80070e6:	f7ff ff79 	bl	8006fdc <_ZN3IMU8mpuWriteEhh>
	HAL_Delay(1);
 80070ea:	2001      	movs	r0, #1
 80070ec:	f000 fc16 	bl	800791c <HAL_Delay>
	mpuWrite( 0x24, 0x0D); //I2C_MST_CTRL -- MULT_MST_EN=0 ; WAIT_FOR_ES=0 ; SLV_3_FIFO_EN=0 ; I2C_MST_P_NSR=0 ; I2C_MST_CLK=13 (I2C slave speed bus = 400kHz)
 80070f0:	220d      	movs	r2, #13
 80070f2:	2124      	movs	r1, #36	; 0x24
 80070f4:	4620      	mov	r0, r4
 80070f6:	f7ff ff71 	bl	8006fdc <_ZN3IMU8mpuWriteEhh>
	HAL_Delay(1);
 80070fa:	2001      	movs	r0, #1
 80070fc:	f000 fc0e 	bl	800791c <HAL_Delay>
	mpuWrite( 0x25, MAG_ADDRESS);
 8007100:	220c      	movs	r2, #12
 8007102:	2125      	movs	r1, #37	; 0x25
 8007104:	4620      	mov	r0, r4
 8007106:	f7ff ff69 	bl	8006fdc <_ZN3IMU8mpuWriteEhh>
	HAL_Delay(1);
 800710a:	2001      	movs	r0, #1
 800710c:	f000 fc06 	bl	800791c <HAL_Delay>
	mpuWrite( 0x26, 0x0B);
 8007110:	220b      	movs	r2, #11
 8007112:	2126      	movs	r1, #38	; 0x26
 8007114:	4620      	mov	r0, r4
 8007116:	f7ff ff61 	bl	8006fdc <_ZN3IMU8mpuWriteEhh>
	HAL_Delay(1);
 800711a:	2001      	movs	r0, #1
 800711c:	f000 fbfe 	bl	800791c <HAL_Delay>
	mpuWrite( 0x63, 0x01);
 8007120:	2201      	movs	r2, #1
 8007122:	2163      	movs	r1, #99	; 0x63
 8007124:	4620      	mov	r0, r4
 8007126:	f7ff ff59 	bl	8006fdc <_ZN3IMU8mpuWriteEhh>
	HAL_Delay(1);
 800712a:	2001      	movs	r0, #1
 800712c:	f000 fbf6 	bl	800791c <HAL_Delay>
	mpuWrite( 0x27, 0x81);
 8007130:	2281      	movs	r2, #129	; 0x81
 8007132:	2127      	movs	r1, #39	; 0x27
 8007134:	4620      	mov	r0, r4
 8007136:	f7ff ff51 	bl	8006fdc <_ZN3IMU8mpuWriteEhh>
	HAL_Delay(1);
 800713a:	2001      	movs	r0, #1
 800713c:	f000 fbee 	bl	800791c <HAL_Delay>
	mpuWrite( 0x26, 0x0A);
 8007140:	220a      	movs	r2, #10
 8007142:	2126      	movs	r1, #38	; 0x26
 8007144:	4620      	mov	r0, r4
 8007146:	f7ff ff49 	bl	8006fdc <_ZN3IMU8mpuWriteEhh>
	HAL_Delay(1);
 800714a:	2001      	movs	r0, #1
 800714c:	f000 fbe6 	bl	800791c <HAL_Delay>
	mpuWrite( 0x63, 0x16);
 8007150:	2216      	movs	r2, #22
 8007152:	2163      	movs	r1, #99	; 0x63
 8007154:	4620      	mov	r0, r4
 8007156:	f7ff ff41 	bl	8006fdc <_ZN3IMU8mpuWriteEhh>
	HAL_Delay(1);
 800715a:	2001      	movs	r0, #1
 800715c:	f000 fbde 	bl	800791c <HAL_Delay>
	mpuWrite( 0x27, 0x81);
 8007160:	2281      	movs	r2, #129	; 0x81
 8007162:	2127      	movs	r1, #39	; 0x27
 8007164:	4620      	mov	r0, r4
 8007166:	f7ff ff39 	bl	8006fdc <_ZN3IMU8mpuWriteEhh>
	HAL_Delay(1);
 800716a:	2001      	movs	r0, #1
 800716c:	f000 fbd6 	bl	800791c <HAL_Delay>
	mpuWrite( 0x25, 0x80|MAG_ADDRESS);//I2C_SLV0_ADDR -- I2C_SLV4_RW=1 (read operation) ; I2C_SLV4_ADDR=MAG_ADDRESS
 8007170:	228c      	movs	r2, #140	; 0x8c
 8007172:	2125      	movs	r1, #37	; 0x25
 8007174:	4620      	mov	r0, r4
 8007176:	f7ff ff31 	bl	8006fdc <_ZN3IMU8mpuWriteEhh>
	HAL_Delay(1);
 800717a:	2001      	movs	r0, #1
 800717c:	f000 fbce 	bl	800791c <HAL_Delay>
	mpuWrite( 0x26, MAG_DATA_REGISTER);//I2C_SLV0_REG -- 6 data bytes of MAG are stored in 6 registers. First register address is MAG_DATA_REGISTER
 8007180:	2203      	movs	r2, #3
 8007182:	2126      	movs	r1, #38	; 0x26
 8007184:	4620      	mov	r0, r4
 8007186:	f7ff ff29 	bl	8006fdc <_ZN3IMU8mpuWriteEhh>
	HAL_Delay(1);
 800718a:	2001      	movs	r0, #1
 800718c:	f000 fbc6 	bl	800791c <HAL_Delay>
	mpuWrite( 0x27, 0x87);
 8007190:	2287      	movs	r2, #135	; 0x87
 8007192:	2127      	movs	r1, #39	; 0x27
 8007194:	4620      	mov	r0, r4
 8007196:	f7ff ff21 	bl	8006fdc <_ZN3IMU8mpuWriteEhh>
	HAL_Delay(1);
 800719a:	2001      	movs	r0, #1
 800719c:	f000 fbbe 	bl	800791c <HAL_Delay>
	calibrate_mag_ = 0;
 80071a0:	2300      	movs	r3, #0
 80071a2:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
 80071a6:	bd10      	pop	{r4, pc}

080071a8 <_ZN3IMU4initEP19__SPI_HandleTypeDefPN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EEE>:
{
 80071a8:	b570      	push	{r4, r5, r6, lr}
 80071aa:	2300      	movs	r3, #0
	reset_calib_flag_  = 0;
 80071ac:	2500      	movs	r5, #0
{
 80071ae:	4604      	mov	r4, r0
 80071b0:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
 80071b4:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
 80071b8:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
 80071bc:	f8c0 309c 	str.w	r3, [r0, #156]	; 0x9c
 80071c0:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98
 80071c4:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
 80071c8:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
 80071cc:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
 80071d0:	f8c0 30a0 	str.w	r3, [r0, #160]	; 0xa0
	nh_ = nh;
 80071d4:	6342      	str	r2, [r0, #52]	; 0x34
	reset_calib_flag_  = 0;
 80071d6:	f880 503e 	strb.w	r5, [r0, #62]	; 0x3e
	imu_config_sub_ = new ros::Subscriber2<std_msgs::UInt8, IMU> ("/imu_config_cmd", &IMU::imuConfigCallback, this );
 80071da:	2024      	movs	r0, #36	; 0x24
{
 80071dc:	460e      	mov	r6, r1
	imu_config_sub_ = new ros::Subscriber2<std_msgs::UInt8, IMU> ("/imu_config_cmd", &IMU::imuConfigCallback, this );
 80071de:	f002 ff7a 	bl	800a0d6 <_Znwj>
        obj_(obj), fun_obj_(cb), endpoint_(endpoint)
 80071e2:	4b1f      	ldr	r3, [pc, #124]	; (8007260 <_ZN3IMU4initEP19__SPI_HandleTypeDefPN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EEE+0xb8>)
 80071e4:	6003      	str	r3, [r0, #0]
      data(0)
 80071e6:	4b1f      	ldr	r3, [pc, #124]	; (8007264 <_ZN3IMU4initEP19__SPI_HandleTypeDefPN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EEE+0xbc>)
 80071e8:	60c3      	str	r3, [r0, #12]
      : _M_f(__pf) { }
 80071ea:	4b1f      	ldr	r3, [pc, #124]	; (8007268 <_ZN3IMU4initEP19__SPI_HandleTypeDefPN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EEE+0xc0>)
 80071ec:	6183      	str	r3, [r0, #24]
	nh_->subscribe<std_msgs::UInt8, IMU>(*imu_config_sub_);
 80071ee:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80071f0:	7405      	strb	r5, [r0, #16]
 80071f2:	2301      	movs	r3, #1
 80071f4:	6203      	str	r3, [r0, #32]
        topic_ = topic_name;
 80071f6:	4b1d      	ldr	r3, [pc, #116]	; (800726c <_ZN3IMU4initEP19__SPI_HandleTypeDefPN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EEE+0xc4>)
 80071f8:	6083      	str	r3, [r0, #8]
        obj_(obj), fun_obj_(cb), endpoint_(endpoint)
 80071fa:	6144      	str	r4, [r0, #20]
 80071fc:	61c5      	str	r5, [r0, #28]
	imu_config_sub_ = new ros::Subscriber2<std_msgs::UInt8, IMU> ("/imu_config_cmd", &IMU::imuConfigCallback, this );
 80071fe:	63a0      	str	r0, [r4, #56]	; 0x38
 8007200:	f502 711b 	add.w	r1, r2, #620	; 0x26c
      for(int i = 0; i < MAX_SUBSCRIBERS; i++){
 8007204:	462b      	mov	r3, r5
        if(subscribers[i] == 0){ // empty slot
 8007206:	f851 5b04 	ldr.w	r5, [r1], #4
 800720a:	bb2d      	cbnz	r5, 8007258 <_ZN3IMU4initEP19__SPI_HandleTypeDefPN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EEE+0xb0>
          subscribers[i] = (Subscriber_*) &s;
 800720c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
          s.id_ = i+100;
 8007210:	3364      	adds	r3, #100	; 0x64
          subscribers[i] = (Subscriber_*) &s;
 8007212:	f8c2 026c 	str.w	r0, [r2, #620]	; 0x26c
          s.id_ = i+100;
 8007216:	6043      	str	r3, [r0, #4]
	ahb_suspend_flag_ = false;
 8007218:	2300      	movs	r3, #0
	mag_filtering_flag_ = true;
 800721a:	2201      	movs	r2, #1
	ahb_suspend_flag_ = false;
 800721c:	f884 3111 	strb.w	r3, [r4, #273]	; 0x111
	mag_filtering_flag_ = true;
 8007220:	f884 210c 	strb.w	r2, [r4, #268]	; 0x10c
	mag_outlier_counter_ = 0;
 8007224:	f8a4 310e 	strh.w	r3, [r4, #270]	; 0x10e
	readCalibData();
 8007228:	4620      	mov	r0, r4
	hspi_ = hspi;
 800722a:	6326      	str	r6, [r4, #48]	; 0x30
	readCalibData();
 800722c:	f7ff fe72 	bl	8006f14 <_ZN3IMU13readCalibDataEv>
	gyroInit();
 8007230:	4620      	mov	r0, r4
 8007232:	f7ff fef9 	bl	8007028 <_ZN3IMU8gyroInitEv>
	accInit();
 8007236:	4620      	mov	r0, r4
 8007238:	f7ff ff29 	bl	800708e <_ZN3IMU7accInitEv>
	magInit();
 800723c:	4620      	mov	r0, r4
 800723e:	f7ff ff42 	bl	80070c6 <_ZN3IMU7magInitEv>
	hspi_->Instance->CR1 &= (uint32_t)(~SPI_BAUDRATEPRESCALER_256); //reset
 8007242:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	681a      	ldr	r2, [r3, #0]
 8007248:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 800724c:	601a      	str	r2, [r3, #0]
	hspi_->Instance->CR1 |= (uint32_t)(SPI_BAUDRATEPRESCALER_8); //8 = 13.5Mhz
 800724e:	681a      	ldr	r2, [r3, #0]
 8007250:	f042 0210 	orr.w	r2, r2, #16
 8007254:	601a      	str	r2, [r3, #0]
 8007256:	bd70      	pop	{r4, r5, r6, pc}
      for(int i = 0; i < MAX_SUBSCRIBERS; i++){
 8007258:	3301      	adds	r3, #1
 800725a:	2b14      	cmp	r3, #20
 800725c:	d1d3      	bne.n	8007206 <_ZN3IMU4initEP19__SPI_HandleTypeDefPN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EEE+0x5e>
 800725e:	e7db      	b.n	8007218 <_ZN3IMU4initEP19__SPI_HandleTypeDefPN3ros11NodeHandle_I13STMF4HardwareLi20ELi20ELi255ELi255EEE+0x70>
 8007260:	0800cafc 	.word	0x0800cafc
 8007264:	0800cae4 	.word	0x0800cae4
 8007268:	08006eb7 	.word	0x08006eb7
 800726c:	0800cb3c 	.word	0x0800cb3c

08007270 <_ZN3IMU4readEv>:
{
 8007270:	b570      	push	{r4, r5, r6, lr}
 8007272:	b088      	sub	sp, #32
	t_data[0] = 0x43 | 0x80;
 8007274:	ad08      	add	r5, sp, #32
 8007276:	23c3      	movs	r3, #195	; 0xc3
{
 8007278:	4604      	mov	r4, r0
	t_data[0] = 0x43 | 0x80;
 800727a:	f805 3d1c 	strb.w	r3, [r5, #-28]!
	IMU_SPI_CS_L;
 800727e:	2200      	movs	r2, #0
 8007280:	2140      	movs	r1, #64	; 0x40
 8007282:	4890      	ldr	r0, [pc, #576]	; (80074c4 <_ZN3IMU4readEv+0x254>)
	if(i == MAG_PRESCALER)
 8007284:	4e90      	ldr	r6, [pc, #576]	; (80074c8 <_ZN3IMU4readEv+0x258>)
	IMU_SPI_CS_L;
 8007286:	f001 f9ef 	bl	8008668 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi_, t_data, 1, 1000);
 800728a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800728e:	2201      	movs	r2, #1
 8007290:	4629      	mov	r1, r5
 8007292:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8007294:	f001 fce7 	bl	8008c66 <HAL_SPI_Transmit>
	HAL_SPI_Receive(hspi_, adc_gyro, 6, 1000);
 8007298:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800729c:	2206      	movs	r2, #6
 800729e:	a902      	add	r1, sp, #8
 80072a0:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80072a2:	f001 fe8c 	bl	8008fbe <HAL_SPI_Receive>
	IMU_SPI_CS_H;
 80072a6:	2201      	movs	r2, #1
 80072a8:	2140      	movs	r1, #64	; 0x40
 80072aa:	4886      	ldr	r0, [pc, #536]	; (80074c4 <_ZN3IMU4readEv+0x254>)
 80072ac:	f001 f9dc 	bl	8008668 <HAL_GPIO_WritePin>
	raw_gyro_adc_[0] = (int16_t)(adc_gyro[0] << 8 | adc_gyro[1]) * 2000.0f / 32767.0f * M_PI / 180.0f  ;
 80072b0:	f89d 2008 	ldrb.w	r2, [sp, #8]
 80072b4:	f89d 3009 	ldrb.w	r3, [sp, #9]
 80072b8:	ed9f 5a84 	vldr	s10, [pc, #528]	; 80074cc <_ZN3IMU4readEv+0x25c>
 80072bc:	eddf 5a84 	vldr	s11, [pc, #528]	; 80074d0 <_ZN3IMU4readEv+0x260>
 80072c0:	ed9f 6a84 	vldr	s12, [pc, #528]	; 80074d4 <_ZN3IMU4readEv+0x264>
 80072c4:	eddf 6a84 	vldr	s13, [pc, #528]	; 80074d8 <_ZN3IMU4readEv+0x268>
	IMU_SPI_CS_L;
 80072c8:	487e      	ldr	r0, [pc, #504]	; (80074c4 <_ZN3IMU4readEv+0x254>)
	raw_gyro_adc_[0] = (int16_t)(adc_gyro[0] << 8 | adc_gyro[1]) * 2000.0f / 32767.0f * M_PI / 180.0f  ;
 80072ca:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80072ce:	b21b      	sxth	r3, r3
 80072d0:	ee07 3a10 	vmov	s14, r3
 80072d4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	raw_gyro_adc_[1] = (int16_t)(adc_gyro[2] << 8 | adc_gyro[3]) * 2000.0f / 32767.0f * M_PI / 180.0f  ;
 80072d8:	f89d 200a 	ldrb.w	r2, [sp, #10]
 80072dc:	f89d 300b 	ldrb.w	r3, [sp, #11]
	raw_gyro_adc_[0] = (int16_t)(adc_gyro[0] << 8 | adc_gyro[1]) * 2000.0f / 32767.0f * M_PI / 180.0f  ;
 80072e0:	ee27 7a05 	vmul.f32	s14, s14, s10
	raw_gyro_adc_[1] = (int16_t)(adc_gyro[2] << 8 | adc_gyro[3]) * 2000.0f / 32767.0f * M_PI / 180.0f  ;
 80072e4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	raw_gyro_adc_[0] = (int16_t)(adc_gyro[0] << 8 | adc_gyro[1]) * 2000.0f / 32767.0f * M_PI / 180.0f  ;
 80072e8:	eec7 7a25 	vdiv.f32	s15, s14, s11
	raw_gyro_adc_[1] = (int16_t)(adc_gyro[2] << 8 | adc_gyro[3]) * 2000.0f / 32767.0f * M_PI / 180.0f  ;
 80072ec:	b21b      	sxth	r3, r3
	raw_gyro_adc_[2] = (int16_t)(adc_gyro[4] << 8 | adc_gyro[5]) * 2000.0f / 32767.0f * M_PI / 180.0f  ;
 80072ee:	f89d 200c 	ldrb.w	r2, [sp, #12]
	IMU_SPI_CS_L;
 80072f2:	2140      	movs	r1, #64	; 0x40
	raw_gyro_adc_[0] = (int16_t)(adc_gyro[0] << 8 | adc_gyro[1]) * 2000.0f / 32767.0f * M_PI / 180.0f  ;
 80072f4:	ee67 7a86 	vmul.f32	s15, s15, s12
 80072f8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80072fc:	ed84 7a10 	vstr	s14, [r4, #64]	; 0x40
	raw_gyro_adc_[1] = (int16_t)(adc_gyro[2] << 8 | adc_gyro[3]) * 2000.0f / 32767.0f * M_PI / 180.0f  ;
 8007300:	ee07 3a10 	vmov	s14, r3
 8007304:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	raw_gyro_adc_[2] = (int16_t)(adc_gyro[4] << 8 | adc_gyro[5]) * 2000.0f / 32767.0f * M_PI / 180.0f  ;
 8007308:	f89d 300d 	ldrb.w	r3, [sp, #13]
	raw_gyro_adc_[1] = (int16_t)(adc_gyro[2] << 8 | adc_gyro[3]) * 2000.0f / 32767.0f * M_PI / 180.0f  ;
 800730c:	ee27 7a05 	vmul.f32	s14, s14, s10
	raw_gyro_adc_[2] = (int16_t)(adc_gyro[4] << 8 | adc_gyro[5]) * 2000.0f / 32767.0f * M_PI / 180.0f  ;
 8007310:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	raw_gyro_adc_[1] = (int16_t)(adc_gyro[2] << 8 | adc_gyro[3]) * 2000.0f / 32767.0f * M_PI / 180.0f  ;
 8007314:	eec7 7a25 	vdiv.f32	s15, s14, s11
	raw_gyro_adc_[2] = (int16_t)(adc_gyro[4] << 8 | adc_gyro[5]) * 2000.0f / 32767.0f * M_PI / 180.0f  ;
 8007318:	b21b      	sxth	r3, r3
	IMU_SPI_CS_L;
 800731a:	2200      	movs	r2, #0
	raw_gyro_adc_[1] = (int16_t)(adc_gyro[2] << 8 | adc_gyro[3]) * 2000.0f / 32767.0f * M_PI / 180.0f  ;
 800731c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8007320:	ee87 7aa6 	vdiv.f32	s14, s15, s13
	raw_gyro_adc_[2] = (int16_t)(adc_gyro[4] << 8 | adc_gyro[5]) * 2000.0f / 32767.0f * M_PI / 180.0f  ;
 8007324:	ee07 3a90 	vmov	s15, r3
 8007328:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	raw_gyro_adc_[1] = (int16_t)(adc_gyro[2] << 8 | adc_gyro[3]) * 2000.0f / 32767.0f * M_PI / 180.0f  ;
 800732c:	ed84 7a11 	vstr	s14, [r4, #68]	; 0x44
	raw_gyro_adc_[2] = (int16_t)(adc_gyro[4] << 8 | adc_gyro[5]) * 2000.0f / 32767.0f * M_PI / 180.0f  ;
 8007330:	ee67 7a85 	vmul.f32	s15, s15, s10
	t_data[0] = 0x3B | 0x80;
 8007334:	23bb      	movs	r3, #187	; 0xbb
	raw_gyro_adc_[2] = (int16_t)(adc_gyro[4] << 8 | adc_gyro[5]) * 2000.0f / 32767.0f * M_PI / 180.0f  ;
 8007336:	ee87 7aa5 	vdiv.f32	s14, s15, s11
	t_data[0] = 0x3B | 0x80;
 800733a:	f88d 3004 	strb.w	r3, [sp, #4]
	raw_gyro_adc_[2] = (int16_t)(adc_gyro[4] << 8 | adc_gyro[5]) * 2000.0f / 32767.0f * M_PI / 180.0f  ;
 800733e:	ee67 7a06 	vmul.f32	s15, s14, s12
 8007342:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8007346:	ed84 7a12 	vstr	s14, [r4, #72]	; 0x48
	IMU_SPI_CS_L;
 800734a:	f001 f98d 	bl	8008668 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi_, t_data, 1, 1000);
 800734e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007352:	2201      	movs	r2, #1
 8007354:	4629      	mov	r1, r5
 8007356:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8007358:	f001 fc85 	bl	8008c66 <HAL_SPI_Transmit>
	HAL_SPI_Receive(hspi_, adc_acc, 6, 1000);
 800735c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007360:	2206      	movs	r2, #6
 8007362:	a904      	add	r1, sp, #16
 8007364:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8007366:	f001 fe2a 	bl	8008fbe <HAL_SPI_Receive>
	IMU_SPI_CS_H;
 800736a:	2201      	movs	r2, #1
 800736c:	2140      	movs	r1, #64	; 0x40
 800736e:	4855      	ldr	r0, [pc, #340]	; (80074c4 <_ZN3IMU4readEv+0x254>)
 8007370:	f001 f97a 	bl	8008668 <HAL_GPIO_WritePin>
	raw_acc_adc_[0] = (int16_t)(adc_acc[0] << 8 | adc_acc[1]) / 4096.0f * GRAVITY_MSS;
 8007374:	f89d 2010 	ldrb.w	r2, [sp, #16]
 8007378:	f89d 3011 	ldrb.w	r3, [sp, #17]
 800737c:	ed9f 6a57 	vldr	s12, [pc, #348]	; 80074dc <_ZN3IMU4readEv+0x26c>
 8007380:	eddf 6a57 	vldr	s13, [pc, #348]	; 80074e0 <_ZN3IMU4readEv+0x270>
 8007384:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8007388:	b21b      	sxth	r3, r3
 800738a:	ee07 3a10 	vmov	s14, r3
 800738e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	raw_acc_adc_[1] = (int16_t)(adc_acc[2] << 8 | adc_acc[3]) / 4096.0f * GRAVITY_MSS;
 8007392:	f89d 2012 	ldrb.w	r2, [sp, #18]
 8007396:	f89d 3013 	ldrb.w	r3, [sp, #19]
	raw_acc_adc_[0] = (int16_t)(adc_acc[0] << 8 | adc_acc[1]) / 4096.0f * GRAVITY_MSS;
 800739a:	ee27 7a06 	vmul.f32	s14, s14, s12
	raw_acc_adc_[1] = (int16_t)(adc_acc[2] << 8 | adc_acc[3]) / 4096.0f * GRAVITY_MSS;
 800739e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	raw_acc_adc_[0] = (int16_t)(adc_acc[0] << 8 | adc_acc[1]) / 4096.0f * GRAVITY_MSS;
 80073a2:	ee27 7a26 	vmul.f32	s14, s14, s13
	raw_acc_adc_[1] = (int16_t)(adc_acc[2] << 8 | adc_acc[3]) / 4096.0f * GRAVITY_MSS;
 80073a6:	b21b      	sxth	r3, r3
	raw_acc_adc_[0] = (int16_t)(adc_acc[0] << 8 | adc_acc[1]) / 4096.0f * GRAVITY_MSS;
 80073a8:	ed84 7a13 	vstr	s14, [r4, #76]	; 0x4c
	raw_acc_adc_[2] = (int16_t)(adc_acc[4] << 8 | adc_acc[5]) / 4096.0f * GRAVITY_MSS;
 80073ac:	f89d 2014 	ldrb.w	r2, [sp, #20]
	raw_acc_adc_[1] = (int16_t)(adc_acc[2] << 8 | adc_acc[3]) / 4096.0f * GRAVITY_MSS;
 80073b0:	ee07 3a10 	vmov	s14, r3
	raw_acc_adc_[2] = (int16_t)(adc_acc[4] << 8 | adc_acc[5]) / 4096.0f * GRAVITY_MSS;
 80073b4:	f89d 3015 	ldrb.w	r3, [sp, #21]
 80073b8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80073bc:	b21b      	sxth	r3, r3
 80073be:	ee07 3a90 	vmov	s15, r3
	raw_acc_adc_[1] = (int16_t)(adc_acc[2] << 8 | adc_acc[3]) / 4096.0f * GRAVITY_MSS;
 80073c2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	raw_acc_adc_[2] = (int16_t)(adc_acc[4] << 8 | adc_acc[5]) / 4096.0f * GRAVITY_MSS;
 80073c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	raw_acc_adc_[1] = (int16_t)(adc_acc[2] << 8 | adc_acc[3]) / 4096.0f * GRAVITY_MSS;
 80073ca:	ee27 7a06 	vmul.f32	s14, s14, s12
	raw_acc_adc_[2] = (int16_t)(adc_acc[4] << 8 | adc_acc[5]) / 4096.0f * GRAVITY_MSS;
 80073ce:	ee67 7a86 	vmul.f32	s15, s15, s12
	if(i == MAG_PRESCALER)
 80073d2:	6833      	ldr	r3, [r6, #0]
	raw_acc_adc_[1] = (int16_t)(adc_acc[2] << 8 | adc_acc[3]) / 4096.0f * GRAVITY_MSS;
 80073d4:	ee27 7a26 	vmul.f32	s14, s14, s13
	raw_acc_adc_[2] = (int16_t)(adc_acc[4] << 8 | adc_acc[5]) / 4096.0f * GRAVITY_MSS;
 80073d8:	ee67 7aa6 	vmul.f32	s15, s15, s13
	if(i == MAG_PRESCALER)
 80073dc:	2b04      	cmp	r3, #4
	raw_acc_adc_[1] = (int16_t)(adc_acc[2] << 8 | adc_acc[3]) / 4096.0f * GRAVITY_MSS;
 80073de:	ed84 7a14 	vstr	s14, [r4, #80]	; 0x50
	raw_acc_adc_[2] = (int16_t)(adc_acc[4] << 8 | adc_acc[5]) / 4096.0f * GRAVITY_MSS;
 80073e2:	edc4 7a15 	vstr	s15, [r4, #84]	; 0x54
	if(i == MAG_PRESCALER)
 80073e6:	d165      	bne.n	80074b4 <_ZN3IMU4readEv+0x244>
		hspi_->Instance->CR1 &= (uint32_t)(~SPI_BAUDRATEPRESCALER_256); //reset
 80073e8:	6b23      	ldr	r3, [r4, #48]	; 0x30
		IMU_SPI_CS_L;
 80073ea:	4836      	ldr	r0, [pc, #216]	; (80074c4 <_ZN3IMU4readEv+0x254>)
		hspi_->Instance->CR1 &= (uint32_t)(~SPI_BAUDRATEPRESCALER_256); //reset
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	681a      	ldr	r2, [r3, #0]
 80073f0:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 80073f4:	601a      	str	r2, [r3, #0]
		hspi_->Instance->CR1 |= (uint32_t)(SPI_BAUDRATEPRESCALER_64); //128 = 0.8Mhz
 80073f6:	681a      	ldr	r2, [r3, #0]
 80073f8:	f042 0228 	orr.w	r2, r2, #40	; 0x28
 80073fc:	601a      	str	r2, [r3, #0]
		IMU_SPI_CS_L;
 80073fe:	2140      	movs	r1, #64	; 0x40
		t_data[0] = 0x49 | 0x80;
 8007400:	23c9      	movs	r3, #201	; 0xc9
		IMU_SPI_CS_L;
 8007402:	2200      	movs	r2, #0
		t_data[0] = 0x49 | 0x80;
 8007404:	f88d 3004 	strb.w	r3, [sp, #4]
		IMU_SPI_CS_L;
 8007408:	f001 f92e 	bl	8008668 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(hspi_, t_data, 1, 1000);
 800740c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007410:	2201      	movs	r2, #1
 8007412:	4629      	mov	r1, r5
 8007414:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8007416:	f001 fc26 	bl	8008c66 <HAL_SPI_Transmit>
		HAL_SPI_Receive(hspi_, adc_mag, 7, 1000);
 800741a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800741e:	2207      	movs	r2, #7
 8007420:	a906      	add	r1, sp, #24
 8007422:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8007424:	f001 fdcb 	bl	8008fbe <HAL_SPI_Receive>
		IMU_SPI_CS_H;
 8007428:	2201      	movs	r2, #1
 800742a:	2140      	movs	r1, #64	; 0x40
 800742c:	4825      	ldr	r0, [pc, #148]	; (80074c4 <_ZN3IMU4readEv+0x254>)
 800742e:	f001 f91b 	bl	8008668 <HAL_GPIO_WritePin>
		hspi_->Instance->CR1 &= (uint32_t)(~SPI_BAUDRATEPRESCALER_256); //reset
 8007432:	6b23      	ldr	r3, [r4, #48]	; 0x30
		raw_mag_adc_[0] = (int16_t)(adc_mag[1] << 8 | adc_mag[0]) * 4912.0f / 32760.0f;
 8007434:	ed9f 6a2b 	vldr	s12, [pc, #172]	; 80074e4 <_ZN3IMU4readEv+0x274>
		hspi_->Instance->CR1 &= (uint32_t)(~SPI_BAUDRATEPRESCALER_256); //reset
 8007438:	681b      	ldr	r3, [r3, #0]
		raw_mag_adc_[0] = (int16_t)(adc_mag[1] << 8 | adc_mag[0]) * 4912.0f / 32760.0f;
 800743a:	eddf 6a2b 	vldr	s13, [pc, #172]	; 80074e8 <_ZN3IMU4readEv+0x278>
		hspi_->Instance->CR1 &= (uint32_t)(~SPI_BAUDRATEPRESCALER_256); //reset
 800743e:	681a      	ldr	r2, [r3, #0]
 8007440:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 8007444:	601a      	str	r2, [r3, #0]
		hspi_->Instance->CR1 |= (uint32_t)(SPI_BAUDRATEPRESCALER_8); //8 = 13.5Mhz
 8007446:	681a      	ldr	r2, [r3, #0]
 8007448:	f042 0210 	orr.w	r2, r2, #16
 800744c:	601a      	str	r2, [r3, #0]
		raw_mag_adc_[0] = (int16_t)(adc_mag[1] << 8 | adc_mag[0]) * 4912.0f / 32760.0f;
 800744e:	f89d 2019 	ldrb.w	r2, [sp, #25]
 8007452:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8007456:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800745a:	b21b      	sxth	r3, r3
 800745c:	ee07 3a10 	vmov	s14, r3
 8007460:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
		raw_mag_adc_[1] = (int16_t)(adc_mag[3] << 8 | adc_mag[2]) * 4912.0f / 32760.0f;
 8007464:	f89d 201b 	ldrb.w	r2, [sp, #27]
 8007468:	f89d 301a 	ldrb.w	r3, [sp, #26]
		raw_mag_adc_[0] = (int16_t)(adc_mag[1] << 8 | adc_mag[0]) * 4912.0f / 32760.0f;
 800746c:	ee27 7a06 	vmul.f32	s14, s14, s12
		raw_mag_adc_[1] = (int16_t)(adc_mag[3] << 8 | adc_mag[2]) * 4912.0f / 32760.0f;
 8007470:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		raw_mag_adc_[0] = (int16_t)(adc_mag[1] << 8 | adc_mag[0]) * 4912.0f / 32760.0f;
 8007474:	eec7 7a26 	vdiv.f32	s15, s14, s13
		raw_mag_adc_[1] = (int16_t)(adc_mag[3] << 8 | adc_mag[2]) * 4912.0f / 32760.0f;
 8007478:	b21b      	sxth	r3, r3
		raw_mag_adc_[2] = (int16_t)(adc_mag[5] << 8 | adc_mag[4]) * 4912.0f / 32760.0f;
 800747a:	f89d 201d 	ldrb.w	r2, [sp, #29]
		raw_mag_adc_[1] = (int16_t)(adc_mag[3] << 8 | adc_mag[2]) * 4912.0f / 32760.0f;
 800747e:	ee07 3a10 	vmov	s14, r3
 8007482:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
		raw_mag_adc_[0] = (int16_t)(adc_mag[1] << 8 | adc_mag[0]) * 4912.0f / 32760.0f;
 8007486:	edc4 7a16 	vstr	s15, [r4, #88]	; 0x58
		raw_mag_adc_[1] = (int16_t)(adc_mag[3] << 8 | adc_mag[2]) * 4912.0f / 32760.0f;
 800748a:	ee27 7a06 	vmul.f32	s14, s14, s12
		raw_mag_adc_[2] = (int16_t)(adc_mag[5] << 8 | adc_mag[4]) * 4912.0f / 32760.0f;
 800748e:	f89d 301c 	ldrb.w	r3, [sp, #28]
		raw_mag_adc_[1] = (int16_t)(adc_mag[3] << 8 | adc_mag[2]) * 4912.0f / 32760.0f;
 8007492:	eec7 7a26 	vdiv.f32	s15, s14, s13
		raw_mag_adc_[2] = (int16_t)(adc_mag[5] << 8 | adc_mag[4]) * 4912.0f / 32760.0f;
 8007496:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800749a:	b21b      	sxth	r3, r3
		raw_mag_adc_[1] = (int16_t)(adc_mag[3] << 8 | adc_mag[2]) * 4912.0f / 32760.0f;
 800749c:	edc4 7a17 	vstr	s15, [r4, #92]	; 0x5c
		raw_mag_adc_[2] = (int16_t)(adc_mag[5] << 8 | adc_mag[4]) * 4912.0f / 32760.0f;
 80074a0:	ee07 3a90 	vmov	s15, r3
 80074a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80074a8:	ee67 7a86 	vmul.f32	s15, s15, s12
 80074ac:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80074b0:	ed84 7a18 	vstr	s14, [r4, #96]	; 0x60
	if(i == MAG_PRESCALER) i =0;
 80074b4:	6833      	ldr	r3, [r6, #0]
 80074b6:	2b04      	cmp	r3, #4
 80074b8:	bf0c      	ite	eq
 80074ba:	2300      	moveq	r3, #0
	else i++;
 80074bc:	3301      	addne	r3, #1
 80074be:	6033      	str	r3, [r6, #0]
}
 80074c0:	b008      	add	sp, #32
 80074c2:	bd70      	pop	{r4, r5, r6, pc}
 80074c4:	40020400 	.word	0x40020400
 80074c8:	20000a2c 	.word	0x20000a2c
 80074cc:	44fa0000 	.word	0x44fa0000
 80074d0:	46fffe00 	.word	0x46fffe00
 80074d4:	40490fdb 	.word	0x40490fdb
 80074d8:	43340000 	.word	0x43340000
 80074dc:	39800000 	.word	0x39800000
 80074e0:	411ce80a 	.word	0x411ce80a
 80074e4:	45998000 	.word	0x45998000
 80074e8:	46fff000 	.word	0x46fff000

080074ec <_ZN3IMU7processEv>:
{
 80074ec:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (calibrate_gyro_ > 0)
 80074ee:	f8d0 30c8 	ldr.w	r3, [r0, #200]	; 0xc8
 80074f2:	2b00      	cmp	r3, #0
{
 80074f4:	4604      	mov	r4, r0
 80074f6:	f100 05dc 	add.w	r5, r0, #220	; 0xdc
 80074fa:	f100 0040 	add.w	r0, r0, #64	; 0x40
	if (calibrate_gyro_ > 0)
 80074fe:	f340 80af 	ble.w	8007660 <_ZN3IMU7processEv+0x174>
		if (calibrate_gyro_ == CALIBRATING_STEP)
 8007502:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007506:	bf01      	itttt	eq
 8007508:	2300      	moveq	r3, #0
 800750a:	f8c4 30e4 	streq.w	r3, [r4, #228]	; 0xe4
 800750e:	f8c4 30e0 	streq.w	r3, [r4, #224]	; 0xe0
 8007512:	f8c4 30dc 	streq.w	r3, [r4, #220]	; 0xdc
		gyro_offset_ += raw_gyro_adc_;
 8007516:	4601      	mov	r1, r0
 8007518:	4628      	mov	r0, r5
 800751a:	f002 fa73 	bl	8009a04 <_ZN7Vector3IfEpLERKS0_>
		if (calibrate_gyro_ == 1)
 800751e:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
 8007522:	2b01      	cmp	r3, #1
 8007524:	d104      	bne.n	8007530 <_ZN3IMU7processEv+0x44>
			gyro_offset_ /= (float)CALIBRATING_STEP;
 8007526:	ed9f 0ab4 	vldr	s0, [pc, #720]	; 80077f8 <_ZN3IMU7processEv+0x30c>
 800752a:	4628      	mov	r0, r5
 800752c:	f002 fa10 	bl	8009950 <_ZN7Vector3IfEdVEf>
		calibrate_gyro_--;
 8007530:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
 8007534:	3b01      	subs	r3, #1
 8007536:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
	if (calibrate_acc_ > 0) {
 800753a:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
 800753e:	2b00      	cmp	r3, #0
 8007540:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 8007544:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007548:	f340 80b5 	ble.w	80076b6 <_ZN3IMU7processEv+0x1ca>
		if (calibrate_acc_ == CALIBRATING_STEP) acc_offset_.zero();
 800754c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007550:	bf01      	itttt	eq
 8007552:	2300      	moveq	r3, #0
 8007554:	f8c4 30d8 	streq.w	r3, [r4, #216]	; 0xd8
 8007558:	f8c4 30d4 	streq.w	r3, [r4, #212]	; 0xd4
 800755c:	f8c4 30d0 	streq.w	r3, [r4, #208]	; 0xd0
		acc_offset_ += raw_acc_adc_;
 8007560:	4611      	mov	r1, r2
 8007562:	f002 fa4f 	bl	8009a04 <_ZN7Vector3IfEpLERKS0_>
		if (calibrate_acc_ == 1) {
 8007566:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
 800756a:	2b01      	cmp	r3, #1
 800756c:	d11a      	bne.n	80075a4 <_ZN3IMU7processEv+0xb8>
			acc_offset_[0] /= (float)CALIBRATING_STEP;
 800756e:	ed9f 7aa2 	vldr	s14, [pc, #648]	; 80077f8 <_ZN3IMU7processEv+0x30c>
 8007572:	edd4 6a34 	vldr	s13, [r4, #208]	; 0xd0
 8007576:	eec6 7a87 	vdiv.f32	s15, s13, s14
			writeCalibData();
 800757a:	4620      	mov	r0, r4
			acc_offset_[1] /= (float)CALIBRATING_STEP;
 800757c:	edd4 6a35 	vldr	s13, [r4, #212]	; 0xd4
			acc_offset_[0] /= (float)CALIBRATING_STEP;
 8007580:	edc4 7a34 	vstr	s15, [r4, #208]	; 0xd0
			acc_offset_[1] /= (float)CALIBRATING_STEP;
 8007584:	eec6 7a87 	vdiv.f32	s15, s13, s14
			acc_offset_[2] =  acc_offset_[2]/(float)CALIBRATING_STEP - GRAVITY_MSS;
 8007588:	edd4 6a36 	vldr	s13, [r4, #216]	; 0xd8
			acc_offset_[1] /= (float)CALIBRATING_STEP;
 800758c:	edc4 7a35 	vstr	s15, [r4, #212]	; 0xd4
			acc_offset_[2] =  acc_offset_[2]/(float)CALIBRATING_STEP - GRAVITY_MSS;
 8007590:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007594:	ed9f 7a99 	vldr	s14, [pc, #612]	; 80077fc <_ZN3IMU7processEv+0x310>
 8007598:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800759c:	edc4 7a36 	vstr	s15, [r4, #216]	; 0xd8
			writeCalibData();
 80075a0:	f7ff fcec 	bl	8006f7c <_ZN3IMU14writeCalibDataEv>
		calibrate_acc_--;
 80075a4:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
 80075a8:	3b01      	subs	r3, #1
 80075aa:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
	if (calibrate_mag_ > 0)
 80075ae:	f8d4 60cc 	ldr.w	r6, [r4, #204]	; 0xcc
 80075b2:	2e00      	cmp	r6, #0
 80075b4:	f340 80ab 	ble.w	800770e <_ZN3IMU7processEv+0x222>
		if(calibrate_mag_  == CALIBRATING_MAG_STEP)
 80075b8:	f5b6 6f96 	cmp.w	r6, #1200	; 0x4b0
 80075bc:	f104 0358 	add.w	r3, r4, #88	; 0x58
 80075c0:	d112      	bne.n	80075e8 <_ZN3IMU7processEv+0xfc>
 80075c2:	2200      	movs	r2, #0
 80075c4:	f8c4 20f0 	str.w	r2, [r4, #240]	; 0xf0
 80075c8:	f8c4 20ec 	str.w	r2, [r4, #236]	; 0xec
 80075cc:	f8c4 20e8 	str.w	r2, [r4, #232]	; 0xe8
			mag_min_ = raw_mag_adc_;
 80075d0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80075d4:	f504 7580 	add.w	r5, r4, #256	; 0x100
 80075d8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
			mag_max_ = raw_mag_adc_;
 80075dc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80075e0:	f104 05f4 	add.w	r5, r4, #244	; 0xf4
 80075e4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80075e8:	f104 0264 	add.w	r2, r4, #100	; 0x64
			if (raw_mag_adc_[i] < mag_min_[i]) mag_min_[i] = raw_mag_adc_[i];
 80075ec:	edd3 7a00 	vldr	s15, [r3]
 80075f0:	ed93 7a2a 	vldr	s14, [r3, #168]	; 0xa8
 80075f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80075f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075fc:	bf48      	it	mi
 80075fe:	edc3 7a2a 	vstrmi	s15, [r3, #168]	; 0xa8
 8007602:	3304      	adds	r3, #4
			if (raw_mag_adc_[i] > mag_max_[i]) mag_max_[i] = raw_mag_adc_[i];
 8007604:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 8007608:	eef4 7ac7 	vcmpe.f32	s15, s14
 800760c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007610:	bfc8      	it	gt
 8007612:	edc3 7a26 	vstrgt	s15, [r3, #152]	; 0x98
		for (int i = 0; i < 3; i++)
 8007616:	429a      	cmp	r2, r3
 8007618:	d1e8      	bne.n	80075ec <_ZN3IMU7processEv+0x100>
		if(calibrate_mag_ == 1)
 800761a:	2e01      	cmp	r6, #1
 800761c:	f504 7080 	add.w	r0, r4, #256	; 0x100
 8007620:	f104 01f4 	add.w	r1, r4, #244	; 0xf4
 8007624:	d115      	bne.n	8007652 <_ZN3IMU7processEv+0x166>
			mag_offset_ = (mag_min_ + mag_max_) /2 ;
 8007626:	f002 fa9b 	bl	8009b60 <_ZNK7Vector3IfEplERKS0_>
 800762a:	a801      	add	r0, sp, #4
 800762c:	ed8d 0a01 	vstr	s0, [sp, #4]
 8007630:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8007634:	edcd 0a02 	vstr	s1, [sp, #8]
 8007638:	ed8d 1a03 	vstr	s2, [sp, #12]
 800763c:	f002 fa10 	bl	8009a60 <_ZNK7Vector3IfEdvEf>
			writeCalibData();
 8007640:	4620      	mov	r0, r4
			mag_offset_ = (mag_min_ + mag_max_) /2 ;
 8007642:	ed84 0a3a 	vstr	s0, [r4, #232]	; 0xe8
 8007646:	edc4 0a3b 	vstr	s1, [r4, #236]	; 0xec
 800764a:	ed84 1a3c 	vstr	s2, [r4, #240]	; 0xf0
			writeCalibData();
 800764e:	f7ff fc95 	bl	8006f7c <_ZN3IMU14writeCalibDataEv>
		calibrate_mag_ --;
 8007652:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
 8007656:	3b01      	subs	r3, #1
 8007658:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
}
 800765c:	b004      	add	sp, #16
 800765e:	bd70      	pop	{r4, r5, r6, pc}
		raw_gyro_= raw_gyro_adc_ - gyro_offset_;
 8007660:	4629      	mov	r1, r5
 8007662:	f002 fabf 	bl	8009be4 <_ZNK7Vector3IfEmiERKS0_>
		raw_gyro_p_  -= (raw_gyro_p_/GYRO_LPF_FACTOR);
 8007666:	f104 05ac 	add.w	r5, r4, #172	; 0xac
		raw_gyro_= raw_gyro_adc_ - gyro_offset_;
 800766a:	edc4 0a1d 	vstr	s1, [r4, #116]	; 0x74
 800766e:	ed84 1a1e 	vstr	s2, [r4, #120]	; 0x78
 8007672:	ed84 0a1c 	vstr	s0, [r4, #112]	; 0x70
		raw_gyro_p_  -= (raw_gyro_p_/GYRO_LPF_FACTOR);
 8007676:	4628      	mov	r0, r5
 8007678:	eeb2 0a08 	vmov.f32	s0, #40	; 0x41400000  12.0
 800767c:	f002 f9f0 	bl	8009a60 <_ZNK7Vector3IfEdvEf>
 8007680:	a901      	add	r1, sp, #4
 8007682:	4628      	mov	r0, r5
 8007684:	ed8d 0a01 	vstr	s0, [sp, #4]
 8007688:	edcd 0a02 	vstr	s1, [sp, #8]
 800768c:	ed8d 1a03 	vstr	s2, [sp, #12]
 8007690:	f002 f98a 	bl	80099a8 <_ZN7Vector3IfEmIERKS0_>
		raw_gyro_p_   += raw_gyro_;
 8007694:	f104 0170 	add.w	r1, r4, #112	; 0x70
 8007698:	4628      	mov	r0, r5
 800769a:	f002 f9b3 	bl	8009a04 <_ZN7Vector3IfEpLERKS0_>
		gyro_  = (raw_gyro_p_/GYRO_LPF_FACTOR);
 800769e:	eeb2 0a08 	vmov.f32	s0, #40	; 0x41400000  12.0
 80076a2:	4628      	mov	r0, r5
 80076a4:	f002 f9dc 	bl	8009a60 <_ZNK7Vector3IfEdvEf>
 80076a8:	ed84 0a25 	vstr	s0, [r4, #148]	; 0x94
 80076ac:	edc4 0a26 	vstr	s1, [r4, #152]	; 0x98
 80076b0:	ed84 1a27 	vstr	s2, [r4, #156]	; 0x9c
 80076b4:	e741      	b.n	800753a <_ZN3IMU7processEv+0x4e>
		raw_acc_ = raw_acc_adc_ - acc_offset_;
 80076b6:	4601      	mov	r1, r0
 80076b8:	4610      	mov	r0, r2
 80076ba:	f002 fa93 	bl	8009be4 <_ZNK7Vector3IfEmiERKS0_>
		raw_acc_p_    -= (raw_acc_p_/ACC_LPF_FACTOR);
 80076be:	f104 05b8 	add.w	r5, r4, #184	; 0xb8
		raw_acc_ = raw_acc_adc_ - acc_offset_;
 80076c2:	edc4 0a1a 	vstr	s1, [r4, #104]	; 0x68
 80076c6:	ed84 1a1b 	vstr	s2, [r4, #108]	; 0x6c
 80076ca:	ed84 0a19 	vstr	s0, [r4, #100]	; 0x64
		raw_acc_p_    -= (raw_acc_p_/ACC_LPF_FACTOR);
 80076ce:	4628      	mov	r0, r5
 80076d0:	ed9f 0a4b 	vldr	s0, [pc, #300]	; 8007800 <_ZN3IMU7processEv+0x314>
 80076d4:	f002 f9c4 	bl	8009a60 <_ZNK7Vector3IfEdvEf>
 80076d8:	a901      	add	r1, sp, #4
 80076da:	4628      	mov	r0, r5
 80076dc:	ed8d 0a01 	vstr	s0, [sp, #4]
 80076e0:	edcd 0a02 	vstr	s1, [sp, #8]
 80076e4:	ed8d 1a03 	vstr	s2, [sp, #12]
 80076e8:	f002 f95e 	bl	80099a8 <_ZN7Vector3IfEmIERKS0_>
		raw_acc_p_    += raw_acc_;
 80076ec:	f104 0164 	add.w	r1, r4, #100	; 0x64
 80076f0:	4628      	mov	r0, r5
 80076f2:	f002 f987 	bl	8009a04 <_ZN7Vector3IfEpLERKS0_>
		acc_  = (raw_acc_p_/ACC_LPF_FACTOR);
 80076f6:	ed9f 0a42 	vldr	s0, [pc, #264]	; 8007800 <_ZN3IMU7processEv+0x314>
 80076fa:	4628      	mov	r0, r5
 80076fc:	f002 f9b0 	bl	8009a60 <_ZNK7Vector3IfEdvEf>
 8007700:	ed84 0a22 	vstr	s0, [r4, #136]	; 0x88
 8007704:	edc4 0a23 	vstr	s1, [r4, #140]	; 0x8c
 8007708:	ed84 1a24 	vstr	s2, [r4, #144]	; 0x90
 800770c:	e74f      	b.n	80075ae <_ZN3IMU7processEv+0xc2>
		raw_mag_[0] = raw_mag_adc_[1] - mag_offset_[1];
 800770e:	edd4 6a17 	vldr	s13, [r4, #92]	; 0x5c
 8007712:	edd4 7a3b 	vldr	s15, [r4, #236]	; 0xec
		raw_mag_[1] = raw_mag_adc_[0]  - mag_offset_[0];
 8007716:	ed94 6a16 	vldr	s12, [r4, #88]	; 0x58
		raw_mag_[2] = -(raw_mag_adc_[2] - mag_offset_[2]);
 800771a:	ed94 7a18 	vldr	s14, [r4, #96]	; 0x60
		if(mag_filtering_flag_)
 800771e:	f894 110c 	ldrb.w	r1, [r4, #268]	; 0x10c
		raw_mag_[0] = raw_mag_adc_[1] - mag_offset_[1];
 8007722:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8007726:	edc4 7a1f 	vstr	s15, [r4, #124]	; 0x7c
		raw_mag_[1] = raw_mag_adc_[0]  - mag_offset_[0];
 800772a:	edd4 7a3a 	vldr	s15, [r4, #232]	; 0xe8
 800772e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8007732:	edc4 7a20 	vstr	s15, [r4, #128]	; 0x80
		raw_mag_[2] = -(raw_mag_adc_[2] - mag_offset_[2]);
 8007736:	edd4 7a3c 	vldr	s15, [r4, #240]	; 0xf0
 800773a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800773e:	eef1 7a67 	vneg.f32	s15, s15
 8007742:	edc4 7a21 	vstr	s15, [r4, #132]	; 0x84
		if(mag_filtering_flag_)
 8007746:	b3a1      	cbz	r1, 80077b2 <_ZN3IMU7processEv+0x2c6>
 8007748:	f104 027c 	add.w	r2, r4, #124	; 0x7c
 800774c:	f104 0088 	add.w	r0, r4, #136	; 0x88
 8007750:	2500      	movs	r5, #0
 8007752:	4613      	mov	r3, r2
				if(fabs(raw_mag_[i] - mag_[i]) > MAG_GENERAL_THRESH) mag_outlier_flag = true;
 8007754:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8007758:	ecf2 7a01 	vldmia	r2!, {s15}
 800775c:	edd2 6a08 	vldr	s13, [r2, #32]
 8007760:	ee77 7ae6 	vsub.f32	s15, s15, s13
  using ::fabs;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  fabs(float __x)
  { return __builtin_fabsf(__x); }
 8007764:	eef0 7ae7 	vabs.f32	s15, s15
 8007768:	eef4 7a47 	vcmp.f32	s15, s14
 800776c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007770:	bfc8      	it	gt
 8007772:	460d      	movgt	r5, r1
			for(int i = 0; i < 3; i++)
 8007774:	4282      	cmp	r2, r0
 8007776:	d1ef      	bne.n	8007758 <_ZN3IMU7processEv+0x26c>
			if(!mag_outlier_flag)
 8007778:	b945      	cbnz	r5, 800778c <_ZN3IMU7processEv+0x2a0>
				mag_ = raw_mag_;
 800777a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800777e:	f104 06a0 	add.w	r6, r4, #160	; 0xa0
 8007782:	e886 0007 	stmia.w	r6, {r0, r1, r2}
				mag_outlier_counter_ = 0;
 8007786:	f8a4 510e 	strh.w	r5, [r4, #270]	; 0x10e
 800778a:	e767      	b.n	800765c <_ZN3IMU7processEv+0x170>
				if(++mag_outlier_counter_ > MAG_OUTLIER_MAX_COUNT)
 800778c:	f8b4 210e 	ldrh.w	r2, [r4, #270]	; 0x10e
 8007790:	3201      	adds	r2, #1
 8007792:	b292      	uxth	r2, r2
 8007794:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
					mag_outlier_counter_ = 0;
 8007798:	bf81      	itttt	hi
 800779a:	2200      	movhi	r2, #0
 800779c:	f8a4 210e 	strhhi.w	r2, [r4, #270]	; 0x10e
					mag_ = raw_mag_;
 80077a0:	e893 0007 	ldmiahi.w	r3, {r0, r1, r2}
 80077a4:	34a0      	addhi	r4, #160	; 0xa0
				if(++mag_outlier_counter_ > MAG_OUTLIER_MAX_COUNT)
 80077a6:	bf94      	ite	ls
 80077a8:	f8a4 210e 	strhls.w	r2, [r4, #270]	; 0x10e
					mag_ = raw_mag_;
 80077ac:	e884 0007 	stmiahi.w	r4, {r0, r1, r2}
 80077b0:	e754      	b.n	800765c <_ZN3IMU7processEv+0x170>
    bool is_zero(void) const { return (fabsf(x) < FLT_EPSILON) && (fabsf(y) < FLT_EPSILON) && (fabsf(z) < FLT_EPSILON); }
 80077b2:	eddf 7a14 	vldr	s15, [pc, #80]	; 8007804 <_ZN3IMU7processEv+0x318>
 80077b6:	eeb0 6ac6 	vabs.f32	s12, s12
 80077ba:	eeb4 6ae7 	vcmpe.f32	s12, s15
 80077be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077c2:	d50e      	bpl.n	80077e2 <_ZN3IMU7processEv+0x2f6>
 80077c4:	eef0 6ae6 	vabs.f32	s13, s13
 80077c8:	eef4 6ae7 	vcmpe.f32	s13, s15
 80077cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077d0:	d507      	bpl.n	80077e2 <_ZN3IMU7processEv+0x2f6>
 80077d2:	eeb0 7ac7 	vabs.f32	s14, s14
 80077d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80077da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077de:	f53f af3d 	bmi.w	800765c <_ZN3IMU7processEv+0x170>
				mag_ = raw_mag_;
 80077e2:	f104 027c 	add.w	r2, r4, #124	; 0x7c
 80077e6:	ca07      	ldmia	r2, {r0, r1, r2}
 80077e8:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
 80077ec:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			mag_filtering_flag_  = true;
 80077f0:	2301      	movs	r3, #1
 80077f2:	f884 310c 	strb.w	r3, [r4, #268]	; 0x10c
 80077f6:	e731      	b.n	800765c <_ZN3IMU7processEv+0x170>
 80077f8:	447a0000 	.word	0x447a0000
 80077fc:	411ce80a 	.word	0x411ce80a
 8007800:	42280000 	.word	0x42280000
 8007804:	34000000 	.word	0x34000000

08007808 <_ZN3IMU6updateEt>:
{
 8007808:	b510      	push	{r4, lr}
 800780a:	4604      	mov	r4, r0
	if(nh_->connected() && (!nh_->getHardware()->getUartDriver()->getTx()->idleFlag()))
 800780c:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800780e:	6803      	ldr	r3, [r0, #0]
 8007810:	689b      	ldr	r3, [r3, #8]
 8007812:	4798      	blx	r3
 8007814:	b128      	cbz	r0, 8007822 <_ZN3IMU6updateEt+0x1a>
  bool idleFlag(){return idle_flag_;}
 8007816:	4b08      	ldr	r3, [pc, #32]	; (8007838 <_ZN3IMU6updateEt+0x30>)
 8007818:	781b      	ldrb	r3, [r3, #0]
 800781a:	b913      	cbnz	r3, 8007822 <_ZN3IMU6updateEt+0x1a>
		ahb_suspend_flag_ = true; //should suspend USART1 of DMA(ros) for a while
 800781c:	2301      	movs	r3, #1
 800781e:	f884 3111 	strb.w	r3, [r4, #273]	; 0x111
	read(); //read from SPI
 8007822:	4620      	mov	r0, r4
 8007824:	f7ff fd24 	bl	8007270 <_ZN3IMU4readEv>
	process();
 8007828:	4620      	mov	r0, r4
 800782a:	f7ff fe5f 	bl	80074ec <_ZN3IMU7processEv>
	update_ = true;
 800782e:	2001      	movs	r0, #1
 8007830:	f884 0110 	strb.w	r0, [r4, #272]	; 0x110
}
 8007834:	bd10      	pop	{r4, pc}
 8007836:	bf00      	nop
 8007838:	20003b90 	.word	0x20003b90

0800783c <_ZN3ros16normalizeSecNSecERmS0_>:

#include "ros/time.h"

namespace ros
{
  void normalizeSecNSec(uint32_t& sec, uint32_t& nsec){
 800783c:	b530      	push	{r4, r5, lr}
    uint32_t nsec_part= nsec % 1000000000UL;
    uint32_t sec_part = nsec / 1000000000UL;
    sec += sec_part;
 800783e:	6802      	ldr	r2, [r0, #0]
    uint32_t nsec_part= nsec % 1000000000UL;
 8007840:	680d      	ldr	r5, [r1, #0]
    uint32_t sec_part = nsec / 1000000000UL;
 8007842:	4c04      	ldr	r4, [pc, #16]	; (8007854 <_ZN3ros16normalizeSecNSecERmS0_+0x18>)
 8007844:	fbb5 f3f4 	udiv	r3, r5, r4
    sec += sec_part;
 8007848:	441a      	add	r2, r3
    uint32_t nsec_part= nsec % 1000000000UL;
 800784a:	fb04 5313 	mls	r3, r4, r3, r5
    sec += sec_part;
 800784e:	6002      	str	r2, [r0, #0]
    nsec = nsec_part;
 8007850:	600b      	str	r3, [r1, #0]
 8007852:	bd30      	pop	{r4, r5, pc}
 8007854:	3b9aca00 	.word	0x3b9aca00

08007858 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007858:	490f      	ldr	r1, [pc, #60]	; (8007898 <SystemInit+0x40>)
 800785a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800785e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007862:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8007866:	4b0d      	ldr	r3, [pc, #52]	; (800789c <SystemInit+0x44>)
 8007868:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800786a:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 800786c:	f042 0201 	orr.w	r2, r2, #1
 8007870:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8007872:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8007874:	681a      	ldr	r2, [r3, #0]
 8007876:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800787a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800787e:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8007880:	4a07      	ldr	r2, [pc, #28]	; (80078a0 <SystemInit+0x48>)
 8007882:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8007884:	681a      	ldr	r2, [r3, #0]
 8007886:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800788a:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800788c:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800788e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007892:	608b      	str	r3, [r1, #8]
 8007894:	4770      	bx	lr
 8007896:	bf00      	nop
 8007898:	e000ed00 	.word	0xe000ed00
 800789c:	40023800 	.word	0x40023800
 80078a0:	24003010 	.word	0x24003010

080078a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80078a4:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 80078a6:	4b08      	ldr	r3, [pc, #32]	; (80078c8 <HAL_InitTick+0x24>)
{
 80078a8:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 80078aa:	6818      	ldr	r0, [r3, #0]
 80078ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80078b0:	fbb0 f0f3 	udiv	r0, r0, r3
 80078b4:	f000 fa9c 	bl	8007df0 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80078b8:	2200      	movs	r2, #0
 80078ba:	4621      	mov	r1, r4
 80078bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80078c0:	f000 fa56 	bl	8007d70 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 80078c4:	2000      	movs	r0, #0
 80078c6:	bd10      	pop	{r4, pc}
 80078c8:	20000004 	.word	0x20000004

080078cc <HAL_Init>:
{
 80078cc:	b508      	push	{r3, lr}
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80078ce:	4b0b      	ldr	r3, [pc, #44]	; (80078fc <HAL_Init+0x30>)
 80078d0:	681a      	ldr	r2, [r3, #0]
 80078d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80078d6:	601a      	str	r2, [r3, #0]
   __HAL_FLASH_DATA_CACHE_ENABLE();
 80078d8:	681a      	ldr	r2, [r3, #0]
 80078da:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80078de:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80078e0:	681a      	ldr	r2, [r3, #0]
 80078e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80078e6:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80078e8:	2003      	movs	r0, #3
 80078ea:	f000 fa2f 	bl	8007d4c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80078ee:	2000      	movs	r0, #0
 80078f0:	f7ff ffd8 	bl	80078a4 <HAL_InitTick>
  HAL_MspInit();
 80078f4:	f7ff f9bc 	bl	8006c70 <HAL_MspInit>
}
 80078f8:	2000      	movs	r0, #0
 80078fa:	bd08      	pop	{r3, pc}
 80078fc:	40023c00 	.word	0x40023c00

08007900 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8007900:	4a02      	ldr	r2, [pc, #8]	; (800790c <HAL_IncTick+0xc>)
 8007902:	6813      	ldr	r3, [r2, #0]
 8007904:	3301      	adds	r3, #1
 8007906:	6013      	str	r3, [r2, #0]
 8007908:	4770      	bx	lr
 800790a:	bf00      	nop
 800790c:	20003cec 	.word	0x20003cec

08007910 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8007910:	4b01      	ldr	r3, [pc, #4]	; (8007918 <HAL_GetTick+0x8>)
 8007912:	6818      	ldr	r0, [r3, #0]
}
 8007914:	4770      	bx	lr
 8007916:	bf00      	nop
 8007918:	20003cec 	.word	0x20003cec

0800791c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 800791c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800791e:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 8007920:	f7ff fff6 	bl	8007910 <HAL_GetTick>
  uint32_t wait = Delay;
 8007924:	9c01      	ldr	r4, [sp, #4]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007926:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8007928:	4605      	mov	r5, r0
  {
     wait++;
 800792a:	bf18      	it	ne
 800792c:	3401      	addne	r4, #1
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800792e:	f7ff ffef 	bl	8007910 <HAL_GetTick>
 8007932:	1b40      	subs	r0, r0, r5
 8007934:	42a0      	cmp	r0, r4
 8007936:	d3fa      	bcc.n	800792e <HAL_Delay+0x12>
  {
  }
}
 8007938:	b003      	add	sp, #12
 800793a:	bd30      	pop	{r4, r5, pc}

0800793c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800793c:	b510      	push	{r4, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 800793e:	4604      	mov	r4, r0
 8007940:	2800      	cmp	r0, #0
 8007942:	f000 8099 	beq.w	8007a78 <HAL_ADC_Init+0x13c>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8007946:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8007948:	b923      	cbnz	r3, 8007954 <HAL_ADC_Init+0x18>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800794a:	6443      	str	r3, [r0, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800794c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8007950:	f7f9 fdf0 	bl	8001534 <HAL_ADC_MspInit>
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8007954:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007956:	06db      	lsls	r3, r3, #27
 8007958:	f100 808c 	bmi.w	8007a74 <HAL_ADC_Init+0x138>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800795c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800795e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8007962:	f023 0302 	bic.w	r3, r3, #2
 8007966:	f043 0302 	orr.w	r3, r3, #2
 800796a:	6423      	str	r3, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800796c:	4b43      	ldr	r3, [pc, #268]	; (8007a7c <HAL_ADC_Init+0x140>)
 800796e:	685a      	ldr	r2, [r3, #4]
 8007970:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8007974:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8007976:	685a      	ldr	r2, [r3, #4]
 8007978:	6861      	ldr	r1, [r4, #4]
 800797a:	430a      	orrs	r2, r1
 800797c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800797e:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8007980:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8007982:	685a      	ldr	r2, [r3, #4]
 8007984:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007988:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800798a:	685a      	ldr	r2, [r3, #4]
 800798c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8007990:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8007992:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8007994:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8007996:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800799a:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800799c:	685a      	ldr	r2, [r3, #4]
 800799e:	430a      	orrs	r2, r1
 80079a0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80079a2:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80079a4:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80079a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80079aa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80079ac:	689a      	ldr	r2, [r3, #8]
 80079ae:	430a      	orrs	r2, r1
 80079b0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80079b2:	4933      	ldr	r1, [pc, #204]	; (8007a80 <HAL_ADC_Init+0x144>)
 80079b4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80079b6:	428a      	cmp	r2, r1
 80079b8:	d050      	beq.n	8007a5c <HAL_ADC_Init+0x120>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80079ba:	6899      	ldr	r1, [r3, #8]
 80079bc:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 80079c0:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80079c2:	6899      	ldr	r1, [r3, #8]
 80079c4:	430a      	orrs	r2, r1
 80079c6:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80079c8:	689a      	ldr	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80079ca:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80079cc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80079d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80079d2:	689a      	ldr	r2, [r3, #8]
 80079d4:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80079d6:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80079d8:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 80079da:	69a1      	ldr	r1, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80079dc:	f022 0202 	bic.w	r2, r2, #2
 80079e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 80079e2:	689a      	ldr	r2, [r3, #8]
 80079e4:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 80079e8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80079ea:	6a22      	ldr	r2, [r4, #32]
 80079ec:	2a00      	cmp	r2, #0
 80079ee:	d03d      	beq.n	8007a6c <HAL_ADC_Init+0x130>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80079f0:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80079f2:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80079f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80079f8:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80079fa:	685a      	ldr	r2, [r3, #4]
 80079fc:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8007a00:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8007a02:	685a      	ldr	r2, [r3, #4]
 8007a04:	3901      	subs	r1, #1
 8007a06:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8007a0a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8007a0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8007a0e:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8007a10:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8007a14:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8007a16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a18:	3901      	subs	r1, #1
 8007a1a:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8007a1e:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8007a20:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 8007a22:	6b21      	ldr	r1, [r4, #48]	; 0x30
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8007a24:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007a28:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 8007a2a:	689a      	ldr	r2, [r3, #8]
 8007a2c:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 8007a30:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8007a32:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8007a34:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8007a36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a3a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8007a3c:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8007a3e:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8007a40:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 8007a44:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8007a46:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8007a48:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007a4a:	f023 0303 	bic.w	r3, r3, #3
 8007a4e:	f043 0301 	orr.w	r3, r3, #1
 8007a52:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8007a54:	2300      	movs	r3, #0
 8007a56:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  return tmp_hal_status;
 8007a5a:	bd10      	pop	{r4, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007a5c:	689a      	ldr	r2, [r3, #8]
 8007a5e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007a62:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007a64:	689a      	ldr	r2, [r3, #8]
 8007a66:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007a6a:	e7b4      	b.n	80079d6 <HAL_ADC_Init+0x9a>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8007a6c:	685a      	ldr	r2, [r3, #4]
 8007a6e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007a72:	e7ca      	b.n	8007a0a <HAL_ADC_Init+0xce>
    tmp_hal_status = HAL_ERROR;
 8007a74:	2001      	movs	r0, #1
 8007a76:	e7ed      	b.n	8007a54 <HAL_ADC_Init+0x118>
    return HAL_ERROR;
 8007a78:	2001      	movs	r0, #1
}
 8007a7a:	bd10      	pop	{r4, pc}
 8007a7c:	40012300 	.word	0x40012300
 8007a80:	0f000001 	.word	0x0f000001

08007a84 <HAL_ADC_Start>:
{
 8007a84:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 8007a86:	2300      	movs	r3, #0
 8007a88:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8007a8a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8007a8e:	2b01      	cmp	r3, #1
 8007a90:	d04d      	beq.n	8007b2e <HAL_ADC_Start+0xaa>
 8007a92:	2301      	movs	r3, #1
 8007a94:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8007a98:	6803      	ldr	r3, [r0, #0]
 8007a9a:	689a      	ldr	r2, [r3, #8]
 8007a9c:	07d1      	lsls	r1, r2, #31
 8007a9e:	d410      	bmi.n	8007ac2 <HAL_ADC_Start+0x3e>
    __HAL_ADC_ENABLE(hadc);
 8007aa0:	689a      	ldr	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8007aa2:	4924      	ldr	r1, [pc, #144]	; (8007b34 <HAL_ADC_Start+0xb0>)
    __HAL_ADC_ENABLE(hadc);
 8007aa4:	f042 0201 	orr.w	r2, r2, #1
 8007aa8:	609a      	str	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8007aaa:	4a23      	ldr	r2, [pc, #140]	; (8007b38 <HAL_ADC_Start+0xb4>)
 8007aac:	6812      	ldr	r2, [r2, #0]
 8007aae:	fbb2 f2f1 	udiv	r2, r2, r1
 8007ab2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8007ab6:	9201      	str	r2, [sp, #4]
    while(counter != 0U)
 8007ab8:	9a01      	ldr	r2, [sp, #4]
 8007aba:	b112      	cbz	r2, 8007ac2 <HAL_ADC_Start+0x3e>
      counter--;
 8007abc:	9a01      	ldr	r2, [sp, #4]
 8007abe:	3a01      	subs	r2, #1
 8007ac0:	e7f9      	b.n	8007ab6 <HAL_ADC_Start+0x32>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8007ac2:	689a      	ldr	r2, [r3, #8]
 8007ac4:	07d2      	lsls	r2, r2, #31
 8007ac6:	d402      	bmi.n	8007ace <HAL_ADC_Start+0x4a>
  return HAL_OK;
 8007ac8:	2000      	movs	r0, #0
}
 8007aca:	b002      	add	sp, #8
 8007acc:	4770      	bx	lr
    ADC_STATE_CLR_SET(hadc->State,
 8007ace:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8007ad0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007ad4:	f022 0201 	bic.w	r2, r2, #1
 8007ad8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007adc:	6402      	str	r2, [r0, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8007ade:	685a      	ldr	r2, [r3, #4]
 8007ae0:	0551      	lsls	r1, r2, #21
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8007ae2:	bf41      	itttt	mi
 8007ae4:	6c02      	ldrmi	r2, [r0, #64]	; 0x40
 8007ae6:	f422 5240 	bicmi.w	r2, r2, #12288	; 0x3000
 8007aea:	f442 5280 	orrmi.w	r2, r2, #4096	; 0x1000
 8007aee:	6402      	strmi	r2, [r0, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007af0:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8007af2:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8007af6:	bf1c      	itt	ne
 8007af8:	6c42      	ldrne	r2, [r0, #68]	; 0x44
 8007afa:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 8007afe:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_UNLOCK(hadc);
 8007b00:	2200      	movs	r2, #0
 8007b02:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8007b06:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8007b0a:	601a      	str	r2, [r3, #0]
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8007b0c:	4a0b      	ldr	r2, [pc, #44]	; (8007b3c <HAL_ADC_Start+0xb8>)
 8007b0e:	6852      	ldr	r2, [r2, #4]
 8007b10:	06d2      	lsls	r2, r2, #27
 8007b12:	d108      	bne.n	8007b26 <HAL_ADC_Start+0xa2>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8007b14:	6898      	ldr	r0, [r3, #8]
 8007b16:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 8007b1a:	d1d5      	bne.n	8007ac8 <HAL_ADC_Start+0x44>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8007b1c:	689a      	ldr	r2, [r3, #8]
 8007b1e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8007b22:	609a      	str	r2, [r3, #8]
 8007b24:	e7d1      	b.n	8007aca <HAL_ADC_Start+0x46>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8007b26:	4a06      	ldr	r2, [pc, #24]	; (8007b40 <HAL_ADC_Start+0xbc>)
 8007b28:	4293      	cmp	r3, r2
 8007b2a:	d1cd      	bne.n	8007ac8 <HAL_ADC_Start+0x44>
 8007b2c:	e7f2      	b.n	8007b14 <HAL_ADC_Start+0x90>
  __HAL_LOCK(hadc);
 8007b2e:	2002      	movs	r0, #2
 8007b30:	e7cb      	b.n	8007aca <HAL_ADC_Start+0x46>
 8007b32:	bf00      	nop
 8007b34:	000f4240 	.word	0x000f4240
 8007b38:	20000004 	.word	0x20000004
 8007b3c:	40012300 	.word	0x40012300
 8007b40:	40012000 	.word	0x40012000

08007b44 <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 8007b44:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8007b48:	2b01      	cmp	r3, #1
 8007b4a:	d017      	beq.n	8007b7c <HAL_ADC_Stop+0x38>
 8007b4c:	2301      	movs	r3, #1
 8007b4e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_ADC_DISABLE(hadc);
 8007b52:	6803      	ldr	r3, [r0, #0]
 8007b54:	689a      	ldr	r2, [r3, #8]
 8007b56:	f022 0201 	bic.w	r2, r2, #1
 8007b5a:	609a      	str	r2, [r3, #8]
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8007b5c:	689b      	ldr	r3, [r3, #8]
 8007b5e:	07db      	lsls	r3, r3, #31
 8007b60:	d407      	bmi.n	8007b72 <HAL_ADC_Stop+0x2e>
    ADC_STATE_CLR_SET(hadc->State,
 8007b62:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8007b64:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8007b68:	f023 0301 	bic.w	r3, r3, #1
 8007b6c:	f043 0301 	orr.w	r3, r3, #1
 8007b70:	6403      	str	r3, [r0, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8007b72:	2300      	movs	r3, #0
 8007b74:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8007b78:	4618      	mov	r0, r3
 8007b7a:	4770      	bx	lr
  __HAL_LOCK(hadc);
 8007b7c:	2002      	movs	r0, #2
}
 8007b7e:	4770      	bx	lr

08007b80 <HAL_ADC_PollForConversion>:
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8007b80:	6803      	ldr	r3, [r0, #0]
 8007b82:	689a      	ldr	r2, [r3, #8]
{
 8007b84:	b570      	push	{r4, r5, r6, lr}
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8007b86:	0556      	lsls	r6, r2, #21
{
 8007b88:	4604      	mov	r4, r0
 8007b8a:	460d      	mov	r5, r1
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8007b8c:	d502      	bpl.n	8007b94 <HAL_ADC_PollForConversion+0x14>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8007b8e:	689b      	ldr	r3, [r3, #8]
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8007b90:	05d8      	lsls	r0, r3, #23
 8007b92:	d43b      	bmi.n	8007c0c <HAL_ADC_PollForConversion+0x8c>
  tickstart = HAL_GetTick();
 8007b94:	f7ff febc 	bl	8007910 <HAL_GetTick>
 8007b98:	4606      	mov	r6, r0
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8007b9a:	6823      	ldr	r3, [r4, #0]
 8007b9c:	681a      	ldr	r2, [r3, #0]
 8007b9e:	0791      	lsls	r1, r2, #30
 8007ba0:	d410      	bmi.n	8007bc4 <HAL_ADC_PollForConversion+0x44>
    if(Timeout != HAL_MAX_DELAY)
 8007ba2:	1c6a      	adds	r2, r5, #1
 8007ba4:	d0fa      	beq.n	8007b9c <HAL_ADC_PollForConversion+0x1c>
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8007ba6:	b125      	cbz	r5, 8007bb2 <HAL_ADC_PollForConversion+0x32>
 8007ba8:	f7ff feb2 	bl	8007910 <HAL_GetTick>
 8007bac:	1b80      	subs	r0, r0, r6
 8007bae:	4285      	cmp	r5, r0
 8007bb0:	d2f3      	bcs.n	8007b9a <HAL_ADC_PollForConversion+0x1a>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8007bb2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007bb4:	f043 0304 	orr.w	r3, r3, #4
 8007bb8:	6423      	str	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hadc);
 8007bba:	2300      	movs	r3, #0
 8007bbc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_TIMEOUT;
 8007bc0:	2003      	movs	r0, #3
 8007bc2:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8007bc4:	f06f 0212 	mvn.w	r2, #18
 8007bc8:	601a      	str	r2, [r3, #0]
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007bca:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8007bcc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007bd0:	6422      	str	r2, [r4, #64]	; 0x40
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007bd2:	689a      	ldr	r2, [r3, #8]
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007bd4:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8007bd8:	d001      	beq.n	8007bde <HAL_ADC_PollForConversion+0x5e>
  return HAL_OK;
 8007bda:	2000      	movs	r0, #0
 8007bdc:	bd70      	pop	{r4, r5, r6, pc}
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007bde:	69a2      	ldr	r2, [r4, #24]
 8007be0:	2a00      	cmp	r2, #0
 8007be2:	d1fa      	bne.n	8007bda <HAL_ADC_PollForConversion+0x5a>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8007be4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007be6:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 8007bea:	d002      	beq.n	8007bf2 <HAL_ADC_PollForConversion+0x72>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8007bec:	689b      	ldr	r3, [r3, #8]
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8007bee:	055b      	lsls	r3, r3, #21
 8007bf0:	d4f3      	bmi.n	8007bda <HAL_ADC_PollForConversion+0x5a>
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8007bf2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007bf4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007bf8:	6423      	str	r3, [r4, #64]	; 0x40
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007bfa:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8007bfc:	f410 5080 	ands.w	r0, r0, #4096	; 0x1000
 8007c00:	d1eb      	bne.n	8007bda <HAL_ADC_PollForConversion+0x5a>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007c02:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007c04:	f043 0301 	orr.w	r3, r3, #1
 8007c08:	6423      	str	r3, [r4, #64]	; 0x40
 8007c0a:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007c0c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007c0e:	f043 0320 	orr.w	r3, r3, #32
 8007c12:	6423      	str	r3, [r4, #64]	; 0x40
    __HAL_UNLOCK(hadc);
 8007c14:	2300      	movs	r3, #0
 8007c16:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_ERROR;
 8007c1a:	2001      	movs	r0, #1
 8007c1c:	bd70      	pop	{r4, r5, r6, pc}

08007c1e <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 8007c1e:	6803      	ldr	r3, [r0, #0]
 8007c20:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 8007c22:	4770      	bx	lr

08007c24 <HAL_ADC_ConfigChannel>:
{
 8007c24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0U;
 8007c26:	2300      	movs	r3, #0
 8007c28:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8007c2a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8007c2e:	2b01      	cmp	r3, #1
 8007c30:	f000 8082 	beq.w	8007d38 <HAL_ADC_ConfigChannel+0x114>
  if (sConfig->Channel > ADC_CHANNEL_9)
 8007c34:	680d      	ldr	r5, [r1, #0]
 8007c36:	6804      	ldr	r4, [r0, #0]
 8007c38:	688a      	ldr	r2, [r1, #8]
  __HAL_LOCK(hadc);
 8007c3a:	2301      	movs	r3, #1
  if (sConfig->Channel > ADC_CHANNEL_9)
 8007c3c:	2d09      	cmp	r5, #9
  __HAL_LOCK(hadc);
 8007c3e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 8007c42:	b2ae      	uxth	r6, r5
  if (sConfig->Channel > ADC_CHANNEL_9)
 8007c44:	d943      	bls.n	8007cce <HAL_ADC_ConfigChannel+0xaa>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8007c46:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 8007c4a:	68e7      	ldr	r7, [r4, #12]
 8007c4c:	3b1e      	subs	r3, #30
 8007c4e:	f04f 0e07 	mov.w	lr, #7
 8007c52:	fa0e fe03 	lsl.w	lr, lr, r3
 8007c56:	ea27 070e 	bic.w	r7, r7, lr
 8007c5a:	60e7      	str	r7, [r4, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8007c5c:	68e7      	ldr	r7, [r4, #12]
 8007c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8007c62:	433b      	orrs	r3, r7
 8007c64:	60e3      	str	r3, [r4, #12]
  if (sConfig->Rank < 7U)
 8007c66:	684a      	ldr	r2, [r1, #4]
 8007c68:	2a06      	cmp	r2, #6
 8007c6a:	ea4f 0382 	mov.w	r3, r2, lsl #2
 8007c6e:	d83e      	bhi.n	8007cee <HAL_ADC_ConfigChannel+0xca>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8007c70:	4413      	add	r3, r2
 8007c72:	6b67      	ldr	r7, [r4, #52]	; 0x34
 8007c74:	1f59      	subs	r1, r3, #5
 8007c76:	231f      	movs	r3, #31
 8007c78:	408b      	lsls	r3, r1
 8007c7a:	ea27 0303 	bic.w	r3, r7, r3
 8007c7e:	6363      	str	r3, [r4, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8007c80:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8007c82:	fa06 f101 	lsl.w	r1, r6, r1
 8007c86:	4311      	orrs	r1, r2
 8007c88:	6361      	str	r1, [r4, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8007c8a:	4b2c      	ldr	r3, [pc, #176]	; (8007d3c <HAL_ADC_ConfigChannel+0x118>)
 8007c8c:	429c      	cmp	r4, r3
 8007c8e:	d14d      	bne.n	8007d2c <HAL_ADC_ConfigChannel+0x108>
 8007c90:	2d12      	cmp	r5, #18
 8007c92:	d104      	bne.n	8007c9e <HAL_ADC_ConfigChannel+0x7a>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8007c94:	4a2a      	ldr	r2, [pc, #168]	; (8007d40 <HAL_ADC_ConfigChannel+0x11c>)
 8007c96:	6853      	ldr	r3, [r2, #4]
 8007c98:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007c9c:	6053      	str	r3, [r2, #4]
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8007c9e:	f1a5 0310 	sub.w	r3, r5, #16
 8007ca2:	2b01      	cmp	r3, #1
 8007ca4:	d842      	bhi.n	8007d2c <HAL_ADC_ConfigChannel+0x108>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8007ca6:	4a26      	ldr	r2, [pc, #152]	; (8007d40 <HAL_ADC_ConfigChannel+0x11c>)
 8007ca8:	6853      	ldr	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8007caa:	2d10      	cmp	r5, #16
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8007cac:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007cb0:	6053      	str	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8007cb2:	d13b      	bne.n	8007d2c <HAL_ADC_ConfigChannel+0x108>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8007cb4:	4b23      	ldr	r3, [pc, #140]	; (8007d44 <HAL_ADC_ConfigChannel+0x120>)
 8007cb6:	4a24      	ldr	r2, [pc, #144]	; (8007d48 <HAL_ADC_ConfigChannel+0x124>)
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	fbb3 f2f2 	udiv	r2, r3, r2
 8007cbe:	230a      	movs	r3, #10
 8007cc0:	4353      	muls	r3, r2
 8007cc2:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8007cc4:	9b01      	ldr	r3, [sp, #4]
 8007cc6:	b38b      	cbz	r3, 8007d2c <HAL_ADC_ConfigChannel+0x108>
        counter--;
 8007cc8:	9b01      	ldr	r3, [sp, #4]
 8007cca:	3b01      	subs	r3, #1
 8007ccc:	e7f9      	b.n	8007cc2 <HAL_ADC_ConfigChannel+0x9e>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8007cce:	6927      	ldr	r7, [r4, #16]
 8007cd0:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8007cd4:	f04f 0e07 	mov.w	lr, #7
 8007cd8:	fa0e fe03 	lsl.w	lr, lr, r3
 8007cdc:	ea27 070e 	bic.w	r7, r7, lr
 8007ce0:	6127      	str	r7, [r4, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8007ce2:	6927      	ldr	r7, [r4, #16]
 8007ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8007ce8:	433b      	orrs	r3, r7
 8007cea:	6123      	str	r3, [r4, #16]
 8007cec:	e7bb      	b.n	8007c66 <HAL_ADC_ConfigChannel+0x42>
  else if (sConfig->Rank < 13U)
 8007cee:	2a0c      	cmp	r2, #12
 8007cf0:	d80e      	bhi.n	8007d10 <HAL_ADC_ConfigChannel+0xec>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8007cf2:	4413      	add	r3, r2
 8007cf4:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8007cf6:	f1a3 0223 	sub.w	r2, r3, #35	; 0x23
 8007cfa:	231f      	movs	r3, #31
 8007cfc:	4093      	lsls	r3, r2
 8007cfe:	ea21 0303 	bic.w	r3, r1, r3
 8007d02:	6323      	str	r3, [r4, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8007d04:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007d06:	fa06 f202 	lsl.w	r2, r6, r2
 8007d0a:	431a      	orrs	r2, r3
 8007d0c:	6322      	str	r2, [r4, #48]	; 0x30
 8007d0e:	e7bc      	b.n	8007c8a <HAL_ADC_ConfigChannel+0x66>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8007d10:	4413      	add	r3, r2
 8007d12:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8007d14:	3b41      	subs	r3, #65	; 0x41
 8007d16:	221f      	movs	r2, #31
 8007d18:	409a      	lsls	r2, r3
 8007d1a:	ea21 0202 	bic.w	r2, r1, r2
 8007d1e:	62e2      	str	r2, [r4, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8007d20:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8007d22:	fa06 f103 	lsl.w	r1, r6, r3
 8007d26:	4311      	orrs	r1, r2
 8007d28:	62e1      	str	r1, [r4, #44]	; 0x2c
 8007d2a:	e7ae      	b.n	8007c8a <HAL_ADC_ConfigChannel+0x66>
  __HAL_UNLOCK(hadc);
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8007d32:	4618      	mov	r0, r3
}
 8007d34:	b003      	add	sp, #12
 8007d36:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(hadc);
 8007d38:	2002      	movs	r0, #2
 8007d3a:	e7fb      	b.n	8007d34 <HAL_ADC_ConfigChannel+0x110>
 8007d3c:	40012000 	.word	0x40012000
 8007d40:	40012300 	.word	0x40012300
 8007d44:	20000004 	.word	0x20000004
 8007d48:	000f4240 	.word	0x000f4240

08007d4c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007d4c:	4a07      	ldr	r2, [pc, #28]	; (8007d6c <HAL_NVIC_SetPriorityGrouping+0x20>)
 8007d4e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007d50:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8007d54:	041b      	lsls	r3, r3, #16
 8007d56:	0c1b      	lsrs	r3, r3, #16
 8007d58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8007d5c:	0200      	lsls	r0, r0, #8
 8007d5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d62:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8007d66:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8007d68:	60d3      	str	r3, [r2, #12]
 8007d6a:	4770      	bx	lr
 8007d6c:	e000ed00 	.word	0xe000ed00

08007d70 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007d70:	4b17      	ldr	r3, [pc, #92]	; (8007dd0 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007d72:	b530      	push	{r4, r5, lr}
 8007d74:	68dc      	ldr	r4, [r3, #12]
 8007d76:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007d7a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007d7e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007d80:	2b04      	cmp	r3, #4
 8007d82:	bf28      	it	cs
 8007d84:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007d86:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007d88:	f04f 0501 	mov.w	r5, #1
 8007d8c:	fa05 f303 	lsl.w	r3, r5, r3
 8007d90:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007d94:	bf8c      	ite	hi
 8007d96:	3c03      	subhi	r4, #3
 8007d98:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007d9a:	4019      	ands	r1, r3
 8007d9c:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007d9e:	fa05 f404 	lsl.w	r4, r5, r4
 8007da2:	3c01      	subs	r4, #1
 8007da4:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8007da6:	2800      	cmp	r0, #0
         );
 8007da8:	ea42 0201 	orr.w	r2, r2, r1
 8007dac:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007db0:	bfaf      	iteee	ge
 8007db2:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007db6:	f000 000f 	andlt.w	r0, r0, #15
 8007dba:	4b06      	ldrlt	r3, [pc, #24]	; (8007dd4 <HAL_NVIC_SetPriority+0x64>)
 8007dbc:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007dbe:	bfa5      	ittet	ge
 8007dc0:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8007dc4:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007dc6:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007dc8:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8007dcc:	bd30      	pop	{r4, r5, pc}
 8007dce:	bf00      	nop
 8007dd0:	e000ed00 	.word	0xe000ed00
 8007dd4:	e000ed14 	.word	0xe000ed14

08007dd8 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8007dd8:	0942      	lsrs	r2, r0, #5
 8007dda:	2301      	movs	r3, #1
 8007ddc:	f000 001f 	and.w	r0, r0, #31
 8007de0:	fa03 f000 	lsl.w	r0, r3, r0
 8007de4:	4b01      	ldr	r3, [pc, #4]	; (8007dec <HAL_NVIC_EnableIRQ+0x14>)
 8007de6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8007dea:	4770      	bx	lr
 8007dec:	e000e100 	.word	0xe000e100

08007df0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007df0:	3801      	subs	r0, #1
 8007df2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8007df6:	d20a      	bcs.n	8007e0e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007df8:	4b06      	ldr	r3, [pc, #24]	; (8007e14 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007dfa:	4a07      	ldr	r2, [pc, #28]	; (8007e18 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007dfc:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007dfe:	21f0      	movs	r1, #240	; 0xf0
 8007e00:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007e04:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007e06:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007e08:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007e0a:	601a      	str	r2, [r3, #0]
 8007e0c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8007e0e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8007e10:	4770      	bx	lr
 8007e12:	bf00      	nop
 8007e14:	e000e010 	.word	0xe000e010
 8007e18:	e000ed00 	.word	0xe000ed00

08007e1c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8007e1c:	4b04      	ldr	r3, [pc, #16]	; (8007e30 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8007e1e:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8007e20:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8007e22:	bf0c      	ite	eq
 8007e24:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8007e28:	f022 0204 	bicne.w	r2, r2, #4
 8007e2c:	601a      	str	r2, [r3, #0]
 8007e2e:	4770      	bx	lr
 8007e30:	e000e010 	.word	0xe000e010

08007e34 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8007e34:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8007e36:	f7fc fd4b 	bl	80048d0 <HAL_SYSTICK_Callback>
 8007e3a:	bd08      	pop	{r3, pc}

08007e3c <_ZL23DMA_CalcBaseAndBitshiftP19__DMA_HandleTypeDef>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007e3c:	6803      	ldr	r3, [r0, #0]
 8007e3e:	b2da      	uxtb	r2, r3
 8007e40:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007e44:	f023 0303 	bic.w	r3, r3, #3
 8007e48:	2118      	movs	r1, #24
 8007e4a:	3a10      	subs	r2, #16
 8007e4c:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8007e50:	4904      	ldr	r1, [pc, #16]	; (8007e64 <_ZL23DMA_CalcBaseAndBitshiftP19__DMA_HandleTypeDef+0x28>)
  
  if (stream_number > 3U)
 8007e52:	2a03      	cmp	r2, #3
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8007e54:	bf88      	it	hi
 8007e56:	3304      	addhi	r3, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8007e58:	5c89      	ldrb	r1, [r1, r2]
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8007e5a:	6583      	str	r3, [r0, #88]	; 0x58
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8007e5c:	65c1      	str	r1, [r0, #92]	; 0x5c
  }
  
  return hdma->StreamBaseAddress;
}
 8007e5e:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8007e60:	4770      	bx	lr
 8007e62:	bf00      	nop
 8007e64:	0800cb64 	.word	0x0800cb64

08007e68 <HAL_DMA_Init>:
{
 8007e68:	b570      	push	{r4, r5, r6, lr}
 8007e6a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8007e6c:	f7ff fd50 	bl	8007910 <HAL_GetTick>
 8007e70:	4605      	mov	r5, r0
  if(hdma == NULL)
 8007e72:	2c00      	cmp	r4, #0
 8007e74:	d071      	beq.n	8007f5a <HAL_DMA_Init+0xf2>
  __HAL_UNLOCK(hdma);
 8007e76:	2300      	movs	r3, #0
 8007e78:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 8007e7c:	6822      	ldr	r2, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 8007e7e:	2302      	movs	r3, #2
 8007e80:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8007e84:	6813      	ldr	r3, [r2, #0]
 8007e86:	f023 0301 	bic.w	r3, r3, #1
 8007e8a:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007e8c:	6821      	ldr	r1, [r4, #0]
 8007e8e:	680b      	ldr	r3, [r1, #0]
 8007e90:	07d8      	lsls	r0, r3, #31
 8007e92:	d50a      	bpl.n	8007eaa <HAL_DMA_Init+0x42>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007e94:	f7ff fd3c 	bl	8007910 <HAL_GetTick>
 8007e98:	1b40      	subs	r0, r0, r5
 8007e9a:	2805      	cmp	r0, #5
 8007e9c:	d9f6      	bls.n	8007e8c <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007e9e:	2320      	movs	r3, #32
 8007ea0:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007ea2:	2003      	movs	r0, #3
        hdma->State = HAL_DMA_STATE_READY;
 8007ea4:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8007ea8:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 8007eaa:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007eac:	4d2c      	ldr	r5, [pc, #176]	; (8007f60 <HAL_DMA_Init+0xf8>)
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007eae:	6862      	ldr	r2, [r4, #4]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007eb0:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007eb2:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007eb4:	68a3      	ldr	r3, [r4, #8]
 8007eb6:	4313      	orrs	r3, r2
 8007eb8:	68e2      	ldr	r2, [r4, #12]
 8007eba:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007ebc:	6922      	ldr	r2, [r4, #16]
 8007ebe:	4313      	orrs	r3, r2
 8007ec0:	6962      	ldr	r2, [r4, #20]
 8007ec2:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007ec4:	69e2      	ldr	r2, [r4, #28]
 8007ec6:	4303      	orrs	r3, r0
 8007ec8:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 8007eca:	6a22      	ldr	r2, [r4, #32]
 8007ecc:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007ece:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007ed0:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007ed2:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007ed6:	bf01      	itttt	eq
 8007ed8:	6b26      	ldreq	r6, [r4, #48]	; 0x30
 8007eda:	6ae5      	ldreq	r5, [r4, #44]	; 0x2c
 8007edc:	4335      	orreq	r5, r6
 8007ede:	432b      	orreq	r3, r5
  hdma->Instance->CR = tmp;  
 8007ee0:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 8007ee2:	694b      	ldr	r3, [r1, #20]
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007ee4:	2a04      	cmp	r2, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007ee6:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 8007eea:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007eee:	d10b      	bne.n	8007f08 <HAL_DMA_Init+0xa0>
    tmp |= hdma->Init.FIFOThreshold;
 8007ef0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007ef2:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 8007ef4:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007ef6:	b13d      	cbz	r5, 8007f08 <HAL_DMA_Init+0xa0>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007ef8:	b9a0      	cbnz	r0, 8007f24 <HAL_DMA_Init+0xbc>
  {
    switch (tmp)
 8007efa:	2a01      	cmp	r2, #1
 8007efc:	d022      	beq.n	8007f44 <HAL_DMA_Init+0xdc>
 8007efe:	d301      	bcc.n	8007f04 <HAL_DMA_Init+0x9c>
 8007f00:	2a02      	cmp	r2, #2
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007f02:	d101      	bne.n	8007f08 <HAL_DMA_Init+0xa0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007f04:	01ea      	lsls	r2, r5, #7
 8007f06:	d420      	bmi.n	8007f4a <HAL_DMA_Init+0xe2>
  hdma->Instance->FCR = tmp;
 8007f08:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007f0a:	4620      	mov	r0, r4
 8007f0c:	f7ff ff96 	bl	8007e3c <_ZL23DMA_CalcBaseAndBitshiftP19__DMA_HandleTypeDef>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007f10:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8007f12:	233f      	movs	r3, #63	; 0x3f
 8007f14:	4093      	lsls	r3, r2
 8007f16:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007f18:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8007f1a:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007f1c:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8007f1e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8007f22:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007f24:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8007f28:	d113      	bne.n	8007f52 <HAL_DMA_Init+0xea>
    switch (tmp)
 8007f2a:	2a03      	cmp	r2, #3
 8007f2c:	d8ec      	bhi.n	8007f08 <HAL_DMA_Init+0xa0>
 8007f2e:	a001      	add	r0, pc, #4	; (adr r0, 8007f34 <HAL_DMA_Init+0xcc>)
 8007f30:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8007f34:	08007f4b 	.word	0x08007f4b
 8007f38:	08007f05 	.word	0x08007f05
 8007f3c:	08007f4b 	.word	0x08007f4b
 8007f40:	08007f45 	.word	0x08007f45
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007f44:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8007f48:	d1de      	bne.n	8007f08 <HAL_DMA_Init+0xa0>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007f4a:	2340      	movs	r3, #64	; 0x40
 8007f4c:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8007f4e:	2001      	movs	r0, #1
 8007f50:	e7a8      	b.n	8007ea4 <HAL_DMA_Init+0x3c>
    switch (tmp)
 8007f52:	2a02      	cmp	r2, #2
 8007f54:	d9f9      	bls.n	8007f4a <HAL_DMA_Init+0xe2>
 8007f56:	2a03      	cmp	r2, #3
 8007f58:	e7d3      	b.n	8007f02 <HAL_DMA_Init+0x9a>
    return HAL_ERROR;
 8007f5a:	2001      	movs	r0, #1
 8007f5c:	bd70      	pop	{r4, r5, r6, pc}
 8007f5e:	bf00      	nop
 8007f60:	f010803f 	.word	0xf010803f

08007f64 <HAL_DMA_Start_IT>:
{
 8007f64:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 8007f66:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 8007f6a:	2c01      	cmp	r4, #1
 8007f6c:	d036      	beq.n	8007fdc <HAL_DMA_Start_IT+0x78>
 8007f6e:	2401      	movs	r4, #1
 8007f70:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8007f74:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007f78:	6d86      	ldr	r6, [r0, #88]	; 0x58
  if(HAL_DMA_STATE_READY == hdma->State)
 8007f7a:	2c01      	cmp	r4, #1
 8007f7c:	f04f 0500 	mov.w	r5, #0
 8007f80:	f04f 0402 	mov.w	r4, #2
 8007f84:	d128      	bne.n	8007fd8 <HAL_DMA_Start_IT+0x74>
    hdma->State = HAL_DMA_STATE_BUSY;
 8007f86:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007f8a:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007f8c:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007f8e:	6825      	ldr	r5, [r4, #0]
 8007f90:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 8007f94:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 8007f96:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007f98:	6883      	ldr	r3, [r0, #8]
 8007f9a:	2b40      	cmp	r3, #64	; 0x40
    hdma->Instance->PAR = DstAddress;
 8007f9c:	bf0e      	itee	eq
 8007f9e:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->PAR = SrcAddress;
 8007fa0:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 8007fa2:	60e2      	strne	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007fa4:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
    hdma->Instance->M0AR = SrcAddress;
 8007fa6:	bf08      	it	eq
 8007fa8:	60e1      	streq	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007faa:	233f      	movs	r3, #63	; 0x3f
 8007fac:	4093      	lsls	r3, r2
 8007fae:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007fb0:	6823      	ldr	r3, [r4, #0]
 8007fb2:	f043 0316 	orr.w	r3, r3, #22
 8007fb6:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8007fb8:	6963      	ldr	r3, [r4, #20]
 8007fba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fbe:	6163      	str	r3, [r4, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 8007fc0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8007fc2:	b11b      	cbz	r3, 8007fcc <HAL_DMA_Start_IT+0x68>
      hdma->Instance->CR  |= DMA_IT_HT;
 8007fc4:	6823      	ldr	r3, [r4, #0]
 8007fc6:	f043 0308 	orr.w	r3, r3, #8
 8007fca:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8007fcc:	6823      	ldr	r3, [r4, #0]
 8007fce:	f043 0301 	orr.w	r3, r3, #1
 8007fd2:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007fd4:	2000      	movs	r0, #0
 8007fd6:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hdma);	  
 8007fd8:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  __HAL_LOCK(hdma);
 8007fdc:	2002      	movs	r0, #2
}
 8007fde:	bd70      	pop	{r4, r5, r6, pc}

08007fe0 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007fe0:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8007fe4:	2b02      	cmp	r3, #2
 8007fe6:	d003      	beq.n	8007ff0 <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007fe8:	2380      	movs	r3, #128	; 0x80
 8007fea:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8007fec:	2001      	movs	r0, #1
 8007fee:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 8007ff0:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8007ff2:	2305      	movs	r3, #5
 8007ff4:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8007ff8:	6813      	ldr	r3, [r2, #0]
 8007ffa:	f023 0301 	bic.w	r3, r3, #1
 8007ffe:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8008000:	2000      	movs	r0, #0
}
 8008002:	4770      	bx	lr

08008004 <HAL_DMA_IRQHandler>:
{
 8008004:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
 8008006:	2300      	movs	r3, #0
 8008008:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 800800a:	4b5a      	ldr	r3, [pc, #360]	; (8008174 <HAL_DMA_IRQHandler+0x170>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800800c:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 800800e:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8008010:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 8008012:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8008014:	2208      	movs	r2, #8
 8008016:	409a      	lsls	r2, r3
 8008018:	4216      	tst	r6, r2
{
 800801a:	4604      	mov	r4, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800801c:	d00c      	beq.n	8008038 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800801e:	6801      	ldr	r1, [r0, #0]
 8008020:	6808      	ldr	r0, [r1, #0]
 8008022:	0740      	lsls	r0, r0, #29
 8008024:	d508      	bpl.n	8008038 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8008026:	6808      	ldr	r0, [r1, #0]
 8008028:	f020 0004 	bic.w	r0, r0, #4
 800802c:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800802e:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008030:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8008032:	f042 0201 	orr.w	r2, r2, #1
 8008036:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8008038:	2201      	movs	r2, #1
 800803a:	409a      	lsls	r2, r3
 800803c:	4216      	tst	r6, r2
 800803e:	d008      	beq.n	8008052 <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8008040:	6821      	ldr	r1, [r4, #0]
 8008042:	6949      	ldr	r1, [r1, #20]
 8008044:	0609      	lsls	r1, r1, #24
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8008046:	bf41      	itttt	mi
 8008048:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800804a:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 800804c:	f042 0202 	orrmi.w	r2, r2, #2
 8008050:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8008052:	2204      	movs	r2, #4
 8008054:	409a      	lsls	r2, r3
 8008056:	4216      	tst	r6, r2
 8008058:	d008      	beq.n	800806c <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800805a:	6821      	ldr	r1, [r4, #0]
 800805c:	6809      	ldr	r1, [r1, #0]
 800805e:	0788      	lsls	r0, r1, #30
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8008060:	bf41      	itttt	mi
 8008062:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8008064:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 8008066:	f042 0204 	orrmi.w	r2, r2, #4
 800806a:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800806c:	2210      	movs	r2, #16
 800806e:	409a      	lsls	r2, r3
 8008070:	4216      	tst	r6, r2
 8008072:	d010      	beq.n	8008096 <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8008074:	6823      	ldr	r3, [r4, #0]
 8008076:	6819      	ldr	r1, [r3, #0]
 8008078:	0709      	lsls	r1, r1, #28
 800807a:	d50c      	bpl.n	8008096 <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800807c:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800807e:	681a      	ldr	r2, [r3, #0]
 8008080:	0350      	lsls	r0, r2, #13
 8008082:	d535      	bpl.n	80080f0 <HAL_DMA_IRQHandler+0xec>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	0319      	lsls	r1, r3, #12
 8008088:	d401      	bmi.n	800808e <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 800808a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800808c:	e000      	b.n	8008090 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 800808e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 8008090:	b10b      	cbz	r3, 8008096 <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 8008092:	4620      	mov	r0, r4
 8008094:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8008096:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8008098:	2220      	movs	r2, #32
 800809a:	408a      	lsls	r2, r1
 800809c:	4216      	tst	r6, r2
 800809e:	d038      	beq.n	8008112 <HAL_DMA_IRQHandler+0x10e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80080a0:	6823      	ldr	r3, [r4, #0]
 80080a2:	6818      	ldr	r0, [r3, #0]
 80080a4:	06c6      	lsls	r6, r0, #27
 80080a6:	d534      	bpl.n	8008112 <HAL_DMA_IRQHandler+0x10e>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80080a8:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80080aa:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 80080ae:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80080b0:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80080b2:	d125      	bne.n	8008100 <HAL_DMA_IRQHandler+0xfc>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80080b4:	f022 0216 	bic.w	r2, r2, #22
 80080b8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80080ba:	695a      	ldr	r2, [r3, #20]
 80080bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80080c0:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80080c2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80080c4:	b90a      	cbnz	r2, 80080ca <HAL_DMA_IRQHandler+0xc6>
 80080c6:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80080c8:	b11a      	cbz	r2, 80080d2 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80080ca:	681a      	ldr	r2, [r3, #0]
 80080cc:	f022 0208 	bic.w	r2, r2, #8
 80080d0:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80080d2:	233f      	movs	r3, #63	; 0x3f
 80080d4:	408b      	lsls	r3, r1
 80080d6:	60ab      	str	r3, [r5, #8]
        __HAL_UNLOCK(hdma);
 80080d8:	2300      	movs	r3, #0
 80080da:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 80080de:	2301      	movs	r3, #1
 80080e0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 80080e4:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 80080e6:	b10b      	cbz	r3, 80080ec <HAL_DMA_IRQHandler+0xe8>
      hdma->XferErrorCallback(hdma);
 80080e8:	4620      	mov	r0, r4
 80080ea:	4798      	blx	r3
}
 80080ec:	b003      	add	sp, #12
 80080ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80080f0:	681a      	ldr	r2, [r3, #0]
 80080f2:	05d2      	lsls	r2, r2, #23
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80080f4:	bf5e      	ittt	pl
 80080f6:	681a      	ldrpl	r2, [r3, #0]
 80080f8:	f022 0208 	bicpl.w	r2, r2, #8
 80080fc:	601a      	strpl	r2, [r3, #0]
 80080fe:	e7c4      	b.n	800808a <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008100:	0350      	lsls	r0, r2, #13
 8008102:	d528      	bpl.n	8008156 <HAL_DMA_IRQHandler+0x152>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	0319      	lsls	r1, r3, #12
 8008108:	d432      	bmi.n	8008170 <HAL_DMA_IRQHandler+0x16c>
          if(hdma->XferM1CpltCallback != NULL)
 800810a:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 800810c:	b10b      	cbz	r3, 8008112 <HAL_DMA_IRQHandler+0x10e>
          hdma->XferCpltCallback(hdma);
 800810e:	4620      	mov	r0, r4
 8008110:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008112:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8008114:	2b00      	cmp	r3, #0
 8008116:	d0e9      	beq.n	80080ec <HAL_DMA_IRQHandler+0xe8>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8008118:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800811a:	07da      	lsls	r2, r3, #31
 800811c:	d519      	bpl.n	8008152 <HAL_DMA_IRQHandler+0x14e>
      hdma->State = HAL_DMA_STATE_ABORT;
 800811e:	2305      	movs	r3, #5
      __HAL_DMA_DISABLE(hdma);
 8008120:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 8008122:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8008126:	6813      	ldr	r3, [r2, #0]
 8008128:	f023 0301 	bic.w	r3, r3, #1
 800812c:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 800812e:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8008132:	fbb7 f7f3 	udiv	r7, r7, r3
        if (++count > timeout)
 8008136:	9b01      	ldr	r3, [sp, #4]
 8008138:	3301      	adds	r3, #1
 800813a:	429f      	cmp	r7, r3
 800813c:	9301      	str	r3, [sp, #4]
 800813e:	d302      	bcc.n	8008146 <HAL_DMA_IRQHandler+0x142>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8008140:	6813      	ldr	r3, [r2, #0]
      do
 8008142:	07db      	lsls	r3, r3, #31
 8008144:	d4f7      	bmi.n	8008136 <HAL_DMA_IRQHandler+0x132>
      __HAL_UNLOCK(hdma);
 8008146:	2300      	movs	r3, #0
 8008148:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 800814c:	2301      	movs	r3, #1
 800814e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8008152:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8008154:	e7c7      	b.n	80080e6 <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008156:	681a      	ldr	r2, [r3, #0]
 8008158:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 800815c:	d108      	bne.n	8008170 <HAL_DMA_IRQHandler+0x16c>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800815e:	6819      	ldr	r1, [r3, #0]
 8008160:	f021 0110 	bic.w	r1, r1, #16
 8008164:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8008166:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 8008168:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 800816c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8008170:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008172:	e7cb      	b.n	800810c <HAL_DMA_IRQHandler+0x108>
 8008174:	20000004 	.word	0x20000004

08008178 <_ZL24FLASH_Program_DoubleWordmy>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8008178:	4908      	ldr	r1, [pc, #32]	; (800819c <_ZL24FLASH_Program_DoubleWordmy+0x24>)
{
 800817a:	b510      	push	{r4, lr}
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800817c:	690c      	ldr	r4, [r1, #16]
 800817e:	f424 7440 	bic.w	r4, r4, #768	; 0x300
 8008182:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8008184:	690c      	ldr	r4, [r1, #16]
 8008186:	f444 7440 	orr.w	r4, r4, #768	; 0x300
 800818a:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_CR_PG;
 800818c:	690c      	ldr	r4, [r1, #16]
 800818e:	f044 0401 	orr.w	r4, r4, #1
 8008192:	610c      	str	r4, [r1, #16]

  /* Program the double-word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8008194:	6002      	str	r2, [r0, #0]
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8008196:	6043      	str	r3, [r0, #4]
 8008198:	bd10      	pop	{r4, pc}
 800819a:	bf00      	nop
 800819c:	40023c00 	.word	0x40023c00

080081a0 <_ZL18FLASH_Program_Wordmm>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80081a0:	4b07      	ldr	r3, [pc, #28]	; (80081c0 <_ZL18FLASH_Program_Wordmm+0x20>)
 80081a2:	691a      	ldr	r2, [r3, #16]
 80081a4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80081a8:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80081aa:	691a      	ldr	r2, [r3, #16]
 80081ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80081b0:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 80081b2:	691a      	ldr	r2, [r3, #16]
 80081b4:	f042 0201 	orr.w	r2, r2, #1
 80081b8:	611a      	str	r2, [r3, #16]

  *(__IO uint32_t*)Address = Data;
 80081ba:	6001      	str	r1, [r0, #0]
 80081bc:	4770      	bx	lr
 80081be:	bf00      	nop
 80081c0:	40023c00 	.word	0x40023c00

080081c4 <_ZL22FLASH_Program_HalfWordmt>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80081c4:	4b07      	ldr	r3, [pc, #28]	; (80081e4 <_ZL22FLASH_Program_HalfWordmt+0x20>)
 80081c6:	691a      	ldr	r2, [r3, #16]
 80081c8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80081cc:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80081ce:	691a      	ldr	r2, [r3, #16]
 80081d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80081d4:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 80081d6:	691a      	ldr	r2, [r3, #16]
 80081d8:	f042 0201 	orr.w	r2, r2, #1
 80081dc:	611a      	str	r2, [r3, #16]

  *(__IO uint16_t*)Address = Data;
 80081de:	8001      	strh	r1, [r0, #0]
 80081e0:	4770      	bx	lr
 80081e2:	bf00      	nop
 80081e4:	40023c00 	.word	0x40023c00

080081e8 <_ZL18FLASH_SetErrorCodev>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80081e8:	4b20      	ldr	r3, [pc, #128]	; (800826c <_ZL18FLASH_SetErrorCodev+0x84>)
 80081ea:	68da      	ldr	r2, [r3, #12]
 80081ec:	06d0      	lsls	r0, r2, #27
 80081ee:	d506      	bpl.n	80081fe <_ZL18FLASH_SetErrorCodev+0x16>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80081f0:	491f      	ldr	r1, [pc, #124]	; (8008270 <_ZL18FLASH_SetErrorCodev+0x88>)
 80081f2:	69ca      	ldr	r2, [r1, #28]
 80081f4:	f042 0210 	orr.w	r2, r2, #16
 80081f8:	61ca      	str	r2, [r1, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80081fa:	2210      	movs	r2, #16
 80081fc:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80081fe:	68da      	ldr	r2, [r3, #12]
 8008200:	0691      	lsls	r1, r2, #26
 8008202:	d506      	bpl.n	8008212 <_ZL18FLASH_SetErrorCodev+0x2a>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8008204:	491a      	ldr	r1, [pc, #104]	; (8008270 <_ZL18FLASH_SetErrorCodev+0x88>)
 8008206:	69ca      	ldr	r2, [r1, #28]
 8008208:	f042 0208 	orr.w	r2, r2, #8
 800820c:	61ca      	str	r2, [r1, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800820e:	2220      	movs	r2, #32
 8008210:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8008212:	4b16      	ldr	r3, [pc, #88]	; (800826c <_ZL18FLASH_SetErrorCodev+0x84>)
 8008214:	68da      	ldr	r2, [r3, #12]
 8008216:	0652      	lsls	r2, r2, #25
 8008218:	d506      	bpl.n	8008228 <_ZL18FLASH_SetErrorCodev+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800821a:	4915      	ldr	r1, [pc, #84]	; (8008270 <_ZL18FLASH_SetErrorCodev+0x88>)
 800821c:	69ca      	ldr	r2, [r1, #28]
 800821e:	f042 0204 	orr.w	r2, r2, #4
 8008222:	61ca      	str	r2, [r1, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8008224:	2240      	movs	r2, #64	; 0x40
 8008226:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8008228:	68da      	ldr	r2, [r3, #12]
 800822a:	0610      	lsls	r0, r2, #24
 800822c:	d506      	bpl.n	800823c <_ZL18FLASH_SetErrorCodev+0x54>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800822e:	4910      	ldr	r1, [pc, #64]	; (8008270 <_ZL18FLASH_SetErrorCodev+0x88>)
 8008230:	69ca      	ldr	r2, [r1, #28]
 8008232:	f042 0202 	orr.w	r2, r2, #2
 8008236:	61ca      	str	r2, [r1, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8008238:	2280      	movs	r2, #128	; 0x80
 800823a:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 800823c:	4b0b      	ldr	r3, [pc, #44]	; (800826c <_ZL18FLASH_SetErrorCodev+0x84>)
 800823e:	68da      	ldr	r2, [r3, #12]
 8008240:	05d1      	lsls	r1, r2, #23
 8008242:	d507      	bpl.n	8008254 <_ZL18FLASH_SetErrorCodev+0x6c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8008244:	490a      	ldr	r1, [pc, #40]	; (8008270 <_ZL18FLASH_SetErrorCodev+0x88>)
 8008246:	69ca      	ldr	r2, [r1, #28]
 8008248:	f042 0201 	orr.w	r2, r2, #1
 800824c:	61ca      	str	r2, [r1, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 800824e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008252:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8008254:	68da      	ldr	r2, [r3, #12]
 8008256:	0792      	lsls	r2, r2, #30
 8008258:	d506      	bpl.n	8008268 <_ZL18FLASH_SetErrorCodev+0x80>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800825a:	4905      	ldr	r1, [pc, #20]	; (8008270 <_ZL18FLASH_SetErrorCodev+0x88>)
 800825c:	69ca      	ldr	r2, [r1, #28]
 800825e:	f042 0220 	orr.w	r2, r2, #32
 8008262:	61ca      	str	r2, [r1, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8008264:	2202      	movs	r2, #2
 8008266:	60da      	str	r2, [r3, #12]
 8008268:	4770      	bx	lr
 800826a:	bf00      	nop
 800826c:	40023c00 	.word	0x40023c00
 8008270:	20003cf0 	.word	0x20003cf0

08008274 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8008274:	4b06      	ldr	r3, [pc, #24]	; (8008290 <HAL_FLASH_Unlock+0x1c>)
 8008276:	691a      	ldr	r2, [r3, #16]
 8008278:	2a00      	cmp	r2, #0
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800827a:	bfbf      	itttt	lt
 800827c:	4a05      	ldrlt	r2, [pc, #20]	; (8008294 <HAL_FLASH_Unlock+0x20>)
 800827e:	605a      	strlt	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8008280:	f102 3288 	addlt.w	r2, r2, #2290649224	; 0x88888888
 8008284:	605a      	strlt	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8008286:	bfba      	itte	lt
 8008288:	6918      	ldrlt	r0, [r3, #16]
  HAL_StatusTypeDef status = HAL_OK;
 800828a:	0fc0      	lsrlt	r0, r0, #31
 800828c:	2000      	movge	r0, #0
}
 800828e:	4770      	bx	lr
 8008290:	40023c00 	.word	0x40023c00
 8008294:	45670123 	.word	0x45670123

08008298 <HAL_FLASH_Lock>:
  FLASH->CR |= FLASH_CR_LOCK;
 8008298:	4a03      	ldr	r2, [pc, #12]	; (80082a8 <HAL_FLASH_Lock+0x10>)
 800829a:	6913      	ldr	r3, [r2, #16]
 800829c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80082a0:	6113      	str	r3, [r2, #16]
}
 80082a2:	2000      	movs	r0, #0
 80082a4:	4770      	bx	lr
 80082a6:	bf00      	nop
 80082a8:	40023c00 	.word	0x40023c00

080082ac <FLASH_WaitForLastOperation>:
{ 
 80082ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80082ae:	4b12      	ldr	r3, [pc, #72]	; (80082f8 <FLASH_WaitForLastOperation+0x4c>)
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80082b0:	4c12      	ldr	r4, [pc, #72]	; (80082fc <FLASH_WaitForLastOperation+0x50>)
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80082b2:	2200      	movs	r2, #0
{ 
 80082b4:	4605      	mov	r5, r0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80082b6:	61da      	str	r2, [r3, #28]
  tickstart = HAL_GetTick();
 80082b8:	f7ff fb2a 	bl	8007910 <HAL_GetTick>
 80082bc:	4626      	mov	r6, r4
 80082be:	4607      	mov	r7, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80082c0:	68e3      	ldr	r3, [r4, #12]
 80082c2:	03d9      	lsls	r1, r3, #15
 80082c4:	d50a      	bpl.n	80082dc <FLASH_WaitForLastOperation+0x30>
    if(Timeout != HAL_MAX_DELAY)
 80082c6:	1c6a      	adds	r2, r5, #1
 80082c8:	d0fa      	beq.n	80082c0 <FLASH_WaitForLastOperation+0x14>
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80082ca:	b90d      	cbnz	r5, 80082d0 <FLASH_WaitForLastOperation+0x24>
        return HAL_TIMEOUT;
 80082cc:	2003      	movs	r0, #3
 80082ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80082d0:	f7ff fb1e 	bl	8007910 <HAL_GetTick>
 80082d4:	1bc0      	subs	r0, r0, r7
 80082d6:	4285      	cmp	r5, r0
 80082d8:	d3f8      	bcc.n	80082cc <FLASH_WaitForLastOperation+0x20>
 80082da:	e7f1      	b.n	80082c0 <FLASH_WaitForLastOperation+0x14>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80082dc:	68e3      	ldr	r3, [r4, #12]
 80082de:	07db      	lsls	r3, r3, #31
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80082e0:	bf44      	itt	mi
 80082e2:	2301      	movmi	r3, #1
 80082e4:	60e3      	strmi	r3, [r4, #12]
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80082e6:	68f0      	ldr	r0, [r6, #12]
 80082e8:	f410 70f9 	ands.w	r0, r0, #498	; 0x1f2
 80082ec:	d002      	beq.n	80082f4 <FLASH_WaitForLastOperation+0x48>
    FLASH_SetErrorCode();
 80082ee:	f7ff ff7b 	bl	80081e8 <_ZL18FLASH_SetErrorCodev>
    return HAL_ERROR;
 80082f2:	2001      	movs	r0, #1
}  
 80082f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80082f6:	bf00      	nop
 80082f8:	20003cf0 	.word	0x20003cf0
 80082fc:	40023c00 	.word	0x40023c00

08008300 <HAL_FLASH_Program>:
{
 8008300:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(&pFlash);
 8008304:	4d20      	ldr	r5, [pc, #128]	; (8008388 <HAL_FLASH_Program+0x88>)
{
 8008306:	4698      	mov	r8, r3
  __HAL_LOCK(&pFlash);
 8008308:	7e2b      	ldrb	r3, [r5, #24]
 800830a:	2b01      	cmp	r3, #1
{
 800830c:	4607      	mov	r7, r0
 800830e:	460e      	mov	r6, r1
 8008310:	4614      	mov	r4, r2
  __HAL_LOCK(&pFlash);
 8008312:	d035      	beq.n	8008380 <HAL_FLASH_Program+0x80>
 8008314:	2301      	movs	r3, #1
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8008316:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 800831a:	762b      	strb	r3, [r5, #24]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800831c:	f7ff ffc6 	bl	80082ac <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8008320:	b9b0      	cbnz	r0, 8008350 <HAL_FLASH_Program+0x50>
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8008322:	b9cf      	cbnz	r7, 8008358 <HAL_FLASH_Program+0x58>
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8008324:	4b19      	ldr	r3, [pc, #100]	; (800838c <HAL_FLASH_Program+0x8c>)
 8008326:	691a      	ldr	r2, [r3, #16]
 8008328:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800832c:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800832e:	691a      	ldr	r2, [r3, #16]
 8008330:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 8008332:	691a      	ldr	r2, [r3, #16]
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8008334:	b2e4      	uxtb	r4, r4
  FLASH->CR |= FLASH_CR_PG;
 8008336:	f042 0201 	orr.w	r2, r2, #1
 800833a:	611a      	str	r2, [r3, #16]
  *(__IO uint8_t*)Address = Data;
 800833c:	7034      	strb	r4, [r6, #0]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800833e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8008342:	f7ff ffb3 	bl	80082ac <FLASH_WaitForLastOperation>
    FLASH->CR &= (~FLASH_CR_PG);  
 8008346:	4a11      	ldr	r2, [pc, #68]	; (800838c <HAL_FLASH_Program+0x8c>)
 8008348:	6913      	ldr	r3, [r2, #16]
 800834a:	f023 0301 	bic.w	r3, r3, #1
 800834e:	6113      	str	r3, [r2, #16]
  __HAL_UNLOCK(&pFlash);
 8008350:	2300      	movs	r3, #0
 8008352:	762b      	strb	r3, [r5, #24]
  return status;
 8008354:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8008358:	2f01      	cmp	r7, #1
 800835a:	d104      	bne.n	8008366 <HAL_FLASH_Program+0x66>
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800835c:	b2a1      	uxth	r1, r4
 800835e:	4630      	mov	r0, r6
 8008360:	f7ff ff30 	bl	80081c4 <_ZL22FLASH_Program_HalfWordmt>
 8008364:	e7eb      	b.n	800833e <HAL_FLASH_Program+0x3e>
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8008366:	2f02      	cmp	r7, #2
 8008368:	d104      	bne.n	8008374 <HAL_FLASH_Program+0x74>
      FLASH_Program_Word(Address, (uint32_t) Data);
 800836a:	4621      	mov	r1, r4
 800836c:	4630      	mov	r0, r6
 800836e:	f7ff ff17 	bl	80081a0 <_ZL18FLASH_Program_Wordmm>
 8008372:	e7e4      	b.n	800833e <HAL_FLASH_Program+0x3e>
      FLASH_Program_DoubleWord(Address, Data);
 8008374:	4622      	mov	r2, r4
 8008376:	4643      	mov	r3, r8
 8008378:	4630      	mov	r0, r6
 800837a:	f7ff fefd 	bl	8008178 <_ZL24FLASH_Program_DoubleWordmy>
 800837e:	e7de      	b.n	800833e <HAL_FLASH_Program+0x3e>
  __HAL_LOCK(&pFlash);
 8008380:	2002      	movs	r0, #2
}
 8008382:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008386:	bf00      	nop
 8008388:	20003cf0 	.word	0x20003cf0
 800838c:	40023c00 	.word	0x40023c00

08008390 <_ZL15FLASH_MassErasehm.isra.0>:
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8008390:	4b07      	ldr	r3, [pc, #28]	; (80083b0 <_ZL15FLASH_MassErasehm.isra.0+0x20>)
 8008392:	691a      	ldr	r2, [r3, #16]
 8008394:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8008398:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_MER;
 800839a:	691a      	ldr	r2, [r3, #16]
 800839c:	f042 0204 	orr.w	r2, r2, #4
 80083a0:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 80083a2:	691a      	ldr	r2, [r3, #16]
 80083a4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80083a8:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
 80083ac:	6118      	str	r0, [r3, #16]
 80083ae:	4770      	bx	lr
 80083b0:	40023c00 	.word	0x40023c00

080083b4 <FLASH_Erase_Sector>:

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80083b4:	b139      	cbz	r1, 80083c6 <FLASH_Erase_Sector+0x12>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80083b6:	2901      	cmp	r1, #1
 80083b8:	d01c      	beq.n	80083f4 <FLASH_Erase_Sector+0x40>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80083ba:	2902      	cmp	r1, #2
  {
    tmp_psize = FLASH_PSIZE_WORD;
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80083bc:	bf0c      	ite	eq
 80083be:	f44f 7100 	moveq.w	r1, #512	; 0x200
 80083c2:	f44f 7140 	movne.w	r1, #768	; 0x300
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80083c6:	4b0d      	ldr	r3, [pc, #52]	; (80083fc <FLASH_Erase_Sector+0x48>)
 80083c8:	691a      	ldr	r2, [r3, #16]
 80083ca:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80083ce:	611a      	str	r2, [r3, #16]
  FLASH->CR |= tmp_psize;
 80083d0:	691a      	ldr	r2, [r3, #16]
 80083d2:	4311      	orrs	r1, r2
 80083d4:	6119      	str	r1, [r3, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80083d6:	691a      	ldr	r2, [r3, #16]
 80083d8:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80083dc:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80083de:	691a      	ldr	r2, [r3, #16]
 80083e0:	f042 0202 	orr.w	r2, r2, #2
 80083e4:	ea42 00c0 	orr.w	r0, r2, r0, lsl #3
 80083e8:	6118      	str	r0, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80083ea:	691a      	ldr	r2, [r3, #16]
 80083ec:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80083f0:	611a      	str	r2, [r3, #16]
 80083f2:	4770      	bx	lr
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80083f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80083f8:	e7e5      	b.n	80083c6 <FLASH_Erase_Sector+0x12>
 80083fa:	bf00      	nop
 80083fc:	40023c00 	.word	0x40023c00

08008400 <FLASH_FlushCaches>:
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8008400:	4b14      	ldr	r3, [pc, #80]	; (8008454 <FLASH_FlushCaches+0x54>)
 8008402:	681a      	ldr	r2, [r3, #0]
 8008404:	0591      	lsls	r1, r2, #22
 8008406:	d50f      	bpl.n	8008428 <FLASH_FlushCaches+0x28>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8008408:	681a      	ldr	r2, [r3, #0]
 800840a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800840e:	601a      	str	r2, [r3, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8008410:	681a      	ldr	r2, [r3, #0]
 8008412:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008416:	601a      	str	r2, [r3, #0]
 8008418:	681a      	ldr	r2, [r3, #0]
 800841a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800841e:	601a      	str	r2, [r3, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008420:	681a      	ldr	r2, [r3, #0]
 8008422:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008426:	601a      	str	r2, [r3, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8008428:	4b0a      	ldr	r3, [pc, #40]	; (8008454 <FLASH_FlushCaches+0x54>)
 800842a:	681a      	ldr	r2, [r3, #0]
 800842c:	0552      	lsls	r2, r2, #21
 800842e:	d50f      	bpl.n	8008450 <FLASH_FlushCaches+0x50>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8008430:	681a      	ldr	r2, [r3, #0]
 8008432:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008436:	601a      	str	r2, [r3, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8008438:	681a      	ldr	r2, [r3, #0]
 800843a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800843e:	601a      	str	r2, [r3, #0]
 8008440:	681a      	ldr	r2, [r3, #0]
 8008442:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008446:	601a      	str	r2, [r3, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8008448:	681a      	ldr	r2, [r3, #0]
 800844a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800844e:	601a      	str	r2, [r3, #0]
 8008450:	4770      	bx	lr
 8008452:	bf00      	nop
 8008454:	40023c00 	.word	0x40023c00

08008458 <HAL_FLASHEx_Erase>:
{
 8008458:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  __HAL_LOCK(&pFlash);
 800845c:	4e23      	ldr	r6, [pc, #140]	; (80084ec <HAL_FLASHEx_Erase+0x94>)
 800845e:	7e33      	ldrb	r3, [r6, #24]
 8008460:	2b01      	cmp	r3, #1
{
 8008462:	4604      	mov	r4, r0
 8008464:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 8008466:	d03f      	beq.n	80084e8 <HAL_FLASHEx_Erase+0x90>
 8008468:	2301      	movs	r3, #1
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800846a:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 800846e:	7633      	strb	r3, [r6, #24]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8008470:	f7ff ff1c 	bl	80082ac <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8008474:	4605      	mov	r5, r0
 8008476:	b9a8      	cbnz	r0, 80084a4 <HAL_FLASHEx_Erase+0x4c>
    *SectorError = 0xFFFFFFFFU;
 8008478:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800847c:	f8c8 3000 	str.w	r3, [r8]
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8008480:	6823      	ldr	r3, [r4, #0]
 8008482:	2b01      	cmp	r3, #1
 8008484:	d113      	bne.n	80084ae <HAL_FLASHEx_Erase+0x56>
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8008486:	7c20      	ldrb	r0, [r4, #16]
 8008488:	f7ff ff82 	bl	8008390 <_ZL15FLASH_MassErasehm.isra.0>
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800848c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8008490:	f7ff ff0c 	bl	80082ac <FLASH_WaitForLastOperation>
      FLASH->CR &= (~FLASH_MER_BIT);
 8008494:	4a16      	ldr	r2, [pc, #88]	; (80084f0 <HAL_FLASHEx_Erase+0x98>)
 8008496:	6913      	ldr	r3, [r2, #16]
 8008498:	f023 0304 	bic.w	r3, r3, #4
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800849c:	4605      	mov	r5, r0
      FLASH->CR &= (~FLASH_MER_BIT);
 800849e:	6113      	str	r3, [r2, #16]
    FLASH_FlushCaches();    
 80084a0:	f7ff ffae 	bl	8008400 <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 80084a4:	2300      	movs	r3, #0
 80084a6:	7633      	strb	r3, [r6, #24]
}
 80084a8:	4628      	mov	r0, r5
 80084aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80084ae:	68a7      	ldr	r7, [r4, #8]
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 80084b0:	f8df 903c 	ldr.w	r9, [pc, #60]	; 80084f0 <HAL_FLASHEx_Erase+0x98>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80084b4:	68e3      	ldr	r3, [r4, #12]
 80084b6:	68a2      	ldr	r2, [r4, #8]
 80084b8:	4413      	add	r3, r2
 80084ba:	429f      	cmp	r7, r3
 80084bc:	d2f0      	bcs.n	80084a0 <HAL_FLASHEx_Erase+0x48>
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80084be:	7c21      	ldrb	r1, [r4, #16]
 80084c0:	4638      	mov	r0, r7
 80084c2:	f7ff ff77 	bl	80083b4 <FLASH_Erase_Sector>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80084c6:	f24c 3050 	movw	r0, #50000	; 0xc350
 80084ca:	f7ff feef 	bl	80082ac <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 80084ce:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80084d2:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 80084d6:	f8c9 3010 	str.w	r3, [r9, #16]
        if(status != HAL_OK) 
 80084da:	b118      	cbz	r0, 80084e4 <HAL_FLASHEx_Erase+0x8c>
          *SectorError = index;
 80084dc:	f8c8 7000 	str.w	r7, [r8]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80084e0:	4605      	mov	r5, r0
          break;
 80084e2:	e7dd      	b.n	80084a0 <HAL_FLASHEx_Erase+0x48>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80084e4:	3701      	adds	r7, #1
 80084e6:	e7e5      	b.n	80084b4 <HAL_FLASHEx_Erase+0x5c>
  __HAL_LOCK(&pFlash);
 80084e8:	2502      	movs	r5, #2
 80084ea:	e7dd      	b.n	80084a8 <HAL_FLASHEx_Erase+0x50>
 80084ec:	20003cf0 	.word	0x20003cf0
 80084f0:	40023c00 	.word	0x40023c00

080084f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80084f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084f8:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80084fa:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80084fc:	f8df 8164 	ldr.w	r8, [pc, #356]	; 8008664 <HAL_GPIO_Init+0x170>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008500:	4a56      	ldr	r2, [pc, #344]	; (800865c <HAL_GPIO_Init+0x168>)
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008502:	9301      	str	r3, [sp, #4]
    ioposition = 0x01U << position;
 8008504:	f04f 0901 	mov.w	r9, #1
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008508:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800850a:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 800850c:	fa09 fa03 	lsl.w	sl, r9, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008510:	ea0a 0504 	and.w	r5, sl, r4
    if(iocurrent == ioposition)
 8008514:	45aa      	cmp	sl, r5
 8008516:	f040 8096 	bne.w	8008646 <HAL_GPIO_Init+0x152>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800851a:	684c      	ldr	r4, [r1, #4]
 800851c:	f024 0b10 	bic.w	fp, r4, #16
 8008520:	f1bb 0f02 	cmp.w	fp, #2
 8008524:	d114      	bne.n	8008550 <HAL_GPIO_Init+0x5c>
        temp = GPIOx->AFR[position >> 3U];
 8008526:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 800852a:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800852e:	f003 0c07 	and.w	ip, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8008532:	f8de 6020 	ldr.w	r6, [lr, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8008536:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800853a:	270f      	movs	r7, #15
 800853c:	fa07 f70c 	lsl.w	r7, r7, ip
 8008540:	ea26 0707 	bic.w	r7, r6, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8008544:	690e      	ldr	r6, [r1, #16]
 8008546:	fa06 f60c 	lsl.w	r6, r6, ip
 800854a:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3U] = temp;
 800854c:	f8ce 6020 	str.w	r6, [lr, #32]
 8008550:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8008554:	2703      	movs	r7, #3
      temp = GPIOx->MODER;
 8008556:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8008558:	fa07 f70c 	lsl.w	r7, r7, ip
 800855c:	43ff      	mvns	r7, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800855e:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8008562:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008564:	fa0e fe0c 	lsl.w	lr, lr, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008568:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800856c:	ea4e 0606 	orr.w	r6, lr, r6
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008570:	f1bb 0f01 	cmp.w	fp, #1
      GPIOx->MODER = temp;
 8008574:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008576:	d811      	bhi.n	800859c <HAL_GPIO_Init+0xa8>
        temp = GPIOx->OSPEEDR; 
 8008578:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800857a:	ea06 0b07 	and.w	fp, r6, r7
        temp |= (GPIO_Init->Speed << (position * 2U));
 800857e:	68ce      	ldr	r6, [r1, #12]
 8008580:	fa06 fe0c 	lsl.w	lr, r6, ip
 8008584:	ea4e 060b 	orr.w	r6, lr, fp
        GPIOx->OSPEEDR = temp;
 8008588:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 800858a:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800858c:	ea26 0a0a 	bic.w	sl, r6, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8008590:	f3c4 1600 	ubfx	r6, r4, #4, #1
 8008594:	409e      	lsls	r6, r3
 8008596:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OTYPER = temp;
 800859a:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 800859c:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800859e:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80085a0:	688e      	ldr	r6, [r1, #8]
 80085a2:	fa06 f60c 	lsl.w	r6, r6, ip
 80085a6:	4337      	orrs	r7, r6
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80085a8:	00e6      	lsls	r6, r4, #3
      GPIOx->PUPDR = temp;
 80085aa:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80085ac:	d54b      	bpl.n	8008646 <HAL_GPIO_Init+0x152>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80085ae:	2600      	movs	r6, #0
 80085b0:	9603      	str	r6, [sp, #12]
 80085b2:	f8d8 6044 	ldr.w	r6, [r8, #68]	; 0x44
 80085b6:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 80085ba:	f8c8 6044 	str.w	r6, [r8, #68]	; 0x44
 80085be:	f8d8 6044 	ldr.w	r6, [r8, #68]	; 0x44
 80085c2:	f023 0703 	bic.w	r7, r3, #3
 80085c6:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80085ca:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 80085ce:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
 80085d2:	9603      	str	r6, [sp, #12]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80085d4:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 80085d8:	68be      	ldr	r6, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80085da:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80085de:	f04f 0e0f 	mov.w	lr, #15
 80085e2:	fa0e fe0c 	lsl.w	lr, lr, ip
 80085e6:	ea26 0e0e 	bic.w	lr, r6, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80085ea:	4e1d      	ldr	r6, [pc, #116]	; (8008660 <HAL_GPIO_Init+0x16c>)
 80085ec:	42b0      	cmp	r0, r6
 80085ee:	d031      	beq.n	8008654 <HAL_GPIO_Init+0x160>
 80085f0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80085f4:	42b0      	cmp	r0, r6
 80085f6:	d02f      	beq.n	8008658 <HAL_GPIO_Init+0x164>
 80085f8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80085fc:	42b0      	cmp	r0, r6
 80085fe:	bf14      	ite	ne
 8008600:	2607      	movne	r6, #7
 8008602:	2602      	moveq	r6, #2
 8008604:	fa06 f60c 	lsl.w	r6, r6, ip
 8008608:	ea46 060e 	orr.w	r6, r6, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 800860c:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 800860e:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8008610:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008612:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8008616:	bf0c      	ite	eq
 8008618:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 800861a:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;
 800861c:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 800861e:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008620:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8008624:	bf0c      	ite	eq
 8008626:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8008628:	432e      	orrne	r6, r5
        }
        EXTI->EMR = temp;
 800862a:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800862c:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800862e:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8008632:	bf0c      	ite	eq
 8008634:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8008636:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;
 8008638:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 800863a:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800863c:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 800863e:	bf54      	ite	pl
 8008640:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 8008642:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 8008644:	60d6      	str	r6, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008646:	3301      	adds	r3, #1
 8008648:	2b10      	cmp	r3, #16
 800864a:	f47f af5e 	bne.w	800850a <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 800864e:	b005      	add	sp, #20
 8008650:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8008654:	2600      	movs	r6, #0
 8008656:	e7d5      	b.n	8008604 <HAL_GPIO_Init+0x110>
 8008658:	2601      	movs	r6, #1
 800865a:	e7d3      	b.n	8008604 <HAL_GPIO_Init+0x110>
 800865c:	40013c00 	.word	0x40013c00
 8008660:	40020000 	.word	0x40020000
 8008664:	40023800 	.word	0x40023800

08008668 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008668:	b10a      	cbz	r2, 800866e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800866a:	6181      	str	r1, [r0, #24]
 800866c:	4770      	bx	lr
 800866e:	0409      	lsls	r1, r1, #16
 8008670:	e7fb      	b.n	800866a <HAL_GPIO_WritePin+0x2>

08008672 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8008672:	6943      	ldr	r3, [r0, #20]
 8008674:	4059      	eors	r1, r3
 8008676:	6141      	str	r1, [r0, #20]
 8008678:	4770      	bx	lr
	...

0800867c <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800867c:	4913      	ldr	r1, [pc, #76]	; (80086cc <HAL_RCC_GetSysClockFreq+0x50>)
{
 800867e:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008680:	688b      	ldr	r3, [r1, #8]
 8008682:	f003 030c 	and.w	r3, r3, #12
 8008686:	2b04      	cmp	r3, #4
 8008688:	d003      	beq.n	8008692 <HAL_RCC_GetSysClockFreq+0x16>
 800868a:	2b08      	cmp	r3, #8
 800868c:	d003      	beq.n	8008696 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800868e:	4810      	ldr	r0, [pc, #64]	; (80086d0 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8008690:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8008692:	4810      	ldr	r0, [pc, #64]	; (80086d4 <HAL_RCC_GetSysClockFreq+0x58>)
 8008694:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008696:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008698:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800869a:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800869c:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80086a0:	bf14      	ite	ne
 80086a2:	480c      	ldrne	r0, [pc, #48]	; (80086d4 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80086a4:	480a      	ldreq	r0, [pc, #40]	; (80086d0 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80086a6:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80086aa:	bf18      	it	ne
 80086ac:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80086ae:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80086b2:	fba1 0100 	umull	r0, r1, r1, r0
 80086b6:	f7f7 fdb9 	bl	800022c <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80086ba:	4b04      	ldr	r3, [pc, #16]	; (80086cc <HAL_RCC_GetSysClockFreq+0x50>)
 80086bc:	685b      	ldr	r3, [r3, #4]
 80086be:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80086c2:	3301      	adds	r3, #1
 80086c4:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 80086c6:	fbb0 f0f3 	udiv	r0, r0, r3
 80086ca:	bd08      	pop	{r3, pc}
 80086cc:	40023800 	.word	0x40023800
 80086d0:	00f42400 	.word	0x00f42400
 80086d4:	007a1200 	.word	0x007a1200

080086d8 <HAL_RCC_ClockConfig>:
{
 80086d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086dc:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 80086de:	4604      	mov	r4, r0
 80086e0:	b910      	cbnz	r0, 80086e8 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80086e2:	2001      	movs	r0, #1
 80086e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80086e8:	4b44      	ldr	r3, [pc, #272]	; (80087fc <HAL_RCC_ClockConfig+0x124>)
 80086ea:	681a      	ldr	r2, [r3, #0]
 80086ec:	f002 020f 	and.w	r2, r2, #15
 80086f0:	428a      	cmp	r2, r1
 80086f2:	d327      	bcc.n	8008744 <HAL_RCC_ClockConfig+0x6c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80086f4:	6821      	ldr	r1, [r4, #0]
 80086f6:	078f      	lsls	r7, r1, #30
 80086f8:	d42c      	bmi.n	8008754 <HAL_RCC_ClockConfig+0x7c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80086fa:	07c8      	lsls	r0, r1, #31
 80086fc:	d549      	bpl.n	8008792 <HAL_RCC_ClockConfig+0xba>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80086fe:	6862      	ldr	r2, [r4, #4]
 8008700:	4b3f      	ldr	r3, [pc, #252]	; (8008800 <HAL_RCC_ClockConfig+0x128>)
 8008702:	2a01      	cmp	r2, #1
 8008704:	d13b      	bne.n	800877e <HAL_RCC_ClockConfig+0xa6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800870c:	d0e9      	beq.n	80086e2 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800870e:	4e3c      	ldr	r6, [pc, #240]	; (8008800 <HAL_RCC_ClockConfig+0x128>)
 8008710:	68b3      	ldr	r3, [r6, #8]
 8008712:	f023 0303 	bic.w	r3, r3, #3
 8008716:	4313      	orrs	r3, r2
 8008718:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800871a:	f7ff f8f9 	bl	8007910 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800871e:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8008722:	4680      	mov	r8, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008724:	68b3      	ldr	r3, [r6, #8]
 8008726:	6862      	ldr	r2, [r4, #4]
 8008728:	f003 030c 	and.w	r3, r3, #12
 800872c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8008730:	d02f      	beq.n	8008792 <HAL_RCC_ClockConfig+0xba>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008732:	f7ff f8ed 	bl	8007910 <HAL_GetTick>
 8008736:	eba0 0008 	sub.w	r0, r0, r8
 800873a:	42b8      	cmp	r0, r7
 800873c:	d9f2      	bls.n	8008724 <HAL_RCC_ClockConfig+0x4c>
        return HAL_TIMEOUT;
 800873e:	2003      	movs	r0, #3
}
 8008740:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008744:	b2ca      	uxtb	r2, r1
 8008746:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	f003 030f 	and.w	r3, r3, #15
 800874e:	428b      	cmp	r3, r1
 8008750:	d1c7      	bne.n	80086e2 <HAL_RCC_ClockConfig+0xa>
 8008752:	e7cf      	b.n	80086f4 <HAL_RCC_ClockConfig+0x1c>
 8008754:	4b2a      	ldr	r3, [pc, #168]	; (8008800 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008756:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800875a:	bf1e      	ittt	ne
 800875c:	689a      	ldrne	r2, [r3, #8]
 800875e:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8008762:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008764:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008766:	bf42      	ittt	mi
 8008768:	689a      	ldrmi	r2, [r3, #8]
 800876a:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 800876e:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008770:	689a      	ldr	r2, [r3, #8]
 8008772:	68a0      	ldr	r0, [r4, #8]
 8008774:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8008778:	4302      	orrs	r2, r0
 800877a:	609a      	str	r2, [r3, #8]
 800877c:	e7bd      	b.n	80086fa <HAL_RCC_ClockConfig+0x22>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800877e:	1e91      	subs	r1, r2, #2
 8008780:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008782:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008784:	d802      	bhi.n	800878c <HAL_RCC_ClockConfig+0xb4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008786:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800878a:	e7bf      	b.n	800870c <HAL_RCC_ClockConfig+0x34>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800878c:	f013 0f02 	tst.w	r3, #2
 8008790:	e7bc      	b.n	800870c <HAL_RCC_ClockConfig+0x34>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008792:	4b1a      	ldr	r3, [pc, #104]	; (80087fc <HAL_RCC_ClockConfig+0x124>)
 8008794:	681a      	ldr	r2, [r3, #0]
 8008796:	f002 020f 	and.w	r2, r2, #15
 800879a:	42aa      	cmp	r2, r5
 800879c:	d81d      	bhi.n	80087da <HAL_RCC_ClockConfig+0x102>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800879e:	6822      	ldr	r2, [r4, #0]
 80087a0:	0751      	lsls	r1, r2, #29
 80087a2:	d423      	bmi.n	80087ec <HAL_RCC_ClockConfig+0x114>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80087a4:	0713      	lsls	r3, r2, #28
 80087a6:	d507      	bpl.n	80087b8 <HAL_RCC_ClockConfig+0xe0>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80087a8:	4a15      	ldr	r2, [pc, #84]	; (8008800 <HAL_RCC_ClockConfig+0x128>)
 80087aa:	6921      	ldr	r1, [r4, #16]
 80087ac:	6893      	ldr	r3, [r2, #8]
 80087ae:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80087b2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80087b6:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80087b8:	f7ff ff60 	bl	800867c <HAL_RCC_GetSysClockFreq>
 80087bc:	4b10      	ldr	r3, [pc, #64]	; (8008800 <HAL_RCC_ClockConfig+0x128>)
 80087be:	4a11      	ldr	r2, [pc, #68]	; (8008804 <HAL_RCC_ClockConfig+0x12c>)
 80087c0:	689b      	ldr	r3, [r3, #8]
 80087c2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80087c6:	5cd3      	ldrb	r3, [r2, r3]
 80087c8:	40d8      	lsrs	r0, r3
 80087ca:	4b0f      	ldr	r3, [pc, #60]	; (8008808 <HAL_RCC_ClockConfig+0x130>)
 80087cc:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80087ce:	2000      	movs	r0, #0
 80087d0:	f7ff f868 	bl	80078a4 <HAL_InitTick>
  return HAL_OK;
 80087d4:	2000      	movs	r0, #0
 80087d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80087da:	b2ea      	uxtb	r2, r5
 80087dc:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	f003 030f 	and.w	r3, r3, #15
 80087e4:	42ab      	cmp	r3, r5
 80087e6:	f47f af7c 	bne.w	80086e2 <HAL_RCC_ClockConfig+0xa>
 80087ea:	e7d8      	b.n	800879e <HAL_RCC_ClockConfig+0xc6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80087ec:	4904      	ldr	r1, [pc, #16]	; (8008800 <HAL_RCC_ClockConfig+0x128>)
 80087ee:	68e0      	ldr	r0, [r4, #12]
 80087f0:	688b      	ldr	r3, [r1, #8]
 80087f2:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80087f6:	4303      	orrs	r3, r0
 80087f8:	608b      	str	r3, [r1, #8]
 80087fa:	e7d3      	b.n	80087a4 <HAL_RCC_ClockConfig+0xcc>
 80087fc:	40023c00 	.word	0x40023c00
 8008800:	40023800 	.word	0x40023800
 8008804:	0800cb4c 	.word	0x0800cb4c
 8008808:	20000004 	.word	0x20000004

0800880c <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 800880c:	4b01      	ldr	r3, [pc, #4]	; (8008814 <HAL_RCC_GetHCLKFreq+0x8>)
 800880e:	6818      	ldr	r0, [r3, #0]
 8008810:	4770      	bx	lr
 8008812:	bf00      	nop
 8008814:	20000004 	.word	0x20000004

08008818 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008818:	4b04      	ldr	r3, [pc, #16]	; (800882c <HAL_RCC_GetPCLK1Freq+0x14>)
 800881a:	4a05      	ldr	r2, [pc, #20]	; (8008830 <HAL_RCC_GetPCLK1Freq+0x18>)
 800881c:	689b      	ldr	r3, [r3, #8]
 800881e:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8008822:	5cd3      	ldrb	r3, [r2, r3]
 8008824:	4a03      	ldr	r2, [pc, #12]	; (8008834 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8008826:	6810      	ldr	r0, [r2, #0]
}
 8008828:	40d8      	lsrs	r0, r3
 800882a:	4770      	bx	lr
 800882c:	40023800 	.word	0x40023800
 8008830:	0800cb5c 	.word	0x0800cb5c
 8008834:	20000004 	.word	0x20000004

08008838 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008838:	4b04      	ldr	r3, [pc, #16]	; (800884c <HAL_RCC_GetPCLK2Freq+0x14>)
 800883a:	4a05      	ldr	r2, [pc, #20]	; (8008850 <HAL_RCC_GetPCLK2Freq+0x18>)
 800883c:	689b      	ldr	r3, [r3, #8]
 800883e:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8008842:	5cd3      	ldrb	r3, [r2, r3]
 8008844:	4a03      	ldr	r2, [pc, #12]	; (8008854 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8008846:	6810      	ldr	r0, [r2, #0]
}
 8008848:	40d8      	lsrs	r0, r3
 800884a:	4770      	bx	lr
 800884c:	40023800 	.word	0x40023800
 8008850:	0800cb5c 	.word	0x0800cb5c
 8008854:	20000004 	.word	0x20000004

08008858 <HAL_RCC_OscConfig>:
  uint32_t tickstart = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008858:	6803      	ldr	r3, [r0, #0]
{
 800885a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800885c:	07d9      	lsls	r1, r3, #31
{
 800885e:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008860:	f140 812d 	bpl.w	8008abe <HAL_RCC_OscConfig+0x266>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8008864:	4ba8      	ldr	r3, [pc, #672]	; (8008b08 <HAL_RCC_OscConfig+0x2b0>)
 8008866:	689a      	ldr	r2, [r3, #8]
 8008868:	f002 020c 	and.w	r2, r2, #12
 800886c:	2a04      	cmp	r2, #4
 800886e:	f000 8121 	beq.w	8008ab4 <HAL_RCC_OscConfig+0x25c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008872:	689a      	ldr	r2, [r3, #8]
 8008874:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8008878:	2a08      	cmp	r2, #8
 800887a:	d103      	bne.n	8008884 <HAL_RCC_OscConfig+0x2c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800887c:	685a      	ldr	r2, [r3, #4]
 800887e:	0252      	lsls	r2, r2, #9
 8008880:	f100 8118 	bmi.w	8008ab4 <HAL_RCC_OscConfig+0x25c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008884:	6862      	ldr	r2, [r4, #4]
 8008886:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800888a:	d119      	bne.n	80088c0 <HAL_RCC_OscConfig+0x68>
 800888c:	681a      	ldr	r2, [r3, #0]
 800888e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8008892:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008894:	f7ff f83c 	bl	8007910 <HAL_GetTick>

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008898:	4e9b      	ldr	r6, [pc, #620]	; (8008b08 <HAL_RCC_OscConfig+0x2b0>)
        tickstart = HAL_GetTick();
 800889a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800889c:	6833      	ldr	r3, [r6, #0]
 800889e:	039b      	lsls	r3, r3, #14
 80088a0:	f100 810d 	bmi.w	8008abe <HAL_RCC_OscConfig+0x266>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80088a4:	f7ff f834 	bl	8007910 <HAL_GetTick>
 80088a8:	1b40      	subs	r0, r0, r5
 80088aa:	2864      	cmp	r0, #100	; 0x64
 80088ac:	d9f6      	bls.n	800889c <HAL_RCC_OscConfig+0x44>
          {
            return HAL_TIMEOUT;
 80088ae:	2003      	movs	r0, #3
 80088b0:	e004      	b.n	80088bc <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80088b2:	6863      	ldr	r3, [r4, #4]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	f040 8102 	bne.w	8008abe <HAL_RCC_OscConfig+0x266>
        return HAL_ERROR;
 80088ba:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 80088bc:	b003      	add	sp, #12
 80088be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80088c0:	4d91      	ldr	r5, [pc, #580]	; (8008b08 <HAL_RCC_OscConfig+0x2b0>)
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80088c2:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 80088c6:	682b      	ldr	r3, [r5, #0]
 80088c8:	d107      	bne.n	80088da <HAL_RCC_OscConfig+0x82>
 80088ca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80088ce:	602b      	str	r3, [r5, #0]
 80088d0:	682b      	ldr	r3, [r5, #0]
 80088d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80088d6:	602b      	str	r3, [r5, #0]
 80088d8:	e7dc      	b.n	8008894 <HAL_RCC_OscConfig+0x3c>
 80088da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80088de:	602b      	str	r3, [r5, #0]
 80088e0:	682b      	ldr	r3, [r5, #0]
 80088e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80088e6:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80088e8:	2a00      	cmp	r2, #0
 80088ea:	d1d3      	bne.n	8008894 <HAL_RCC_OscConfig+0x3c>
        tickstart = HAL_GetTick();
 80088ec:	f7ff f810 	bl	8007910 <HAL_GetTick>
 80088f0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80088f2:	682b      	ldr	r3, [r5, #0]
 80088f4:	039f      	lsls	r7, r3, #14
 80088f6:	f140 80e2 	bpl.w	8008abe <HAL_RCC_OscConfig+0x266>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80088fa:	f7ff f809 	bl	8007910 <HAL_GetTick>
 80088fe:	1b80      	subs	r0, r0, r6
 8008900:	2864      	cmp	r0, #100	; 0x64
 8008902:	d9f6      	bls.n	80088f2 <HAL_RCC_OscConfig+0x9a>
 8008904:	e7d3      	b.n	80088ae <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_ENABLE();
 8008906:	2301      	movs	r3, #1
 8008908:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800890a:	f7ff f801 	bl	8007910 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800890e:	4d7e      	ldr	r5, [pc, #504]	; (8008b08 <HAL_RCC_OscConfig+0x2b0>)
        tickstart = HAL_GetTick();
 8008910:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008912:	682b      	ldr	r3, [r5, #0]
 8008914:	0798      	lsls	r0, r3, #30
 8008916:	d405      	bmi.n	8008924 <HAL_RCC_OscConfig+0xcc>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008918:	f7fe fffa 	bl	8007910 <HAL_GetTick>
 800891c:	1b80      	subs	r0, r0, r6
 800891e:	2802      	cmp	r0, #2
 8008920:	d9f7      	bls.n	8008912 <HAL_RCC_OscConfig+0xba>
 8008922:	e7c4      	b.n	80088ae <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008924:	682b      	ldr	r3, [r5, #0]
 8008926:	6922      	ldr	r2, [r4, #16]
 8008928:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800892c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8008930:	602b      	str	r3, [r5, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008932:	6823      	ldr	r3, [r4, #0]
 8008934:	071a      	lsls	r2, r3, #28
 8008936:	d51f      	bpl.n	8008978 <HAL_RCC_OscConfig+0x120>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008938:	6962      	ldr	r2, [r4, #20]
 800893a:	4b74      	ldr	r3, [pc, #464]	; (8008b0c <HAL_RCC_OscConfig+0x2b4>)
 800893c:	b172      	cbz	r2, 800895c <HAL_RCC_OscConfig+0x104>
      __HAL_RCC_LSI_ENABLE();
 800893e:	2201      	movs	r2, #1
 8008940:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8008942:	f7fe ffe5 	bl	8007910 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008946:	4e70      	ldr	r6, [pc, #448]	; (8008b08 <HAL_RCC_OscConfig+0x2b0>)
      tickstart = HAL_GetTick();
 8008948:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800894a:	6f73      	ldr	r3, [r6, #116]	; 0x74
 800894c:	079b      	lsls	r3, r3, #30
 800894e:	d413      	bmi.n	8008978 <HAL_RCC_OscConfig+0x120>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008950:	f7fe ffde 	bl	8007910 <HAL_GetTick>
 8008954:	1b40      	subs	r0, r0, r5
 8008956:	2802      	cmp	r0, #2
 8008958:	d9f7      	bls.n	800894a <HAL_RCC_OscConfig+0xf2>
 800895a:	e7a8      	b.n	80088ae <HAL_RCC_OscConfig+0x56>
      __HAL_RCC_LSI_DISABLE();
 800895c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800895e:	f7fe ffd7 	bl	8007910 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008962:	4e69      	ldr	r6, [pc, #420]	; (8008b08 <HAL_RCC_OscConfig+0x2b0>)
      tickstart = HAL_GetTick();
 8008964:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008966:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8008968:	079f      	lsls	r7, r3, #30
 800896a:	d505      	bpl.n	8008978 <HAL_RCC_OscConfig+0x120>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800896c:	f7fe ffd0 	bl	8007910 <HAL_GetTick>
 8008970:	1b40      	subs	r0, r0, r5
 8008972:	2802      	cmp	r0, #2
 8008974:	d9f7      	bls.n	8008966 <HAL_RCC_OscConfig+0x10e>
 8008976:	e79a      	b.n	80088ae <HAL_RCC_OscConfig+0x56>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008978:	6823      	ldr	r3, [r4, #0]
 800897a:	075d      	lsls	r5, r3, #29
 800897c:	d551      	bpl.n	8008a22 <HAL_RCC_OscConfig+0x1ca>
    __HAL_RCC_PWR_CLK_ENABLE();
 800897e:	2300      	movs	r3, #0
 8008980:	9301      	str	r3, [sp, #4]
 8008982:	4b61      	ldr	r3, [pc, #388]	; (8008b08 <HAL_RCC_OscConfig+0x2b0>)
    PWR->CR |= PWR_CR_DBP;
 8008984:	4d62      	ldr	r5, [pc, #392]	; (8008b10 <HAL_RCC_OscConfig+0x2b8>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8008986:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008988:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800898c:	641a      	str	r2, [r3, #64]	; 0x40
 800898e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008990:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008994:	9301      	str	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8008996:	682b      	ldr	r3, [r5, #0]
 8008998:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800899c:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 800899e:	f7fe ffb7 	bl	8007910 <HAL_GetTick>
 80089a2:	4606      	mov	r6, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80089a4:	682b      	ldr	r3, [r5, #0]
 80089a6:	05d8      	lsls	r0, r3, #23
 80089a8:	d405      	bmi.n	80089b6 <HAL_RCC_OscConfig+0x15e>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80089aa:	f7fe ffb1 	bl	8007910 <HAL_GetTick>
 80089ae:	1b80      	subs	r0, r0, r6
 80089b0:	2802      	cmp	r0, #2
 80089b2:	d9f7      	bls.n	80089a4 <HAL_RCC_OscConfig+0x14c>
 80089b4:	e77b      	b.n	80088ae <HAL_RCC_OscConfig+0x56>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80089b6:	68a3      	ldr	r3, [r4, #8]
 80089b8:	4d53      	ldr	r5, [pc, #332]	; (8008b08 <HAL_RCC_OscConfig+0x2b0>)
 80089ba:	2b01      	cmp	r3, #1
 80089bc:	d112      	bne.n	80089e4 <HAL_RCC_OscConfig+0x18c>
 80089be:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80089c0:	f043 0301 	orr.w	r3, r3, #1
 80089c4:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 80089c6:	f7fe ffa3 	bl	8007910 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80089ca:	4f4f      	ldr	r7, [pc, #316]	; (8008b08 <HAL_RCC_OscConfig+0x2b0>)
      tickstart = HAL_GetTick();
 80089cc:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80089ce:	f241 3588 	movw	r5, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80089d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80089d4:	0799      	lsls	r1, r3, #30
 80089d6:	d424      	bmi.n	8008a22 <HAL_RCC_OscConfig+0x1ca>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80089d8:	f7fe ff9a 	bl	8007910 <HAL_GetTick>
 80089dc:	1b80      	subs	r0, r0, r6
 80089de:	42a8      	cmp	r0, r5
 80089e0:	d9f7      	bls.n	80089d2 <HAL_RCC_OscConfig+0x17a>
 80089e2:	e764      	b.n	80088ae <HAL_RCC_OscConfig+0x56>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80089e4:	2b05      	cmp	r3, #5
 80089e6:	d104      	bne.n	80089f2 <HAL_RCC_OscConfig+0x19a>
 80089e8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80089ea:	f043 0304 	orr.w	r3, r3, #4
 80089ee:	672b      	str	r3, [r5, #112]	; 0x70
 80089f0:	e7e5      	b.n	80089be <HAL_RCC_OscConfig+0x166>
 80089f2:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80089f4:	f022 0201 	bic.w	r2, r2, #1
 80089f8:	672a      	str	r2, [r5, #112]	; 0x70
 80089fa:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80089fc:	f022 0204 	bic.w	r2, r2, #4
 8008a00:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d1df      	bne.n	80089c6 <HAL_RCC_OscConfig+0x16e>
      tickstart = HAL_GetTick();
 8008a06:	f7fe ff83 	bl	8007910 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008a0a:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8008a0e:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008a10:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8008a12:	079a      	lsls	r2, r3, #30
 8008a14:	d505      	bpl.n	8008a22 <HAL_RCC_OscConfig+0x1ca>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008a16:	f7fe ff7b 	bl	8007910 <HAL_GetTick>
 8008a1a:	1bc0      	subs	r0, r0, r7
 8008a1c:	42b0      	cmp	r0, r6
 8008a1e:	d9f7      	bls.n	8008a10 <HAL_RCC_OscConfig+0x1b8>
 8008a20:	e745      	b.n	80088ae <HAL_RCC_OscConfig+0x56>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008a22:	69a2      	ldr	r2, [r4, #24]
 8008a24:	b90a      	cbnz	r2, 8008a2a <HAL_RCC_OscConfig+0x1d2>
  return HAL_OK;
 8008a26:	2000      	movs	r0, #0
 8008a28:	e748      	b.n	80088bc <HAL_RCC_OscConfig+0x64>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008a2a:	4d37      	ldr	r5, [pc, #220]	; (8008b08 <HAL_RCC_OscConfig+0x2b0>)
 8008a2c:	68ab      	ldr	r3, [r5, #8]
 8008a2e:	f003 030c 	and.w	r3, r3, #12
 8008a32:	2b08      	cmp	r3, #8
 8008a34:	f43f af41 	beq.w	80088ba <HAL_RCC_OscConfig+0x62>
 8008a38:	4e36      	ldr	r6, [pc, #216]	; (8008b14 <HAL_RCC_OscConfig+0x2bc>)
 8008a3a:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008a3c:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8008a3e:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008a40:	d12c      	bne.n	8008a9c <HAL_RCC_OscConfig+0x244>
        tickstart = HAL_GetTick();
 8008a42:	f7fe ff65 	bl	8007910 <HAL_GetTick>
 8008a46:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008a48:	682b      	ldr	r3, [r5, #0]
 8008a4a:	019b      	lsls	r3, r3, #6
 8008a4c:	d505      	bpl.n	8008a5a <HAL_RCC_OscConfig+0x202>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008a4e:	f7fe ff5f 	bl	8007910 <HAL_GetTick>
 8008a52:	1bc0      	subs	r0, r0, r7
 8008a54:	2802      	cmp	r0, #2
 8008a56:	d9f7      	bls.n	8008a48 <HAL_RCC_OscConfig+0x1f0>
 8008a58:	e729      	b.n	80088ae <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008a5a:	6a22      	ldr	r2, [r4, #32]
 8008a5c:	69e3      	ldr	r3, [r4, #28]
 8008a5e:	4313      	orrs	r3, r2
 8008a60:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8008a62:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8008a66:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008a68:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8008a6c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8008a6e:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8008a72:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8008a74:	0852      	lsrs	r2, r2, #1
 8008a76:	3a01      	subs	r2, #1
 8008a78:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008a7c:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8008a7e:	2301      	movs	r3, #1
 8008a80:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8008a82:	f7fe ff45 	bl	8007910 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008a86:	4d20      	ldr	r5, [pc, #128]	; (8008b08 <HAL_RCC_OscConfig+0x2b0>)
        tickstart = HAL_GetTick();
 8008a88:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008a8a:	682b      	ldr	r3, [r5, #0]
 8008a8c:	019e      	lsls	r6, r3, #6
 8008a8e:	d4ca      	bmi.n	8008a26 <HAL_RCC_OscConfig+0x1ce>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008a90:	f7fe ff3e 	bl	8007910 <HAL_GetTick>
 8008a94:	1b00      	subs	r0, r0, r4
 8008a96:	2802      	cmp	r0, #2
 8008a98:	d9f7      	bls.n	8008a8a <HAL_RCC_OscConfig+0x232>
 8008a9a:	e708      	b.n	80088ae <HAL_RCC_OscConfig+0x56>
        tickstart = HAL_GetTick();
 8008a9c:	f7fe ff38 	bl	8007910 <HAL_GetTick>
 8008aa0:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008aa2:	682b      	ldr	r3, [r5, #0]
 8008aa4:	0198      	lsls	r0, r3, #6
 8008aa6:	d5be      	bpl.n	8008a26 <HAL_RCC_OscConfig+0x1ce>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008aa8:	f7fe ff32 	bl	8007910 <HAL_GetTick>
 8008aac:	1b00      	subs	r0, r0, r4
 8008aae:	2802      	cmp	r0, #2
 8008ab0:	d9f7      	bls.n	8008aa2 <HAL_RCC_OscConfig+0x24a>
 8008ab2:	e6fc      	b.n	80088ae <HAL_RCC_OscConfig+0x56>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008ab4:	4b14      	ldr	r3, [pc, #80]	; (8008b08 <HAL_RCC_OscConfig+0x2b0>)
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	0399      	lsls	r1, r3, #14
 8008aba:	f53f aefa 	bmi.w	80088b2 <HAL_RCC_OscConfig+0x5a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008abe:	6823      	ldr	r3, [r4, #0]
 8008ac0:	079e      	lsls	r6, r3, #30
 8008ac2:	f57f af36 	bpl.w	8008932 <HAL_RCC_OscConfig+0xda>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8008ac6:	4b10      	ldr	r3, [pc, #64]	; (8008b08 <HAL_RCC_OscConfig+0x2b0>)
 8008ac8:	689a      	ldr	r2, [r3, #8]
 8008aca:	f012 0f0c 	tst.w	r2, #12
 8008ace:	d025      	beq.n	8008b1c <HAL_RCC_OscConfig+0x2c4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008ad0:	689a      	ldr	r2, [r3, #8]
 8008ad2:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8008ad6:	2a08      	cmp	r2, #8
 8008ad8:	d102      	bne.n	8008ae0 <HAL_RCC_OscConfig+0x288>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008ada:	685b      	ldr	r3, [r3, #4]
 8008adc:	025d      	lsls	r5, r3, #9
 8008ade:	d51d      	bpl.n	8008b1c <HAL_RCC_OscConfig+0x2c4>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008ae0:	68e3      	ldr	r3, [r4, #12]
 8008ae2:	4a0d      	ldr	r2, [pc, #52]	; (8008b18 <HAL_RCC_OscConfig+0x2c0>)
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	f47f af0e 	bne.w	8008906 <HAL_RCC_OscConfig+0xae>
        __HAL_RCC_HSI_DISABLE();
 8008aea:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8008aec:	f7fe ff10 	bl	8007910 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008af0:	4e05      	ldr	r6, [pc, #20]	; (8008b08 <HAL_RCC_OscConfig+0x2b0>)
        tickstart = HAL_GetTick();
 8008af2:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008af4:	6833      	ldr	r3, [r6, #0]
 8008af6:	0799      	lsls	r1, r3, #30
 8008af8:	f57f af1b 	bpl.w	8008932 <HAL_RCC_OscConfig+0xda>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008afc:	f7fe ff08 	bl	8007910 <HAL_GetTick>
 8008b00:	1b40      	subs	r0, r0, r5
 8008b02:	2802      	cmp	r0, #2
 8008b04:	d9f6      	bls.n	8008af4 <HAL_RCC_OscConfig+0x29c>
 8008b06:	e6d2      	b.n	80088ae <HAL_RCC_OscConfig+0x56>
 8008b08:	40023800 	.word	0x40023800
 8008b0c:	42470e80 	.word	0x42470e80
 8008b10:	40007000 	.word	0x40007000
 8008b14:	42470060 	.word	0x42470060
 8008b18:	42470000 	.word	0x42470000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008b1c:	4b07      	ldr	r3, [pc, #28]	; (8008b3c <HAL_RCC_OscConfig+0x2e4>)
 8008b1e:	681a      	ldr	r2, [r3, #0]
 8008b20:	0792      	lsls	r2, r2, #30
 8008b22:	d503      	bpl.n	8008b2c <HAL_RCC_OscConfig+0x2d4>
 8008b24:	68e2      	ldr	r2, [r4, #12]
 8008b26:	2a01      	cmp	r2, #1
 8008b28:	f47f aec7 	bne.w	80088ba <HAL_RCC_OscConfig+0x62>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008b2c:	681a      	ldr	r2, [r3, #0]
 8008b2e:	6921      	ldr	r1, [r4, #16]
 8008b30:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8008b34:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8008b38:	601a      	str	r2, [r3, #0]
 8008b3a:	e6fa      	b.n	8008932 <HAL_RCC_OscConfig+0xda>
 8008b3c:	40023800 	.word	0x40023800

08008b40 <_ZL29SPI_WaitFlagStateUntilTimeoutP19__SPI_HandleTypeDefmmmm>:
  * @param Timeout Timeout duration
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
 8008b40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b44:	9f06      	ldr	r7, [sp, #24]
 8008b46:	4604      	mov	r4, r0
 8008b48:	460e      	mov	r6, r1
 8008b4a:	4690      	mov	r8, r2
 8008b4c:	461d      	mov	r5, r3
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8008b4e:	6823      	ldr	r3, [r4, #0]
 8008b50:	689a      	ldr	r2, [r3, #8]
 8008b52:	ea36 0202 	bics.w	r2, r6, r2
 8008b56:	bf0c      	ite	eq
 8008b58:	2201      	moveq	r2, #1
 8008b5a:	2200      	movne	r2, #0
 8008b5c:	4590      	cmp	r8, r2
 8008b5e:	d032      	beq.n	8008bc6 <_ZL29SPI_WaitFlagStateUntilTimeoutP19__SPI_HandleTypeDefmmmm+0x86>
  {
    if(Timeout != HAL_MAX_DELAY)
 8008b60:	1c6a      	adds	r2, r5, #1
 8008b62:	d0f5      	beq.n	8008b50 <_ZL29SPI_WaitFlagStateUntilTimeoutP19__SPI_HandleTypeDefmmmm+0x10>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 8008b64:	b125      	cbz	r5, 8008b70 <_ZL29SPI_WaitFlagStateUntilTimeoutP19__SPI_HandleTypeDefmmmm+0x30>
 8008b66:	f7fe fed3 	bl	8007910 <HAL_GetTick>
 8008b6a:	1bc0      	subs	r0, r0, r7
 8008b6c:	4285      	cmp	r5, r0
 8008b6e:	d8ee      	bhi.n	8008b4e <_ZL29SPI_WaitFlagStateUntilTimeoutP19__SPI_HandleTypeDefmmmm+0xe>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008b70:	6823      	ldr	r3, [r4, #0]
 8008b72:	685a      	ldr	r2, [r3, #4]
 8008b74:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008b78:	605a      	str	r2, [r3, #4]

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008b7a:	6862      	ldr	r2, [r4, #4]
 8008b7c:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8008b80:	d10a      	bne.n	8008b98 <_ZL29SPI_WaitFlagStateUntilTimeoutP19__SPI_HandleTypeDefmmmm+0x58>
 8008b82:	68a2      	ldr	r2, [r4, #8]
 8008b84:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8008b88:	d002      	beq.n	8008b90 <_ZL29SPI_WaitFlagStateUntilTimeoutP19__SPI_HandleTypeDefmmmm+0x50>
 8008b8a:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8008b8e:	d103      	bne.n	8008b98 <_ZL29SPI_WaitFlagStateUntilTimeoutP19__SPI_HandleTypeDefmmmm+0x58>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008b90:	681a      	ldr	r2, [r3, #0]
 8008b92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008b96:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008b98:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8008b9a:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8008b9e:	d109      	bne.n	8008bb4 <_ZL29SPI_WaitFlagStateUntilTimeoutP19__SPI_HandleTypeDefmmmm+0x74>
        {
          SPI_RESET_CRC(hspi);
 8008ba0:	681a      	ldr	r2, [r3, #0]
 8008ba2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008ba6:	0412      	lsls	r2, r2, #16
 8008ba8:	0c12      	lsrs	r2, r2, #16
 8008baa:	601a      	str	r2, [r3, #0]
 8008bac:	681a      	ldr	r2, [r3, #0]
 8008bae:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008bb2:	601a      	str	r2, [r3, #0]
        }

        hspi->State= HAL_SPI_STATE_READY;
 8008bb4:	2301      	movs	r3, #1
 8008bb6:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008bba:	2300      	movs	r3, #0
 8008bbc:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8008bc0:	2003      	movs	r0, #3
 8008bc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8008bc6:	2000      	movs	r0, #0
 8008bc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008bcc <_ZL17SPI_CheckFlag_BSYP19__SPI_HandleTypeDefmm>:
  * @param Timeout Timeout duration
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008bcc:	b513      	push	{r0, r1, r4, lr}
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008bce:	460b      	mov	r3, r1
 8008bd0:	9200      	str	r2, [sp, #0]
 8008bd2:	2180      	movs	r1, #128	; 0x80
 8008bd4:	2200      	movs	r2, #0
{
 8008bd6:	4604      	mov	r4, r0
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008bd8:	f7ff ffb2 	bl	8008b40 <_ZL29SPI_WaitFlagStateUntilTimeoutP19__SPI_HandleTypeDefmmmm>
 8008bdc:	b120      	cbz	r0, 8008be8 <_ZL17SPI_CheckFlag_BSYP19__SPI_HandleTypeDefmm+0x1c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008bde:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8008be0:	f043 0320 	orr.w	r3, r3, #32
 8008be4:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_TIMEOUT;
 8008be6:	2003      	movs	r0, #3
  }
  return HAL_OK;
}
 8008be8:	b002      	add	sp, #8
 8008bea:	bd10      	pop	{r4, pc}

08008bec <HAL_SPI_Init>:
{
 8008bec:	b510      	push	{r4, lr}
  if(hspi == NULL)
 8008bee:	4604      	mov	r4, r0
 8008bf0:	2800      	cmp	r0, #0
 8008bf2:	d036      	beq.n	8008c62 <HAL_SPI_Init+0x76>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	6283      	str	r3, [r0, #40]	; 0x28
  if(hspi->State == HAL_SPI_STATE_RESET)
 8008bf8:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8008bfc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8008c00:	b91b      	cbnz	r3, 8008c0a <HAL_SPI_Init+0x1e>
    hspi->Lock = HAL_UNLOCKED;
 8008c02:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8008c06:	f7fe f805 	bl	8006c14 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 8008c0a:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8008c0c:	68a0      	ldr	r0, [r4, #8]
 8008c0e:	69a2      	ldr	r2, [r4, #24]
  hspi->State = HAL_SPI_STATE_BUSY;
 8008c10:	2302      	movs	r3, #2
 8008c12:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8008c16:	680b      	ldr	r3, [r1, #0]
 8008c18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c1c:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8008c1e:	6863      	ldr	r3, [r4, #4]
 8008c20:	4303      	orrs	r3, r0
 8008c22:	68e0      	ldr	r0, [r4, #12]
 8008c24:	4303      	orrs	r3, r0
 8008c26:	6920      	ldr	r0, [r4, #16]
 8008c28:	4303      	orrs	r3, r0
 8008c2a:	6960      	ldr	r0, [r4, #20]
 8008c2c:	4303      	orrs	r3, r0
 8008c2e:	69e0      	ldr	r0, [r4, #28]
 8008c30:	4303      	orrs	r3, r0
 8008c32:	6a20      	ldr	r0, [r4, #32]
 8008c34:	4303      	orrs	r3, r0
 8008c36:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8008c38:	4303      	orrs	r3, r0
 8008c3a:	f402 7000 	and.w	r0, r2, #512	; 0x200
 8008c3e:	4303      	orrs	r3, r0
 8008c40:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8008c42:	0c12      	lsrs	r2, r2, #16
 8008c44:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c46:	f002 0204 	and.w	r2, r2, #4
 8008c4a:	431a      	orrs	r2, r3
 8008c4c:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008c4e:	69cb      	ldr	r3, [r1, #28]
 8008c50:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008c54:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008c56:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8008c58:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008c5a:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008c5c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  return HAL_OK;
 8008c60:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8008c62:	2001      	movs	r0, #1
}
 8008c64:	bd10      	pop	{r4, pc}

08008c66 <HAL_SPI_Transmit>:
{
 8008c66:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8008c6a:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8008c6c:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8008c70:	2b01      	cmp	r3, #1
{
 8008c72:	4604      	mov	r4, r0
 8008c74:	460d      	mov	r5, r1
 8008c76:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 8008c78:	f000 809d 	beq.w	8008db6 <HAL_SPI_Transmit+0x150>
 8008c7c:	2301      	movs	r3, #1
 8008c7e:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8008c82:	f7fe fe45 	bl	8007910 <HAL_GetTick>
 8008c86:	4607      	mov	r7, r0
  if(hspi->State != HAL_SPI_STATE_READY)
 8008c88:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8008c8c:	b2c0      	uxtb	r0, r0
 8008c8e:	2801      	cmp	r0, #1
 8008c90:	f040 808f 	bne.w	8008db2 <HAL_SPI_Transmit+0x14c>
  if((pData == NULL ) || (Size == 0))
 8008c94:	2d00      	cmp	r5, #0
 8008c96:	d03d      	beq.n	8008d14 <HAL_SPI_Transmit+0xae>
 8008c98:	f1b8 0f00 	cmp.w	r8, #0
 8008c9c:	d03a      	beq.n	8008d14 <HAL_SPI_Transmit+0xae>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008c9e:	2303      	movs	r3, #3
 8008ca0:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008ca8:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8008caa:	f8a4 8036 	strh.w	r8, [r4, #54]	; 0x36
  hspi->RxXferSize  = 0U;
 8008cae:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8008cb0:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8008cb2:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 8008cb4:	6423      	str	r3, [r4, #64]	; 0x40
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008cb6:	68a3      	ldr	r3, [r4, #8]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008cb8:	6325      	str	r5, [r4, #48]	; 0x30
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008cba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008cbe:	6823      	ldr	r3, [r4, #0]
  hspi->TxXferSize  = Size;
 8008cc0:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
    SPI_1LINE_TX(hspi);
 8008cc4:	bf02      	ittt	eq
 8008cc6:	681a      	ldreq	r2, [r3, #0]
 8008cc8:	f442 4280 	orreq.w	r2, r2, #16384	; 0x4000
 8008ccc:	601a      	streq	r2, [r3, #0]
  if((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008cce:	681a      	ldr	r2, [r3, #0]
 8008cd0:	0652      	lsls	r2, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8008cd2:	bf5e      	ittt	pl
 8008cd4:	681a      	ldrpl	r2, [r3, #0]
 8008cd6:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 8008cda:	601a      	strpl	r2, [r3, #0]
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008cdc:	68e2      	ldr	r2, [r4, #12]
 8008cde:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8008ce2:	6862      	ldr	r2, [r4, #4]
 8008ce4:	d127      	bne.n	8008d36 <HAL_SPI_Transmit+0xd0>
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 8008ce6:	b15a      	cbz	r2, 8008d00 <HAL_SPI_Transmit+0x9a>
 8008ce8:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8008cea:	b292      	uxth	r2, r2
 8008cec:	2a01      	cmp	r2, #1
 8008cee:	d007      	beq.n	8008d00 <HAL_SPI_Transmit+0x9a>
    while (hspi->TxXferCount > 0U)
 8008cf0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8008cf2:	b29b      	uxth	r3, r3
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d03c      	beq.n	8008d72 <HAL_SPI_Transmit+0x10c>
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008cf8:	6823      	ldr	r3, [r4, #0]
 8008cfa:	689a      	ldr	r2, [r3, #8]
 8008cfc:	0790      	lsls	r0, r2, #30
 8008cfe:	d507      	bpl.n	8008d10 <HAL_SPI_Transmit+0xaa>
      hspi->Instance->DR = *((uint16_t *)pData);
 8008d00:	f835 2b02 	ldrh.w	r2, [r5], #2
 8008d04:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8008d06:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8008d08:	3b01      	subs	r3, #1
 8008d0a:	b29b      	uxth	r3, r3
 8008d0c:	86e3      	strh	r3, [r4, #54]	; 0x36
 8008d0e:	e7ef      	b.n	8008cf0 <HAL_SPI_Transmit+0x8a>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8008d10:	b94e      	cbnz	r6, 8008d26 <HAL_SPI_Transmit+0xc0>
          errorcode = HAL_TIMEOUT;
 8008d12:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8008d14:	2301      	movs	r3, #1
 8008d16:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8008d20:	b004      	add	sp, #16
 8008d22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8008d26:	1c71      	adds	r1, r6, #1
 8008d28:	d0e2      	beq.n	8008cf0 <HAL_SPI_Transmit+0x8a>
 8008d2a:	f7fe fdf1 	bl	8007910 <HAL_GetTick>
 8008d2e:	1bc0      	subs	r0, r0, r7
 8008d30:	4286      	cmp	r6, r0
 8008d32:	d9ee      	bls.n	8008d12 <HAL_SPI_Transmit+0xac>
 8008d34:	e7dc      	b.n	8008cf0 <HAL_SPI_Transmit+0x8a>
    if((hspi->Init.Mode == SPI_MODE_SLAVE)|| (hspi->TxXferCount == 0x01))
 8008d36:	b152      	cbz	r2, 8008d4e <HAL_SPI_Transmit+0xe8>
 8008d38:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8008d3a:	b292      	uxth	r2, r2
 8008d3c:	2a01      	cmp	r2, #1
 8008d3e:	d006      	beq.n	8008d4e <HAL_SPI_Transmit+0xe8>
    while (hspi->TxXferCount > 0U)
 8008d40:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8008d42:	b29b      	uxth	r3, r3
 8008d44:	b1ab      	cbz	r3, 8008d72 <HAL_SPI_Transmit+0x10c>
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008d46:	6823      	ldr	r3, [r4, #0]
 8008d48:	689a      	ldr	r2, [r3, #8]
 8008d4a:	0792      	lsls	r2, r2, #30
 8008d4c:	d507      	bpl.n	8008d5e <HAL_SPI_Transmit+0xf8>
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 8008d4e:	f815 2b01 	ldrb.w	r2, [r5], #1
 8008d52:	731a      	strb	r2, [r3, #12]
      hspi->TxXferCount--;
 8008d54:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8008d56:	3b01      	subs	r3, #1
 8008d58:	b29b      	uxth	r3, r3
 8008d5a:	86e3      	strh	r3, [r4, #54]	; 0x36
 8008d5c:	e7f0      	b.n	8008d40 <HAL_SPI_Transmit+0xda>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8008d5e:	2e00      	cmp	r6, #0
 8008d60:	d0d7      	beq.n	8008d12 <HAL_SPI_Transmit+0xac>
 8008d62:	1c73      	adds	r3, r6, #1
 8008d64:	d0ec      	beq.n	8008d40 <HAL_SPI_Transmit+0xda>
 8008d66:	f7fe fdd3 	bl	8007910 <HAL_GetTick>
 8008d6a:	1bc0      	subs	r0, r0, r7
 8008d6c:	4286      	cmp	r6, r0
 8008d6e:	d9d0      	bls.n	8008d12 <HAL_SPI_Transmit+0xac>
 8008d70:	e7e6      	b.n	8008d40 <HAL_SPI_Transmit+0xda>
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 8008d72:	9700      	str	r7, [sp, #0]
 8008d74:	4633      	mov	r3, r6
 8008d76:	2201      	movs	r2, #1
 8008d78:	2102      	movs	r1, #2
 8008d7a:	4620      	mov	r0, r4
 8008d7c:	f7ff fee0 	bl	8008b40 <_ZL29SPI_WaitFlagStateUntilTimeoutP19__SPI_HandleTypeDefmmmm>
 8008d80:	2800      	cmp	r0, #0
 8008d82:	d1c6      	bne.n	8008d12 <HAL_SPI_Transmit+0xac>
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 8008d84:	463a      	mov	r2, r7
 8008d86:	4631      	mov	r1, r6
 8008d88:	4620      	mov	r0, r4
 8008d8a:	f7ff ff1f 	bl	8008bcc <_ZL17SPI_CheckFlag_BSYP19__SPI_HandleTypeDefmm>
 8008d8e:	b118      	cbz	r0, 8008d98 <HAL_SPI_Transmit+0x132>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008d90:	2320      	movs	r3, #32
 8008d92:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8008d94:	2001      	movs	r0, #1
    goto error;
 8008d96:	e7bd      	b.n	8008d14 <HAL_SPI_Transmit+0xae>
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008d98:	68a3      	ldr	r3, [r4, #8]
 8008d9a:	b92b      	cbnz	r3, 8008da8 <HAL_SPI_Transmit+0x142>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008d9c:	9303      	str	r3, [sp, #12]
 8008d9e:	6823      	ldr	r3, [r4, #0]
 8008da0:	68da      	ldr	r2, [r3, #12]
 8008da2:	9203      	str	r2, [sp, #12]
 8008da4:	689b      	ldr	r3, [r3, #8]
 8008da6:	9303      	str	r3, [sp, #12]
  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008da8:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 8008daa:	3000      	adds	r0, #0
 8008dac:	bf18      	it	ne
 8008dae:	2001      	movne	r0, #1
 8008db0:	e7b0      	b.n	8008d14 <HAL_SPI_Transmit+0xae>
 8008db2:	2002      	movs	r0, #2
 8008db4:	e7ae      	b.n	8008d14 <HAL_SPI_Transmit+0xae>
  __HAL_LOCK(hspi);
 8008db6:	2002      	movs	r0, #2
 8008db8:	e7b2      	b.n	8008d20 <HAL_SPI_Transmit+0xba>

08008dba <HAL_SPI_TransmitReceive>:
{
 8008dba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008dbe:	4699      	mov	r9, r3
  __HAL_LOCK(hspi);
 8008dc0:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8008dc4:	b085      	sub	sp, #20
  __HAL_LOCK(hspi);
 8008dc6:	2b01      	cmp	r3, #1
{
 8008dc8:	4604      	mov	r4, r0
 8008dca:	460d      	mov	r5, r1
 8008dcc:	4616      	mov	r6, r2
 8008dce:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  __HAL_LOCK(hspi);
 8008dd0:	f000 80a8 	beq.w	8008f24 <HAL_SPI_TransmitReceive+0x16a>
 8008dd4:	2301      	movs	r3, #1
 8008dd6:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8008dda:	f7fe fd99 	bl	8007910 <HAL_GetTick>
  tmp  = hspi->State;
 8008dde:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tmp1 = hspi->Init.Mode;
 8008de2:	6861      	ldr	r1, [r4, #4]
  tmp  = hspi->State;
 8008de4:	b2db      	uxtb	r3, r3
  if(!((tmp == HAL_SPI_STATE_READY) || \
 8008de6:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8008de8:	4680      	mov	r8, r0
  if(!((tmp == HAL_SPI_STATE_READY) || \
 8008dea:	d00a      	beq.n	8008e02 <HAL_SPI_TransmitReceive+0x48>
 8008dec:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 8008df0:	f040 8096 	bne.w	8008f20 <HAL_SPI_TransmitReceive+0x166>
    ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 8008df4:	68a2      	ldr	r2, [r4, #8]
 8008df6:	2a00      	cmp	r2, #0
 8008df8:	f040 8092 	bne.w	8008f20 <HAL_SPI_TransmitReceive+0x166>
 8008dfc:	2b04      	cmp	r3, #4
 8008dfe:	f040 808f 	bne.w	8008f20 <HAL_SPI_TransmitReceive+0x166>
  if((pTxData == NULL) || (pRxData == NULL) || (Size == 0))
 8008e02:	2d00      	cmp	r5, #0
 8008e04:	d050      	beq.n	8008ea8 <HAL_SPI_TransmitReceive+0xee>
 8008e06:	2e00      	cmp	r6, #0
 8008e08:	d04e      	beq.n	8008ea8 <HAL_SPI_TransmitReceive+0xee>
 8008e0a:	f1b9 0f00 	cmp.w	r9, #0
 8008e0e:	d04b      	beq.n	8008ea8 <HAL_SPI_TransmitReceive+0xee>
  if(hspi->State == HAL_SPI_STATE_READY)
 8008e10:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008e14:	63a6      	str	r6, [r4, #56]	; 0x38
  if(hspi->State == HAL_SPI_STATE_READY)
 8008e16:	2b01      	cmp	r3, #1
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008e18:	bf04      	itt	eq
 8008e1a:	2305      	moveq	r3, #5
 8008e1c:	f884 3051 	strbeq.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008e20:	2300      	movs	r3, #0
 8008e22:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxISR       = NULL;
 8008e24:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008e26:	6463      	str	r3, [r4, #68]	; 0x44
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8008e28:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 8008e2a:	f8a4 903e 	strh.w	r9, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 8008e2e:	f8a4 9036 	strh.w	r9, [r4, #54]	; 0x36
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8008e32:	681a      	ldr	r2, [r3, #0]
  hspi->RxXferSize  = Size;
 8008e34:	f8a4 903c 	strh.w	r9, [r4, #60]	; 0x3c
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8008e38:	0650      	lsls	r0, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8008e3a:	bf58      	it	pl
 8008e3c:	681a      	ldrpl	r2, [r3, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008e3e:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_SPI_ENABLE(hspi);
 8008e40:	bf58      	it	pl
 8008e42:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
  hspi->TxXferSize  = Size;
 8008e46:	f8a4 9034 	strh.w	r9, [r4, #52]	; 0x34
    __HAL_SPI_ENABLE(hspi);
 8008e4a:	bf58      	it	pl
 8008e4c:	601a      	strpl	r2, [r3, #0]
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008e4e:	68e2      	ldr	r2, [r4, #12]
 8008e50:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8008e54:	d12a      	bne.n	8008eac <HAL_SPI_TransmitReceive+0xf2>
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8008e56:	b119      	cbz	r1, 8008e60 <HAL_SPI_TransmitReceive+0xa6>
 8008e58:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8008e5a:	b292      	uxth	r2, r2
 8008e5c:	2a01      	cmp	r2, #1
 8008e5e:	d106      	bne.n	8008e6e <HAL_SPI_TransmitReceive+0xb4>
      hspi->Instance->DR = *((uint16_t *)pTxData);
 8008e60:	f835 2b02 	ldrh.w	r2, [r5], #2
 8008e64:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8008e66:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8008e68:	3b01      	subs	r3, #1
 8008e6a:	b29b      	uxth	r3, r3
 8008e6c:	86e3      	strh	r3, [r4, #54]	; 0x36
{
 8008e6e:	f04f 0901 	mov.w	r9, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008e72:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8008e74:	b29b      	uxth	r3, r3
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d156      	bne.n	8008f28 <HAL_SPI_TransmitReceive+0x16e>
 8008e7a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8008e7c:	b29b      	uxth	r3, r3
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d152      	bne.n	8008f28 <HAL_SPI_TransmitReceive+0x16e>
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 8008e82:	f8cd 8000 	str.w	r8, [sp]
 8008e86:	463b      	mov	r3, r7
 8008e88:	2201      	movs	r2, #1
 8008e8a:	2102      	movs	r1, #2
 8008e8c:	4620      	mov	r0, r4
 8008e8e:	f7ff fe57 	bl	8008b40 <_ZL29SPI_WaitFlagStateUntilTimeoutP19__SPI_HandleTypeDefmmmm>
 8008e92:	2800      	cmp	r0, #0
 8008e94:	d161      	bne.n	8008f5a <HAL_SPI_TransmitReceive+0x1a0>
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 8008e96:	4642      	mov	r2, r8
 8008e98:	4639      	mov	r1, r7
 8008e9a:	4620      	mov	r0, r4
 8008e9c:	f7ff fe96 	bl	8008bcc <_ZL17SPI_CheckFlag_BSYP19__SPI_HandleTypeDefmm>
 8008ea0:	2800      	cmp	r0, #0
 8008ea2:	d033      	beq.n	8008f0c <HAL_SPI_TransmitReceive+0x152>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008ea4:	2320      	movs	r3, #32
 8008ea6:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8008ea8:	2001      	movs	r0, #1
 8008eaa:	e057      	b.n	8008f5c <HAL_SPI_TransmitReceive+0x1a2>
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8008eac:	b119      	cbz	r1, 8008eb6 <HAL_SPI_TransmitReceive+0xfc>
 8008eae:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8008eb0:	b292      	uxth	r2, r2
 8008eb2:	2a01      	cmp	r2, #1
 8008eb4:	d106      	bne.n	8008ec4 <HAL_SPI_TransmitReceive+0x10a>
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pTxData);
 8008eb6:	f815 2b01 	ldrb.w	r2, [r5], #1
 8008eba:	731a      	strb	r2, [r3, #12]
      hspi->TxXferCount--;
 8008ebc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8008ebe:	3b01      	subs	r3, #1
 8008ec0:	b29b      	uxth	r3, r3
 8008ec2:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8008ec4:	f04f 0901 	mov.w	r9, #1
 8008ec8:	e015      	b.n	8008ef6 <HAL_SPI_TransmitReceive+0x13c>
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8008eca:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8008ecc:	b29b      	uxth	r3, r3
 8008ece:	b11b      	cbz	r3, 8008ed8 <HAL_SPI_TransmitReceive+0x11e>
 8008ed0:	6823      	ldr	r3, [r4, #0]
 8008ed2:	689a      	ldr	r2, [r3, #8]
 8008ed4:	0791      	lsls	r1, r2, #30
 8008ed6:	d45e      	bmi.n	8008f96 <HAL_SPI_TransmitReceive+0x1dc>
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8008ed8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8008eda:	b29b      	uxth	r3, r3
 8008edc:	b11b      	cbz	r3, 8008ee6 <HAL_SPI_TransmitReceive+0x12c>
 8008ede:	6823      	ldr	r3, [r4, #0]
 8008ee0:	689a      	ldr	r2, [r3, #8]
 8008ee2:	07d2      	lsls	r2, r2, #31
 8008ee4:	d461      	bmi.n	8008faa <HAL_SPI_TransmitReceive+0x1f0>
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 8008ee6:	1c7b      	adds	r3, r7, #1
 8008ee8:	d005      	beq.n	8008ef6 <HAL_SPI_TransmitReceive+0x13c>
 8008eea:	f7fe fd11 	bl	8007910 <HAL_GetTick>
 8008eee:	eba0 0008 	sub.w	r0, r0, r8
 8008ef2:	4287      	cmp	r7, r0
 8008ef4:	d931      	bls.n	8008f5a <HAL_SPI_TransmitReceive+0x1a0>
    while((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008ef6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8008ef8:	b29b      	uxth	r3, r3
 8008efa:	b91b      	cbnz	r3, 8008f04 <HAL_SPI_TransmitReceive+0x14a>
 8008efc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8008efe:	b29b      	uxth	r3, r3
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d0be      	beq.n	8008e82 <HAL_SPI_TransmitReceive+0xc8>
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8008f04:	f1b9 0f00 	cmp.w	r9, #0
 8008f08:	d1df      	bne.n	8008eca <HAL_SPI_TransmitReceive+0x110>
 8008f0a:	e7e5      	b.n	8008ed8 <HAL_SPI_TransmitReceive+0x11e>
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008f0c:	68a3      	ldr	r3, [r4, #8]
 8008f0e:	bb2b      	cbnz	r3, 8008f5c <HAL_SPI_TransmitReceive+0x1a2>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008f10:	6822      	ldr	r2, [r4, #0]
 8008f12:	9303      	str	r3, [sp, #12]
 8008f14:	68d1      	ldr	r1, [r2, #12]
 8008f16:	9103      	str	r1, [sp, #12]
 8008f18:	6892      	ldr	r2, [r2, #8]
 8008f1a:	9203      	str	r2, [sp, #12]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	e01d      	b.n	8008f5c <HAL_SPI_TransmitReceive+0x1a2>
    errorcode = HAL_BUSY;
 8008f20:	2002      	movs	r0, #2
 8008f22:	e01b      	b.n	8008f5c <HAL_SPI_TransmitReceive+0x1a2>
  __HAL_LOCK(hspi);
 8008f24:	2002      	movs	r0, #2
 8008f26:	e01f      	b.n	8008f68 <HAL_SPI_TransmitReceive+0x1ae>
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8008f28:	f1b9 0f00 	cmp.w	r9, #0
 8008f2c:	d006      	beq.n	8008f3c <HAL_SPI_TransmitReceive+0x182>
 8008f2e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8008f30:	b29b      	uxth	r3, r3
 8008f32:	b11b      	cbz	r3, 8008f3c <HAL_SPI_TransmitReceive+0x182>
 8008f34:	6823      	ldr	r3, [r4, #0]
 8008f36:	689a      	ldr	r2, [r3, #8]
 8008f38:	0791      	lsls	r1, r2, #30
 8008f3a:	d418      	bmi.n	8008f6e <HAL_SPI_TransmitReceive+0x1b4>
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8008f3c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8008f3e:	b29b      	uxth	r3, r3
 8008f40:	b11b      	cbz	r3, 8008f4a <HAL_SPI_TransmitReceive+0x190>
 8008f42:	6823      	ldr	r3, [r4, #0]
 8008f44:	689a      	ldr	r2, [r3, #8]
 8008f46:	07d2      	lsls	r2, r2, #31
 8008f48:	d41b      	bmi.n	8008f82 <HAL_SPI_TransmitReceive+0x1c8>
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 8008f4a:	1c78      	adds	r0, r7, #1
 8008f4c:	d091      	beq.n	8008e72 <HAL_SPI_TransmitReceive+0xb8>
 8008f4e:	f7fe fcdf 	bl	8007910 <HAL_GetTick>
 8008f52:	eba0 0008 	sub.w	r0, r0, r8
 8008f56:	4287      	cmp	r7, r0
 8008f58:	d88b      	bhi.n	8008e72 <HAL_SPI_TransmitReceive+0xb8>
        errorcode = HAL_TIMEOUT;
 8008f5a:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8008f5c:	2301      	movs	r3, #1
 8008f5e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008f62:	2300      	movs	r3, #0
 8008f64:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8008f68:	b005      	add	sp, #20
 8008f6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        hspi->Instance->DR = *((uint16_t *)pTxData);
 8008f6e:	f835 2b02 	ldrh.w	r2, [r5], #2
 8008f72:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 8008f74:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8008f76:	3b01      	subs	r3, #1
 8008f78:	b29b      	uxth	r3, r3
 8008f7a:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8008f7c:	f04f 0900 	mov.w	r9, #0
 8008f80:	e7dc      	b.n	8008f3c <HAL_SPI_TransmitReceive+0x182>
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 8008f82:	68db      	ldr	r3, [r3, #12]
 8008f84:	f826 3b02 	strh.w	r3, [r6], #2
        hspi->RxXferCount--;
 8008f88:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8008f8a:	3b01      	subs	r3, #1
 8008f8c:	b29b      	uxth	r3, r3
 8008f8e:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8008f90:	f04f 0901 	mov.w	r9, #1
 8008f94:	e7d9      	b.n	8008f4a <HAL_SPI_TransmitReceive+0x190>
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8008f96:	782a      	ldrb	r2, [r5, #0]
 8008f98:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8008f9a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8008f9c:	3b01      	subs	r3, #1
 8008f9e:	b29b      	uxth	r3, r3
 8008fa0:	86e3      	strh	r3, [r4, #54]	; 0x36
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8008fa2:	3501      	adds	r5, #1
        txallowed = 0U;
 8008fa4:	f04f 0900 	mov.w	r9, #0
 8008fa8:	e796      	b.n	8008ed8 <HAL_SPI_TransmitReceive+0x11e>
        (*(uint8_t *)pRxData++) = hspi->Instance->DR;
 8008faa:	68db      	ldr	r3, [r3, #12]
 8008fac:	7033      	strb	r3, [r6, #0]
        hspi->RxXferCount--;
 8008fae:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8008fb0:	3b01      	subs	r3, #1
 8008fb2:	b29b      	uxth	r3, r3
 8008fb4:	87e3      	strh	r3, [r4, #62]	; 0x3e
        (*(uint8_t *)pRxData++) = hspi->Instance->DR;
 8008fb6:	3601      	adds	r6, #1
        txallowed = 1U;
 8008fb8:	f04f 0901 	mov.w	r9, #1
 8008fbc:	e793      	b.n	8008ee6 <HAL_SPI_TransmitReceive+0x12c>

08008fbe <HAL_SPI_Receive>:
{
 8008fbe:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8008fc2:	461e      	mov	r6, r3
  if((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8008fc4:	6843      	ldr	r3, [r0, #4]
 8008fc6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
{
 8008fca:	4604      	mov	r4, r0
 8008fcc:	460d      	mov	r5, r1
 8008fce:	4690      	mov	r8, r2
  if((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8008fd0:	d10c      	bne.n	8008fec <HAL_SPI_Receive+0x2e>
 8008fd2:	6883      	ldr	r3, [r0, #8]
 8008fd4:	b953      	cbnz	r3, 8008fec <HAL_SPI_Receive+0x2e>
     hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008fd6:	2304      	movs	r3, #4
 8008fd8:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
    return HAL_SPI_TransmitReceive(hspi,pData,pData,Size,Timeout);
 8008fdc:	4613      	mov	r3, r2
 8008fde:	9600      	str	r6, [sp, #0]
 8008fe0:	460a      	mov	r2, r1
 8008fe2:	f7ff feea 	bl	8008dba <HAL_SPI_TransmitReceive>
}
 8008fe6:	b002      	add	sp, #8
 8008fe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hspi);
 8008fec:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8008ff0:	2b01      	cmp	r3, #1
 8008ff2:	f000 8081 	beq.w	80090f8 <HAL_SPI_Receive+0x13a>
 8008ff6:	2301      	movs	r3, #1
 8008ff8:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 8008ffc:	f7fe fc88 	bl	8007910 <HAL_GetTick>
 8009000:	4607      	mov	r7, r0
  if(hspi->State != HAL_SPI_STATE_READY)
 8009002:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8009006:	b2c0      	uxtb	r0, r0
 8009008:	2801      	cmp	r0, #1
 800900a:	d173      	bne.n	80090f4 <HAL_SPI_Receive+0x136>
  if((pData == NULL ) || (Size == 0))
 800900c:	2d00      	cmp	r5, #0
 800900e:	d035      	beq.n	800907c <HAL_SPI_Receive+0xbe>
 8009010:	f1b8 0f00 	cmp.w	r8, #0
 8009014:	d032      	beq.n	800907c <HAL_SPI_Receive+0xbe>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8009016:	2304      	movs	r3, #4
 8009018:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800901c:	2300      	movs	r3, #0
 800901e:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8009020:	6323      	str	r3, [r4, #48]	; 0x30
  hspi->RxXferCount = Size;
 8009022:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e
  hspi->TxXferSize  = 0U;
 8009026:	86a3      	strh	r3, [r4, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8009028:	86e3      	strh	r3, [r4, #54]	; 0x36
  hspi->RxISR       = NULL;
 800902a:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 800902c:	6463      	str	r3, [r4, #68]	; 0x44
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800902e:	68a3      	ldr	r3, [r4, #8]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8009030:	63a5      	str	r5, [r4, #56]	; 0x38
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009032:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009036:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferSize  = Size;
 8009038:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
    SPI_1LINE_RX(hspi);
 800903c:	bf02      	ittt	eq
 800903e:	681a      	ldreq	r2, [r3, #0]
 8009040:	f422 4280 	biceq.w	r2, r2, #16384	; 0x4000
 8009044:	601a      	streq	r2, [r3, #0]
  if((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009046:	681a      	ldr	r2, [r3, #0]
 8009048:	0652      	lsls	r2, r2, #25
    __HAL_SPI_ENABLE(hspi);
 800904a:	bf5e      	ittt	pl
 800904c:	681a      	ldrpl	r2, [r3, #0]
 800904e:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 8009052:	601a      	strpl	r2, [r3, #0]
  if(hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8009054:	68e3      	ldr	r3, [r4, #12]
 8009056:	bb4b      	cbnz	r3, 80090ac <HAL_SPI_Receive+0xee>
    while(hspi->RxXferCount > 0U)
 8009058:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800905a:	b29b      	uxth	r3, r3
 800905c:	2b00      	cmp	r3, #0
 800905e:	d034      	beq.n	80090ca <HAL_SPI_Receive+0x10c>
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009060:	6823      	ldr	r3, [r4, #0]
 8009062:	689a      	ldr	r2, [r3, #8]
 8009064:	07d0      	lsls	r0, r2, #31
 8009066:	d507      	bpl.n	8009078 <HAL_SPI_Receive+0xba>
        (* (uint8_t *)pData)= *(__IO uint8_t *)&hspi->Instance->DR;
 8009068:	7b1b      	ldrb	r3, [r3, #12]
 800906a:	f805 3b01 	strb.w	r3, [r5], #1
        hspi->RxXferCount--;
 800906e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8009070:	3b01      	subs	r3, #1
 8009072:	b29b      	uxth	r3, r3
 8009074:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8009076:	e7ef      	b.n	8009058 <HAL_SPI_Receive+0x9a>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8009078:	b93e      	cbnz	r6, 800908a <HAL_SPI_Receive+0xcc>
          errorcode = HAL_TIMEOUT;
 800907a:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 800907c:	2301      	movs	r3, #1
 800907e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8009082:	2300      	movs	r3, #0
 8009084:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  return errorcode;
 8009088:	e7ad      	b.n	8008fe6 <HAL_SPI_Receive+0x28>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 800908a:	1c71      	adds	r1, r6, #1
 800908c:	d0e4      	beq.n	8009058 <HAL_SPI_Receive+0x9a>
 800908e:	f7fe fc3f 	bl	8007910 <HAL_GetTick>
 8009092:	1bc0      	subs	r0, r0, r7
 8009094:	4286      	cmp	r6, r0
 8009096:	d9f0      	bls.n	800907a <HAL_SPI_Receive+0xbc>
 8009098:	e7de      	b.n	8009058 <HAL_SPI_Receive+0x9a>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 800909a:	2e00      	cmp	r6, #0
 800909c:	d0ed      	beq.n	800907a <HAL_SPI_Receive+0xbc>
 800909e:	1c73      	adds	r3, r6, #1
 80090a0:	d004      	beq.n	80090ac <HAL_SPI_Receive+0xee>
 80090a2:	f7fe fc35 	bl	8007910 <HAL_GetTick>
 80090a6:	1bc0      	subs	r0, r0, r7
 80090a8:	4286      	cmp	r6, r0
 80090aa:	d9e6      	bls.n	800907a <HAL_SPI_Receive+0xbc>
    while(hspi->RxXferCount > 0U)
 80090ac:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80090ae:	b29b      	uxth	r3, r3
 80090b0:	b15b      	cbz	r3, 80090ca <HAL_SPI_Receive+0x10c>
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80090b2:	6823      	ldr	r3, [r4, #0]
 80090b4:	689a      	ldr	r2, [r3, #8]
 80090b6:	07d2      	lsls	r2, r2, #31
 80090b8:	d5ef      	bpl.n	800909a <HAL_SPI_Receive+0xdc>
        *((uint16_t*)pData) = hspi->Instance->DR;
 80090ba:	68db      	ldr	r3, [r3, #12]
 80090bc:	f825 3b02 	strh.w	r3, [r5], #2
        hspi->RxXferCount--;
 80090c0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80090c2:	3b01      	subs	r3, #1
 80090c4:	b29b      	uxth	r3, r3
 80090c6:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80090c8:	e7f0      	b.n	80090ac <HAL_SPI_Receive+0xee>
  if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80090ca:	6863      	ldr	r3, [r4, #4]
 80090cc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80090d0:	d10b      	bne.n	80090ea <HAL_SPI_Receive+0x12c>
 80090d2:	68a3      	ldr	r3, [r4, #8]
 80090d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80090d8:	d002      	beq.n	80090e0 <HAL_SPI_Receive+0x122>
 80090da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80090de:	d104      	bne.n	80090ea <HAL_SPI_Receive+0x12c>
    __HAL_SPI_DISABLE(hspi);
 80090e0:	6822      	ldr	r2, [r4, #0]
 80090e2:	6813      	ldr	r3, [r2, #0]
 80090e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80090e8:	6013      	str	r3, [r2, #0]
  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80090ea:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 80090ec:	3000      	adds	r0, #0
 80090ee:	bf18      	it	ne
 80090f0:	2001      	movne	r0, #1
 80090f2:	e7c3      	b.n	800907c <HAL_SPI_Receive+0xbe>
 80090f4:	2002      	movs	r0, #2
 80090f6:	e7c1      	b.n	800907c <HAL_SPI_Receive+0xbe>
  __HAL_LOCK(hspi);
 80090f8:	2002      	movs	r0, #2
 80090fa:	e774      	b.n	8008fe6 <HAL_SPI_Receive+0x28>

080090fc <HAL_SPI_ErrorCallback>:
 80090fc:	4770      	bx	lr
	...

08009100 <HAL_SPI_IRQHandler>:
  uint32_t itsource = hspi->Instance->CR2;
 8009100:	6803      	ldr	r3, [r0, #0]
{
 8009102:	b530      	push	{r4, r5, lr}
  uint32_t itsource = hspi->Instance->CR2;
 8009104:	6859      	ldr	r1, [r3, #4]
  uint32_t itflag   = hspi->Instance->SR;
 8009106:	689a      	ldr	r2, [r3, #8]
  if(((itflag & SPI_FLAG_OVR) == RESET) &&
 8009108:	f002 0541 	and.w	r5, r2, #65	; 0x41
 800910c:	2d01      	cmp	r5, #1
{
 800910e:	b085      	sub	sp, #20
 8009110:	4604      	mov	r4, r0
  if(((itflag & SPI_FLAG_OVR) == RESET) &&
 8009112:	d105      	bne.n	8009120 <HAL_SPI_IRQHandler+0x20>
     ((itflag & SPI_FLAG_RXNE) != RESET) && ((itsource & SPI_IT_RXNE) != RESET))
 8009114:	064d      	lsls	r5, r1, #25
 8009116:	d503      	bpl.n	8009120 <HAL_SPI_IRQHandler+0x20>
    hspi->RxISR(hspi);
 8009118:	6c03      	ldr	r3, [r0, #64]	; 0x40
    hspi->TxISR(hspi);
 800911a:	4798      	blx	r3
}
 800911c:	b005      	add	sp, #20
 800911e:	bd30      	pop	{r4, r5, pc}
  if(((itflag & SPI_FLAG_TXE) != RESET) && ((itsource & SPI_IT_TXE) != RESET))
 8009120:	0795      	lsls	r5, r2, #30
 8009122:	d504      	bpl.n	800912e <HAL_SPI_IRQHandler+0x2e>
 8009124:	0608      	lsls	r0, r1, #24
 8009126:	d502      	bpl.n	800912e <HAL_SPI_IRQHandler+0x2e>
    hspi->TxISR(hspi);
 8009128:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800912a:	4620      	mov	r0, r4
 800912c:	e7f5      	b.n	800911a <HAL_SPI_IRQHandler+0x1a>
  if(((itflag & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE)) != RESET) && ((itsource & SPI_IT_ERR) != RESET))
 800912e:	f412 7fb0 	tst.w	r2, #352	; 0x160
 8009132:	d0f3      	beq.n	800911c <HAL_SPI_IRQHandler+0x1c>
 8009134:	068d      	lsls	r5, r1, #26
 8009136:	d5f1      	bpl.n	800911c <HAL_SPI_IRQHandler+0x1c>
    if((itflag & SPI_FLAG_OVR) != RESET)
 8009138:	0650      	lsls	r0, r2, #25
 800913a:	d50e      	bpl.n	800915a <HAL_SPI_IRQHandler+0x5a>
      if(hspi->State != HAL_SPI_STATE_BUSY_TX)
 800913c:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8009140:	2803      	cmp	r0, #3
 8009142:	f04f 0500 	mov.w	r5, #0
 8009146:	d03e      	beq.n	80091c6 <HAL_SPI_IRQHandler+0xc6>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009148:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800914a:	f040 0004 	orr.w	r0, r0, #4
 800914e:	6560      	str	r0, [r4, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009150:	9500      	str	r5, [sp, #0]
 8009152:	68d8      	ldr	r0, [r3, #12]
 8009154:	9000      	str	r0, [sp, #0]
 8009156:	6898      	ldr	r0, [r3, #8]
 8009158:	9000      	str	r0, [sp, #0]
    if((itflag & SPI_FLAG_MODF) != RESET)
 800915a:	0695      	lsls	r5, r2, #26
 800915c:	d50b      	bpl.n	8009176 <HAL_SPI_IRQHandler+0x76>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800915e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009160:	f040 0001 	orr.w	r0, r0, #1
 8009164:	6560      	str	r0, [r4, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009166:	2000      	movs	r0, #0
 8009168:	9002      	str	r0, [sp, #8]
 800916a:	6898      	ldr	r0, [r3, #8]
 800916c:	9002      	str	r0, [sp, #8]
 800916e:	6818      	ldr	r0, [r3, #0]
 8009170:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 8009174:	6018      	str	r0, [r3, #0]
    if((itflag & SPI_FLAG_FRE) != RESET)
 8009176:	05d0      	lsls	r0, r2, #23
 8009178:	d507      	bpl.n	800918a <HAL_SPI_IRQHandler+0x8a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800917a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800917c:	f042 0208 	orr.w	r2, r2, #8
 8009180:	6562      	str	r2, [r4, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009182:	2200      	movs	r2, #0
 8009184:	9203      	str	r2, [sp, #12]
 8009186:	689a      	ldr	r2, [r3, #8]
 8009188:	9203      	str	r2, [sp, #12]
    if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800918a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800918c:	2a00      	cmp	r2, #0
 800918e:	d0c5      	beq.n	800911c <HAL_SPI_IRQHandler+0x1c>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8009190:	685a      	ldr	r2, [r3, #4]
 8009192:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009196:	605a      	str	r2, [r3, #4]
      hspi->State = HAL_SPI_STATE_READY;
 8009198:	2201      	movs	r2, #1
 800919a:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN))||(HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800919e:	078a      	lsls	r2, r1, #30
 80091a0:	d017      	beq.n	80091d2 <HAL_SPI_IRQHandler+0xd2>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80091a2:	685a      	ldr	r2, [r3, #4]
        if(hspi->hdmarx != NULL)
 80091a4:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80091a6:	f022 0203 	bic.w	r2, r2, #3
 80091aa:	605a      	str	r2, [r3, #4]
        if(hspi->hdmarx != NULL)
 80091ac:	b118      	cbz	r0, 80091b6 <HAL_SPI_IRQHandler+0xb6>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80091ae:	4b0b      	ldr	r3, [pc, #44]	; (80091dc <HAL_SPI_IRQHandler+0xdc>)
 80091b0:	6503      	str	r3, [r0, #80]	; 0x50
          HAL_DMA_Abort_IT(hspi->hdmarx);
 80091b2:	f7fe ff15 	bl	8007fe0 <HAL_DMA_Abort_IT>
        if(hspi->hdmatx != NULL)
 80091b6:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80091b8:	2800      	cmp	r0, #0
 80091ba:	d0af      	beq.n	800911c <HAL_SPI_IRQHandler+0x1c>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80091bc:	4b07      	ldr	r3, [pc, #28]	; (80091dc <HAL_SPI_IRQHandler+0xdc>)
 80091be:	6503      	str	r3, [r0, #80]	; 0x50
          HAL_DMA_Abort_IT(hspi->hdmatx);
 80091c0:	f7fe ff0e 	bl	8007fe0 <HAL_DMA_Abort_IT>
 80091c4:	e7aa      	b.n	800911c <HAL_SPI_IRQHandler+0x1c>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80091c6:	9501      	str	r5, [sp, #4]
 80091c8:	68da      	ldr	r2, [r3, #12]
 80091ca:	9201      	str	r2, [sp, #4]
 80091cc:	689b      	ldr	r3, [r3, #8]
 80091ce:	9301      	str	r3, [sp, #4]
        return;
 80091d0:	e7a4      	b.n	800911c <HAL_SPI_IRQHandler+0x1c>
        HAL_SPI_ErrorCallback(hspi);
 80091d2:	4620      	mov	r0, r4
 80091d4:	f7ff ff92 	bl	80090fc <HAL_SPI_ErrorCallback>
 80091d8:	e7a0      	b.n	800911c <HAL_SPI_IRQHandler+0x1c>
 80091da:	bf00      	nop
 80091dc:	080091e1 	.word	0x080091e1

080091e0 <_ZL19SPI_DMAAbortOnErrorP19__DMA_HandleTypeDef>:
{
 80091e0:	b508      	push	{r3, lr}
  SPI_HandleTypeDef* hspi = ( SPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80091e2:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hspi->RxXferCount = 0U;
 80091e4:	2300      	movs	r3, #0
 80091e6:	87c3      	strh	r3, [r0, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80091e8:	86c3      	strh	r3, [r0, #54]	; 0x36
  HAL_SPI_ErrorCallback(hspi);
 80091ea:	f7ff ff87 	bl	80090fc <HAL_SPI_ErrorCallback>
 80091ee:	bd08      	pop	{r3, pc}

080091f0 <_ZL18UART_EndRxTransferP18UART_HandleTypeDef>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80091f0:	6803      	ldr	r3, [r0, #0]
 80091f2:	68da      	ldr	r2, [r3, #12]
 80091f4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80091f8:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091fa:	695a      	ldr	r2, [r3, #20]
 80091fc:	f022 0201 	bic.w	r2, r2, #1
 8009200:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009202:	2320      	movs	r3, #32
 8009204:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 8009208:	4770      	bx	lr
	...

0800920c <_ZL14UART_SetConfigP18UART_HandleTypeDef>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800920c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8009210:	6806      	ldr	r6, [r0, #0]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8009212:	68c2      	ldr	r2, [r0, #12]
  tmpreg = huart->Instance->CR2;
 8009214:	6933      	ldr	r3, [r6, #16]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009216:	69c1      	ldr	r1, [r0, #28]
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8009218:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
  tmpreg |= (uint32_t)huart->Init.StopBits;
 800921c:	4313      	orrs	r3, r2
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 800921e:	6133      	str	r3, [r6, #16]
{
 8009220:	4604      	mov	r4, r0
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009222:	6883      	ldr	r3, [r0, #8]
 8009224:	6900      	ldr	r0, [r0, #16]
  tmpreg = huart->Instance->CR1;
 8009226:	68f2      	ldr	r2, [r6, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009228:	4303      	orrs	r3, r0
 800922a:	6960      	ldr	r0, [r4, #20]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 800922c:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009230:	4303      	orrs	r3, r0
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8009232:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009236:	430b      	orrs	r3, r1
 8009238:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 800923a:	60f3      	str	r3, [r6, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 800923c:	6973      	ldr	r3, [r6, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 800923e:	69a2      	ldr	r2, [r4, #24]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8009240:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  tmpreg |= huart->Init.HwFlowCtl;
 8009244:	4313      	orrs	r3, r2
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009246:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 800924a:	6173      	str	r3, [r6, #20]
 800924c:	4b7a      	ldr	r3, [pc, #488]	; (8009438 <_ZL14UART_SetConfigP18UART_HandleTypeDef+0x22c>)
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800924e:	d17c      	bne.n	800934a <_ZL14UART_SetConfigP18UART_HandleTypeDef+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8009250:	429e      	cmp	r6, r3
 8009252:	d003      	beq.n	800925c <_ZL14UART_SetConfigP18UART_HandleTypeDef+0x50>
 8009254:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009258:	429e      	cmp	r6, r3
 800925a:	d144      	bne.n	80092e6 <_ZL14UART_SetConfigP18UART_HandleTypeDef+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800925c:	f7ff faec 	bl	8008838 <HAL_RCC_GetPCLK2Freq>
 8009260:	2519      	movs	r5, #25
 8009262:	fb05 f300 	mul.w	r3, r5, r0
 8009266:	6860      	ldr	r0, [r4, #4]
 8009268:	f04f 0964 	mov.w	r9, #100	; 0x64
 800926c:	0040      	lsls	r0, r0, #1
 800926e:	fbb3 f3f0 	udiv	r3, r3, r0
 8009272:	fbb3 f3f9 	udiv	r3, r3, r9
 8009276:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800927a:	f7ff fadd 	bl	8008838 <HAL_RCC_GetPCLK2Freq>
 800927e:	6863      	ldr	r3, [r4, #4]
 8009280:	4368      	muls	r0, r5
 8009282:	005b      	lsls	r3, r3, #1
 8009284:	fbb0 f7f3 	udiv	r7, r0, r3
 8009288:	f7ff fad6 	bl	8008838 <HAL_RCC_GetPCLK2Freq>
 800928c:	6863      	ldr	r3, [r4, #4]
 800928e:	4368      	muls	r0, r5
 8009290:	005b      	lsls	r3, r3, #1
 8009292:	fbb0 f3f3 	udiv	r3, r0, r3
 8009296:	fbb3 f3f9 	udiv	r3, r3, r9
 800929a:	fb09 7313 	mls	r3, r9, r3, r7
 800929e:	00db      	lsls	r3, r3, #3
 80092a0:	3332      	adds	r3, #50	; 0x32
 80092a2:	fbb3 f3f9 	udiv	r3, r3, r9
 80092a6:	005b      	lsls	r3, r3, #1
 80092a8:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 80092ac:	f7ff fac4 	bl	8008838 <HAL_RCC_GetPCLK2Freq>
 80092b0:	6862      	ldr	r2, [r4, #4]
 80092b2:	4368      	muls	r0, r5
 80092b4:	0052      	lsls	r2, r2, #1
 80092b6:	fbb0 faf2 	udiv	sl, r0, r2
 80092ba:	f7ff fabd 	bl	8008838 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80092be:	6863      	ldr	r3, [r4, #4]
 80092c0:	4368      	muls	r0, r5
 80092c2:	005b      	lsls	r3, r3, #1
 80092c4:	fbb0 f3f3 	udiv	r3, r0, r3
 80092c8:	fbb3 f3f9 	udiv	r3, r3, r9
 80092cc:	fb09 a313 	mls	r3, r9, r3, sl
 80092d0:	00db      	lsls	r3, r3, #3
 80092d2:	3332      	adds	r3, #50	; 0x32
 80092d4:	fbb3 f3f9 	udiv	r3, r3, r9
 80092d8:	f003 0307 	and.w	r3, r3, #7
 80092dc:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80092de:	443b      	add	r3, r7
 80092e0:	60b3      	str	r3, [r6, #8]
 80092e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80092e6:	f7ff fa97 	bl	8008818 <HAL_RCC_GetPCLK1Freq>
 80092ea:	2519      	movs	r5, #25
 80092ec:	fb05 f300 	mul.w	r3, r5, r0
 80092f0:	6860      	ldr	r0, [r4, #4]
 80092f2:	f04f 0964 	mov.w	r9, #100	; 0x64
 80092f6:	0040      	lsls	r0, r0, #1
 80092f8:	fbb3 f3f0 	udiv	r3, r3, r0
 80092fc:	fbb3 f3f9 	udiv	r3, r3, r9
 8009300:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8009304:	f7ff fa88 	bl	8008818 <HAL_RCC_GetPCLK1Freq>
 8009308:	6863      	ldr	r3, [r4, #4]
 800930a:	4368      	muls	r0, r5
 800930c:	005b      	lsls	r3, r3, #1
 800930e:	fbb0 f7f3 	udiv	r7, r0, r3
 8009312:	f7ff fa81 	bl	8008818 <HAL_RCC_GetPCLK1Freq>
 8009316:	6863      	ldr	r3, [r4, #4]
 8009318:	4368      	muls	r0, r5
 800931a:	005b      	lsls	r3, r3, #1
 800931c:	fbb0 f3f3 	udiv	r3, r0, r3
 8009320:	fbb3 f3f9 	udiv	r3, r3, r9
 8009324:	fb09 7313 	mls	r3, r9, r3, r7
 8009328:	00db      	lsls	r3, r3, #3
 800932a:	3332      	adds	r3, #50	; 0x32
 800932c:	fbb3 f3f9 	udiv	r3, r3, r9
 8009330:	005b      	lsls	r3, r3, #1
 8009332:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8009336:	f7ff fa6f 	bl	8008818 <HAL_RCC_GetPCLK1Freq>
 800933a:	6862      	ldr	r2, [r4, #4]
 800933c:	4368      	muls	r0, r5
 800933e:	0052      	lsls	r2, r2, #1
 8009340:	fbb0 faf2 	udiv	sl, r0, r2
 8009344:	f7ff fa68 	bl	8008818 <HAL_RCC_GetPCLK1Freq>
 8009348:	e7b9      	b.n	80092be <_ZL14UART_SetConfigP18UART_HandleTypeDef+0xb2>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 800934a:	429e      	cmp	r6, r3
 800934c:	d002      	beq.n	8009354 <_ZL14UART_SetConfigP18UART_HandleTypeDef+0x148>
 800934e:	4b3b      	ldr	r3, [pc, #236]	; (800943c <_ZL14UART_SetConfigP18UART_HandleTypeDef+0x230>)
 8009350:	429e      	cmp	r6, r3
 8009352:	d140      	bne.n	80093d6 <_ZL14UART_SetConfigP18UART_HandleTypeDef+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8009354:	f7ff fa70 	bl	8008838 <HAL_RCC_GetPCLK2Freq>
 8009358:	6867      	ldr	r7, [r4, #4]
 800935a:	2519      	movs	r5, #25
 800935c:	f04f 0964 	mov.w	r9, #100	; 0x64
 8009360:	fb05 f300 	mul.w	r3, r5, r0
 8009364:	00bf      	lsls	r7, r7, #2
 8009366:	fbb3 f3f7 	udiv	r3, r3, r7
 800936a:	fbb3 f3f9 	udiv	r3, r3, r9
 800936e:	011f      	lsls	r7, r3, #4
 8009370:	f7ff fa62 	bl	8008838 <HAL_RCC_GetPCLK2Freq>
 8009374:	6863      	ldr	r3, [r4, #4]
 8009376:	4368      	muls	r0, r5
 8009378:	009b      	lsls	r3, r3, #2
 800937a:	fbb0 f8f3 	udiv	r8, r0, r3
 800937e:	f7ff fa5b 	bl	8008838 <HAL_RCC_GetPCLK2Freq>
 8009382:	6863      	ldr	r3, [r4, #4]
 8009384:	4368      	muls	r0, r5
 8009386:	009b      	lsls	r3, r3, #2
 8009388:	fbb0 f3f3 	udiv	r3, r0, r3
 800938c:	fbb3 f3f9 	udiv	r3, r3, r9
 8009390:	fb09 8313 	mls	r3, r9, r3, r8
 8009394:	011b      	lsls	r3, r3, #4
 8009396:	3332      	adds	r3, #50	; 0x32
 8009398:	fbb3 f3f9 	udiv	r3, r3, r9
 800939c:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 80093a0:	f7ff fa4a 	bl	8008838 <HAL_RCC_GetPCLK2Freq>
 80093a4:	6862      	ldr	r2, [r4, #4]
 80093a6:	4368      	muls	r0, r5
 80093a8:	0092      	lsls	r2, r2, #2
 80093aa:	fbb0 faf2 	udiv	sl, r0, r2
 80093ae:	f7ff fa43 	bl	8008838 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80093b2:	6863      	ldr	r3, [r4, #4]
 80093b4:	4368      	muls	r0, r5
 80093b6:	009b      	lsls	r3, r3, #2
 80093b8:	fbb0 f3f3 	udiv	r3, r0, r3
 80093bc:	fbb3 f3f9 	udiv	r3, r3, r9
 80093c0:	fb09 a313 	mls	r3, r9, r3, sl
 80093c4:	011b      	lsls	r3, r3, #4
 80093c6:	3332      	adds	r3, #50	; 0x32
 80093c8:	fbb3 f3f9 	udiv	r3, r3, r9
 80093cc:	f003 030f 	and.w	r3, r3, #15
 80093d0:	ea43 0308 	orr.w	r3, r3, r8
 80093d4:	e783      	b.n	80092de <_ZL14UART_SetConfigP18UART_HandleTypeDef+0xd2>
 80093d6:	f7ff fa1f 	bl	8008818 <HAL_RCC_GetPCLK1Freq>
 80093da:	6867      	ldr	r7, [r4, #4]
 80093dc:	2519      	movs	r5, #25
 80093de:	f04f 0964 	mov.w	r9, #100	; 0x64
 80093e2:	fb05 f300 	mul.w	r3, r5, r0
 80093e6:	00bf      	lsls	r7, r7, #2
 80093e8:	fbb3 f3f7 	udiv	r3, r3, r7
 80093ec:	fbb3 f3f9 	udiv	r3, r3, r9
 80093f0:	011f      	lsls	r7, r3, #4
 80093f2:	f7ff fa11 	bl	8008818 <HAL_RCC_GetPCLK1Freq>
 80093f6:	6863      	ldr	r3, [r4, #4]
 80093f8:	4368      	muls	r0, r5
 80093fa:	009b      	lsls	r3, r3, #2
 80093fc:	fbb0 f8f3 	udiv	r8, r0, r3
 8009400:	f7ff fa0a 	bl	8008818 <HAL_RCC_GetPCLK1Freq>
 8009404:	6863      	ldr	r3, [r4, #4]
 8009406:	4368      	muls	r0, r5
 8009408:	009b      	lsls	r3, r3, #2
 800940a:	fbb0 f3f3 	udiv	r3, r0, r3
 800940e:	fbb3 f3f9 	udiv	r3, r3, r9
 8009412:	fb09 8313 	mls	r3, r9, r3, r8
 8009416:	011b      	lsls	r3, r3, #4
 8009418:	3332      	adds	r3, #50	; 0x32
 800941a:	fbb3 f3f9 	udiv	r3, r3, r9
 800941e:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8009422:	f7ff f9f9 	bl	8008818 <HAL_RCC_GetPCLK1Freq>
 8009426:	6862      	ldr	r2, [r4, #4]
 8009428:	4368      	muls	r0, r5
 800942a:	0092      	lsls	r2, r2, #2
 800942c:	fbb0 faf2 	udiv	sl, r0, r2
 8009430:	f7ff f9f2 	bl	8008818 <HAL_RCC_GetPCLK1Freq>
 8009434:	e7bd      	b.n	80093b2 <_ZL14UART_SetConfigP18UART_HandleTypeDef+0x1a6>
 8009436:	bf00      	nop
 8009438:	40011000 	.word	0x40011000
 800943c:	40011400 	.word	0x40011400

08009440 <HAL_UART_Init>:
{
 8009440:	b510      	push	{r4, lr}
  if(huart == NULL)
 8009442:	4604      	mov	r4, r0
 8009444:	b340      	cbz	r0, 8009498 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 8009446:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800944a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800944e:	b91b      	cbnz	r3, 8009458 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8009450:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8009454:	f7fd fc84 	bl	8006d60 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8009458:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800945a:	2324      	movs	r3, #36	; 0x24
 800945c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8009460:	68d3      	ldr	r3, [r2, #12]
 8009462:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009466:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8009468:	4620      	mov	r0, r4
 800946a:	f7ff fecf 	bl	800920c <_ZL14UART_SetConfigP18UART_HandleTypeDef>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800946e:	6823      	ldr	r3, [r4, #0]
 8009470:	691a      	ldr	r2, [r3, #16]
 8009472:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009476:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009478:	695a      	ldr	r2, [r3, #20]
 800947a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800947e:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8009480:	68da      	ldr	r2, [r3, #12]
 8009482:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009486:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009488:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 800948a:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800948c:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 800948e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8009492:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8009496:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8009498:	2001      	movs	r0, #1
}
 800949a:	bd10      	pop	{r4, pc}

0800949c <HAL_UART_Transmit_DMA>:
{
 800949c:	b538      	push	{r3, r4, r5, lr}
 800949e:	4604      	mov	r4, r0
 80094a0:	4613      	mov	r3, r2
  if(huart->gState == HAL_UART_STATE_READY)
 80094a2:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 80094a6:	2a20      	cmp	r2, #32
 80094a8:	d12a      	bne.n	8009500 <HAL_UART_Transmit_DMA+0x64>
    if((pData == NULL ) || (Size == 0))
 80094aa:	b339      	cbz	r1, 80094fc <HAL_UART_Transmit_DMA+0x60>
 80094ac:	b333      	cbz	r3, 80094fc <HAL_UART_Transmit_DMA+0x60>
    __HAL_LOCK(huart);
 80094ae:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 80094b2:	2a01      	cmp	r2, #1
 80094b4:	d024      	beq.n	8009500 <HAL_UART_Transmit_DMA+0x64>
 80094b6:	2201      	movs	r2, #1
 80094b8:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80094bc:	6b20      	ldr	r0, [r4, #48]	; 0x30
    huart->TxXferCount = Size;
 80094be:	84e3      	strh	r3, [r4, #38]	; 0x26
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80094c0:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80094c2:	2221      	movs	r2, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80094c4:	63e5      	str	r5, [r4, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80094c6:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80094ca:	4a0e      	ldr	r2, [pc, #56]	; (8009504 <HAL_UART_Transmit_DMA+0x68>)
    huart->TxXferSize = Size;
 80094cc:	84a3      	strh	r3, [r4, #36]	; 0x24
    huart->pTxBuffPtr = pData;
 80094ce:	6221      	str	r1, [r4, #32]
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80094d0:	63c2      	str	r2, [r0, #60]	; 0x3c
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80094d2:	4a0d      	ldr	r2, [pc, #52]	; (8009508 <HAL_UART_Transmit_DMA+0x6c>)
 80094d4:	6402      	str	r2, [r0, #64]	; 0x40
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80094d6:	4a0d      	ldr	r2, [pc, #52]	; (800950c <HAL_UART_Transmit_DMA+0x70>)
 80094d8:	64c2      	str	r2, [r0, #76]	; 0x4c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->DR, Size);
 80094da:	6822      	ldr	r2, [r4, #0]
    huart->hdmatx->XferAbortCallback = NULL;
 80094dc:	6505      	str	r5, [r0, #80]	; 0x50
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->DR, Size);
 80094de:	3204      	adds	r2, #4
 80094e0:	f7fe fd40 	bl	8007f64 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80094e4:	6823      	ldr	r3, [r4, #0]
 80094e6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80094ea:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80094ec:	695a      	ldr	r2, [r3, #20]
    __HAL_UNLOCK(huart);
 80094ee:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80094f2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80094f6:	615a      	str	r2, [r3, #20]
    return HAL_OK;
 80094f8:	4628      	mov	r0, r5
 80094fa:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 80094fc:	2001      	movs	r0, #1
 80094fe:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_BUSY;
 8009500:	2002      	movs	r0, #2
}
 8009502:	bd38      	pop	{r3, r4, r5, pc}
 8009504:	080095a3 	.word	0x080095a3
 8009508:	080095d1 	.word	0x080095d1
 800950c:	08009697 	.word	0x08009697

08009510 <HAL_UART_Receive_DMA>:
{  
 8009510:	4613      	mov	r3, r2
  if(huart->RxState == HAL_UART_STATE_READY) 
 8009512:	f890 203a 	ldrb.w	r2, [r0, #58]	; 0x3a
 8009516:	2a20      	cmp	r2, #32
{  
 8009518:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800951a:	4605      	mov	r5, r0
  if(huart->RxState == HAL_UART_STATE_READY) 
 800951c:	d137      	bne.n	800958e <HAL_UART_Receive_DMA+0x7e>
    if((pData == NULL ) || (Size == 0)) 
 800951e:	2900      	cmp	r1, #0
 8009520:	d033      	beq.n	800958a <HAL_UART_Receive_DMA+0x7a>
 8009522:	2b00      	cmp	r3, #0
 8009524:	d031      	beq.n	800958a <HAL_UART_Receive_DMA+0x7a>
    __HAL_LOCK(huart);
 8009526:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 800952a:	2a01      	cmp	r2, #1
 800952c:	d02f      	beq.n	800958e <HAL_UART_Receive_DMA+0x7e>
 800952e:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009530:	2400      	movs	r4, #0
    __HAL_LOCK(huart);
 8009532:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009536:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009538:	63c4      	str	r4, [r0, #60]	; 0x3c
    huart->pRxBuffPtr = pData;
 800953a:	6281      	str	r1, [r0, #40]	; 0x28
    huart->RxXferSize = Size;
 800953c:	8583      	strh	r3, [r0, #44]	; 0x2c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800953e:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009542:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8009544:	4a13      	ldr	r2, [pc, #76]	; (8009594 <HAL_UART_Receive_DMA+0x84>)
 8009546:	63c2      	str	r2, [r0, #60]	; 0x3c
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t*)tmp, Size);
 8009548:	682e      	ldr	r6, [r5, #0]
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800954a:	4a13      	ldr	r2, [pc, #76]	; (8009598 <HAL_UART_Receive_DMA+0x88>)
 800954c:	6402      	str	r2, [r0, #64]	; 0x40
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800954e:	4a13      	ldr	r2, [pc, #76]	; (800959c <HAL_UART_Receive_DMA+0x8c>)
 8009550:	64c2      	str	r2, [r0, #76]	; 0x4c
    huart->hdmarx->XferAbortCallback = NULL;
 8009552:	6504      	str	r4, [r0, #80]	; 0x50
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t*)tmp, Size);
 8009554:	460a      	mov	r2, r1
 8009556:	1d31      	adds	r1, r6, #4
 8009558:	f7fe fd04 	bl	8007f64 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_OREFLAG(huart);
 800955c:	682b      	ldr	r3, [r5, #0]
 800955e:	9401      	str	r4, [sp, #4]
 8009560:	681a      	ldr	r2, [r3, #0]
 8009562:	9201      	str	r2, [sp, #4]
 8009564:	685a      	ldr	r2, [r3, #4]
 8009566:	9201      	str	r2, [sp, #4]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009568:	68da      	ldr	r2, [r3, #12]
    __HAL_UNLOCK(huart);
 800956a:	f885 4038 	strb.w	r4, [r5, #56]	; 0x38
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800956e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009572:	60da      	str	r2, [r3, #12]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009574:	695a      	ldr	r2, [r3, #20]
 8009576:	f042 0201 	orr.w	r2, r2, #1
 800957a:	615a      	str	r2, [r3, #20]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800957c:	695a      	ldr	r2, [r3, #20]
 800957e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009582:	615a      	str	r2, [r3, #20]
    return HAL_OK;
 8009584:	4620      	mov	r0, r4
}
 8009586:	b002      	add	sp, #8
 8009588:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800958a:	2001      	movs	r0, #1
 800958c:	e7fb      	b.n	8009586 <HAL_UART_Receive_DMA+0x76>
    return HAL_BUSY; 
 800958e:	2002      	movs	r0, #2
 8009590:	e7f9      	b.n	8009586 <HAL_UART_Receive_DMA+0x76>
 8009592:	bf00      	nop
 8009594:	080095dd 	.word	0x080095dd
 8009598:	0800968b 	.word	0x0800968b
 800959c:	08009697 	.word	0x08009697

080095a0 <HAL_UART_TxCpltCallback>:
 80095a0:	4770      	bx	lr

080095a2 <_ZL20UART_DMATransmitCpltP19__DMA_HandleTypeDef>:
{
 80095a2:	b508      	push	{r3, lr}
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80095a4:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80095a6:	6b82      	ldr	r2, [r0, #56]	; 0x38
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 80095ae:	d10a      	bne.n	80095c6 <_ZL20UART_DMATransmitCpltP19__DMA_HandleTypeDef+0x24>
    huart->TxXferCount = 0U;
 80095b0:	84d3      	strh	r3, [r2, #38]	; 0x26
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80095b2:	6813      	ldr	r3, [r2, #0]
 80095b4:	695a      	ldr	r2, [r3, #20]
 80095b6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80095ba:	615a      	str	r2, [r3, #20]
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80095bc:	68da      	ldr	r2, [r3, #12]
 80095be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80095c2:	60da      	str	r2, [r3, #12]
 80095c4:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 80095c6:	4610      	mov	r0, r2
 80095c8:	f7ff ffea 	bl	80095a0 <HAL_UART_TxCpltCallback>
 80095cc:	bd08      	pop	{r3, pc}

080095ce <HAL_UART_TxHalfCpltCallback>:
 80095ce:	4770      	bx	lr

080095d0 <_ZL18UART_DMATxHalfCpltP19__DMA_HandleTypeDef>:
{
 80095d0:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 80095d2:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80095d4:	f7ff fffb 	bl	80095ce <HAL_UART_TxHalfCpltCallback>
 80095d8:	bd08      	pop	{r3, pc}

080095da <HAL_UART_RxCpltCallback>:
 80095da:	4770      	bx	lr

080095dc <_ZL19UART_DMAReceiveCpltP19__DMA_HandleTypeDef>:
{
 80095dc:	b508      	push	{r3, lr}
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80095de:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80095e0:	6b82      	ldr	r2, [r0, #56]	; 0x38
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 80095e8:	d110      	bne.n	800960c <_ZL19UART_DMAReceiveCpltP19__DMA_HandleTypeDef+0x30>
    huart->RxXferCount = 0U;
 80095ea:	85d3      	strh	r3, [r2, #46]	; 0x2e
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80095ec:	6813      	ldr	r3, [r2, #0]
 80095ee:	68d9      	ldr	r1, [r3, #12]
 80095f0:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 80095f4:	60d9      	str	r1, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80095f6:	6959      	ldr	r1, [r3, #20]
 80095f8:	f021 0101 	bic.w	r1, r1, #1
 80095fc:	6159      	str	r1, [r3, #20]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80095fe:	6959      	ldr	r1, [r3, #20]
 8009600:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8009604:	6159      	str	r1, [r3, #20]
    huart->RxState = HAL_UART_STATE_READY;
 8009606:	2320      	movs	r3, #32
 8009608:	f882 303a 	strb.w	r3, [r2, #58]	; 0x3a
  HAL_UART_RxCpltCallback(huart);
 800960c:	4610      	mov	r0, r2
 800960e:	f7ff ffe4 	bl	80095da <HAL_UART_RxCpltCallback>
 8009612:	bd08      	pop	{r3, pc}

08009614 <_ZL15UART_Receive_ITP18UART_HandleTypeDef>:
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8009614:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8009618:	2b22      	cmp	r3, #34	; 0x22
{
 800961a:	b510      	push	{r4, lr}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 800961c:	d132      	bne.n	8009684 <_ZL15UART_Receive_ITP18UART_HandleTypeDef+0x70>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800961e:	6883      	ldr	r3, [r0, #8]
 8009620:	6901      	ldr	r1, [r0, #16]
 8009622:	6802      	ldr	r2, [r0, #0]
 8009624:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009628:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800962a:	d11f      	bne.n	800966c <_ZL15UART_Receive_ITP18UART_HandleTypeDef+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800962c:	6852      	ldr	r2, [r2, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 800962e:	b9c9      	cbnz	r1, 8009664 <_ZL15UART_Receive_ITP18UART_HandleTypeDef+0x50>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009630:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009634:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 8009638:	6283      	str	r3, [r0, #40]	; 0x28
    if(--huart->RxXferCount == 0U)
 800963a:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 800963c:	3c01      	subs	r4, #1
 800963e:	b2a4      	uxth	r4, r4
 8009640:	85c4      	strh	r4, [r0, #46]	; 0x2e
 8009642:	b96c      	cbnz	r4, 8009660 <_ZL15UART_Receive_ITP18UART_HandleTypeDef+0x4c>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009644:	6803      	ldr	r3, [r0, #0]
 8009646:	68da      	ldr	r2, [r3, #12]
 8009648:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800964c:	60da      	str	r2, [r3, #12]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800964e:	695a      	ldr	r2, [r3, #20]
 8009650:	f022 0201 	bic.w	r2, r2, #1
 8009654:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8009656:	2320      	movs	r3, #32
 8009658:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 800965c:	f7ff ffbd 	bl	80095da <HAL_UART_RxCpltCallback>
    if(--huart->RxXferCount == 0U)
 8009660:	2000      	movs	r0, #0
}
 8009662:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8009664:	b2d2      	uxtb	r2, r2
 8009666:	f823 2b01 	strh.w	r2, [r3], #1
 800966a:	e7e5      	b.n	8009638 <_ZL15UART_Receive_ITP18UART_HandleTypeDef+0x24>
      if(huart->Init.Parity == UART_PARITY_NONE)
 800966c:	b921      	cbnz	r1, 8009678 <_ZL15UART_Receive_ITP18UART_HandleTypeDef+0x64>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800966e:	1c59      	adds	r1, r3, #1
 8009670:	6852      	ldr	r2, [r2, #4]
 8009672:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009674:	701a      	strb	r2, [r3, #0]
 8009676:	e7e0      	b.n	800963a <_ZL15UART_Receive_ITP18UART_HandleTypeDef+0x26>
 8009678:	6852      	ldr	r2, [r2, #4]
 800967a:	1c59      	adds	r1, r3, #1
 800967c:	6281      	str	r1, [r0, #40]	; 0x28
 800967e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009682:	e7f7      	b.n	8009674 <_ZL15UART_Receive_ITP18UART_HandleTypeDef+0x60>
    return HAL_BUSY;
 8009684:	2002      	movs	r0, #2
 8009686:	bd10      	pop	{r4, pc}

08009688 <HAL_UART_RxHalfCpltCallback>:
 8009688:	4770      	bx	lr

0800968a <_ZL18UART_DMARxHalfCpltP19__DMA_HandleTypeDef>:
{
 800968a:	b508      	push	{r3, lr}
  HAL_UART_RxHalfCpltCallback(huart); 
 800968c:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800968e:	f7ff fffb 	bl	8009688 <HAL_UART_RxHalfCpltCallback>
 8009692:	bd08      	pop	{r3, pc}

08009694 <HAL_UART_ErrorCallback>:
 8009694:	4770      	bx	lr

08009696 <_ZL13UART_DMAErrorP19__DMA_HandleTypeDef>:
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8009696:	6b81      	ldr	r1, [r0, #56]	; 0x38
{
 8009698:	b508      	push	{r3, lr}
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800969a:	680b      	ldr	r3, [r1, #0]
 800969c:	695a      	ldr	r2, [r3, #20]
  if((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800969e:	f891 0039 	ldrb.w	r0, [r1, #57]	; 0x39
 80096a2:	2821      	cmp	r0, #33	; 0x21
 80096a4:	d101      	bne.n	80096aa <_ZL13UART_DMAErrorP19__DMA_HandleTypeDef+0x14>
 80096a6:	0612      	lsls	r2, r2, #24
 80096a8:	d40e      	bmi.n	80096c8 <_ZL13UART_DMAErrorP19__DMA_HandleTypeDef+0x32>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR); 
 80096aa:	695b      	ldr	r3, [r3, #20]
  if((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80096ac:	f891 203a 	ldrb.w	r2, [r1, #58]	; 0x3a
 80096b0:	2a22      	cmp	r2, #34	; 0x22
 80096b2:	d101      	bne.n	80096b8 <_ZL13UART_DMAErrorP19__DMA_HandleTypeDef+0x22>
 80096b4:	065b      	lsls	r3, r3, #25
 80096b6:	d411      	bmi.n	80096dc <_ZL13UART_DMAErrorP19__DMA_HandleTypeDef+0x46>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80096b8:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 80096ba:	f043 0310 	orr.w	r3, r3, #16
 80096be:	63cb      	str	r3, [r1, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 80096c0:	4608      	mov	r0, r1
 80096c2:	f7ff ffe7 	bl	8009694 <HAL_UART_ErrorCallback>
}
 80096c6:	bd08      	pop	{r3, pc}
    huart->TxXferCount = 0U;
 80096c8:	2200      	movs	r2, #0
 80096ca:	84ca      	strh	r2, [r1, #38]	; 0x26
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80096cc:	68da      	ldr	r2, [r3, #12]
 80096ce:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80096d2:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80096d4:	2220      	movs	r2, #32
 80096d6:	f881 2039 	strb.w	r2, [r1, #57]	; 0x39
 80096da:	e7e6      	b.n	80096aa <_ZL13UART_DMAErrorP19__DMA_HandleTypeDef+0x14>
    huart->RxXferCount = 0U;
 80096dc:	2300      	movs	r3, #0
 80096de:	85cb      	strh	r3, [r1, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80096e0:	4608      	mov	r0, r1
 80096e2:	f7ff fd85 	bl	80091f0 <_ZL18UART_EndRxTransferP18UART_HandleTypeDef>
 80096e6:	e7e7      	b.n	80096b8 <_ZL13UART_DMAErrorP19__DMA_HandleTypeDef+0x22>

080096e8 <HAL_UART_IRQHandler>:
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80096e8:	6803      	ldr	r3, [r0, #0]
 80096ea:	681a      	ldr	r2, [r3, #0]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80096ec:	68d9      	ldr	r1, [r3, #12]
{
 80096ee:	b570      	push	{r4, r5, r6, lr}
  if(errorflags == RESET)
 80096f0:	0716      	lsls	r6, r2, #28
{
 80096f2:	4604      	mov	r4, r0
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80096f4:	695d      	ldr	r5, [r3, #20]
  if(errorflags == RESET)
 80096f6:	d107      	bne.n	8009708 <HAL_UART_IRQHandler+0x20>
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80096f8:	0696      	lsls	r6, r2, #26
 80096fa:	d551      	bpl.n	80097a0 <HAL_UART_IRQHandler+0xb8>
 80096fc:	068d      	lsls	r5, r1, #26
 80096fe:	d54f      	bpl.n	80097a0 <HAL_UART_IRQHandler+0xb8>
}
 8009700:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8009704:	f7ff bf86 	b.w	8009614 <_ZL15UART_Receive_ITP18UART_HandleTypeDef>
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009708:	f015 0501 	ands.w	r5, r5, #1
 800970c:	d102      	bne.n	8009714 <HAL_UART_IRQHandler+0x2c>
 800970e:	f411 7f90 	tst.w	r1, #288	; 0x120
 8009712:	d045      	beq.n	80097a0 <HAL_UART_IRQHandler+0xb8>
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009714:	07d3      	lsls	r3, r2, #31
 8009716:	d505      	bpl.n	8009724 <HAL_UART_IRQHandler+0x3c>
 8009718:	05ce      	lsls	r6, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800971a:	bf42      	ittt	mi
 800971c:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 800971e:	f043 0301 	orrmi.w	r3, r3, #1
 8009722:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009724:	0750      	lsls	r0, r2, #29
 8009726:	d504      	bpl.n	8009732 <HAL_UART_IRQHandler+0x4a>
 8009728:	b11d      	cbz	r5, 8009732 <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800972a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800972c:	f043 0302 	orr.w	r3, r3, #2
 8009730:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009732:	0793      	lsls	r3, r2, #30
 8009734:	d504      	bpl.n	8009740 <HAL_UART_IRQHandler+0x58>
 8009736:	b11d      	cbz	r5, 8009740 <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009738:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800973a:	f043 0304 	orr.w	r3, r3, #4
 800973e:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009740:	0716      	lsls	r6, r2, #28
 8009742:	d504      	bpl.n	800974e <HAL_UART_IRQHandler+0x66>
 8009744:	b11d      	cbz	r5, 800974e <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009746:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009748:	f043 0308 	orr.w	r3, r3, #8
 800974c:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 800974e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009750:	2b00      	cmp	r3, #0
 8009752:	d069      	beq.n	8009828 <HAL_UART_IRQHandler+0x140>
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009754:	0690      	lsls	r0, r2, #26
 8009756:	d504      	bpl.n	8009762 <HAL_UART_IRQHandler+0x7a>
 8009758:	068a      	lsls	r2, r1, #26
 800975a:	d502      	bpl.n	8009762 <HAL_UART_IRQHandler+0x7a>
        UART_Receive_IT(huart);
 800975c:	4620      	mov	r0, r4
 800975e:	f7ff ff59 	bl	8009614 <_ZL15UART_Receive_ITP18UART_HandleTypeDef>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009762:	6823      	ldr	r3, [r4, #0]
 8009764:	695d      	ldr	r5, [r3, #20]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009766:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8009768:	0713      	lsls	r3, r2, #28
 800976a:	d452      	bmi.n	8009812 <HAL_UART_IRQHandler+0x12a>
 800976c:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8009770:	d14f      	bne.n	8009812 <HAL_UART_IRQHandler+0x12a>
        HAL_UART_ErrorCallback(huart);
 8009772:	4620      	mov	r0, r4
 8009774:	f7ff ff8e 	bl	8009694 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009778:	63e5      	str	r5, [r4, #60]	; 0x3c
 800977a:	bd70      	pop	{r4, r5, r6, pc}
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800977c:	695a      	ldr	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 800977e:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009780:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009784:	615a      	str	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 8009786:	2800      	cmp	r0, #0
 8009788:	d04a      	beq.n	8009820 <HAL_UART_IRQHandler+0x138>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800978a:	4b28      	ldr	r3, [pc, #160]	; (800982c <HAL_UART_IRQHandler+0x144>)
 800978c:	6503      	str	r3, [r0, #80]	; 0x50
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800978e:	f7fe fc27 	bl	8007fe0 <HAL_DMA_Abort_IT>
 8009792:	2800      	cmp	r0, #0
 8009794:	d048      	beq.n	8009828 <HAL_UART_IRQHandler+0x140>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009796:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 8009798:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800979c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800979e:	4718      	bx	r3
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80097a0:	0616      	lsls	r6, r2, #24
 80097a2:	d527      	bpl.n	80097f4 <HAL_UART_IRQHandler+0x10c>
 80097a4:	060d      	lsls	r5, r1, #24
 80097a6:	d525      	bpl.n	80097f4 <HAL_UART_IRQHandler+0x10c>
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 80097a8:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 80097ac:	2a21      	cmp	r2, #33	; 0x21
 80097ae:	d13b      	bne.n	8009828 <HAL_UART_IRQHandler+0x140>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80097b0:	68a2      	ldr	r2, [r4, #8]
 80097b2:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80097b6:	6a22      	ldr	r2, [r4, #32]
 80097b8:	d117      	bne.n	80097ea <HAL_UART_IRQHandler+0x102>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80097ba:	8811      	ldrh	r1, [r2, #0]
 80097bc:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80097c0:	6059      	str	r1, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 80097c2:	6921      	ldr	r1, [r4, #16]
 80097c4:	b979      	cbnz	r1, 80097e6 <HAL_UART_IRQHandler+0xfe>
        huart->pTxBuffPtr += 2U;
 80097c6:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 80097c8:	6222      	str	r2, [r4, #32]
    if(--huart->TxXferCount == 0U)
 80097ca:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 80097cc:	3a01      	subs	r2, #1
 80097ce:	b292      	uxth	r2, r2
 80097d0:	84e2      	strh	r2, [r4, #38]	; 0x26
 80097d2:	bb4a      	cbnz	r2, 8009828 <HAL_UART_IRQHandler+0x140>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80097d4:	68da      	ldr	r2, [r3, #12]
 80097d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80097da:	60da      	str	r2, [r3, #12]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80097dc:	68da      	ldr	r2, [r3, #12]
 80097de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80097e2:	60da      	str	r2, [r3, #12]
 80097e4:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 80097e6:	3201      	adds	r2, #1
 80097e8:	e7ee      	b.n	80097c8 <HAL_UART_IRQHandler+0xe0>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80097ea:	1c51      	adds	r1, r2, #1
 80097ec:	6221      	str	r1, [r4, #32]
 80097ee:	7812      	ldrb	r2, [r2, #0]
 80097f0:	605a      	str	r2, [r3, #4]
 80097f2:	e7ea      	b.n	80097ca <HAL_UART_IRQHandler+0xe2>
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80097f4:	0650      	lsls	r0, r2, #25
 80097f6:	d517      	bpl.n	8009828 <HAL_UART_IRQHandler+0x140>
 80097f8:	0649      	lsls	r1, r1, #25
 80097fa:	d515      	bpl.n	8009828 <HAL_UART_IRQHandler+0x140>
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80097fc:	68da      	ldr	r2, [r3, #12]
 80097fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009802:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8009804:	2320      	movs	r3, #32
 8009806:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 800980a:	4620      	mov	r0, r4
 800980c:	f7ff fec8 	bl	80095a0 <HAL_UART_TxCpltCallback>
 8009810:	bd70      	pop	{r4, r5, r6, pc}
        UART_EndRxTransfer(huart);
 8009812:	4620      	mov	r0, r4
 8009814:	f7ff fcec 	bl	80091f0 <_ZL18UART_EndRxTransferP18UART_HandleTypeDef>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009818:	6823      	ldr	r3, [r4, #0]
 800981a:	695a      	ldr	r2, [r3, #20]
 800981c:	0652      	lsls	r2, r2, #25
 800981e:	d4ad      	bmi.n	800977c <HAL_UART_IRQHandler+0x94>
            HAL_UART_ErrorCallback(huart);
 8009820:	4620      	mov	r0, r4
 8009822:	f7ff ff37 	bl	8009694 <HAL_UART_ErrorCallback>
 8009826:	bd70      	pop	{r4, r5, r6, pc}
 8009828:	bd70      	pop	{r4, r5, r6, pc}
 800982a:	bf00      	nop
 800982c:	08009831 	.word	0x08009831

08009830 <_ZL20UART_DMAAbortOnErrorP19__DMA_HandleTypeDef>:
{
 8009830:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8009832:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 8009834:	2300      	movs	r3, #0
 8009836:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0U;
 8009838:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 800983a:	f7ff ff2b 	bl	8009694 <HAL_UART_ErrorCallback>
 800983e:	bd08      	pop	{r3, pc}

08009840 <_ZNK7Vector3IfErmERKS0_>:
 8009840:	b580      	push	{r7, lr}
 8009842:	b08c      	sub	sp, #48	; 0x30
 8009844:	af00      	add	r7, sp, #0
 8009846:	6178      	str	r0, [r7, #20]
 8009848:	6139      	str	r1, [r7, #16]
 800984a:	697b      	ldr	r3, [r7, #20]
 800984c:	ed93 7a01 	vldr	s14, [r3, #4]
 8009850:	693b      	ldr	r3, [r7, #16]
 8009852:	edd3 7a02 	vldr	s15, [r3, #8]
 8009856:	ee27 7a27 	vmul.f32	s14, s14, s15
 800985a:	697b      	ldr	r3, [r7, #20]
 800985c:	edd3 6a02 	vldr	s13, [r3, #8]
 8009860:	693b      	ldr	r3, [r7, #16]
 8009862:	edd3 7a01 	vldr	s15, [r3, #4]
 8009866:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800986a:	ee37 6a67 	vsub.f32	s12, s14, s15
 800986e:	697b      	ldr	r3, [r7, #20]
 8009870:	ed93 7a02 	vldr	s14, [r3, #8]
 8009874:	693b      	ldr	r3, [r7, #16]
 8009876:	edd3 7a00 	vldr	s15, [r3]
 800987a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800987e:	697b      	ldr	r3, [r7, #20]
 8009880:	edd3 6a00 	vldr	s13, [r3]
 8009884:	693b      	ldr	r3, [r7, #16]
 8009886:	edd3 7a02 	vldr	s15, [r3, #8]
 800988a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800988e:	ee77 5a67 	vsub.f32	s11, s14, s15
 8009892:	697b      	ldr	r3, [r7, #20]
 8009894:	ed93 7a00 	vldr	s14, [r3]
 8009898:	693b      	ldr	r3, [r7, #16]
 800989a:	edd3 7a01 	vldr	s15, [r3, #4]
 800989e:	ee27 7a27 	vmul.f32	s14, s14, s15
 80098a2:	697b      	ldr	r3, [r7, #20]
 80098a4:	edd3 6a01 	vldr	s13, [r3, #4]
 80098a8:	693b      	ldr	r3, [r7, #16]
 80098aa:	edd3 7a00 	vldr	s15, [r3]
 80098ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80098b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80098b6:	f107 0318 	add.w	r3, r7, #24
 80098ba:	eeb0 1a67 	vmov.f32	s2, s15
 80098be:	eef0 0a65 	vmov.f32	s1, s11
 80098c2:	eeb0 0a46 	vmov.f32	s0, s12
 80098c6:	4618      	mov	r0, r3
 80098c8:	f000 f9ce 	bl	8009c68 <_ZN7Vector3IfEC1Efff>
 80098cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80098d0:	f107 0218 	add.w	r2, r7, #24
 80098d4:	ca07      	ldmia	r2, {r0, r1, r2}
 80098d6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80098da:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80098dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80098de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098e0:	ee06 1a90 	vmov	s13, r1
 80098e4:	ee07 2a10 	vmov	s14, r2
 80098e8:	ee07 3a90 	vmov	s15, r3
 80098ec:	eeb0 0a66 	vmov.f32	s0, s13
 80098f0:	eef0 0a47 	vmov.f32	s1, s14
 80098f4:	eeb0 1a67 	vmov.f32	s2, s15
 80098f8:	3730      	adds	r7, #48	; 0x30
 80098fa:	46bd      	mov	sp, r7
 80098fc:	bd80      	pop	{r7, pc}
 80098fe:	bf00      	nop

08009900 <_ZNK7Vector3IfEmlERKS0_>:
 8009900:	b480      	push	{r7}
 8009902:	b083      	sub	sp, #12
 8009904:	af00      	add	r7, sp, #0
 8009906:	6078      	str	r0, [r7, #4]
 8009908:	6039      	str	r1, [r7, #0]
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	ed93 7a00 	vldr	s14, [r3]
 8009910:	683b      	ldr	r3, [r7, #0]
 8009912:	edd3 7a00 	vldr	s15, [r3]
 8009916:	ee27 7a27 	vmul.f32	s14, s14, s15
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	edd3 6a01 	vldr	s13, [r3, #4]
 8009920:	683b      	ldr	r3, [r7, #0]
 8009922:	edd3 7a01 	vldr	s15, [r3, #4]
 8009926:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800992a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	edd3 6a02 	vldr	s13, [r3, #8]
 8009934:	683b      	ldr	r3, [r7, #0]
 8009936:	edd3 7a02 	vldr	s15, [r3, #8]
 800993a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800993e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009942:	eeb0 0a67 	vmov.f32	s0, s15
 8009946:	370c      	adds	r7, #12
 8009948:	46bd      	mov	sp, r7
 800994a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800994e:	4770      	bx	lr

08009950 <_ZN7Vector3IfEdVEf>:
 8009950:	b480      	push	{r7}
 8009952:	b083      	sub	sp, #12
 8009954:	af00      	add	r7, sp, #0
 8009956:	6078      	str	r0, [r7, #4]
 8009958:	ed87 0a00 	vstr	s0, [r7]
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	edd3 6a00 	vldr	s13, [r3]
 8009962:	ed97 7a00 	vldr	s14, [r7]
 8009966:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	edc3 7a00 	vstr	s15, [r3]
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	edd3 6a01 	vldr	s13, [r3, #4]
 8009976:	ed97 7a00 	vldr	s14, [r7]
 800997a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	edc3 7a01 	vstr	s15, [r3, #4]
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	edd3 6a02 	vldr	s13, [r3, #8]
 800998a:	ed97 7a00 	vldr	s14, [r7]
 800998e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	edc3 7a02 	vstr	s15, [r3, #8]
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	4618      	mov	r0, r3
 800999c:	370c      	adds	r7, #12
 800999e:	46bd      	mov	sp, r7
 80099a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a4:	4770      	bx	lr
 80099a6:	bf00      	nop

080099a8 <_ZN7Vector3IfEmIERKS0_>:
 80099a8:	b480      	push	{r7}
 80099aa:	b083      	sub	sp, #12
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	6078      	str	r0, [r7, #4]
 80099b0:	6039      	str	r1, [r7, #0]
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	ed93 7a00 	vldr	s14, [r3]
 80099b8:	683b      	ldr	r3, [r7, #0]
 80099ba:	edd3 7a00 	vldr	s15, [r3]
 80099be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	edc3 7a00 	vstr	s15, [r3]
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	ed93 7a01 	vldr	s14, [r3, #4]
 80099ce:	683b      	ldr	r3, [r7, #0]
 80099d0:	edd3 7a01 	vldr	s15, [r3, #4]
 80099d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	edc3 7a01 	vstr	s15, [r3, #4]
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	ed93 7a02 	vldr	s14, [r3, #8]
 80099e4:	683b      	ldr	r3, [r7, #0]
 80099e6:	edd3 7a02 	vldr	s15, [r3, #8]
 80099ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	edc3 7a02 	vstr	s15, [r3, #8]
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	4618      	mov	r0, r3
 80099f8:	370c      	adds	r7, #12
 80099fa:	46bd      	mov	sp, r7
 80099fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a00:	4770      	bx	lr
 8009a02:	bf00      	nop

08009a04 <_ZN7Vector3IfEpLERKS0_>:
 8009a04:	b480      	push	{r7}
 8009a06:	b083      	sub	sp, #12
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	6078      	str	r0, [r7, #4]
 8009a0c:	6039      	str	r1, [r7, #0]
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	ed93 7a00 	vldr	s14, [r3]
 8009a14:	683b      	ldr	r3, [r7, #0]
 8009a16:	edd3 7a00 	vldr	s15, [r3]
 8009a1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	edc3 7a00 	vstr	s15, [r3]
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	ed93 7a01 	vldr	s14, [r3, #4]
 8009a2a:	683b      	ldr	r3, [r7, #0]
 8009a2c:	edd3 7a01 	vldr	s15, [r3, #4]
 8009a30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	edc3 7a01 	vstr	s15, [r3, #4]
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	ed93 7a02 	vldr	s14, [r3, #8]
 8009a40:	683b      	ldr	r3, [r7, #0]
 8009a42:	edd3 7a02 	vldr	s15, [r3, #8]
 8009a46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	edc3 7a02 	vstr	s15, [r3, #8]
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	4618      	mov	r0, r3
 8009a54:	370c      	adds	r7, #12
 8009a56:	46bd      	mov	sp, r7
 8009a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5c:	4770      	bx	lr
 8009a5e:	bf00      	nop

08009a60 <_ZNK7Vector3IfEdvEf>:
 8009a60:	b580      	push	{r7, lr}
 8009a62:	b08c      	sub	sp, #48	; 0x30
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	6178      	str	r0, [r7, #20]
 8009a68:	ed87 0a04 	vstr	s0, [r7, #16]
 8009a6c:	697b      	ldr	r3, [r7, #20]
 8009a6e:	ed93 7a00 	vldr	s14, [r3]
 8009a72:	edd7 7a04 	vldr	s15, [r7, #16]
 8009a76:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8009a7a:	697b      	ldr	r3, [r7, #20]
 8009a7c:	ed93 7a01 	vldr	s14, [r3, #4]
 8009a80:	edd7 7a04 	vldr	s15, [r7, #16]
 8009a84:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8009a88:	697b      	ldr	r3, [r7, #20]
 8009a8a:	ed93 7a02 	vldr	s14, [r3, #8]
 8009a8e:	edd7 7a04 	vldr	s15, [r7, #16]
 8009a92:	eec7 5a27 	vdiv.f32	s11, s14, s15
 8009a96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009a9a:	eeb0 1a65 	vmov.f32	s2, s11
 8009a9e:	eef0 0a46 	vmov.f32	s1, s12
 8009aa2:	eeb0 0a66 	vmov.f32	s0, s13
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	f000 f8de 	bl	8009c68 <_ZN7Vector3IfEC1Efff>
 8009aac:	f107 0318 	add.w	r3, r7, #24
 8009ab0:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8009ab4:	ca07      	ldmia	r2, {r0, r1, r2}
 8009ab6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8009aba:	69b9      	ldr	r1, [r7, #24]
 8009abc:	69fa      	ldr	r2, [r7, #28]
 8009abe:	6a3b      	ldr	r3, [r7, #32]
 8009ac0:	ee06 1a90 	vmov	s13, r1
 8009ac4:	ee07 2a10 	vmov	s14, r2
 8009ac8:	ee07 3a90 	vmov	s15, r3
 8009acc:	eeb0 0a66 	vmov.f32	s0, s13
 8009ad0:	eef0 0a47 	vmov.f32	s1, s14
 8009ad4:	eeb0 1a67 	vmov.f32	s2, s15
 8009ad8:	3730      	adds	r7, #48	; 0x30
 8009ada:	46bd      	mov	sp, r7
 8009adc:	bd80      	pop	{r7, pc}
 8009ade:	bf00      	nop

08009ae0 <_ZNK7Vector3IfEmlEf>:
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	b08c      	sub	sp, #48	; 0x30
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	6178      	str	r0, [r7, #20]
 8009ae8:	ed87 0a04 	vstr	s0, [r7, #16]
 8009aec:	697b      	ldr	r3, [r7, #20]
 8009aee:	ed93 7a00 	vldr	s14, [r3]
 8009af2:	edd7 7a04 	vldr	s15, [r7, #16]
 8009af6:	ee67 6a27 	vmul.f32	s13, s14, s15
 8009afa:	697b      	ldr	r3, [r7, #20]
 8009afc:	ed93 7a01 	vldr	s14, [r3, #4]
 8009b00:	edd7 7a04 	vldr	s15, [r7, #16]
 8009b04:	ee27 6a27 	vmul.f32	s12, s14, s15
 8009b08:	697b      	ldr	r3, [r7, #20]
 8009b0a:	ed93 7a02 	vldr	s14, [r3, #8]
 8009b0e:	edd7 7a04 	vldr	s15, [r7, #16]
 8009b12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009b1a:	eeb0 1a67 	vmov.f32	s2, s15
 8009b1e:	eef0 0a46 	vmov.f32	s1, s12
 8009b22:	eeb0 0a66 	vmov.f32	s0, s13
 8009b26:	4618      	mov	r0, r3
 8009b28:	f000 f89e 	bl	8009c68 <_ZN7Vector3IfEC1Efff>
 8009b2c:	f107 0318 	add.w	r3, r7, #24
 8009b30:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8009b34:	ca07      	ldmia	r2, {r0, r1, r2}
 8009b36:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8009b3a:	69b9      	ldr	r1, [r7, #24]
 8009b3c:	69fa      	ldr	r2, [r7, #28]
 8009b3e:	6a3b      	ldr	r3, [r7, #32]
 8009b40:	ee06 1a90 	vmov	s13, r1
 8009b44:	ee07 2a10 	vmov	s14, r2
 8009b48:	ee07 3a90 	vmov	s15, r3
 8009b4c:	eeb0 0a66 	vmov.f32	s0, s13
 8009b50:	eef0 0a47 	vmov.f32	s1, s14
 8009b54:	eeb0 1a67 	vmov.f32	s2, s15
 8009b58:	3730      	adds	r7, #48	; 0x30
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	bd80      	pop	{r7, pc}
 8009b5e:	bf00      	nop

08009b60 <_ZNK7Vector3IfEplERKS0_>:
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b08c      	sub	sp, #48	; 0x30
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6178      	str	r0, [r7, #20]
 8009b68:	6139      	str	r1, [r7, #16]
 8009b6a:	697b      	ldr	r3, [r7, #20]
 8009b6c:	ed93 7a00 	vldr	s14, [r3]
 8009b70:	693b      	ldr	r3, [r7, #16]
 8009b72:	edd3 7a00 	vldr	s15, [r3]
 8009b76:	ee77 6a27 	vadd.f32	s13, s14, s15
 8009b7a:	697b      	ldr	r3, [r7, #20]
 8009b7c:	ed93 7a01 	vldr	s14, [r3, #4]
 8009b80:	693b      	ldr	r3, [r7, #16]
 8009b82:	edd3 7a01 	vldr	s15, [r3, #4]
 8009b86:	ee37 6a27 	vadd.f32	s12, s14, s15
 8009b8a:	697b      	ldr	r3, [r7, #20]
 8009b8c:	ed93 7a02 	vldr	s14, [r3, #8]
 8009b90:	693b      	ldr	r3, [r7, #16]
 8009b92:	edd3 7a02 	vldr	s15, [r3, #8]
 8009b96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009b9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009b9e:	eeb0 1a67 	vmov.f32	s2, s15
 8009ba2:	eef0 0a46 	vmov.f32	s1, s12
 8009ba6:	eeb0 0a66 	vmov.f32	s0, s13
 8009baa:	4618      	mov	r0, r3
 8009bac:	f000 f85c 	bl	8009c68 <_ZN7Vector3IfEC1Efff>
 8009bb0:	f107 0318 	add.w	r3, r7, #24
 8009bb4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8009bb8:	ca07      	ldmia	r2, {r0, r1, r2}
 8009bba:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8009bbe:	69b9      	ldr	r1, [r7, #24]
 8009bc0:	69fa      	ldr	r2, [r7, #28]
 8009bc2:	6a3b      	ldr	r3, [r7, #32]
 8009bc4:	ee06 1a90 	vmov	s13, r1
 8009bc8:	ee07 2a10 	vmov	s14, r2
 8009bcc:	ee07 3a90 	vmov	s15, r3
 8009bd0:	eeb0 0a66 	vmov.f32	s0, s13
 8009bd4:	eef0 0a47 	vmov.f32	s1, s14
 8009bd8:	eeb0 1a67 	vmov.f32	s2, s15
 8009bdc:	3730      	adds	r7, #48	; 0x30
 8009bde:	46bd      	mov	sp, r7
 8009be0:	bd80      	pop	{r7, pc}
 8009be2:	bf00      	nop

08009be4 <_ZNK7Vector3IfEmiERKS0_>:
 8009be4:	b580      	push	{r7, lr}
 8009be6:	b08c      	sub	sp, #48	; 0x30
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	6178      	str	r0, [r7, #20]
 8009bec:	6139      	str	r1, [r7, #16]
 8009bee:	697b      	ldr	r3, [r7, #20]
 8009bf0:	ed93 7a00 	vldr	s14, [r3]
 8009bf4:	693b      	ldr	r3, [r7, #16]
 8009bf6:	edd3 7a00 	vldr	s15, [r3]
 8009bfa:	ee77 6a67 	vsub.f32	s13, s14, s15
 8009bfe:	697b      	ldr	r3, [r7, #20]
 8009c00:	ed93 7a01 	vldr	s14, [r3, #4]
 8009c04:	693b      	ldr	r3, [r7, #16]
 8009c06:	edd3 7a01 	vldr	s15, [r3, #4]
 8009c0a:	ee37 6a67 	vsub.f32	s12, s14, s15
 8009c0e:	697b      	ldr	r3, [r7, #20]
 8009c10:	ed93 7a02 	vldr	s14, [r3, #8]
 8009c14:	693b      	ldr	r3, [r7, #16]
 8009c16:	edd3 7a02 	vldr	s15, [r3, #8]
 8009c1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009c1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009c22:	eeb0 1a67 	vmov.f32	s2, s15
 8009c26:	eef0 0a46 	vmov.f32	s1, s12
 8009c2a:	eeb0 0a66 	vmov.f32	s0, s13
 8009c2e:	4618      	mov	r0, r3
 8009c30:	f000 f81a 	bl	8009c68 <_ZN7Vector3IfEC1Efff>
 8009c34:	f107 0318 	add.w	r3, r7, #24
 8009c38:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8009c3c:	ca07      	ldmia	r2, {r0, r1, r2}
 8009c3e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8009c42:	69b9      	ldr	r1, [r7, #24]
 8009c44:	69fa      	ldr	r2, [r7, #28]
 8009c46:	6a3b      	ldr	r3, [r7, #32]
 8009c48:	ee06 1a90 	vmov	s13, r1
 8009c4c:	ee07 2a10 	vmov	s14, r2
 8009c50:	ee07 3a90 	vmov	s15, r3
 8009c54:	eeb0 0a66 	vmov.f32	s0, s13
 8009c58:	eef0 0a47 	vmov.f32	s1, s14
 8009c5c:	eeb0 1a67 	vmov.f32	s2, s15
 8009c60:	3730      	adds	r7, #48	; 0x30
 8009c62:	46bd      	mov	sp, r7
 8009c64:	bd80      	pop	{r7, pc}
 8009c66:	bf00      	nop

08009c68 <_ZN7Vector3IfEC1Efff>:
 8009c68:	b480      	push	{r7}
 8009c6a:	b085      	sub	sp, #20
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	60f8      	str	r0, [r7, #12]
 8009c70:	ed87 0a02 	vstr	s0, [r7, #8]
 8009c74:	edc7 0a01 	vstr	s1, [r7, #4]
 8009c78:	ed87 1a00 	vstr	s2, [r7]
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	68ba      	ldr	r2, [r7, #8]
 8009c80:	601a      	str	r2, [r3, #0]
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	687a      	ldr	r2, [r7, #4]
 8009c86:	605a      	str	r2, [r3, #4]
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	683a      	ldr	r2, [r7, #0]
 8009c8c:	609a      	str	r2, [r3, #8]
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	4618      	mov	r0, r3
 8009c92:	3714      	adds	r7, #20
 8009c94:	46bd      	mov	sp, r7
 8009c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9a:	4770      	bx	lr

08009c9c <_ZN7Matrix3IfE10from_eulerEfff>:
 8009c9c:	b580      	push	{r7, lr}
 8009c9e:	b08a      	sub	sp, #40	; 0x28
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	60f8      	str	r0, [r7, #12]
 8009ca4:	ed87 0a02 	vstr	s0, [r7, #8]
 8009ca8:	edc7 0a01 	vstr	s1, [r7, #4]
 8009cac:	ed87 1a00 	vstr	s2, [r7]
 8009cb0:	ed97 0a01 	vldr	s0, [r7, #4]
 8009cb4:	f000 fe8c 	bl	800a9d0 <cosf>
 8009cb8:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 8009cbc:	ed97 0a01 	vldr	s0, [r7, #4]
 8009cc0:	f000 fec6 	bl	800aa50 <sinf>
 8009cc4:	ed87 0a08 	vstr	s0, [r7, #32]
 8009cc8:	ed97 0a02 	vldr	s0, [r7, #8]
 8009ccc:	f000 fec0 	bl	800aa50 <sinf>
 8009cd0:	ed87 0a07 	vstr	s0, [r7, #28]
 8009cd4:	ed97 0a02 	vldr	s0, [r7, #8]
 8009cd8:	f000 fe7a 	bl	800a9d0 <cosf>
 8009cdc:	ed87 0a06 	vstr	s0, [r7, #24]
 8009ce0:	ed97 0a00 	vldr	s0, [r7]
 8009ce4:	f000 feb4 	bl	800aa50 <sinf>
 8009ce8:	ed87 0a05 	vstr	s0, [r7, #20]
 8009cec:	ed97 0a00 	vldr	s0, [r7]
 8009cf0:	f000 fe6e 	bl	800a9d0 <cosf>
 8009cf4:	ed87 0a04 	vstr	s0, [r7, #16]
 8009cf8:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8009cfc:	edd7 7a04 	vldr	s15, [r7, #16]
 8009d00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	edc3 7a00 	vstr	s15, [r3]
 8009d0a:	ed97 7a07 	vldr	s14, [r7, #28]
 8009d0e:	edd7 7a08 	vldr	s15, [r7, #32]
 8009d12:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009d16:	edd7 7a04 	vldr	s15, [r7, #16]
 8009d1a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009d1e:	edd7 6a06 	vldr	s13, [r7, #24]
 8009d22:	edd7 7a05 	vldr	s15, [r7, #20]
 8009d26:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009d2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	edc3 7a01 	vstr	s15, [r3, #4]
 8009d34:	ed97 7a06 	vldr	s14, [r7, #24]
 8009d38:	edd7 7a08 	vldr	s15, [r7, #32]
 8009d3c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009d40:	edd7 7a04 	vldr	s15, [r7, #16]
 8009d44:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009d48:	edd7 6a07 	vldr	s13, [r7, #28]
 8009d4c:	edd7 7a05 	vldr	s15, [r7, #20]
 8009d50:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009d54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	edc3 7a02 	vstr	s15, [r3, #8]
 8009d5e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8009d62:	edd7 7a05 	vldr	s15, [r7, #20]
 8009d66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	edc3 7a03 	vstr	s15, [r3, #12]
 8009d70:	ed97 7a07 	vldr	s14, [r7, #28]
 8009d74:	edd7 7a08 	vldr	s15, [r7, #32]
 8009d78:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009d7c:	edd7 7a05 	vldr	s15, [r7, #20]
 8009d80:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009d84:	edd7 6a06 	vldr	s13, [r7, #24]
 8009d88:	edd7 7a04 	vldr	s15, [r7, #16]
 8009d8c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009d90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	edc3 7a04 	vstr	s15, [r3, #16]
 8009d9a:	ed97 7a06 	vldr	s14, [r7, #24]
 8009d9e:	edd7 7a08 	vldr	s15, [r7, #32]
 8009da2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009da6:	edd7 7a05 	vldr	s15, [r7, #20]
 8009daa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009dae:	edd7 6a07 	vldr	s13, [r7, #28]
 8009db2:	edd7 7a04 	vldr	s15, [r7, #16]
 8009db6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009dba:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	edc3 7a05 	vstr	s15, [r3, #20]
 8009dc4:	edd7 7a08 	vldr	s15, [r7, #32]
 8009dc8:	eef1 7a67 	vneg.f32	s15, s15
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	edc3 7a06 	vstr	s15, [r3, #24]
 8009dd2:	ed97 7a07 	vldr	s14, [r7, #28]
 8009dd6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009dda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	edc3 7a07 	vstr	s15, [r3, #28]
 8009de4:	ed97 7a06 	vldr	s14, [r7, #24]
 8009de8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009dec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	edc3 7a08 	vstr	s15, [r3, #32]
 8009df6:	bf00      	nop
 8009df8:	3728      	adds	r7, #40	; 0x28
 8009dfa:	46bd      	mov	sp, r7
 8009dfc:	bd80      	pop	{r7, pc}
 8009dfe:	bf00      	nop

08009e00 <_ZNK7Matrix3IfEmlERK7Vector3IfE>:
 8009e00:	b580      	push	{r7, lr}
 8009e02:	b08c      	sub	sp, #48	; 0x30
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	6178      	str	r0, [r7, #20]
 8009e08:	6139      	str	r1, [r7, #16]
 8009e0a:	697b      	ldr	r3, [r7, #20]
 8009e0c:	ed93 7a00 	vldr	s14, [r3]
 8009e10:	693b      	ldr	r3, [r7, #16]
 8009e12:	edd3 7a00 	vldr	s15, [r3]
 8009e16:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009e1a:	697b      	ldr	r3, [r7, #20]
 8009e1c:	edd3 6a01 	vldr	s13, [r3, #4]
 8009e20:	693b      	ldr	r3, [r7, #16]
 8009e22:	edd3 7a01 	vldr	s15, [r3, #4]
 8009e26:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009e2a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009e2e:	697b      	ldr	r3, [r7, #20]
 8009e30:	edd3 6a02 	vldr	s13, [r3, #8]
 8009e34:	693b      	ldr	r3, [r7, #16]
 8009e36:	edd3 7a02 	vldr	s15, [r3, #8]
 8009e3a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009e3e:	ee37 6a27 	vadd.f32	s12, s14, s15
 8009e42:	697b      	ldr	r3, [r7, #20]
 8009e44:	ed93 7a03 	vldr	s14, [r3, #12]
 8009e48:	693b      	ldr	r3, [r7, #16]
 8009e4a:	edd3 7a00 	vldr	s15, [r3]
 8009e4e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009e52:	697b      	ldr	r3, [r7, #20]
 8009e54:	edd3 6a04 	vldr	s13, [r3, #16]
 8009e58:	693b      	ldr	r3, [r7, #16]
 8009e5a:	edd3 7a01 	vldr	s15, [r3, #4]
 8009e5e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009e62:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009e66:	697b      	ldr	r3, [r7, #20]
 8009e68:	edd3 6a05 	vldr	s13, [r3, #20]
 8009e6c:	693b      	ldr	r3, [r7, #16]
 8009e6e:	edd3 7a02 	vldr	s15, [r3, #8]
 8009e72:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009e76:	ee77 5a27 	vadd.f32	s11, s14, s15
 8009e7a:	697b      	ldr	r3, [r7, #20]
 8009e7c:	ed93 7a06 	vldr	s14, [r3, #24]
 8009e80:	693b      	ldr	r3, [r7, #16]
 8009e82:	edd3 7a00 	vldr	s15, [r3]
 8009e86:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009e8a:	697b      	ldr	r3, [r7, #20]
 8009e8c:	edd3 6a07 	vldr	s13, [r3, #28]
 8009e90:	693b      	ldr	r3, [r7, #16]
 8009e92:	edd3 7a01 	vldr	s15, [r3, #4]
 8009e96:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009e9a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009e9e:	697b      	ldr	r3, [r7, #20]
 8009ea0:	edd3 6a08 	vldr	s13, [r3, #32]
 8009ea4:	693b      	ldr	r3, [r7, #16]
 8009ea6:	edd3 7a02 	vldr	s15, [r3, #8]
 8009eaa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009eae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009eb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009eb6:	eeb0 1a67 	vmov.f32	s2, s15
 8009eba:	eef0 0a65 	vmov.f32	s1, s11
 8009ebe:	eeb0 0a46 	vmov.f32	s0, s12
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	f7ff fed0 	bl	8009c68 <_ZN7Vector3IfEC1Efff>
 8009ec8:	f107 0318 	add.w	r3, r7, #24
 8009ecc:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8009ed0:	ca07      	ldmia	r2, {r0, r1, r2}
 8009ed2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8009ed6:	69b9      	ldr	r1, [r7, #24]
 8009ed8:	69fa      	ldr	r2, [r7, #28]
 8009eda:	6a3b      	ldr	r3, [r7, #32]
 8009edc:	ee06 1a90 	vmov	s13, r1
 8009ee0:	ee07 2a10 	vmov	s14, r2
 8009ee4:	ee07 3a90 	vmov	s15, r3
 8009ee8:	eeb0 0a66 	vmov.f32	s0, s13
 8009eec:	eef0 0a47 	vmov.f32	s1, s14
 8009ef0:	eeb0 1a67 	vmov.f32	s2, s15
 8009ef4:	3730      	adds	r7, #48	; 0x30
 8009ef6:	46bd      	mov	sp, r7
 8009ef8:	bd80      	pop	{r7, pc}
 8009efa:	bf00      	nop

08009efc <_Z8inv_sqrtf>:
 8009efc:	b480      	push	{r7}
 8009efe:	b087      	sub	sp, #28
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	ed87 0a01 	vstr	s0, [r7, #4]
 8009f06:	edd7 7a01 	vldr	s15, [r7, #4]
 8009f0a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8009f0e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009f12:	edc7 7a05 	vstr	s15, [r7, #20]
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	613b      	str	r3, [r7, #16]
 8009f1a:	f107 0310 	add.w	r3, r7, #16
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	60fb      	str	r3, [r7, #12]
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	105a      	asrs	r2, r3, #1
 8009f26:	4b12      	ldr	r3, [pc, #72]	; (8009f70 <_Z8inv_sqrtf+0x74>)
 8009f28:	1a9b      	subs	r3, r3, r2
 8009f2a:	60fb      	str	r3, [r7, #12]
 8009f2c:	f107 030c 	add.w	r3, r7, #12
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	613b      	str	r3, [r7, #16]
 8009f34:	ed97 7a04 	vldr	s14, [r7, #16]
 8009f38:	edd7 7a05 	vldr	s15, [r7, #20]
 8009f3c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009f40:	edd7 7a04 	vldr	s15, [r7, #16]
 8009f44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f48:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8009f4c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009f50:	edd7 7a04 	vldr	s15, [r7, #16]
 8009f54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f58:	edc7 7a04 	vstr	s15, [r7, #16]
 8009f5c:	693b      	ldr	r3, [r7, #16]
 8009f5e:	ee07 3a90 	vmov	s15, r3
 8009f62:	eeb0 0a67 	vmov.f32	s0, s15
 8009f66:	371c      	adds	r7, #28
 8009f68:	46bd      	mov	sp, r7
 8009f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f6e:	4770      	bx	lr
 8009f70:	5f3759df 	.word	0x5f3759df

08009f74 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 8009f74:	b510      	push	{r4, lr}
 8009f76:	4b03      	ldr	r3, [pc, #12]	; (8009f84 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 8009f78:	6003      	str	r3, [r0, #0]
 8009f7a:	4604      	mov	r4, r0
 8009f7c:	f000 fc32 	bl	800a7e4 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8009f80:	4620      	mov	r0, r4
 8009f82:	bd10      	pop	{r4, pc}
 8009f84:	0800cba8 	.word	0x0800cba8

08009f88 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 8009f88:	b510      	push	{r4, lr}
 8009f8a:	4604      	mov	r4, r0
 8009f8c:	f7ff fff2 	bl	8009f74 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 8009f90:	4620      	mov	r0, r4
 8009f92:	210c      	movs	r1, #12
 8009f94:	f000 fbfc 	bl	800a790 <_ZdlPvj>
 8009f98:	4620      	mov	r0, r4
 8009f9a:	bd10      	pop	{r4, pc}

08009f9c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 8009f9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fa0:	9e06      	ldr	r6, [sp, #24]
 8009fa2:	4296      	cmp	r6, r2
 8009fa4:	4680      	mov	r8, r0
 8009fa6:	460f      	mov	r7, r1
 8009fa8:	4614      	mov	r4, r2
 8009faa:	461d      	mov	r5, r3
 8009fac:	d103      	bne.n	8009fb6 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x1a>
 8009fae:	4619      	mov	r1, r3
 8009fb0:	f000 fc6c 	bl	800a88c <_ZNKSt9type_infoeqERKS_>
 8009fb4:	b958      	cbnz	r0, 8009fce <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x32>
 8009fb6:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8009fba:	6803      	ldr	r3, [r0, #0]
 8009fbc:	9606      	str	r6, [sp, #24]
 8009fbe:	6a1e      	ldr	r6, [r3, #32]
 8009fc0:	4622      	mov	r2, r4
 8009fc2:	462b      	mov	r3, r5
 8009fc4:	4639      	mov	r1, r7
 8009fc6:	46b4      	mov	ip, r6
 8009fc8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009fcc:	4760      	bx	ip
 8009fce:	2006      	movs	r0, #6
 8009fd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009fd4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 8009fd4:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fd8:	460e      	mov	r6, r1
 8009fda:	4619      	mov	r1, r3
 8009fdc:	4683      	mov	fp, r0
 8009fde:	4617      	mov	r7, r2
 8009fe0:	4699      	mov	r9, r3
 8009fe2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009fe4:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 8009fe8:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8009fec:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8009fee:	f000 fc4d 	bl	800a88c <_ZNKSt9type_infoeqERKS_>
 8009ff2:	b190      	cbz	r0, 800a01a <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x46>
 8009ff4:	2e00      	cmp	r6, #0
 8009ff6:	602c      	str	r4, [r5, #0]
 8009ff8:	712f      	strb	r7, [r5, #4]
 8009ffa:	db09      	blt.n	800a010 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3c>
 8009ffc:	4434      	add	r4, r6
 8009ffe:	45a0      	cmp	r8, r4
 800a000:	bf0c      	ite	eq
 800a002:	2406      	moveq	r4, #6
 800a004:	2401      	movne	r4, #1
 800a006:	71ac      	strb	r4, [r5, #6]
 800a008:	2000      	movs	r0, #0
 800a00a:	b001      	add	sp, #4
 800a00c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a010:	3602      	adds	r6, #2
 800a012:	d1f9      	bne.n	800a008 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x34>
 800a014:	2301      	movs	r3, #1
 800a016:	71ab      	strb	r3, [r5, #6]
 800a018:	e7f6      	b.n	800a008 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x34>
 800a01a:	4544      	cmp	r4, r8
 800a01c:	d104      	bne.n	800a028 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 800a01e:	4651      	mov	r1, sl
 800a020:	4658      	mov	r0, fp
 800a022:	f000 fc33 	bl	800a88c <_ZNKSt9type_infoeqERKS_>
 800a026:	b988      	cbnz	r0, 800a04c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x78>
 800a028:	f8db 0008 	ldr.w	r0, [fp, #8]
 800a02c:	6803      	ldr	r3, [r0, #0]
 800a02e:	950d      	str	r5, [sp, #52]	; 0x34
 800a030:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 800a034:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 800a038:	940a      	str	r4, [sp, #40]	; 0x28
 800a03a:	69dc      	ldr	r4, [r3, #28]
 800a03c:	463a      	mov	r2, r7
 800a03e:	464b      	mov	r3, r9
 800a040:	4631      	mov	r1, r6
 800a042:	46a4      	mov	ip, r4
 800a044:	b001      	add	sp, #4
 800a046:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a04a:	4760      	bx	ip
 800a04c:	716f      	strb	r7, [r5, #5]
 800a04e:	e7db      	b.n	800a008 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x34>

0800a050 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 800a050:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a054:	4604      	mov	r4, r0
 800a056:	460d      	mov	r5, r1
 800a058:	4616      	mov	r6, r2
 800a05a:	461f      	mov	r7, r3
 800a05c:	f000 fbd6 	bl	800a80c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 800a060:	b948      	cbnz	r0, 800a076 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 800a062:	68a0      	ldr	r0, [r4, #8]
 800a064:	6803      	ldr	r3, [r0, #0]
 800a066:	699c      	ldr	r4, [r3, #24]
 800a068:	4632      	mov	r2, r6
 800a06a:	463b      	mov	r3, r7
 800a06c:	4629      	mov	r1, r5
 800a06e:	46a4      	mov	ip, r4
 800a070:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a074:	4760      	bx	ip
 800a076:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a07a <_ZdlPv>:
 800a07a:	f001 bbcd 	b.w	800b818 <free>

0800a07e <__aeabi_atexit>:
 800a07e:	460b      	mov	r3, r1
 800a080:	4601      	mov	r1, r0
 800a082:	4618      	mov	r0, r3
 800a084:	f001 bb95 	b.w	800b7b2 <__cxa_atexit>

0800a088 <__cxa_pure_virtual>:
 800a088:	b508      	push	{r3, lr}
 800a08a:	f000 f80d 	bl	800a0a8 <_ZSt9terminatev>

0800a08e <_ZN10__cxxabiv111__terminateEPFvvE>:
 800a08e:	b508      	push	{r3, lr}
 800a090:	4780      	blx	r0
 800a092:	f001 fb87 	bl	800b7a4 <abort>
	...

0800a098 <_ZSt13get_terminatev>:
 800a098:	4b02      	ldr	r3, [pc, #8]	; (800a0a4 <_ZSt13get_terminatev+0xc>)
 800a09a:	6818      	ldr	r0, [r3, #0]
 800a09c:	f3bf 8f5b 	dmb	ish
 800a0a0:	4770      	bx	lr
 800a0a2:	bf00      	nop
 800a0a4:	20000008 	.word	0x20000008

0800a0a8 <_ZSt9terminatev>:
 800a0a8:	b508      	push	{r3, lr}
 800a0aa:	f7ff fff5 	bl	800a098 <_ZSt13get_terminatev>
 800a0ae:	f7ff ffee 	bl	800a08e <_ZN10__cxxabiv111__terminateEPFvvE>

0800a0b2 <_ZN10__cxxabiv112__unexpectedEPFvvE>:
 800a0b2:	b508      	push	{r3, lr}
 800a0b4:	4780      	blx	r0
 800a0b6:	f7ff fff7 	bl	800a0a8 <_ZSt9terminatev>
	...

0800a0bc <_ZSt14get_unexpectedv>:
 800a0bc:	4b02      	ldr	r3, [pc, #8]	; (800a0c8 <_ZSt14get_unexpectedv+0xc>)
 800a0be:	6818      	ldr	r0, [r3, #0]
 800a0c0:	f3bf 8f5b 	dmb	ish
 800a0c4:	4770      	bx	lr
 800a0c6:	bf00      	nop
 800a0c8:	2000000c 	.word	0x2000000c

0800a0cc <_ZSt10unexpectedv>:
 800a0cc:	b508      	push	{r3, lr}
 800a0ce:	f7ff fff5 	bl	800a0bc <_ZSt14get_unexpectedv>
 800a0d2:	f7ff ffee 	bl	800a0b2 <_ZN10__cxxabiv112__unexpectedEPFvvE>

0800a0d6 <_Znwj>:
 800a0d6:	b510      	push	{r4, lr}
 800a0d8:	2800      	cmp	r0, #0
 800a0da:	bf14      	ite	ne
 800a0dc:	4604      	movne	r4, r0
 800a0de:	2401      	moveq	r4, #1
 800a0e0:	4620      	mov	r0, r4
 800a0e2:	f001 fb91 	bl	800b808 <malloc>
 800a0e6:	b930      	cbnz	r0, 800a0f6 <_Znwj+0x20>
 800a0e8:	f000 fb54 	bl	800a794 <_ZSt15get_new_handlerv>
 800a0ec:	b908      	cbnz	r0, 800a0f2 <_Znwj+0x1c>
 800a0ee:	f001 fb59 	bl	800b7a4 <abort>
 800a0f2:	4780      	blx	r0
 800a0f4:	e7f4      	b.n	800a0e0 <_Znwj+0xa>
 800a0f6:	bd10      	pop	{r4, pc}

0800a0f8 <__cxa_end_cleanup>:
 800a0f8:	b41e      	push	{r1, r2, r3, r4}
 800a0fa:	f000 f89c 	bl	800a236 <__gnu_end_cleanup>
 800a0fe:	bc1e      	pop	{r1, r2, r3, r4}
 800a100:	f7f6 ff8e 	bl	8001020 <_Unwind_Resume>

0800a104 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 800a104:	7803      	ldrb	r3, [r0, #0]
 800a106:	2b47      	cmp	r3, #71	; 0x47
 800a108:	d117      	bne.n	800a13a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800a10a:	7843      	ldrb	r3, [r0, #1]
 800a10c:	2b4e      	cmp	r3, #78	; 0x4e
 800a10e:	d114      	bne.n	800a13a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800a110:	7883      	ldrb	r3, [r0, #2]
 800a112:	2b55      	cmp	r3, #85	; 0x55
 800a114:	d111      	bne.n	800a13a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800a116:	78c3      	ldrb	r3, [r0, #3]
 800a118:	2b43      	cmp	r3, #67	; 0x43
 800a11a:	d10e      	bne.n	800a13a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800a11c:	7903      	ldrb	r3, [r0, #4]
 800a11e:	2b43      	cmp	r3, #67	; 0x43
 800a120:	d10b      	bne.n	800a13a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800a122:	7943      	ldrb	r3, [r0, #5]
 800a124:	2b2b      	cmp	r3, #43	; 0x2b
 800a126:	d108      	bne.n	800a13a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800a128:	7983      	ldrb	r3, [r0, #6]
 800a12a:	2b2b      	cmp	r3, #43	; 0x2b
 800a12c:	d105      	bne.n	800a13a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800a12e:	79c0      	ldrb	r0, [r0, #7]
 800a130:	2801      	cmp	r0, #1
 800a132:	bf8c      	ite	hi
 800a134:	2000      	movhi	r0, #0
 800a136:	2001      	movls	r0, #1
 800a138:	4770      	bx	lr
 800a13a:	2000      	movs	r0, #0
 800a13c:	4770      	bx	lr
	...

0800a140 <__cxa_type_match>:
 800a140:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800a144:	461e      	mov	r6, r3
 800a146:	7803      	ldrb	r3, [r0, #0]
 800a148:	2b47      	cmp	r3, #71	; 0x47
 800a14a:	460d      	mov	r5, r1
 800a14c:	4602      	mov	r2, r0
 800a14e:	79c1      	ldrb	r1, [r0, #7]
 800a150:	d148      	bne.n	800a1e4 <__cxa_type_match+0xa4>
 800a152:	7843      	ldrb	r3, [r0, #1]
 800a154:	2b4e      	cmp	r3, #78	; 0x4e
 800a156:	d145      	bne.n	800a1e4 <__cxa_type_match+0xa4>
 800a158:	7883      	ldrb	r3, [r0, #2]
 800a15a:	2b55      	cmp	r3, #85	; 0x55
 800a15c:	d142      	bne.n	800a1e4 <__cxa_type_match+0xa4>
 800a15e:	78c3      	ldrb	r3, [r0, #3]
 800a160:	2b43      	cmp	r3, #67	; 0x43
 800a162:	d13f      	bne.n	800a1e4 <__cxa_type_match+0xa4>
 800a164:	7903      	ldrb	r3, [r0, #4]
 800a166:	2b46      	cmp	r3, #70	; 0x46
 800a168:	d13c      	bne.n	800a1e4 <__cxa_type_match+0xa4>
 800a16a:	7943      	ldrb	r3, [r0, #5]
 800a16c:	2b4f      	cmp	r3, #79	; 0x4f
 800a16e:	d139      	bne.n	800a1e4 <__cxa_type_match+0xa4>
 800a170:	7983      	ldrb	r3, [r0, #6]
 800a172:	2b52      	cmp	r3, #82	; 0x52
 800a174:	d136      	bne.n	800a1e4 <__cxa_type_match+0xa4>
 800a176:	2900      	cmp	r1, #0
 800a178:	d134      	bne.n	800a1e4 <__cxa_type_match+0xa4>
 800a17a:	2301      	movs	r3, #1
 800a17c:	4608      	mov	r0, r1
 800a17e:	2400      	movs	r4, #0
 800a180:	9401      	str	r4, [sp, #4]
 800a182:	bb3b      	cbnz	r3, 800a1d4 <__cxa_type_match+0x94>
 800a184:	bb40      	cbnz	r0, 800a1d8 <__cxa_type_match+0x98>
 800a186:	2901      	cmp	r1, #1
 800a188:	bf0a      	itet	eq
 800a18a:	f852 3c20 	ldreq.w	r3, [r2, #-32]
 800a18e:	f1a2 0320 	subne.w	r3, r2, #32
 800a192:	3b78      	subeq	r3, #120	; 0x78
 800a194:	2901      	cmp	r1, #1
 800a196:	bf08      	it	eq
 800a198:	f852 2c20 	ldreq.w	r2, [r2, #-32]
 800a19c:	681c      	ldr	r4, [r3, #0]
 800a19e:	bf18      	it	ne
 800a1a0:	3258      	addne	r2, #88	; 0x58
 800a1a2:	9201      	str	r2, [sp, #4]
 800a1a4:	6823      	ldr	r3, [r4, #0]
 800a1a6:	4620      	mov	r0, r4
 800a1a8:	689b      	ldr	r3, [r3, #8]
 800a1aa:	4798      	blx	r3
 800a1ac:	b1b0      	cbz	r0, 800a1dc <__cxa_type_match+0x9c>
 800a1ae:	9b01      	ldr	r3, [sp, #4]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	9301      	str	r3, [sp, #4]
 800a1b4:	2702      	movs	r7, #2
 800a1b6:	682b      	ldr	r3, [r5, #0]
 800a1b8:	aa01      	add	r2, sp, #4
 800a1ba:	f8d3 8010 	ldr.w	r8, [r3, #16]
 800a1be:	4621      	mov	r1, r4
 800a1c0:	2301      	movs	r3, #1
 800a1c2:	4628      	mov	r0, r5
 800a1c4:	47c0      	blx	r8
 800a1c6:	b158      	cbz	r0, 800a1e0 <__cxa_type_match+0xa0>
 800a1c8:	9b01      	ldr	r3, [sp, #4]
 800a1ca:	6033      	str	r3, [r6, #0]
 800a1cc:	4638      	mov	r0, r7
 800a1ce:	b002      	add	sp, #8
 800a1d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1d4:	4c07      	ldr	r4, [pc, #28]	; (800a1f4 <__cxa_type_match+0xb4>)
 800a1d6:	e7e5      	b.n	800a1a4 <__cxa_type_match+0x64>
 800a1d8:	4c07      	ldr	r4, [pc, #28]	; (800a1f8 <__cxa_type_match+0xb8>)
 800a1da:	e7e3      	b.n	800a1a4 <__cxa_type_match+0x64>
 800a1dc:	2701      	movs	r7, #1
 800a1de:	e7ea      	b.n	800a1b6 <__cxa_type_match+0x76>
 800a1e0:	4607      	mov	r7, r0
 800a1e2:	e7f3      	b.n	800a1cc <__cxa_type_match+0x8c>
 800a1e4:	4610      	mov	r0, r2
 800a1e6:	f7ff ff8d 	bl	800a104 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 800a1ea:	f080 0001 	eor.w	r0, r0, #1
 800a1ee:	b2c0      	uxtb	r0, r0
 800a1f0:	2300      	movs	r3, #0
 800a1f2:	e7c4      	b.n	800a17e <__cxa_type_match+0x3e>
 800a1f4:	0800cc40 	.word	0x0800cc40
 800a1f8:	0800cc48 	.word	0x0800cc48

0800a1fc <__cxa_begin_cleanup>:
 800a1fc:	b510      	push	{r4, lr}
 800a1fe:	4604      	mov	r4, r0
 800a200:	f000 fbe2 	bl	800a9c8 <__cxa_get_globals>
 800a204:	4602      	mov	r2, r0
 800a206:	4620      	mov	r0, r4
 800a208:	f1a4 0120 	sub.w	r1, r4, #32
 800a20c:	f7ff ff7a 	bl	800a104 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 800a210:	b160      	cbz	r0, 800a22c <__cxa_begin_cleanup+0x30>
 800a212:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800a216:	3301      	adds	r3, #1
 800a218:	2b01      	cmp	r3, #1
 800a21a:	f844 3c04 	str.w	r3, [r4, #-4]
 800a21e:	d103      	bne.n	800a228 <__cxa_begin_cleanup+0x2c>
 800a220:	6893      	ldr	r3, [r2, #8]
 800a222:	f844 3c08 	str.w	r3, [r4, #-8]
 800a226:	6091      	str	r1, [r2, #8]
 800a228:	2001      	movs	r0, #1
 800a22a:	bd10      	pop	{r4, pc}
 800a22c:	6893      	ldr	r3, [r2, #8]
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d0f9      	beq.n	800a226 <__cxa_begin_cleanup+0x2a>
 800a232:	f7ff ff39 	bl	800a0a8 <_ZSt9terminatev>

0800a236 <__gnu_end_cleanup>:
 800a236:	b510      	push	{r4, lr}
 800a238:	f000 fbc6 	bl	800a9c8 <__cxa_get_globals>
 800a23c:	6882      	ldr	r2, [r0, #8]
 800a23e:	4601      	mov	r1, r0
 800a240:	b90a      	cbnz	r2, 800a246 <__gnu_end_cleanup+0x10>
 800a242:	f7ff ff31 	bl	800a0a8 <_ZSt9terminatev>
 800a246:	f102 0420 	add.w	r4, r2, #32
 800a24a:	4620      	mov	r0, r4
 800a24c:	f7ff ff5a 	bl	800a104 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 800a250:	b140      	cbz	r0, 800a264 <__gnu_end_cleanup+0x2e>
 800a252:	69d3      	ldr	r3, [r2, #28]
 800a254:	3b01      	subs	r3, #1
 800a256:	61d3      	str	r3, [r2, #28]
 800a258:	b913      	cbnz	r3, 800a260 <__gnu_end_cleanup+0x2a>
 800a25a:	6990      	ldr	r0, [r2, #24]
 800a25c:	6088      	str	r0, [r1, #8]
 800a25e:	6193      	str	r3, [r2, #24]
 800a260:	4620      	mov	r0, r4
 800a262:	bd10      	pop	{r4, pc}
 800a264:	6088      	str	r0, [r1, #8]
 800a266:	e7fb      	b.n	800a260 <__gnu_end_cleanup+0x2a>

0800a268 <_ZL12read_uleb128PKhPm>:
 800a268:	b570      	push	{r4, r5, r6, lr}
 800a26a:	2300      	movs	r3, #0
 800a26c:	eba0 06c0 	sub.w	r6, r0, r0, lsl #3
 800a270:	ebc0 02c0 	rsb	r2, r0, r0, lsl #3
 800a274:	f810 5b01 	ldrb.w	r5, [r0], #1
 800a278:	1994      	adds	r4, r2, r6
 800a27a:	f005 027f 	and.w	r2, r5, #127	; 0x7f
 800a27e:	40a2      	lsls	r2, r4
 800a280:	4313      	orrs	r3, r2
 800a282:	062a      	lsls	r2, r5, #24
 800a284:	d4f4      	bmi.n	800a270 <_ZL12read_uleb128PKhPm+0x8>
 800a286:	600b      	str	r3, [r1, #0]
 800a288:	bd70      	pop	{r4, r5, r6, pc}

0800a28a <_ZL12read_sleb128PKhPl>:
 800a28a:	b530      	push	{r4, r5, lr}
 800a28c:	2300      	movs	r3, #0
 800a28e:	461a      	mov	r2, r3
 800a290:	f810 4b01 	ldrb.w	r4, [r0], #1
 800a294:	f004 057f 	and.w	r5, r4, #127	; 0x7f
 800a298:	4095      	lsls	r5, r2
 800a29a:	432b      	orrs	r3, r5
 800a29c:	0625      	lsls	r5, r4, #24
 800a29e:	f102 0207 	add.w	r2, r2, #7
 800a2a2:	d4f5      	bmi.n	800a290 <_ZL12read_sleb128PKhPl+0x6>
 800a2a4:	2a1f      	cmp	r2, #31
 800a2a6:	d806      	bhi.n	800a2b6 <_ZL12read_sleb128PKhPl+0x2c>
 800a2a8:	0664      	lsls	r4, r4, #25
 800a2aa:	bf42      	ittt	mi
 800a2ac:	f04f 34ff 	movmi.w	r4, #4294967295	; 0xffffffff
 800a2b0:	fa04 f202 	lslmi.w	r2, r4, r2
 800a2b4:	4313      	orrmi	r3, r2
 800a2b6:	600b      	str	r3, [r1, #0]
 800a2b8:	bd30      	pop	{r4, r5, pc}

0800a2ba <_ZL28read_encoded_value_with_basehjPKhPj>:
 800a2ba:	2850      	cmp	r0, #80	; 0x50
 800a2bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a2be:	4605      	mov	r5, r0
 800a2c0:	460e      	mov	r6, r1
 800a2c2:	4614      	mov	r4, r2
 800a2c4:	461f      	mov	r7, r3
 800a2c6:	d107      	bne.n	800a2d8 <_ZL28read_encoded_value_with_basehjPKhPj+0x1e>
 800a2c8:	1cd0      	adds	r0, r2, #3
 800a2ca:	f020 0003 	bic.w	r0, r0, #3
 800a2ce:	f850 3b04 	ldr.w	r3, [r0], #4
 800a2d2:	603b      	str	r3, [r7, #0]
 800a2d4:	b003      	add	sp, #12
 800a2d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a2d8:	f000 030f 	and.w	r3, r0, #15
 800a2dc:	2b0c      	cmp	r3, #12
 800a2de:	d82e      	bhi.n	800a33e <_ZL28read_encoded_value_with_basehjPKhPj+0x84>
 800a2e0:	e8df f003 	tbb	[pc, r3]
 800a2e4:	251d0725 	.word	0x251d0725
 800a2e8:	2d2d2d29 	.word	0x2d2d2d29
 800a2ec:	2521182d 	.word	0x2521182d
 800a2f0:	29          	.byte	0x29
 800a2f1:	00          	.byte	0x00
 800a2f2:	a901      	add	r1, sp, #4
 800a2f4:	4620      	mov	r0, r4
 800a2f6:	f7ff ffb7 	bl	800a268 <_ZL12read_uleb128PKhPm>
 800a2fa:	9b01      	ldr	r3, [sp, #4]
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d0e8      	beq.n	800a2d2 <_ZL28read_encoded_value_with_basehjPKhPj+0x18>
 800a300:	f005 0270 	and.w	r2, r5, #112	; 0x70
 800a304:	2a10      	cmp	r2, #16
 800a306:	bf08      	it	eq
 800a308:	4626      	moveq	r6, r4
 800a30a:	4433      	add	r3, r6
 800a30c:	062a      	lsls	r2, r5, #24
 800a30e:	bf48      	it	mi
 800a310:	681b      	ldrmi	r3, [r3, #0]
 800a312:	e7de      	b.n	800a2d2 <_ZL28read_encoded_value_with_basehjPKhPj+0x18>
 800a314:	a901      	add	r1, sp, #4
 800a316:	4620      	mov	r0, r4
 800a318:	f7ff ffb7 	bl	800a28a <_ZL12read_sleb128PKhPl>
 800a31c:	e7ed      	b.n	800a2fa <_ZL28read_encoded_value_with_basehjPKhPj+0x40>
 800a31e:	4620      	mov	r0, r4
 800a320:	f830 3b02 	ldrh.w	r3, [r0], #2
 800a324:	e7ea      	b.n	800a2fc <_ZL28read_encoded_value_with_basehjPKhPj+0x42>
 800a326:	4620      	mov	r0, r4
 800a328:	f930 3b02 	ldrsh.w	r3, [r0], #2
 800a32c:	e7e6      	b.n	800a2fc <_ZL28read_encoded_value_with_basehjPKhPj+0x42>
 800a32e:	4620      	mov	r0, r4
 800a330:	f850 3b04 	ldr.w	r3, [r0], #4
 800a334:	e7e2      	b.n	800a2fc <_ZL28read_encoded_value_with_basehjPKhPj+0x42>
 800a336:	4620      	mov	r0, r4
 800a338:	f850 3b08 	ldr.w	r3, [r0], #8
 800a33c:	e7de      	b.n	800a2fc <_ZL28read_encoded_value_with_basehjPKhPj+0x42>
 800a33e:	f001 fa31 	bl	800b7a4 <abort>

0800a342 <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
 800a342:	b508      	push	{r3, lr}
 800a344:	4603      	mov	r3, r0
 800a346:	2bff      	cmp	r3, #255	; 0xff
 800a348:	4608      	mov	r0, r1
 800a34a:	d007      	beq.n	800a35c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x1a>
 800a34c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a350:	2b20      	cmp	r3, #32
 800a352:	d00d      	beq.n	800a370 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2e>
 800a354:	d804      	bhi.n	800a360 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x1e>
 800a356:	b10b      	cbz	r3, 800a35c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x1a>
 800a358:	2b10      	cmp	r3, #16
 800a35a:	d107      	bne.n	800a36c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2a>
 800a35c:	2000      	movs	r0, #0
 800a35e:	bd08      	pop	{r3, pc}
 800a360:	2b40      	cmp	r3, #64	; 0x40
 800a362:	d00d      	beq.n	800a380 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x3e>
 800a364:	2b50      	cmp	r3, #80	; 0x50
 800a366:	d0f9      	beq.n	800a35c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x1a>
 800a368:	2b30      	cmp	r3, #48	; 0x30
 800a36a:	d005      	beq.n	800a378 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x36>
 800a36c:	f001 fa1a 	bl	800b7a4 <abort>
 800a370:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800a374:	f7f7 b854 	b.w	8001420 <_Unwind_GetTextRelBase>
 800a378:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800a37c:	f7f7 b854 	b.w	8001428 <_Unwind_GetDataRelBase>
 800a380:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800a384:	f7f7 b83c 	b.w	8001400 <_Unwind_GetRegionStart>

0800a388 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>:
 800a388:	b570      	push	{r4, r5, r6, lr}
 800a38a:	460c      	mov	r4, r1
 800a38c:	4601      	mov	r1, r0
 800a38e:	4620      	mov	r0, r4
 800a390:	4615      	mov	r5, r2
 800a392:	461e      	mov	r6, r3
 800a394:	f7ff ffd5 	bl	800a342 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 800a398:	4633      	mov	r3, r6
 800a39a:	462a      	mov	r2, r5
 800a39c:	4601      	mov	r1, r0
 800a39e:	4620      	mov	r0, r4
 800a3a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a3a4:	f7ff bf89 	b.w	800a2ba <_ZL28read_encoded_value_with_basehjPKhPj>

0800a3a8 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
 800a3a8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a3aa:	460e      	mov	r6, r1
 800a3ac:	4614      	mov	r4, r2
 800a3ae:	4605      	mov	r5, r0
 800a3b0:	b328      	cbz	r0, 800a3fe <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x56>
 800a3b2:	f7f7 f825 	bl	8001400 <_Unwind_GetRegionStart>
 800a3b6:	6020      	str	r0, [r4, #0]
 800a3b8:	7831      	ldrb	r1, [r6, #0]
 800a3ba:	29ff      	cmp	r1, #255	; 0xff
 800a3bc:	f106 0201 	add.w	r2, r6, #1
 800a3c0:	d01e      	beq.n	800a400 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x58>
 800a3c2:	1d23      	adds	r3, r4, #4
 800a3c4:	4628      	mov	r0, r5
 800a3c6:	f7ff ffdf 	bl	800a388 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 800a3ca:	4602      	mov	r2, r0
 800a3cc:	7813      	ldrb	r3, [r2, #0]
 800a3ce:	7523      	strb	r3, [r4, #20]
 800a3d0:	2bff      	cmp	r3, #255	; 0xff
 800a3d2:	f102 0001 	add.w	r0, r2, #1
 800a3d6:	d015      	beq.n	800a404 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x5c>
 800a3d8:	2310      	movs	r3, #16
 800a3da:	7523      	strb	r3, [r4, #20]
 800a3dc:	a901      	add	r1, sp, #4
 800a3de:	f7ff ff43 	bl	800a268 <_ZL12read_uleb128PKhPm>
 800a3e2:	9b01      	ldr	r3, [sp, #4]
 800a3e4:	4403      	add	r3, r0
 800a3e6:	60e3      	str	r3, [r4, #12]
 800a3e8:	7803      	ldrb	r3, [r0, #0]
 800a3ea:	7563      	strb	r3, [r4, #21]
 800a3ec:	a901      	add	r1, sp, #4
 800a3ee:	3001      	adds	r0, #1
 800a3f0:	f7ff ff3a 	bl	800a268 <_ZL12read_uleb128PKhPm>
 800a3f4:	9b01      	ldr	r3, [sp, #4]
 800a3f6:	4403      	add	r3, r0
 800a3f8:	6123      	str	r3, [r4, #16]
 800a3fa:	b002      	add	sp, #8
 800a3fc:	bd70      	pop	{r4, r5, r6, pc}
 800a3fe:	e7da      	b.n	800a3b6 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0xe>
 800a400:	6060      	str	r0, [r4, #4]
 800a402:	e7e3      	b.n	800a3cc <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x24>
 800a404:	2300      	movs	r3, #0
 800a406:	e7ee      	b.n	800a3e6 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x3e>

0800a408 <_Unwind_GetGR>:
 800a408:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a40a:	ab03      	add	r3, sp, #12
 800a40c:	9300      	str	r3, [sp, #0]
 800a40e:	2300      	movs	r3, #0
 800a410:	460a      	mov	r2, r1
 800a412:	4619      	mov	r1, r3
 800a414:	f7f6 fa5e 	bl	80008d4 <_Unwind_VRS_Get>
 800a418:	9803      	ldr	r0, [sp, #12]
 800a41a:	b005      	add	sp, #20
 800a41c:	f85d fb04 	ldr.w	pc, [sp], #4

0800a420 <__gxx_personality_v0>:
 800a420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a424:	b091      	sub	sp, #68	; 0x44
 800a426:	2300      	movs	r3, #0
 800a428:	9304      	str	r3, [sp, #16]
 800a42a:	f000 0303 	and.w	r3, r0, #3
 800a42e:	2b01      	cmp	r3, #1
 800a430:	4607      	mov	r7, r0
 800a432:	460c      	mov	r4, r1
 800a434:	4616      	mov	r6, r2
 800a436:	d011      	beq.n	800a45c <__gxx_personality_v0+0x3c>
 800a438:	d303      	bcc.n	800a442 <__gxx_personality_v0+0x22>
 800a43a:	2b02      	cmp	r3, #2
 800a43c:	d003      	beq.n	800a446 <__gxx_personality_v0+0x26>
 800a43e:	f001 f9b1 	bl	800b7a4 <abort>
 800a442:	0702      	lsls	r2, r0, #28
 800a444:	d51a      	bpl.n	800a47c <__gxx_personality_v0+0x5c>
 800a446:	4631      	mov	r1, r6
 800a448:	4620      	mov	r0, r4
 800a44a:	f7f6 ffc5 	bl	80013d8 <__gnu_unwind_frame>
 800a44e:	b118      	cbz	r0, 800a458 <__gxx_personality_v0+0x38>
 800a450:	2009      	movs	r0, #9
 800a452:	b011      	add	sp, #68	; 0x44
 800a454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a458:	2008      	movs	r0, #8
 800a45a:	e7fa      	b.n	800a452 <__gxx_personality_v0+0x32>
 800a45c:	f000 0508 	and.w	r5, r0, #8
 800a460:	f005 08ff 	and.w	r8, r5, #255	; 0xff
 800a464:	bb85      	cbnz	r5, 800a4c8 <__gxx_personality_v0+0xa8>
 800a466:	f8d1 9020 	ldr.w	r9, [r1, #32]
 800a46a:	4610      	mov	r0, r2
 800a46c:	210d      	movs	r1, #13
 800a46e:	f7ff ffcb 	bl	800a408 <_Unwind_GetGR>
 800a472:	4581      	cmp	r9, r0
 800a474:	f040 8140 	bne.w	800a6f8 <__gxx_personality_v0+0x2d8>
 800a478:	2506      	movs	r5, #6
 800a47a:	e000      	b.n	800a47e <__gxx_personality_v0+0x5e>
 800a47c:	2501      	movs	r5, #1
 800a47e:	ab10      	add	r3, sp, #64	; 0x40
 800a480:	f007 0708 	and.w	r7, r7, #8
 800a484:	f843 4d2c 	str.w	r4, [r3, #-44]!
 800a488:	9300      	str	r3, [sp, #0]
 800a48a:	2300      	movs	r3, #0
 800a48c:	433d      	orrs	r5, r7
 800a48e:	220c      	movs	r2, #12
 800a490:	4619      	mov	r1, r3
 800a492:	4630      	mov	r0, r6
 800a494:	f7f6 fa44 	bl	8000920 <_Unwind_VRS_Set>
 800a498:	2d06      	cmp	r5, #6
 800a49a:	f040 8139 	bne.w	800a710 <__gxx_personality_v0+0x2f0>
 800a49e:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
 800a4a2:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 800a4a4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800a4a6:	f1b8 0f00 	cmp.w	r8, #0
 800a4aa:	bf0c      	ite	eq
 800a4ac:	f04f 0a01 	moveq.w	sl, #1
 800a4b0:	f04f 0a03 	movne.w	sl, #3
 800a4b4:	f015 0508 	ands.w	r5, r5, #8
 800a4b8:	f000 80ce 	beq.w	800a658 <__gxx_personality_v0+0x238>
 800a4bc:	f1ba 0f01 	cmp.w	sl, #1
 800a4c0:	f040 80c6 	bne.w	800a650 <__gxx_personality_v0+0x230>
 800a4c4:	f7ff fdf0 	bl	800a0a8 <_ZSt9terminatev>
 800a4c8:	2502      	movs	r5, #2
 800a4ca:	e7d8      	b.n	800a47e <__gxx_personality_v0+0x5e>
 800a4cc:	9a07      	ldr	r2, [sp, #28]
 800a4ce:	4413      	add	r3, r2
 800a4d0:	429f      	cmp	r7, r3
 800a4d2:	f080 8137 	bcs.w	800a744 <__gxx_personality_v0+0x324>
 800a4d6:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a4da:	f1b8 0f00 	cmp.w	r8, #0
 800a4de:	d001      	beq.n	800a4e4 <__gxx_personality_v0+0xc4>
 800a4e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a4e2:	4498      	add	r8, r3
 800a4e4:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a4e6:	b117      	cbz	r7, 800a4ee <__gxx_personality_v0+0xce>
 800a4e8:	1e78      	subs	r0, r7, #1
 800a4ea:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800a4ec:	4407      	add	r7, r0
 800a4ee:	f1b8 0f00 	cmp.w	r8, #0
 800a4f2:	d0a8      	beq.n	800a446 <__gxx_personality_v0+0x26>
 800a4f4:	2f00      	cmp	r7, #0
 800a4f6:	f000 80a1 	beq.w	800a63c <__gxx_personality_v0+0x21c>
 800a4fa:	f015 0308 	ands.w	r3, r5, #8
 800a4fe:	9302      	str	r3, [sp, #8]
 800a500:	d036      	beq.n	800a570 <__gxx_personality_v0+0x150>
 800a502:	2347      	movs	r3, #71	; 0x47
 800a504:	7023      	strb	r3, [r4, #0]
 800a506:	234e      	movs	r3, #78	; 0x4e
 800a508:	7063      	strb	r3, [r4, #1]
 800a50a:	2355      	movs	r3, #85	; 0x55
 800a50c:	70a3      	strb	r3, [r4, #2]
 800a50e:	2343      	movs	r3, #67	; 0x43
 800a510:	70e3      	strb	r3, [r4, #3]
 800a512:	2346      	movs	r3, #70	; 0x46
 800a514:	7123      	strb	r3, [r4, #4]
 800a516:	234f      	movs	r3, #79	; 0x4f
 800a518:	7163      	strb	r3, [r4, #5]
 800a51a:	2352      	movs	r3, #82	; 0x52
 800a51c:	71a3      	strb	r3, [r4, #6]
 800a51e:	2300      	movs	r3, #0
 800a520:	71e3      	strb	r3, [r4, #7]
 800a522:	f04f 0a00 	mov.w	sl, #0
 800a526:	f06f 0b03 	mvn.w	fp, #3
 800a52a:	a907      	add	r1, sp, #28
 800a52c:	4638      	mov	r0, r7
 800a52e:	f7ff feac 	bl	800a28a <_ZL12read_sleb128PKhPl>
 800a532:	a908      	add	r1, sp, #32
 800a534:	9003      	str	r0, [sp, #12]
 800a536:	f7ff fea8 	bl	800a28a <_ZL12read_sleb128PKhPl>
 800a53a:	9a07      	ldr	r2, [sp, #28]
 800a53c:	2a00      	cmp	r2, #0
 800a53e:	d076      	beq.n	800a62e <__gxx_personality_v0+0x20e>
 800a540:	dd3d      	ble.n	800a5be <__gxx_personality_v0+0x19e>
 800a542:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 800a546:	28ff      	cmp	r0, #255	; 0xff
 800a548:	d035      	beq.n	800a5b6 <__gxx_personality_v0+0x196>
 800a54a:	f000 0307 	and.w	r3, r0, #7
 800a54e:	2b04      	cmp	r3, #4
 800a550:	f63f af75 	bhi.w	800a43e <__gxx_personality_v0+0x1e>
 800a554:	a101      	add	r1, pc, #4	; (adr r1, 800a55c <__gxx_personality_v0+0x13c>)
 800a556:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a55a:	bf00      	nop
 800a55c:	0800a5bb 	.word	0x0800a5bb
 800a560:	0800a43f 	.word	0x0800a43f
 800a564:	0800a583 	.word	0x0800a583
 800a568:	0800a5bb 	.word	0x0800a5bb
 800a56c:	0800a5b3 	.word	0x0800a5b3
 800a570:	79e3      	ldrb	r3, [r4, #7]
 800a572:	2b01      	cmp	r3, #1
 800a574:	bf0c      	ite	eq
 800a576:	f854 3c20 	ldreq.w	r3, [r4, #-32]
 800a57a:	f104 0358 	addne.w	r3, r4, #88	; 0x58
 800a57e:	9304      	str	r3, [sp, #16]
 800a580:	e7cf      	b.n	800a522 <__gxx_personality_v0+0x102>
 800a582:	2702      	movs	r7, #2
 800a584:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a586:	ab09      	add	r3, sp, #36	; 0x24
 800a588:	fb07 1212 	mls	r2, r7, r2, r1
 800a58c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a58e:	f7ff fe94 	bl	800a2ba <_ZL28read_encoded_value_with_basehjPKhPj>
 800a592:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a594:	b369      	cbz	r1, 800a5f2 <__gxx_personality_v0+0x1d2>
 800a596:	b12c      	cbz	r4, 800a5a4 <__gxx_personality_v0+0x184>
 800a598:	ab04      	add	r3, sp, #16
 800a59a:	2200      	movs	r2, #0
 800a59c:	4620      	mov	r0, r4
 800a59e:	f7ff fdcf 	bl	800a140 <__cxa_type_match>
 800a5a2:	bb30      	cbnz	r0, 800a5f2 <__gxx_personality_v0+0x1d2>
 800a5a4:	9f08      	ldr	r7, [sp, #32]
 800a5a6:	2f00      	cmp	r7, #0
 800a5a8:	d044      	beq.n	800a634 <__gxx_personality_v0+0x214>
 800a5aa:	9b03      	ldr	r3, [sp, #12]
 800a5ac:	443b      	add	r3, r7
 800a5ae:	461f      	mov	r7, r3
 800a5b0:	e7bb      	b.n	800a52a <__gxx_personality_v0+0x10a>
 800a5b2:	2708      	movs	r7, #8
 800a5b4:	e7e6      	b.n	800a584 <__gxx_personality_v0+0x164>
 800a5b6:	2700      	movs	r7, #0
 800a5b8:	e7e4      	b.n	800a584 <__gxx_personality_v0+0x164>
 800a5ba:	2704      	movs	r7, #4
 800a5bc:	e7e2      	b.n	800a584 <__gxx_personality_v0+0x164>
 800a5be:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800a5c0:	3201      	adds	r2, #1
 800a5c2:	b36c      	cbz	r4, 800a620 <__gxx_personality_v0+0x200>
 800a5c4:	9b02      	ldr	r3, [sp, #8]
 800a5c6:	bb5b      	cbnz	r3, 800a620 <__gxx_personality_v0+0x200>
 800a5c8:	9b04      	ldr	r3, [sp, #16]
 800a5ca:	9306      	str	r3, [sp, #24]
 800a5cc:	fb0b 7202 	mla	r2, fp, r2, r7
 800a5d0:	1f17      	subs	r7, r2, #4
 800a5d2:	f857 1f04 	ldr.w	r1, [r7, #4]!
 800a5d6:	b141      	cbz	r1, 800a5ea <__gxx_personality_v0+0x1ca>
 800a5d8:	ab06      	add	r3, sp, #24
 800a5da:	2200      	movs	r2, #0
 800a5dc:	4439      	add	r1, r7
 800a5de:	4620      	mov	r0, r4
 800a5e0:	f7ff fdae 	bl	800a140 <__cxa_type_match>
 800a5e4:	2800      	cmp	r0, #0
 800a5e6:	d0f4      	beq.n	800a5d2 <__gxx_personality_v0+0x1b2>
 800a5e8:	2101      	movs	r1, #1
 800a5ea:	f081 0101 	eor.w	r1, r1, #1
 800a5ee:	2900      	cmp	r1, #0
 800a5f0:	d0d8      	beq.n	800a5a4 <__gxx_personality_v0+0x184>
 800a5f2:	9f07      	ldr	r7, [sp, #28]
 800a5f4:	f04f 0a03 	mov.w	sl, #3
 800a5f8:	07eb      	lsls	r3, r5, #31
 800a5fa:	d527      	bpl.n	800a64c <__gxx_personality_v0+0x22c>
 800a5fc:	f1ba 0f02 	cmp.w	sl, #2
 800a600:	f43f af21 	beq.w	800a446 <__gxx_personality_v0+0x26>
 800a604:	210d      	movs	r1, #13
 800a606:	4630      	mov	r0, r6
 800a608:	9d04      	ldr	r5, [sp, #16]
 800a60a:	f7ff fefd 	bl	800a408 <_Unwind_GetGR>
 800a60e:	6265      	str	r5, [r4, #36]	; 0x24
 800a610:	6220      	str	r0, [r4, #32]
 800a612:	62a7      	str	r7, [r4, #40]	; 0x28
 800a614:	f8c4 902c 	str.w	r9, [r4, #44]	; 0x2c
 800a618:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
 800a61c:	2006      	movs	r0, #6
 800a61e:	e718      	b.n	800a452 <__gxx_personality_v0+0x32>
 800a620:	fb0b f202 	mul.w	r2, fp, r2
 800a624:	58b9      	ldr	r1, [r7, r2]
 800a626:	fab1 f181 	clz	r1, r1
 800a62a:	0949      	lsrs	r1, r1, #5
 800a62c:	e7df      	b.n	800a5ee <__gxx_personality_v0+0x1ce>
 800a62e:	f04f 0a01 	mov.w	sl, #1
 800a632:	e7b7      	b.n	800a5a4 <__gxx_personality_v0+0x184>
 800a634:	f1ba 0f00 	cmp.w	sl, #0
 800a638:	f43f af05 	beq.w	800a446 <__gxx_personality_v0+0x26>
 800a63c:	f04f 0a02 	mov.w	sl, #2
 800a640:	e7da      	b.n	800a5f8 <__gxx_personality_v0+0x1d8>
 800a642:	2700      	movs	r7, #0
 800a644:	46b8      	mov	r8, r7
 800a646:	f04f 0a01 	mov.w	sl, #1
 800a64a:	e7d5      	b.n	800a5f8 <__gxx_personality_v0+0x1d8>
 800a64c:	4649      	mov	r1, r9
 800a64e:	e731      	b.n	800a4b4 <__gxx_personality_v0+0x94>
 800a650:	2f00      	cmp	r7, #0
 800a652:	da23      	bge.n	800a69c <__gxx_personality_v0+0x27c>
 800a654:	f7ff fd3a 	bl	800a0cc <_ZSt10unexpectedv>
 800a658:	f1ba 0f01 	cmp.w	sl, #1
 800a65c:	d102      	bne.n	800a664 <__gxx_personality_v0+0x244>
 800a65e:	4620      	mov	r0, r4
 800a660:	f000 f947 	bl	800a8f2 <__cxa_call_terminate>
 800a664:	2f00      	cmp	r7, #0
 800a666:	da19      	bge.n	800a69c <__gxx_personality_v0+0x27c>
 800a668:	aa0a      	add	r2, sp, #40	; 0x28
 800a66a:	4630      	mov	r0, r6
 800a66c:	f7ff fe9c 	bl	800a3a8 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 800a670:	4631      	mov	r1, r6
 800a672:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 800a676:	f7ff fe64 	bl	800a342 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 800a67a:	f06f 0303 	mvn.w	r3, #3
 800a67e:	fb07 3203 	mla	r2, r7, r3, r3
 800a682:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a684:	900c      	str	r0, [sp, #48]	; 0x30
 800a686:	4413      	add	r3, r2
 800a688:	f853 2025 	ldr.w	r2, [r3, r5, lsl #2]
 800a68c:	b10a      	cbz	r2, 800a692 <__gxx_personality_v0+0x272>
 800a68e:	3501      	adds	r5, #1
 800a690:	e7fa      	b.n	800a688 <__gxx_personality_v0+0x268>
 800a692:	2204      	movs	r2, #4
 800a694:	62a5      	str	r5, [r4, #40]	; 0x28
 800a696:	62e0      	str	r0, [r4, #44]	; 0x2c
 800a698:	6322      	str	r2, [r4, #48]	; 0x30
 800a69a:	6363      	str	r3, [r4, #52]	; 0x34
 800a69c:	ab10      	add	r3, sp, #64	; 0x40
 800a69e:	4630      	mov	r0, r6
 800a6a0:	f843 4d1c 	str.w	r4, [r3, #-28]!
 800a6a4:	9300      	str	r3, [sp, #0]
 800a6a6:	2300      	movs	r3, #0
 800a6a8:	461a      	mov	r2, r3
 800a6aa:	4619      	mov	r1, r3
 800a6ac:	f7f6 f938 	bl	8000920 <_Unwind_VRS_Set>
 800a6b0:	ab10      	add	r3, sp, #64	; 0x40
 800a6b2:	2201      	movs	r2, #1
 800a6b4:	f843 7d20 	str.w	r7, [r3, #-32]!
 800a6b8:	9300      	str	r3, [sp, #0]
 800a6ba:	2300      	movs	r3, #0
 800a6bc:	4619      	mov	r1, r3
 800a6be:	4630      	mov	r0, r6
 800a6c0:	f7f6 f92e 	bl	8000920 <_Unwind_VRS_Set>
 800a6c4:	210f      	movs	r1, #15
 800a6c6:	4630      	mov	r0, r6
 800a6c8:	f7ff fe9e 	bl	800a408 <_Unwind_GetGR>
 800a6cc:	ab10      	add	r3, sp, #64	; 0x40
 800a6ce:	f000 0001 	and.w	r0, r0, #1
 800a6d2:	ea40 0008 	orr.w	r0, r0, r8
 800a6d6:	f843 0d24 	str.w	r0, [r3, #-36]!
 800a6da:	9300      	str	r3, [sp, #0]
 800a6dc:	2300      	movs	r3, #0
 800a6de:	220f      	movs	r2, #15
 800a6e0:	4619      	mov	r1, r3
 800a6e2:	4630      	mov	r0, r6
 800a6e4:	f7f6 f91c 	bl	8000920 <_Unwind_VRS_Set>
 800a6e8:	f1ba 0f02 	cmp.w	sl, #2
 800a6ec:	d102      	bne.n	800a6f4 <__gxx_personality_v0+0x2d4>
 800a6ee:	4620      	mov	r0, r4
 800a6f0:	f7ff fd84 	bl	800a1fc <__cxa_begin_cleanup>
 800a6f4:	2007      	movs	r0, #7
 800a6f6:	e6ac      	b.n	800a452 <__gxx_personality_v0+0x32>
 800a6f8:	aa10      	add	r2, sp, #64	; 0x40
 800a6fa:	4643      	mov	r3, r8
 800a6fc:	f842 4d2c 	str.w	r4, [r2, #-44]!
 800a700:	4641      	mov	r1, r8
 800a702:	9200      	str	r2, [sp, #0]
 800a704:	4630      	mov	r0, r6
 800a706:	220c      	movs	r2, #12
 800a708:	f045 0502 	orr.w	r5, r5, #2
 800a70c:	f7f6 f908 	bl	8000920 <_Unwind_VRS_Set>
 800a710:	4630      	mov	r0, r6
 800a712:	f7f6 fe7b 	bl	800140c <_Unwind_GetLanguageSpecificData>
 800a716:	4681      	mov	r9, r0
 800a718:	2800      	cmp	r0, #0
 800a71a:	f43f ae94 	beq.w	800a446 <__gxx_personality_v0+0x26>
 800a71e:	aa0a      	add	r2, sp, #40	; 0x28
 800a720:	4601      	mov	r1, r0
 800a722:	4630      	mov	r0, r6
 800a724:	f7ff fe40 	bl	800a3a8 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 800a728:	4631      	mov	r1, r6
 800a72a:	4680      	mov	r8, r0
 800a72c:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 800a730:	f7ff fe07 	bl	800a342 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 800a734:	210f      	movs	r1, #15
 800a736:	900c      	str	r0, [sp, #48]	; 0x30
 800a738:	4630      	mov	r0, r6
 800a73a:	f7ff fe65 	bl	800a408 <_Unwind_GetGR>
 800a73e:	f020 0001 	bic.w	r0, r0, #1
 800a742:	1e47      	subs	r7, r0, #1
 800a744:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a746:	4598      	cmp	r8, r3
 800a748:	f4bf af7b 	bcs.w	800a642 <__gxx_personality_v0+0x222>
 800a74c:	4642      	mov	r2, r8
 800a74e:	ab06      	add	r3, sp, #24
 800a750:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 800a754:	2000      	movs	r0, #0
 800a756:	f7ff fe17 	bl	800a388 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 800a75a:	ab07      	add	r3, sp, #28
 800a75c:	4602      	mov	r2, r0
 800a75e:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 800a762:	2000      	movs	r0, #0
 800a764:	f7ff fe10 	bl	800a388 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 800a768:	ab08      	add	r3, sp, #32
 800a76a:	4602      	mov	r2, r0
 800a76c:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 800a770:	2000      	movs	r0, #0
 800a772:	f7ff fe09 	bl	800a388 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 800a776:	a909      	add	r1, sp, #36	; 0x24
 800a778:	f7ff fd76 	bl	800a268 <_ZL12read_uleb128PKhPm>
 800a77c:	9a06      	ldr	r2, [sp, #24]
 800a77e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a780:	4413      	add	r3, r2
 800a782:	429f      	cmp	r7, r3
 800a784:	4680      	mov	r8, r0
 800a786:	f4bf aea1 	bcs.w	800a4cc <__gxx_personality_v0+0xac>
 800a78a:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
 800a78e:	e7d9      	b.n	800a744 <__gxx_personality_v0+0x324>

0800a790 <_ZdlPvj>:
 800a790:	f7ff bc73 	b.w	800a07a <_ZdlPv>

0800a794 <_ZSt15get_new_handlerv>:
 800a794:	4b02      	ldr	r3, [pc, #8]	; (800a7a0 <_ZSt15get_new_handlerv+0xc>)
 800a796:	6818      	ldr	r0, [r3, #0]
 800a798:	f3bf 8f5b 	dmb	ish
 800a79c:	4770      	bx	lr
 800a79e:	bf00      	nop
 800a7a0:	20003d10 	.word	0x20003d10

0800a7a4 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 800a7a4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800a7a6:	2310      	movs	r3, #16
 800a7a8:	9302      	str	r3, [sp, #8]
 800a7aa:	6803      	ldr	r3, [r0, #0]
 800a7ac:	2400      	movs	r4, #0
 800a7ae:	4615      	mov	r5, r2
 800a7b0:	699e      	ldr	r6, [r3, #24]
 800a7b2:	9400      	str	r4, [sp, #0]
 800a7b4:	466b      	mov	r3, sp
 800a7b6:	f88d 4004 	strb.w	r4, [sp, #4]
 800a7ba:	9403      	str	r4, [sp, #12]
 800a7bc:	6812      	ldr	r2, [r2, #0]
 800a7be:	47b0      	blx	r6
 800a7c0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800a7c4:	f003 0306 	and.w	r3, r3, #6
 800a7c8:	2b06      	cmp	r3, #6
 800a7ca:	bf03      	ittte	eq
 800a7cc:	9b00      	ldreq	r3, [sp, #0]
 800a7ce:	602b      	streq	r3, [r5, #0]
 800a7d0:	2001      	moveq	r0, #1
 800a7d2:	4620      	movne	r0, r4
 800a7d4:	b004      	add	sp, #16
 800a7d6:	bd70      	pop	{r4, r5, r6, pc}

0800a7d8 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 800a7d8:	9800      	ldr	r0, [sp, #0]
 800a7da:	4290      	cmp	r0, r2
 800a7dc:	bf0c      	ite	eq
 800a7de:	2006      	moveq	r0, #6
 800a7e0:	2001      	movne	r0, #1
 800a7e2:	4770      	bx	lr

0800a7e4 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 800a7e4:	b510      	push	{r4, lr}
 800a7e6:	4b03      	ldr	r3, [pc, #12]	; (800a7f4 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 800a7e8:	6003      	str	r3, [r0, #0]
 800a7ea:	4604      	mov	r4, r0
 800a7ec:	f000 f84b 	bl	800a886 <_ZNSt9type_infoD1Ev>
 800a7f0:	4620      	mov	r0, r4
 800a7f2:	bd10      	pop	{r4, pc}
 800a7f4:	0800cc04 	.word	0x0800cc04

0800a7f8 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 800a7f8:	b510      	push	{r4, lr}
 800a7fa:	4604      	mov	r4, r0
 800a7fc:	f7ff fff2 	bl	800a7e4 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 800a800:	4620      	mov	r0, r4
 800a802:	2108      	movs	r1, #8
 800a804:	f7ff ffc4 	bl	800a790 <_ZdlPvj>
 800a808:	4620      	mov	r0, r4
 800a80a:	bd10      	pop	{r4, pc}

0800a80c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 800a80c:	b538      	push	{r3, r4, r5, lr}
 800a80e:	4615      	mov	r5, r2
 800a810:	461c      	mov	r4, r3
 800a812:	f000 f83b 	bl	800a88c <_ZNKSt9type_infoeqERKS_>
 800a816:	b120      	cbz	r0, 800a822 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 800a818:	2308      	movs	r3, #8
 800a81a:	60e3      	str	r3, [r4, #12]
 800a81c:	2306      	movs	r3, #6
 800a81e:	6025      	str	r5, [r4, #0]
 800a820:	7123      	strb	r3, [r4, #4]
 800a822:	bd38      	pop	{r3, r4, r5, pc}

0800a824 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 800a824:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a828:	4605      	mov	r5, r0
 800a82a:	460c      	mov	r4, r1
 800a82c:	4616      	mov	r6, r2
 800a82e:	461f      	mov	r7, r3
 800a830:	f000 f82c 	bl	800a88c <_ZNKSt9type_infoeqERKS_>
 800a834:	b948      	cbnz	r0, 800a84a <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 800a836:	2f03      	cmp	r7, #3
 800a838:	d807      	bhi.n	800a84a <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 800a83a:	6823      	ldr	r3, [r4, #0]
 800a83c:	4632      	mov	r2, r6
 800a83e:	4629      	mov	r1, r5
 800a840:	4620      	mov	r0, r4
 800a842:	695b      	ldr	r3, [r3, #20]
 800a844:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a848:	4718      	bx	r3
 800a84a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a84e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 800a84e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a852:	9e06      	ldr	r6, [sp, #24]
 800a854:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800a856:	4698      	mov	r8, r3
 800a858:	9b08      	ldr	r3, [sp, #32]
 800a85a:	429e      	cmp	r6, r3
 800a85c:	4607      	mov	r7, r0
 800a85e:	4615      	mov	r5, r2
 800a860:	d103      	bne.n	800a86a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x1c>
 800a862:	9907      	ldr	r1, [sp, #28]
 800a864:	f000 f812 	bl	800a88c <_ZNKSt9type_infoeqERKS_>
 800a868:	b958      	cbnz	r0, 800a882 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x34>
 800a86a:	4641      	mov	r1, r8
 800a86c:	4638      	mov	r0, r7
 800a86e:	f000 f80d 	bl	800a88c <_ZNKSt9type_infoeqERKS_>
 800a872:	b118      	cbz	r0, 800a87c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x2e>
 800a874:	2301      	movs	r3, #1
 800a876:	6026      	str	r6, [r4, #0]
 800a878:	7125      	strb	r5, [r4, #4]
 800a87a:	71a3      	strb	r3, [r4, #6]
 800a87c:	2000      	movs	r0, #0
 800a87e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a882:	7165      	strb	r5, [r4, #5]
 800a884:	e7fa      	b.n	800a87c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x2e>

0800a886 <_ZNSt9type_infoD1Ev>:
 800a886:	4770      	bx	lr

0800a888 <_ZNKSt9type_info14__is_pointer_pEv>:
 800a888:	2000      	movs	r0, #0
 800a88a:	4770      	bx	lr

0800a88c <_ZNKSt9type_infoeqERKS_>:
 800a88c:	4281      	cmp	r1, r0
 800a88e:	b508      	push	{r3, lr}
 800a890:	d00e      	beq.n	800a8b0 <_ZNKSt9type_infoeqERKS_+0x24>
 800a892:	6840      	ldr	r0, [r0, #4]
 800a894:	7803      	ldrb	r3, [r0, #0]
 800a896:	2b2a      	cmp	r3, #42	; 0x2a
 800a898:	d00c      	beq.n	800a8b4 <_ZNKSt9type_infoeqERKS_+0x28>
 800a89a:	6849      	ldr	r1, [r1, #4]
 800a89c:	780b      	ldrb	r3, [r1, #0]
 800a89e:	2b2a      	cmp	r3, #42	; 0x2a
 800a8a0:	bf08      	it	eq
 800a8a2:	3101      	addeq	r1, #1
 800a8a4:	f7f5 fcb0 	bl	8000208 <strcmp>
 800a8a8:	fab0 f080 	clz	r0, r0
 800a8ac:	0940      	lsrs	r0, r0, #5
 800a8ae:	bd08      	pop	{r3, pc}
 800a8b0:	2001      	movs	r0, #1
 800a8b2:	bd08      	pop	{r3, pc}
 800a8b4:	2000      	movs	r0, #0
 800a8b6:	bd08      	pop	{r3, pc}

0800a8b8 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 800a8b8:	7803      	ldrb	r3, [r0, #0]
 800a8ba:	2b47      	cmp	r3, #71	; 0x47
 800a8bc:	d117      	bne.n	800a8ee <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800a8be:	7843      	ldrb	r3, [r0, #1]
 800a8c0:	2b4e      	cmp	r3, #78	; 0x4e
 800a8c2:	d114      	bne.n	800a8ee <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800a8c4:	7883      	ldrb	r3, [r0, #2]
 800a8c6:	2b55      	cmp	r3, #85	; 0x55
 800a8c8:	d111      	bne.n	800a8ee <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800a8ca:	78c3      	ldrb	r3, [r0, #3]
 800a8cc:	2b43      	cmp	r3, #67	; 0x43
 800a8ce:	d10e      	bne.n	800a8ee <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800a8d0:	7903      	ldrb	r3, [r0, #4]
 800a8d2:	2b43      	cmp	r3, #67	; 0x43
 800a8d4:	d10b      	bne.n	800a8ee <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800a8d6:	7943      	ldrb	r3, [r0, #5]
 800a8d8:	2b2b      	cmp	r3, #43	; 0x2b
 800a8da:	d108      	bne.n	800a8ee <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800a8dc:	7983      	ldrb	r3, [r0, #6]
 800a8de:	2b2b      	cmp	r3, #43	; 0x2b
 800a8e0:	d105      	bne.n	800a8ee <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800a8e2:	79c0      	ldrb	r0, [r0, #7]
 800a8e4:	2801      	cmp	r0, #1
 800a8e6:	bf8c      	ite	hi
 800a8e8:	2000      	movhi	r0, #0
 800a8ea:	2001      	movls	r0, #1
 800a8ec:	4770      	bx	lr
 800a8ee:	2000      	movs	r0, #0
 800a8f0:	4770      	bx	lr

0800a8f2 <__cxa_call_terminate>:
 800a8f2:	b510      	push	{r4, lr}
 800a8f4:	4604      	mov	r4, r0
 800a8f6:	b148      	cbz	r0, 800a90c <__cxa_call_terminate+0x1a>
 800a8f8:	f000 f83b 	bl	800a972 <__cxa_begin_catch>
 800a8fc:	4620      	mov	r0, r4
 800a8fe:	f7ff ffdb 	bl	800a8b8 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 800a902:	b118      	cbz	r0, 800a90c <__cxa_call_terminate+0x1a>
 800a904:	f854 0c14 	ldr.w	r0, [r4, #-20]
 800a908:	f7ff fbc1 	bl	800a08e <_ZN10__cxxabiv111__terminateEPFvvE>
 800a90c:	f7ff fbcc 	bl	800a0a8 <_ZSt9terminatev>

0800a910 <__cxa_call_unexpected>:
 800a910:	b538      	push	{r3, r4, r5, lr}
 800a912:	4602      	mov	r2, r0
 800a914:	f7ff ffd0 	bl	800a8b8 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 800a918:	b140      	cbz	r0, 800a92c <__cxa_call_unexpected+0x1c>
 800a91a:	f852 4c18 	ldr.w	r4, [r2, #-24]
 800a91e:	2500      	movs	r5, #0
 800a920:	4610      	mov	r0, r2
 800a922:	f000 f826 	bl	800a972 <__cxa_begin_catch>
 800a926:	b125      	cbz	r5, 800a932 <__cxa_call_unexpected+0x22>
 800a928:	f7ff fbd0 	bl	800a0cc <_ZSt10unexpectedv>
 800a92c:	4604      	mov	r4, r0
 800a92e:	2501      	movs	r5, #1
 800a930:	e7f6      	b.n	800a920 <__cxa_call_unexpected+0x10>
 800a932:	4620      	mov	r0, r4
 800a934:	f7ff fbbd 	bl	800a0b2 <_ZN10__cxxabiv112__unexpectedEPFvvE>

0800a938 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 800a938:	7803      	ldrb	r3, [r0, #0]
 800a93a:	2b47      	cmp	r3, #71	; 0x47
 800a93c:	d117      	bne.n	800a96e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800a93e:	7843      	ldrb	r3, [r0, #1]
 800a940:	2b4e      	cmp	r3, #78	; 0x4e
 800a942:	d114      	bne.n	800a96e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800a944:	7883      	ldrb	r3, [r0, #2]
 800a946:	2b55      	cmp	r3, #85	; 0x55
 800a948:	d111      	bne.n	800a96e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800a94a:	78c3      	ldrb	r3, [r0, #3]
 800a94c:	2b43      	cmp	r3, #67	; 0x43
 800a94e:	d10e      	bne.n	800a96e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800a950:	7903      	ldrb	r3, [r0, #4]
 800a952:	2b43      	cmp	r3, #67	; 0x43
 800a954:	d10b      	bne.n	800a96e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800a956:	7943      	ldrb	r3, [r0, #5]
 800a958:	2b2b      	cmp	r3, #43	; 0x2b
 800a95a:	d108      	bne.n	800a96e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800a95c:	7983      	ldrb	r3, [r0, #6]
 800a95e:	2b2b      	cmp	r3, #43	; 0x2b
 800a960:	d105      	bne.n	800a96e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800a962:	79c0      	ldrb	r0, [r0, #7]
 800a964:	2801      	cmp	r0, #1
 800a966:	bf8c      	ite	hi
 800a968:	2000      	movhi	r0, #0
 800a96a:	2001      	movls	r0, #1
 800a96c:	4770      	bx	lr
 800a96e:	2000      	movs	r0, #0
 800a970:	4770      	bx	lr

0800a972 <__cxa_begin_catch>:
 800a972:	b538      	push	{r3, r4, r5, lr}
 800a974:	4605      	mov	r5, r0
 800a976:	f000 f827 	bl	800a9c8 <__cxa_get_globals>
 800a97a:	4601      	mov	r1, r0
 800a97c:	6802      	ldr	r2, [r0, #0]
 800a97e:	4628      	mov	r0, r5
 800a980:	f1a5 0420 	sub.w	r4, r5, #32
 800a984:	f7ff ffd8 	bl	800a938 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 800a988:	b930      	cbnz	r0, 800a998 <__cxa_begin_catch+0x26>
 800a98a:	b10a      	cbz	r2, 800a990 <__cxa_begin_catch+0x1e>
 800a98c:	f7ff fb8c 	bl	800a0a8 <_ZSt9terminatev>
 800a990:	600c      	str	r4, [r1, #0]
 800a992:	4614      	mov	r4, r2
 800a994:	4620      	mov	r0, r4
 800a996:	bd38      	pop	{r3, r4, r5, pc}
 800a998:	f855 3c0c 	ldr.w	r3, [r5, #-12]
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	bfb4      	ite	lt
 800a9a0:	f1c3 0301 	rsblt	r3, r3, #1
 800a9a4:	3301      	addge	r3, #1
 800a9a6:	f845 3c0c 	str.w	r3, [r5, #-12]
 800a9aa:	684b      	ldr	r3, [r1, #4]
 800a9ac:	42a2      	cmp	r2, r4
 800a9ae:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800a9b2:	604b      	str	r3, [r1, #4]
 800a9b4:	4628      	mov	r0, r5
 800a9b6:	bf1c      	itt	ne
 800a9b8:	f845 2c10 	strne.w	r2, [r5, #-16]
 800a9bc:	600c      	strne	r4, [r1, #0]
 800a9be:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 800a9c0:	f7f5 ff80 	bl	80008c4 <_Unwind_Complete>
 800a9c4:	e7e6      	b.n	800a994 <__cxa_begin_catch+0x22>
	...

0800a9c8 <__cxa_get_globals>:
 800a9c8:	4800      	ldr	r0, [pc, #0]	; (800a9cc <__cxa_get_globals+0x4>)
 800a9ca:	4770      	bx	lr
 800a9cc:	20003d14 	.word	0x20003d14

0800a9d0 <cosf>:
 800a9d0:	ee10 3a10 	vmov	r3, s0
 800a9d4:	b507      	push	{r0, r1, r2, lr}
 800a9d6:	4a1c      	ldr	r2, [pc, #112]	; (800aa48 <cosf+0x78>)
 800a9d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a9dc:	4293      	cmp	r3, r2
 800a9de:	dc04      	bgt.n	800a9ea <cosf+0x1a>
 800a9e0:	eddf 0a1a 	vldr	s1, [pc, #104]	; 800aa4c <cosf+0x7c>
 800a9e4:	f000 fa52 	bl	800ae8c <__kernel_cosf>
 800a9e8:	e004      	b.n	800a9f4 <cosf+0x24>
 800a9ea:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a9ee:	db04      	blt.n	800a9fa <cosf+0x2a>
 800a9f0:	ee30 0a40 	vsub.f32	s0, s0, s0
 800a9f4:	b003      	add	sp, #12
 800a9f6:	f85d fb04 	ldr.w	pc, [sp], #4
 800a9fa:	4668      	mov	r0, sp
 800a9fc:	f000 f91a 	bl	800ac34 <__ieee754_rem_pio2f>
 800aa00:	f000 0003 	and.w	r0, r0, #3
 800aa04:	2801      	cmp	r0, #1
 800aa06:	d007      	beq.n	800aa18 <cosf+0x48>
 800aa08:	2802      	cmp	r0, #2
 800aa0a:	d00e      	beq.n	800aa2a <cosf+0x5a>
 800aa0c:	b9a0      	cbnz	r0, 800aa38 <cosf+0x68>
 800aa0e:	eddd 0a01 	vldr	s1, [sp, #4]
 800aa12:	ed9d 0a00 	vldr	s0, [sp]
 800aa16:	e7e5      	b.n	800a9e4 <cosf+0x14>
 800aa18:	eddd 0a01 	vldr	s1, [sp, #4]
 800aa1c:	ed9d 0a00 	vldr	s0, [sp]
 800aa20:	f000 fcf0 	bl	800b404 <__kernel_sinf>
 800aa24:	eeb1 0a40 	vneg.f32	s0, s0
 800aa28:	e7e4      	b.n	800a9f4 <cosf+0x24>
 800aa2a:	eddd 0a01 	vldr	s1, [sp, #4]
 800aa2e:	ed9d 0a00 	vldr	s0, [sp]
 800aa32:	f000 fa2b 	bl	800ae8c <__kernel_cosf>
 800aa36:	e7f5      	b.n	800aa24 <cosf+0x54>
 800aa38:	2001      	movs	r0, #1
 800aa3a:	eddd 0a01 	vldr	s1, [sp, #4]
 800aa3e:	ed9d 0a00 	vldr	s0, [sp]
 800aa42:	f000 fcdf 	bl	800b404 <__kernel_sinf>
 800aa46:	e7d5      	b.n	800a9f4 <cosf+0x24>
 800aa48:	3f490fd8 	.word	0x3f490fd8
 800aa4c:	00000000 	.word	0x00000000

0800aa50 <sinf>:
 800aa50:	ee10 3a10 	vmov	r3, s0
 800aa54:	b507      	push	{r0, r1, r2, lr}
 800aa56:	4a1d      	ldr	r2, [pc, #116]	; (800aacc <sinf+0x7c>)
 800aa58:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800aa5c:	4293      	cmp	r3, r2
 800aa5e:	dc05      	bgt.n	800aa6c <sinf+0x1c>
 800aa60:	eddf 0a1b 	vldr	s1, [pc, #108]	; 800aad0 <sinf+0x80>
 800aa64:	2000      	movs	r0, #0
 800aa66:	f000 fccd 	bl	800b404 <__kernel_sinf>
 800aa6a:	e004      	b.n	800aa76 <sinf+0x26>
 800aa6c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800aa70:	db04      	blt.n	800aa7c <sinf+0x2c>
 800aa72:	ee30 0a40 	vsub.f32	s0, s0, s0
 800aa76:	b003      	add	sp, #12
 800aa78:	f85d fb04 	ldr.w	pc, [sp], #4
 800aa7c:	4668      	mov	r0, sp
 800aa7e:	f000 f8d9 	bl	800ac34 <__ieee754_rem_pio2f>
 800aa82:	f000 0003 	and.w	r0, r0, #3
 800aa86:	2801      	cmp	r0, #1
 800aa88:	d008      	beq.n	800aa9c <sinf+0x4c>
 800aa8a:	2802      	cmp	r0, #2
 800aa8c:	d00d      	beq.n	800aaaa <sinf+0x5a>
 800aa8e:	b9b0      	cbnz	r0, 800aabe <sinf+0x6e>
 800aa90:	2001      	movs	r0, #1
 800aa92:	eddd 0a01 	vldr	s1, [sp, #4]
 800aa96:	ed9d 0a00 	vldr	s0, [sp]
 800aa9a:	e7e4      	b.n	800aa66 <sinf+0x16>
 800aa9c:	eddd 0a01 	vldr	s1, [sp, #4]
 800aaa0:	ed9d 0a00 	vldr	s0, [sp]
 800aaa4:	f000 f9f2 	bl	800ae8c <__kernel_cosf>
 800aaa8:	e7e5      	b.n	800aa76 <sinf+0x26>
 800aaaa:	2001      	movs	r0, #1
 800aaac:	eddd 0a01 	vldr	s1, [sp, #4]
 800aab0:	ed9d 0a00 	vldr	s0, [sp]
 800aab4:	f000 fca6 	bl	800b404 <__kernel_sinf>
 800aab8:	eeb1 0a40 	vneg.f32	s0, s0
 800aabc:	e7db      	b.n	800aa76 <sinf+0x26>
 800aabe:	eddd 0a01 	vldr	s1, [sp, #4]
 800aac2:	ed9d 0a00 	vldr	s0, [sp]
 800aac6:	f000 f9e1 	bl	800ae8c <__kernel_cosf>
 800aaca:	e7f5      	b.n	800aab8 <sinf+0x68>
 800aacc:	3f490fd8 	.word	0x3f490fd8
 800aad0:	00000000 	.word	0x00000000

0800aad4 <atan2f>:
 800aad4:	f000 b800 	b.w	800aad8 <__ieee754_atan2f>

0800aad8 <__ieee754_atan2f>:
 800aad8:	ee10 2a90 	vmov	r2, s1
 800aadc:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800aae0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800aae4:	b510      	push	{r4, lr}
 800aae6:	eef0 7a40 	vmov.f32	s15, s0
 800aaea:	dc06      	bgt.n	800aafa <__ieee754_atan2f+0x22>
 800aaec:	ee10 0a10 	vmov	r0, s0
 800aaf0:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800aaf4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800aaf8:	dd04      	ble.n	800ab04 <__ieee754_atan2f+0x2c>
 800aafa:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800aafe:	eeb0 0a67 	vmov.f32	s0, s15
 800ab02:	bd10      	pop	{r4, pc}
 800ab04:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 800ab08:	d103      	bne.n	800ab12 <__ieee754_atan2f+0x3a>
 800ab0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ab0e:	f000 bcc1 	b.w	800b494 <atanf>
 800ab12:	1794      	asrs	r4, r2, #30
 800ab14:	f004 0402 	and.w	r4, r4, #2
 800ab18:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800ab1c:	b943      	cbnz	r3, 800ab30 <__ieee754_atan2f+0x58>
 800ab1e:	2c02      	cmp	r4, #2
 800ab20:	d033      	beq.n	800ab8a <__ieee754_atan2f+0xb2>
 800ab22:	ed9f 7a39 	vldr	s14, [pc, #228]	; 800ac08 <__ieee754_atan2f+0x130>
 800ab26:	2c03      	cmp	r4, #3
 800ab28:	bf08      	it	eq
 800ab2a:	eef0 7a47 	vmoveq.f32	s15, s14
 800ab2e:	e7e6      	b.n	800aafe <__ieee754_atan2f+0x26>
 800ab30:	b941      	cbnz	r1, 800ab44 <__ieee754_atan2f+0x6c>
 800ab32:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800ac0c <__ieee754_atan2f+0x134>
 800ab36:	eddf 7a36 	vldr	s15, [pc, #216]	; 800ac10 <__ieee754_atan2f+0x138>
 800ab3a:	2800      	cmp	r0, #0
 800ab3c:	bfb8      	it	lt
 800ab3e:	eef0 7a47 	vmovlt.f32	s15, s14
 800ab42:	e7dc      	b.n	800aafe <__ieee754_atan2f+0x26>
 800ab44:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800ab48:	d125      	bne.n	800ab96 <__ieee754_atan2f+0xbe>
 800ab4a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800ab4e:	d112      	bne.n	800ab76 <__ieee754_atan2f+0x9e>
 800ab50:	2c02      	cmp	r4, #2
 800ab52:	d00a      	beq.n	800ab6a <__ieee754_atan2f+0x92>
 800ab54:	2c03      	cmp	r4, #3
 800ab56:	d00b      	beq.n	800ab70 <__ieee754_atan2f+0x98>
 800ab58:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 800ac14 <__ieee754_atan2f+0x13c>
 800ab5c:	eddf 7a2e 	vldr	s15, [pc, #184]	; 800ac18 <__ieee754_atan2f+0x140>
 800ab60:	2c01      	cmp	r4, #1
 800ab62:	bf18      	it	ne
 800ab64:	eef0 7a47 	vmovne.f32	s15, s14
 800ab68:	e7c9      	b.n	800aafe <__ieee754_atan2f+0x26>
 800ab6a:	eddf 7a2c 	vldr	s15, [pc, #176]	; 800ac1c <__ieee754_atan2f+0x144>
 800ab6e:	e7c6      	b.n	800aafe <__ieee754_atan2f+0x26>
 800ab70:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800ac20 <__ieee754_atan2f+0x148>
 800ab74:	e7c3      	b.n	800aafe <__ieee754_atan2f+0x26>
 800ab76:	2c02      	cmp	r4, #2
 800ab78:	d007      	beq.n	800ab8a <__ieee754_atan2f+0xb2>
 800ab7a:	2c03      	cmp	r4, #3
 800ab7c:	d008      	beq.n	800ab90 <__ieee754_atan2f+0xb8>
 800ab7e:	2c01      	cmp	r4, #1
 800ab80:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800ac24 <__ieee754_atan2f+0x14c>
 800ab84:	eddf 7a28 	vldr	s15, [pc, #160]	; 800ac28 <__ieee754_atan2f+0x150>
 800ab88:	e7eb      	b.n	800ab62 <__ieee754_atan2f+0x8a>
 800ab8a:	eddf 7a28 	vldr	s15, [pc, #160]	; 800ac2c <__ieee754_atan2f+0x154>
 800ab8e:	e7b6      	b.n	800aafe <__ieee754_atan2f+0x26>
 800ab90:	eddf 7a1d 	vldr	s15, [pc, #116]	; 800ac08 <__ieee754_atan2f+0x130>
 800ab94:	e7b3      	b.n	800aafe <__ieee754_atan2f+0x26>
 800ab96:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800ab9a:	d0ca      	beq.n	800ab32 <__ieee754_atan2f+0x5a>
 800ab9c:	1a5b      	subs	r3, r3, r1
 800ab9e:	15db      	asrs	r3, r3, #23
 800aba0:	2b3c      	cmp	r3, #60	; 0x3c
 800aba2:	dc1a      	bgt.n	800abda <__ieee754_atan2f+0x102>
 800aba4:	2a00      	cmp	r2, #0
 800aba6:	da01      	bge.n	800abac <__ieee754_atan2f+0xd4>
 800aba8:	333c      	adds	r3, #60	; 0x3c
 800abaa:	db19      	blt.n	800abe0 <__ieee754_atan2f+0x108>
 800abac:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800abb0:	f000 fd42 	bl	800b638 <fabsf>
 800abb4:	f000 fc6e 	bl	800b494 <atanf>
 800abb8:	eef0 7a40 	vmov.f32	s15, s0
 800abbc:	2c01      	cmp	r4, #1
 800abbe:	d012      	beq.n	800abe6 <__ieee754_atan2f+0x10e>
 800abc0:	2c02      	cmp	r4, #2
 800abc2:	d017      	beq.n	800abf4 <__ieee754_atan2f+0x11c>
 800abc4:	2c00      	cmp	r4, #0
 800abc6:	d09a      	beq.n	800aafe <__ieee754_atan2f+0x26>
 800abc8:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800ac30 <__ieee754_atan2f+0x158>
 800abcc:	ee77 7a87 	vadd.f32	s15, s15, s14
 800abd0:	ed9f 7a16 	vldr	s14, [pc, #88]	; 800ac2c <__ieee754_atan2f+0x154>
 800abd4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800abd8:	e791      	b.n	800aafe <__ieee754_atan2f+0x26>
 800abda:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800ac10 <__ieee754_atan2f+0x138>
 800abde:	e7ed      	b.n	800abbc <__ieee754_atan2f+0xe4>
 800abe0:	eddf 7a10 	vldr	s15, [pc, #64]	; 800ac24 <__ieee754_atan2f+0x14c>
 800abe4:	e7ea      	b.n	800abbc <__ieee754_atan2f+0xe4>
 800abe6:	ee17 3a90 	vmov	r3, s15
 800abea:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800abee:	ee07 3a90 	vmov	s15, r3
 800abf2:	e784      	b.n	800aafe <__ieee754_atan2f+0x26>
 800abf4:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 800ac30 <__ieee754_atan2f+0x158>
 800abf8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800abfc:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 800ac2c <__ieee754_atan2f+0x154>
 800ac00:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ac04:	e77b      	b.n	800aafe <__ieee754_atan2f+0x26>
 800ac06:	bf00      	nop
 800ac08:	c0490fdb 	.word	0xc0490fdb
 800ac0c:	bfc90fdb 	.word	0xbfc90fdb
 800ac10:	3fc90fdb 	.word	0x3fc90fdb
 800ac14:	3f490fdb 	.word	0x3f490fdb
 800ac18:	bf490fdb 	.word	0xbf490fdb
 800ac1c:	4016cbe4 	.word	0x4016cbe4
 800ac20:	c016cbe4 	.word	0xc016cbe4
 800ac24:	00000000 	.word	0x00000000
 800ac28:	80000000 	.word	0x80000000
 800ac2c:	40490fdb 	.word	0x40490fdb
 800ac30:	33bbbd2e 	.word	0x33bbbd2e

0800ac34 <__ieee754_rem_pio2f>:
 800ac34:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac36:	ee10 6a10 	vmov	r6, s0
 800ac3a:	4b86      	ldr	r3, [pc, #536]	; (800ae54 <__ieee754_rem_pio2f+0x220>)
 800ac3c:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 800ac40:	429c      	cmp	r4, r3
 800ac42:	b087      	sub	sp, #28
 800ac44:	4605      	mov	r5, r0
 800ac46:	dc05      	bgt.n	800ac54 <__ieee754_rem_pio2f+0x20>
 800ac48:	2300      	movs	r3, #0
 800ac4a:	ed85 0a00 	vstr	s0, [r5]
 800ac4e:	6043      	str	r3, [r0, #4]
 800ac50:	2000      	movs	r0, #0
 800ac52:	e020      	b.n	800ac96 <__ieee754_rem_pio2f+0x62>
 800ac54:	4b80      	ldr	r3, [pc, #512]	; (800ae58 <__ieee754_rem_pio2f+0x224>)
 800ac56:	429c      	cmp	r4, r3
 800ac58:	dc38      	bgt.n	800accc <__ieee754_rem_pio2f+0x98>
 800ac5a:	2e00      	cmp	r6, #0
 800ac5c:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 800ae5c <__ieee754_rem_pio2f+0x228>
 800ac60:	4b7f      	ldr	r3, [pc, #508]	; (800ae60 <__ieee754_rem_pio2f+0x22c>)
 800ac62:	f024 040f 	bic.w	r4, r4, #15
 800ac66:	dd18      	ble.n	800ac9a <__ieee754_rem_pio2f+0x66>
 800ac68:	429c      	cmp	r4, r3
 800ac6a:	ee70 7a47 	vsub.f32	s15, s0, s14
 800ac6e:	bf09      	itett	eq
 800ac70:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 800ae64 <__ieee754_rem_pio2f+0x230>
 800ac74:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 800ae68 <__ieee754_rem_pio2f+0x234>
 800ac78:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800ac7c:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 800ae6c <__ieee754_rem_pio2f+0x238>
 800ac80:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800ac84:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800ac88:	edc0 6a00 	vstr	s13, [r0]
 800ac8c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ac90:	edc0 7a01 	vstr	s15, [r0, #4]
 800ac94:	2001      	movs	r0, #1
 800ac96:	b007      	add	sp, #28
 800ac98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac9a:	429c      	cmp	r4, r3
 800ac9c:	ee70 7a07 	vadd.f32	s15, s0, s14
 800aca0:	bf09      	itett	eq
 800aca2:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 800ae64 <__ieee754_rem_pio2f+0x230>
 800aca6:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 800ae68 <__ieee754_rem_pio2f+0x234>
 800acaa:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800acae:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 800ae6c <__ieee754_rem_pio2f+0x238>
 800acb2:	ee77 6a87 	vadd.f32	s13, s15, s14
 800acb6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800acba:	edc0 6a00 	vstr	s13, [r0]
 800acbe:	ee77 7a87 	vadd.f32	s15, s15, s14
 800acc2:	edc0 7a01 	vstr	s15, [r0, #4]
 800acc6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800acca:	e7e4      	b.n	800ac96 <__ieee754_rem_pio2f+0x62>
 800accc:	4b68      	ldr	r3, [pc, #416]	; (800ae70 <__ieee754_rem_pio2f+0x23c>)
 800acce:	429c      	cmp	r4, r3
 800acd0:	dc71      	bgt.n	800adb6 <__ieee754_rem_pio2f+0x182>
 800acd2:	f000 fcb1 	bl	800b638 <fabsf>
 800acd6:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800ae74 <__ieee754_rem_pio2f+0x240>
 800acda:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800acde:	eee0 7a07 	vfma.f32	s15, s0, s14
 800ace2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ace6:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800acea:	ee17 0a90 	vmov	r0, s15
 800acee:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800ae5c <__ieee754_rem_pio2f+0x228>
 800acf2:	eeb1 7a46 	vneg.f32	s14, s12
 800acf6:	eea7 0a27 	vfma.f32	s0, s14, s15
 800acfa:	281f      	cmp	r0, #31
 800acfc:	eddf 7a5a 	vldr	s15, [pc, #360]	; 800ae68 <__ieee754_rem_pio2f+0x234>
 800ad00:	ee66 7a27 	vmul.f32	s15, s12, s15
 800ad04:	ee70 6a67 	vsub.f32	s13, s0, s15
 800ad08:	ee16 3a90 	vmov	r3, s13
 800ad0c:	dc1c      	bgt.n	800ad48 <__ieee754_rem_pio2f+0x114>
 800ad0e:	1e47      	subs	r7, r0, #1
 800ad10:	4959      	ldr	r1, [pc, #356]	; (800ae78 <__ieee754_rem_pio2f+0x244>)
 800ad12:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800ad16:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 800ad1a:	428a      	cmp	r2, r1
 800ad1c:	d014      	beq.n	800ad48 <__ieee754_rem_pio2f+0x114>
 800ad1e:	602b      	str	r3, [r5, #0]
 800ad20:	ed95 7a00 	vldr	s14, [r5]
 800ad24:	ee30 0a47 	vsub.f32	s0, s0, s14
 800ad28:	2e00      	cmp	r6, #0
 800ad2a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800ad2e:	ed85 0a01 	vstr	s0, [r5, #4]
 800ad32:	dab0      	bge.n	800ac96 <__ieee754_rem_pio2f+0x62>
 800ad34:	eeb1 7a47 	vneg.f32	s14, s14
 800ad38:	eeb1 0a40 	vneg.f32	s0, s0
 800ad3c:	ed85 7a00 	vstr	s14, [r5]
 800ad40:	ed85 0a01 	vstr	s0, [r5, #4]
 800ad44:	4240      	negs	r0, r0
 800ad46:	e7a6      	b.n	800ac96 <__ieee754_rem_pio2f+0x62>
 800ad48:	15e4      	asrs	r4, r4, #23
 800ad4a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800ad4e:	1aa2      	subs	r2, r4, r2
 800ad50:	2a08      	cmp	r2, #8
 800ad52:	dde4      	ble.n	800ad1e <__ieee754_rem_pio2f+0xea>
 800ad54:	eddf 7a43 	vldr	s15, [pc, #268]	; 800ae64 <__ieee754_rem_pio2f+0x230>
 800ad58:	eef0 6a40 	vmov.f32	s13, s0
 800ad5c:	eee7 6a27 	vfma.f32	s13, s14, s15
 800ad60:	ee30 0a66 	vsub.f32	s0, s0, s13
 800ad64:	eea7 0a27 	vfma.f32	s0, s14, s15
 800ad68:	eddf 7a40 	vldr	s15, [pc, #256]	; 800ae6c <__ieee754_rem_pio2f+0x238>
 800ad6c:	ee96 0a27 	vfnms.f32	s0, s12, s15
 800ad70:	ee76 5ac0 	vsub.f32	s11, s13, s0
 800ad74:	eef0 7a40 	vmov.f32	s15, s0
 800ad78:	ee15 3a90 	vmov	r3, s11
 800ad7c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800ad80:	1aa4      	subs	r4, r4, r2
 800ad82:	2c19      	cmp	r4, #25
 800ad84:	dc04      	bgt.n	800ad90 <__ieee754_rem_pio2f+0x15c>
 800ad86:	edc5 5a00 	vstr	s11, [r5]
 800ad8a:	eeb0 0a66 	vmov.f32	s0, s13
 800ad8e:	e7c7      	b.n	800ad20 <__ieee754_rem_pio2f+0xec>
 800ad90:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800ae7c <__ieee754_rem_pio2f+0x248>
 800ad94:	eeb0 0a66 	vmov.f32	s0, s13
 800ad98:	eea7 0a25 	vfma.f32	s0, s14, s11
 800ad9c:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800ada0:	eee7 7a25 	vfma.f32	s15, s14, s11
 800ada4:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800ae80 <__ieee754_rem_pio2f+0x24c>
 800ada8:	eed6 7a07 	vfnms.f32	s15, s12, s14
 800adac:	ee30 7a67 	vsub.f32	s14, s0, s15
 800adb0:	ed85 7a00 	vstr	s14, [r5]
 800adb4:	e7b4      	b.n	800ad20 <__ieee754_rem_pio2f+0xec>
 800adb6:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800adba:	db06      	blt.n	800adca <__ieee754_rem_pio2f+0x196>
 800adbc:	ee70 7a40 	vsub.f32	s15, s0, s0
 800adc0:	edc0 7a01 	vstr	s15, [r0, #4]
 800adc4:	edc0 7a00 	vstr	s15, [r0]
 800adc8:	e742      	b.n	800ac50 <__ieee754_rem_pio2f+0x1c>
 800adca:	15e2      	asrs	r2, r4, #23
 800adcc:	3a86      	subs	r2, #134	; 0x86
 800adce:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 800add2:	ee07 3a90 	vmov	s15, r3
 800add6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800adda:	eddf 6a2a 	vldr	s13, [pc, #168]	; 800ae84 <__ieee754_rem_pio2f+0x250>
 800adde:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800ade2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ade6:	ed8d 7a03 	vstr	s14, [sp, #12]
 800adea:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800adee:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800adf2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800adf6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800adfa:	ed8d 7a04 	vstr	s14, [sp, #16]
 800adfe:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800ae02:	eef5 7a40 	vcmp.f32	s15, #0.0
 800ae06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae0a:	edcd 7a05 	vstr	s15, [sp, #20]
 800ae0e:	d11e      	bne.n	800ae4e <__ieee754_rem_pio2f+0x21a>
 800ae10:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800ae14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae18:	bf14      	ite	ne
 800ae1a:	2302      	movne	r3, #2
 800ae1c:	2301      	moveq	r3, #1
 800ae1e:	491a      	ldr	r1, [pc, #104]	; (800ae88 <__ieee754_rem_pio2f+0x254>)
 800ae20:	9101      	str	r1, [sp, #4]
 800ae22:	2102      	movs	r1, #2
 800ae24:	9100      	str	r1, [sp, #0]
 800ae26:	a803      	add	r0, sp, #12
 800ae28:	4629      	mov	r1, r5
 800ae2a:	f000 f88d 	bl	800af48 <__kernel_rem_pio2f>
 800ae2e:	2e00      	cmp	r6, #0
 800ae30:	f6bf af31 	bge.w	800ac96 <__ieee754_rem_pio2f+0x62>
 800ae34:	edd5 7a00 	vldr	s15, [r5]
 800ae38:	eef1 7a67 	vneg.f32	s15, s15
 800ae3c:	edc5 7a00 	vstr	s15, [r5]
 800ae40:	edd5 7a01 	vldr	s15, [r5, #4]
 800ae44:	eef1 7a67 	vneg.f32	s15, s15
 800ae48:	edc5 7a01 	vstr	s15, [r5, #4]
 800ae4c:	e77a      	b.n	800ad44 <__ieee754_rem_pio2f+0x110>
 800ae4e:	2303      	movs	r3, #3
 800ae50:	e7e5      	b.n	800ae1e <__ieee754_rem_pio2f+0x1ea>
 800ae52:	bf00      	nop
 800ae54:	3f490fd8 	.word	0x3f490fd8
 800ae58:	4016cbe3 	.word	0x4016cbe3
 800ae5c:	3fc90f80 	.word	0x3fc90f80
 800ae60:	3fc90fd0 	.word	0x3fc90fd0
 800ae64:	37354400 	.word	0x37354400
 800ae68:	37354443 	.word	0x37354443
 800ae6c:	2e85a308 	.word	0x2e85a308
 800ae70:	43490f80 	.word	0x43490f80
 800ae74:	3f22f984 	.word	0x3f22f984
 800ae78:	0800cc94 	.word	0x0800cc94
 800ae7c:	2e85a300 	.word	0x2e85a300
 800ae80:	248d3132 	.word	0x248d3132
 800ae84:	43800000 	.word	0x43800000
 800ae88:	0800cd14 	.word	0x0800cd14

0800ae8c <__kernel_cosf>:
 800ae8c:	ee10 3a10 	vmov	r3, s0
 800ae90:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ae94:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800ae98:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ae9c:	da05      	bge.n	800aeaa <__kernel_cosf+0x1e>
 800ae9e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800aea2:	ee17 2a90 	vmov	r2, s15
 800aea6:	2a00      	cmp	r2, #0
 800aea8:	d03b      	beq.n	800af22 <__kernel_cosf+0x96>
 800aeaa:	ee20 7a00 	vmul.f32	s14, s0, s0
 800aeae:	ed9f 6a1e 	vldr	s12, [pc, #120]	; 800af28 <__kernel_cosf+0x9c>
 800aeb2:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800af2c <__kernel_cosf+0xa0>
 800aeb6:	eddf 5a1e 	vldr	s11, [pc, #120]	; 800af30 <__kernel_cosf+0xa4>
 800aeba:	4a1e      	ldr	r2, [pc, #120]	; (800af34 <__kernel_cosf+0xa8>)
 800aebc:	eea7 6a27 	vfma.f32	s12, s14, s15
 800aec0:	4293      	cmp	r3, r2
 800aec2:	ee60 0a20 	vmul.f32	s1, s0, s1
 800aec6:	eee7 5a06 	vfma.f32	s11, s14, s12
 800aeca:	ed9f 6a1b 	vldr	s12, [pc, #108]	; 800af38 <__kernel_cosf+0xac>
 800aece:	eea7 6a25 	vfma.f32	s12, s14, s11
 800aed2:	eddf 5a1a 	vldr	s11, [pc, #104]	; 800af3c <__kernel_cosf+0xb0>
 800aed6:	eee7 5a06 	vfma.f32	s11, s14, s12
 800aeda:	ed9f 6a19 	vldr	s12, [pc, #100]	; 800af40 <__kernel_cosf+0xb4>
 800aede:	eea7 6a25 	vfma.f32	s12, s14, s11
 800aee2:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 800aee6:	ee26 6a07 	vmul.f32	s12, s12, s14
 800aeea:	dc06      	bgt.n	800aefa <__kernel_cosf+0x6e>
 800aeec:	eed7 0a06 	vfnms.f32	s1, s14, s12
 800aef0:	eed7 0a25 	vfnms.f32	s1, s14, s11
 800aef4:	ee36 0ae0 	vsub.f32	s0, s13, s1
 800aef8:	4770      	bx	lr
 800aefa:	4a12      	ldr	r2, [pc, #72]	; (800af44 <__kernel_cosf+0xb8>)
 800aefc:	4293      	cmp	r3, r2
 800aefe:	bfda      	itte	le
 800af00:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 800af04:	ee07 3a90 	vmovle	s15, r3
 800af08:	eef5 7a02 	vmovgt.f32	s15, #82	; 0x3e900000  0.2812500
 800af0c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800af10:	eed7 0a06 	vfnms.f32	s1, s14, s12
 800af14:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800af18:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800af1c:	ee36 0ae7 	vsub.f32	s0, s13, s15
 800af20:	4770      	bx	lr
 800af22:	eeb0 0a66 	vmov.f32	s0, s13
 800af26:	4770      	bx	lr
 800af28:	310f74f6 	.word	0x310f74f6
 800af2c:	ad47d74e 	.word	0xad47d74e
 800af30:	b493f27c 	.word	0xb493f27c
 800af34:	3e999999 	.word	0x3e999999
 800af38:	37d00d01 	.word	0x37d00d01
 800af3c:	bab60b61 	.word	0xbab60b61
 800af40:	3d2aaaab 	.word	0x3d2aaaab
 800af44:	3f480000 	.word	0x3f480000

0800af48 <__kernel_rem_pio2f>:
 800af48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af4c:	ed2d 8b04 	vpush	{d8-d9}
 800af50:	b0d7      	sub	sp, #348	; 0x15c
 800af52:	468b      	mov	fp, r1
 800af54:	9301      	str	r3, [sp, #4]
 800af56:	9964      	ldr	r1, [sp, #400]	; 0x190
 800af58:	4bcb      	ldr	r3, [pc, #812]	; (800b288 <__kernel_rem_pio2f+0x340>)
 800af5a:	9002      	str	r0, [sp, #8]
 800af5c:	f853 a021 	ldr.w	sl, [r3, r1, lsl #2]
 800af60:	9b01      	ldr	r3, [sp, #4]
 800af62:	9e65      	ldr	r6, [sp, #404]	; 0x194
 800af64:	ed9f 7acc 	vldr	s14, [pc, #816]	; 800b298 <__kernel_rem_pio2f+0x350>
 800af68:	3b01      	subs	r3, #1
 800af6a:	1ed0      	subs	r0, r2, #3
 800af6c:	2408      	movs	r4, #8
 800af6e:	fb90 f0f4 	sdiv	r0, r0, r4
 800af72:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800af76:	1c45      	adds	r5, r0, #1
 800af78:	1ac7      	subs	r7, r0, r3
 800af7a:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 800af7e:	eb0a 0e03 	add.w	lr, sl, r3
 800af82:	ac1a      	add	r4, sp, #104	; 0x68
 800af84:	eb06 0c87 	add.w	ip, r6, r7, lsl #2
 800af88:	2200      	movs	r2, #0
 800af8a:	4572      	cmp	r2, lr
 800af8c:	dd0f      	ble.n	800afae <__kernel_rem_pio2f+0x66>
 800af8e:	f50d 7e84 	add.w	lr, sp, #264	; 0x108
 800af92:	2400      	movs	r4, #0
 800af94:	4554      	cmp	r4, sl
 800af96:	dc26      	bgt.n	800afe6 <__kernel_rem_pio2f+0x9e>
 800af98:	9a01      	ldr	r2, [sp, #4]
 800af9a:	9f02      	ldr	r7, [sp, #8]
 800af9c:	eddf 7abe 	vldr	s15, [pc, #760]	; 800b298 <__kernel_rem_pio2f+0x350>
 800afa0:	4422      	add	r2, r4
 800afa2:	a91a      	add	r1, sp, #104	; 0x68
 800afa4:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800afa8:	f04f 0c00 	mov.w	ip, #0
 800afac:	e015      	b.n	800afda <__kernel_rem_pio2f+0x92>
 800afae:	42d7      	cmn	r7, r2
 800afb0:	bf5d      	ittte	pl
 800afb2:	f85c 1022 	ldrpl.w	r1, [ip, r2, lsl #2]
 800afb6:	ee07 1a90 	vmovpl	s15, r1
 800afba:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800afbe:	eef0 7a47 	vmovmi.f32	s15, s14
 800afc2:	ece4 7a01 	vstmia	r4!, {s15}
 800afc6:	3201      	adds	r2, #1
 800afc8:	e7df      	b.n	800af8a <__kernel_rem_pio2f+0x42>
 800afca:	ecf7 6a01 	vldmia	r7!, {s13}
 800afce:	ed32 7a01 	vldmdb	r2!, {s14}
 800afd2:	eee6 7a87 	vfma.f32	s15, s13, s14
 800afd6:	f10c 0c01 	add.w	ip, ip, #1
 800afda:	459c      	cmp	ip, r3
 800afdc:	ddf5      	ble.n	800afca <__kernel_rem_pio2f+0x82>
 800afde:	ecee 7a01 	vstmia	lr!, {s15}
 800afe2:	3401      	adds	r4, #1
 800afe4:	e7d6      	b.n	800af94 <__kernel_rem_pio2f+0x4c>
 800afe6:	aa06      	add	r2, sp, #24
 800afe8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800afec:	9204      	str	r2, [sp, #16]
 800afee:	eddf 8aa7 	vldr	s17, [pc, #668]	; 800b28c <__kernel_rem_pio2f+0x344>
 800aff2:	ed9f 9aa7 	vldr	s18, [pc, #668]	; 800b290 <__kernel_rem_pio2f+0x348>
 800aff6:	eb06 0280 	add.w	r2, r6, r0, lsl #2
 800affa:	9203      	str	r2, [sp, #12]
 800affc:	4657      	mov	r7, sl
 800affe:	aa56      	add	r2, sp, #344	; 0x158
 800b000:	f107 4880 	add.w	r8, r7, #1073741824	; 0x40000000
 800b004:	eb02 0287 	add.w	r2, r2, r7, lsl #2
 800b008:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800b00c:	ed12 0a14 	vldr	s0, [r2, #-80]	; 0xffffffb0
 800b010:	ea4f 0888 	mov.w	r8, r8, lsl #2
 800b014:	aa56      	add	r2, sp, #344	; 0x158
 800b016:	eb02 0008 	add.w	r0, r2, r8
 800b01a:	384c      	subs	r0, #76	; 0x4c
 800b01c:	2200      	movs	r2, #0
 800b01e:	1abc      	subs	r4, r7, r2
 800b020:	2c00      	cmp	r4, #0
 800b022:	dc4a      	bgt.n	800b0ba <__kernel_rem_pio2f+0x172>
 800b024:	4628      	mov	r0, r5
 800b026:	9305      	str	r3, [sp, #20]
 800b028:	f000 fb50 	bl	800b6cc <scalbnf>
 800b02c:	eeb0 8a40 	vmov.f32	s16, s0
 800b030:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800b034:	ee28 0a00 	vmul.f32	s0, s16, s0
 800b038:	f000 fb06 	bl	800b648 <floorf>
 800b03c:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800b040:	eea0 8a67 	vfms.f32	s16, s0, s15
 800b044:	2d00      	cmp	r5, #0
 800b046:	9b05      	ldr	r3, [sp, #20]
 800b048:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800b04c:	ee17 9a90 	vmov	r9, s15
 800b050:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b054:	ee38 8a67 	vsub.f32	s16, s16, s15
 800b058:	dd44      	ble.n	800b0e4 <__kernel_rem_pio2f+0x19c>
 800b05a:	1e78      	subs	r0, r7, #1
 800b05c:	aa06      	add	r2, sp, #24
 800b05e:	f1c5 0408 	rsb	r4, r5, #8
 800b062:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 800b066:	fa46 f204 	asr.w	r2, r6, r4
 800b06a:	4491      	add	r9, r2
 800b06c:	40a2      	lsls	r2, r4
 800b06e:	1ab6      	subs	r6, r6, r2
 800b070:	aa06      	add	r2, sp, #24
 800b072:	f842 6020 	str.w	r6, [r2, r0, lsl #2]
 800b076:	f1c5 0207 	rsb	r2, r5, #7
 800b07a:	4116      	asrs	r6, r2
 800b07c:	2e00      	cmp	r6, #0
 800b07e:	dd40      	ble.n	800b102 <__kernel_rem_pio2f+0x1ba>
 800b080:	2400      	movs	r4, #0
 800b082:	f109 0901 	add.w	r9, r9, #1
 800b086:	4620      	mov	r0, r4
 800b088:	42a7      	cmp	r7, r4
 800b08a:	dc75      	bgt.n	800b178 <__kernel_rem_pio2f+0x230>
 800b08c:	2d00      	cmp	r5, #0
 800b08e:	dd05      	ble.n	800b09c <__kernel_rem_pio2f+0x154>
 800b090:	2d01      	cmp	r5, #1
 800b092:	f000 8086 	beq.w	800b1a2 <__kernel_rem_pio2f+0x25a>
 800b096:	2d02      	cmp	r5, #2
 800b098:	f000 808d 	beq.w	800b1b6 <__kernel_rem_pio2f+0x26e>
 800b09c:	2e02      	cmp	r6, #2
 800b09e:	d130      	bne.n	800b102 <__kernel_rem_pio2f+0x1ba>
 800b0a0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800b0a4:	ee30 8a48 	vsub.f32	s16, s0, s16
 800b0a8:	b358      	cbz	r0, 800b102 <__kernel_rem_pio2f+0x1ba>
 800b0aa:	4628      	mov	r0, r5
 800b0ac:	9305      	str	r3, [sp, #20]
 800b0ae:	f000 fb0d 	bl	800b6cc <scalbnf>
 800b0b2:	9b05      	ldr	r3, [sp, #20]
 800b0b4:	ee38 8a40 	vsub.f32	s16, s16, s0
 800b0b8:	e023      	b.n	800b102 <__kernel_rem_pio2f+0x1ba>
 800b0ba:	ee60 7a28 	vmul.f32	s15, s0, s17
 800b0be:	ac06      	add	r4, sp, #24
 800b0c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b0c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b0c8:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800b0cc:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800b0d0:	ee10 1a10 	vmov	r1, s0
 800b0d4:	ed30 0a01 	vldmdb	r0!, {s0}
 800b0d8:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 800b0dc:	ee37 0a80 	vadd.f32	s0, s15, s0
 800b0e0:	3201      	adds	r2, #1
 800b0e2:	e79c      	b.n	800b01e <__kernel_rem_pio2f+0xd6>
 800b0e4:	d105      	bne.n	800b0f2 <__kernel_rem_pio2f+0x1aa>
 800b0e6:	1e7a      	subs	r2, r7, #1
 800b0e8:	a906      	add	r1, sp, #24
 800b0ea:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 800b0ee:	1236      	asrs	r6, r6, #8
 800b0f0:	e7c4      	b.n	800b07c <__kernel_rem_pio2f+0x134>
 800b0f2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800b0f6:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800b0fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0fe:	da39      	bge.n	800b174 <__kernel_rem_pio2f+0x22c>
 800b100:	2600      	movs	r6, #0
 800b102:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800b106:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b10a:	f040 808d 	bne.w	800b228 <__kernel_rem_pio2f+0x2e0>
 800b10e:	1e7c      	subs	r4, r7, #1
 800b110:	4620      	mov	r0, r4
 800b112:	2200      	movs	r2, #0
 800b114:	4550      	cmp	r0, sl
 800b116:	da55      	bge.n	800b1c4 <__kernel_rem_pio2f+0x27c>
 800b118:	2a00      	cmp	r2, #0
 800b11a:	d164      	bne.n	800b1e6 <__kernel_rem_pio2f+0x29e>
 800b11c:	2401      	movs	r4, #1
 800b11e:	f06f 0003 	mvn.w	r0, #3
 800b122:	fb00 f204 	mul.w	r2, r0, r4
 800b126:	9904      	ldr	r1, [sp, #16]
 800b128:	588a      	ldr	r2, [r1, r2]
 800b12a:	2a00      	cmp	r2, #0
 800b12c:	d050      	beq.n	800b1d0 <__kernel_rem_pio2f+0x288>
 800b12e:	aa56      	add	r2, sp, #344	; 0x158
 800b130:	4490      	add	r8, r2
 800b132:	9a01      	ldr	r2, [sp, #4]
 800b134:	a91a      	add	r1, sp, #104	; 0x68
 800b136:	443a      	add	r2, r7
 800b138:	1c78      	adds	r0, r7, #1
 800b13a:	f1a8 0848 	sub.w	r8, r8, #72	; 0x48
 800b13e:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800b142:	4427      	add	r7, r4
 800b144:	42b8      	cmp	r0, r7
 800b146:	f73f af5a 	bgt.w	800affe <__kernel_rem_pio2f+0xb6>
 800b14a:	9903      	ldr	r1, [sp, #12]
 800b14c:	9e02      	ldr	r6, [sp, #8]
 800b14e:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800b152:	9105      	str	r1, [sp, #20]
 800b154:	ee07 1a90 	vmov	s15, r1
 800b158:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b15c:	2400      	movs	r4, #0
 800b15e:	ece2 7a01 	vstmia	r2!, {s15}
 800b162:	eddf 7a4d 	vldr	s15, [pc, #308]	; 800b298 <__kernel_rem_pio2f+0x350>
 800b166:	4696      	mov	lr, r2
 800b168:	429c      	cmp	r4, r3
 800b16a:	dd33      	ble.n	800b1d4 <__kernel_rem_pio2f+0x28c>
 800b16c:	ece8 7a01 	vstmia	r8!, {s15}
 800b170:	3001      	adds	r0, #1
 800b172:	e7e7      	b.n	800b144 <__kernel_rem_pio2f+0x1fc>
 800b174:	2602      	movs	r6, #2
 800b176:	e783      	b.n	800b080 <__kernel_rem_pio2f+0x138>
 800b178:	aa06      	add	r2, sp, #24
 800b17a:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 800b17e:	b948      	cbnz	r0, 800b194 <__kernel_rem_pio2f+0x24c>
 800b180:	b12a      	cbz	r2, 800b18e <__kernel_rem_pio2f+0x246>
 800b182:	a906      	add	r1, sp, #24
 800b184:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 800b188:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
 800b18c:	2201      	movs	r2, #1
 800b18e:	3401      	adds	r4, #1
 800b190:	4610      	mov	r0, r2
 800b192:	e779      	b.n	800b088 <__kernel_rem_pio2f+0x140>
 800b194:	a906      	add	r1, sp, #24
 800b196:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 800b19a:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
 800b19e:	4602      	mov	r2, r0
 800b1a0:	e7f5      	b.n	800b18e <__kernel_rem_pio2f+0x246>
 800b1a2:	1e7c      	subs	r4, r7, #1
 800b1a4:	aa06      	add	r2, sp, #24
 800b1a6:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 800b1aa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b1ae:	a906      	add	r1, sp, #24
 800b1b0:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
 800b1b4:	e772      	b.n	800b09c <__kernel_rem_pio2f+0x154>
 800b1b6:	1e7c      	subs	r4, r7, #1
 800b1b8:	aa06      	add	r2, sp, #24
 800b1ba:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 800b1be:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800b1c2:	e7f4      	b.n	800b1ae <__kernel_rem_pio2f+0x266>
 800b1c4:	a906      	add	r1, sp, #24
 800b1c6:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800b1ca:	3801      	subs	r0, #1
 800b1cc:	430a      	orrs	r2, r1
 800b1ce:	e7a1      	b.n	800b114 <__kernel_rem_pio2f+0x1cc>
 800b1d0:	3401      	adds	r4, #1
 800b1d2:	e7a6      	b.n	800b122 <__kernel_rem_pio2f+0x1da>
 800b1d4:	ecf6 6a01 	vldmia	r6!, {s13}
 800b1d8:	ed3e 7a01 	vldmdb	lr!, {s14}
 800b1dc:	3401      	adds	r4, #1
 800b1de:	eee6 7a87 	vfma.f32	s15, s13, s14
 800b1e2:	e7c1      	b.n	800b168 <__kernel_rem_pio2f+0x220>
 800b1e4:	3c01      	subs	r4, #1
 800b1e6:	ab06      	add	r3, sp, #24
 800b1e8:	3d08      	subs	r5, #8
 800b1ea:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d0f8      	beq.n	800b1e4 <__kernel_rem_pio2f+0x29c>
 800b1f2:	4628      	mov	r0, r5
 800b1f4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800b1f8:	f000 fa68 	bl	800b6cc <scalbnf>
 800b1fc:	00a3      	lsls	r3, r4, #2
 800b1fe:	aa42      	add	r2, sp, #264	; 0x108
 800b200:	3304      	adds	r3, #4
 800b202:	ed9f 7a22 	vldr	s14, [pc, #136]	; 800b28c <__kernel_rem_pio2f+0x344>
 800b206:	18d0      	adds	r0, r2, r3
 800b208:	4622      	mov	r2, r4
 800b20a:	2a00      	cmp	r2, #0
 800b20c:	da46      	bge.n	800b29c <__kernel_rem_pio2f+0x354>
 800b20e:	f10d 0eb8 	add.w	lr, sp, #184	; 0xb8
 800b212:	2200      	movs	r2, #0
 800b214:	1aa5      	subs	r5, r4, r2
 800b216:	d460      	bmi.n	800b2da <__kernel_rem_pio2f+0x392>
 800b218:	a942      	add	r1, sp, #264	; 0x108
 800b21a:	4f1e      	ldr	r7, [pc, #120]	; (800b294 <__kernel_rem_pio2f+0x34c>)
 800b21c:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800b298 <__kernel_rem_pio2f+0x350>
 800b220:	eb01 0585 	add.w	r5, r1, r5, lsl #2
 800b224:	2000      	movs	r0, #0
 800b226:	e050      	b.n	800b2ca <__kernel_rem_pio2f+0x382>
 800b228:	4268      	negs	r0, r5
 800b22a:	eeb0 0a48 	vmov.f32	s0, s16
 800b22e:	f000 fa4d 	bl	800b6cc <scalbnf>
 800b232:	ed9f 7a17 	vldr	s14, [pc, #92]	; 800b290 <__kernel_rem_pio2f+0x348>
 800b236:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800b23a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b23e:	db19      	blt.n	800b274 <__kernel_rem_pio2f+0x32c>
 800b240:	eddf 7a12 	vldr	s15, [pc, #72]	; 800b28c <__kernel_rem_pio2f+0x344>
 800b244:	ee60 7a27 	vmul.f32	s15, s0, s15
 800b248:	aa06      	add	r2, sp, #24
 800b24a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b24e:	1c7c      	adds	r4, r7, #1
 800b250:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b254:	3508      	adds	r5, #8
 800b256:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800b25a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b25e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800b262:	ee10 3a10 	vmov	r3, s0
 800b266:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
 800b26a:	ee17 3a90 	vmov	r3, s15
 800b26e:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800b272:	e7be      	b.n	800b1f2 <__kernel_rem_pio2f+0x2aa>
 800b274:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800b278:	aa06      	add	r2, sp, #24
 800b27a:	ee10 3a10 	vmov	r3, s0
 800b27e:	463c      	mov	r4, r7
 800b280:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
 800b284:	e7b5      	b.n	800b1f2 <__kernel_rem_pio2f+0x2aa>
 800b286:	bf00      	nop
 800b288:	0800d058 	.word	0x0800d058
 800b28c:	3b800000 	.word	0x3b800000
 800b290:	43800000 	.word	0x43800000
 800b294:	0800d02c 	.word	0x0800d02c
 800b298:	00000000 	.word	0x00000000
 800b29c:	a906      	add	r1, sp, #24
 800b29e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800b2a2:	9101      	str	r1, [sp, #4]
 800b2a4:	ee07 1a90 	vmov	s15, r1
 800b2a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b2ac:	3a01      	subs	r2, #1
 800b2ae:	ee67 7a80 	vmul.f32	s15, s15, s0
 800b2b2:	ee20 0a07 	vmul.f32	s0, s0, s14
 800b2b6:	ed60 7a01 	vstmdb	r0!, {s15}
 800b2ba:	e7a6      	b.n	800b20a <__kernel_rem_pio2f+0x2c2>
 800b2bc:	ecf7 6a01 	vldmia	r7!, {s13}
 800b2c0:	ecb5 7a01 	vldmia	r5!, {s14}
 800b2c4:	eee6 7a87 	vfma.f32	s15, s13, s14
 800b2c8:	3001      	adds	r0, #1
 800b2ca:	4550      	cmp	r0, sl
 800b2cc:	dc01      	bgt.n	800b2d2 <__kernel_rem_pio2f+0x38a>
 800b2ce:	4290      	cmp	r0, r2
 800b2d0:	ddf4      	ble.n	800b2bc <__kernel_rem_pio2f+0x374>
 800b2d2:	ecee 7a01 	vstmia	lr!, {s15}
 800b2d6:	3201      	adds	r2, #1
 800b2d8:	e79c      	b.n	800b214 <__kernel_rem_pio2f+0x2cc>
 800b2da:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800b2dc:	2a03      	cmp	r2, #3
 800b2de:	d843      	bhi.n	800b368 <__kernel_rem_pio2f+0x420>
 800b2e0:	e8df f002 	tbb	[pc, r2]
 800b2e4:	021d1d37 	.word	0x021d1d37
 800b2e8:	aa2e      	add	r2, sp, #184	; 0xb8
 800b2ea:	4413      	add	r3, r2
 800b2ec:	461a      	mov	r2, r3
 800b2ee:	4620      	mov	r0, r4
 800b2f0:	2800      	cmp	r0, #0
 800b2f2:	dc55      	bgt.n	800b3a0 <__kernel_rem_pio2f+0x458>
 800b2f4:	461a      	mov	r2, r3
 800b2f6:	4620      	mov	r0, r4
 800b2f8:	2801      	cmp	r0, #1
 800b2fa:	dc61      	bgt.n	800b3c0 <__kernel_rem_pio2f+0x478>
 800b2fc:	ed5f 7a1a 	vldr	s15, [pc, #-104]	; 800b298 <__kernel_rem_pio2f+0x350>
 800b300:	2c01      	cmp	r4, #1
 800b302:	dc6d      	bgt.n	800b3e0 <__kernel_rem_pio2f+0x498>
 800b304:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 800b308:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 800b30c:	2e00      	cmp	r6, #0
 800b30e:	d16d      	bne.n	800b3ec <__kernel_rem_pio2f+0x4a4>
 800b310:	edcb 6a00 	vstr	s13, [fp]
 800b314:	ed8b 7a01 	vstr	s14, [fp, #4]
 800b318:	edcb 7a02 	vstr	s15, [fp, #8]
 800b31c:	e024      	b.n	800b368 <__kernel_rem_pio2f+0x420>
 800b31e:	aa2e      	add	r2, sp, #184	; 0xb8
 800b320:	ed1f 7a23 	vldr	s14, [pc, #-140]	; 800b298 <__kernel_rem_pio2f+0x350>
 800b324:	4413      	add	r3, r2
 800b326:	4622      	mov	r2, r4
 800b328:	2a00      	cmp	r2, #0
 800b32a:	da2a      	bge.n	800b382 <__kernel_rem_pio2f+0x43a>
 800b32c:	b37e      	cbz	r6, 800b38e <__kernel_rem_pio2f+0x446>
 800b32e:	eef1 7a47 	vneg.f32	s15, s14
 800b332:	edcb 7a00 	vstr	s15, [fp]
 800b336:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 800b33a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b33e:	aa2f      	add	r2, sp, #188	; 0xbc
 800b340:	2301      	movs	r3, #1
 800b342:	429c      	cmp	r4, r3
 800b344:	da26      	bge.n	800b394 <__kernel_rem_pio2f+0x44c>
 800b346:	b10e      	cbz	r6, 800b34c <__kernel_rem_pio2f+0x404>
 800b348:	eef1 7a67 	vneg.f32	s15, s15
 800b34c:	edcb 7a01 	vstr	s15, [fp, #4]
 800b350:	e00a      	b.n	800b368 <__kernel_rem_pio2f+0x420>
 800b352:	aa2e      	add	r2, sp, #184	; 0xb8
 800b354:	ed5f 7a30 	vldr	s15, [pc, #-192]	; 800b298 <__kernel_rem_pio2f+0x350>
 800b358:	4413      	add	r3, r2
 800b35a:	2c00      	cmp	r4, #0
 800b35c:	da0b      	bge.n	800b376 <__kernel_rem_pio2f+0x42e>
 800b35e:	b10e      	cbz	r6, 800b364 <__kernel_rem_pio2f+0x41c>
 800b360:	eef1 7a67 	vneg.f32	s15, s15
 800b364:	edcb 7a00 	vstr	s15, [fp]
 800b368:	f009 0007 	and.w	r0, r9, #7
 800b36c:	b057      	add	sp, #348	; 0x15c
 800b36e:	ecbd 8b04 	vpop	{d8-d9}
 800b372:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b376:	ed33 7a01 	vldmdb	r3!, {s14}
 800b37a:	3c01      	subs	r4, #1
 800b37c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b380:	e7eb      	b.n	800b35a <__kernel_rem_pio2f+0x412>
 800b382:	ed73 7a01 	vldmdb	r3!, {s15}
 800b386:	3a01      	subs	r2, #1
 800b388:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b38c:	e7cc      	b.n	800b328 <__kernel_rem_pio2f+0x3e0>
 800b38e:	eef0 7a47 	vmov.f32	s15, s14
 800b392:	e7ce      	b.n	800b332 <__kernel_rem_pio2f+0x3ea>
 800b394:	ecb2 7a01 	vldmia	r2!, {s14}
 800b398:	3301      	adds	r3, #1
 800b39a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b39e:	e7d0      	b.n	800b342 <__kernel_rem_pio2f+0x3fa>
 800b3a0:	ed52 6a01 	vldr	s13, [r2, #-4]
 800b3a4:	ed52 7a02 	vldr	s15, [r2, #-8]
 800b3a8:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800b3ac:	3801      	subs	r0, #1
 800b3ae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b3b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b3b6:	ed62 7a01 	vstmdb	r2!, {s15}
 800b3ba:	ed02 7a01 	vstr	s14, [r2, #-4]
 800b3be:	e797      	b.n	800b2f0 <__kernel_rem_pio2f+0x3a8>
 800b3c0:	ed52 6a01 	vldr	s13, [r2, #-4]
 800b3c4:	ed52 7a02 	vldr	s15, [r2, #-8]
 800b3c8:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800b3cc:	3801      	subs	r0, #1
 800b3ce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b3d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b3d6:	ed62 7a01 	vstmdb	r2!, {s15}
 800b3da:	ed02 7a01 	vstr	s14, [r2, #-4]
 800b3de:	e78b      	b.n	800b2f8 <__kernel_rem_pio2f+0x3b0>
 800b3e0:	ed33 7a01 	vldmdb	r3!, {s14}
 800b3e4:	3c01      	subs	r4, #1
 800b3e6:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b3ea:	e789      	b.n	800b300 <__kernel_rem_pio2f+0x3b8>
 800b3ec:	eef1 6a66 	vneg.f32	s13, s13
 800b3f0:	eeb1 7a47 	vneg.f32	s14, s14
 800b3f4:	edcb 6a00 	vstr	s13, [fp]
 800b3f8:	ed8b 7a01 	vstr	s14, [fp, #4]
 800b3fc:	eef1 7a67 	vneg.f32	s15, s15
 800b400:	e78a      	b.n	800b318 <__kernel_rem_pio2f+0x3d0>
 800b402:	bf00      	nop

0800b404 <__kernel_sinf>:
 800b404:	ee10 3a10 	vmov	r3, s0
 800b408:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b40c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800b410:	da04      	bge.n	800b41c <__kernel_sinf+0x18>
 800b412:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800b416:	ee17 3a90 	vmov	r3, s15
 800b41a:	b35b      	cbz	r3, 800b474 <__kernel_sinf+0x70>
 800b41c:	ee20 7a00 	vmul.f32	s14, s0, s0
 800b420:	eddf 7a15 	vldr	s15, [pc, #84]	; 800b478 <__kernel_sinf+0x74>
 800b424:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800b47c <__kernel_sinf+0x78>
 800b428:	eea7 6a27 	vfma.f32	s12, s14, s15
 800b42c:	eddf 7a14 	vldr	s15, [pc, #80]	; 800b480 <__kernel_sinf+0x7c>
 800b430:	eee7 7a06 	vfma.f32	s15, s14, s12
 800b434:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800b484 <__kernel_sinf+0x80>
 800b438:	eea7 6a27 	vfma.f32	s12, s14, s15
 800b43c:	eddf 7a12 	vldr	s15, [pc, #72]	; 800b488 <__kernel_sinf+0x84>
 800b440:	ee60 6a07 	vmul.f32	s13, s0, s14
 800b444:	eee7 7a06 	vfma.f32	s15, s14, s12
 800b448:	b930      	cbnz	r0, 800b458 <__kernel_sinf+0x54>
 800b44a:	ed9f 6a10 	vldr	s12, [pc, #64]	; 800b48c <__kernel_sinf+0x88>
 800b44e:	eea7 6a27 	vfma.f32	s12, s14, s15
 800b452:	eea6 0a86 	vfma.f32	s0, s13, s12
 800b456:	4770      	bx	lr
 800b458:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800b45c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800b460:	eee0 7a86 	vfma.f32	s15, s1, s12
 800b464:	eed7 0a27 	vfnms.f32	s1, s14, s15
 800b468:	eddf 7a09 	vldr	s15, [pc, #36]	; 800b490 <__kernel_sinf+0x8c>
 800b46c:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800b470:	ee30 0a60 	vsub.f32	s0, s0, s1
 800b474:	4770      	bx	lr
 800b476:	bf00      	nop
 800b478:	2f2ec9d3 	.word	0x2f2ec9d3
 800b47c:	b2d72f34 	.word	0xb2d72f34
 800b480:	3638ef1b 	.word	0x3638ef1b
 800b484:	b9500d01 	.word	0xb9500d01
 800b488:	3c088889 	.word	0x3c088889
 800b48c:	be2aaaab 	.word	0xbe2aaaab
 800b490:	3e2aaaab 	.word	0x3e2aaaab

0800b494 <atanf>:
 800b494:	b538      	push	{r3, r4, r5, lr}
 800b496:	ee10 5a10 	vmov	r5, s0
 800b49a:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800b49e:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 800b4a2:	eef0 7a40 	vmov.f32	s15, s0
 800b4a6:	db10      	blt.n	800b4ca <atanf+0x36>
 800b4a8:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800b4ac:	dd04      	ble.n	800b4b8 <atanf+0x24>
 800b4ae:	ee70 7a00 	vadd.f32	s15, s0, s0
 800b4b2:	eeb0 0a67 	vmov.f32	s0, s15
 800b4b6:	bd38      	pop	{r3, r4, r5, pc}
 800b4b8:	eddf 7a4c 	vldr	s15, [pc, #304]	; 800b5ec <atanf+0x158>
 800b4bc:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 800b5f0 <atanf+0x15c>
 800b4c0:	2d00      	cmp	r5, #0
 800b4c2:	bfc8      	it	gt
 800b4c4:	eef0 7a47 	vmovgt.f32	s15, s14
 800b4c8:	e7f3      	b.n	800b4b2 <atanf+0x1e>
 800b4ca:	4b4a      	ldr	r3, [pc, #296]	; (800b5f4 <atanf+0x160>)
 800b4cc:	429c      	cmp	r4, r3
 800b4ce:	dc10      	bgt.n	800b4f2 <atanf+0x5e>
 800b4d0:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 800b4d4:	da0a      	bge.n	800b4ec <atanf+0x58>
 800b4d6:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800b5f8 <atanf+0x164>
 800b4da:	ee30 7a07 	vadd.f32	s14, s0, s14
 800b4de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b4e2:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800b4e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4ea:	dce2      	bgt.n	800b4b2 <atanf+0x1e>
 800b4ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b4f0:	e013      	b.n	800b51a <atanf+0x86>
 800b4f2:	f000 f8a1 	bl	800b638 <fabsf>
 800b4f6:	4b41      	ldr	r3, [pc, #260]	; (800b5fc <atanf+0x168>)
 800b4f8:	429c      	cmp	r4, r3
 800b4fa:	dc4d      	bgt.n	800b598 <atanf+0x104>
 800b4fc:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800b500:	429c      	cmp	r4, r3
 800b502:	dc3f      	bgt.n	800b584 <atanf+0xf0>
 800b504:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800b508:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800b50c:	eea0 7a27 	vfma.f32	s14, s0, s15
 800b510:	2300      	movs	r3, #0
 800b512:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b516:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800b51a:	1c5a      	adds	r2, r3, #1
 800b51c:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800b520:	eddf 6a37 	vldr	s13, [pc, #220]	; 800b600 <atanf+0x16c>
 800b524:	eddf 5a37 	vldr	s11, [pc, #220]	; 800b604 <atanf+0x170>
 800b528:	ed9f 5a37 	vldr	s10, [pc, #220]	; 800b608 <atanf+0x174>
 800b52c:	ee26 7a06 	vmul.f32	s14, s12, s12
 800b530:	eee7 5a26 	vfma.f32	s11, s14, s13
 800b534:	eddf 6a35 	vldr	s13, [pc, #212]	; 800b60c <atanf+0x178>
 800b538:	eee7 6a25 	vfma.f32	s13, s14, s11
 800b53c:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b610 <atanf+0x17c>
 800b540:	eee7 5a26 	vfma.f32	s11, s14, s13
 800b544:	eddf 6a33 	vldr	s13, [pc, #204]	; 800b614 <atanf+0x180>
 800b548:	eee7 6a25 	vfma.f32	s13, s14, s11
 800b54c:	eddf 5a32 	vldr	s11, [pc, #200]	; 800b618 <atanf+0x184>
 800b550:	eee7 5a26 	vfma.f32	s11, s14, s13
 800b554:	eddf 6a31 	vldr	s13, [pc, #196]	; 800b61c <atanf+0x188>
 800b558:	eea7 5a26 	vfma.f32	s10, s14, s13
 800b55c:	eddf 6a30 	vldr	s13, [pc, #192]	; 800b620 <atanf+0x18c>
 800b560:	eee7 6a05 	vfma.f32	s13, s14, s10
 800b564:	ed9f 5a2f 	vldr	s10, [pc, #188]	; 800b624 <atanf+0x190>
 800b568:	eea7 5a26 	vfma.f32	s10, s14, s13
 800b56c:	eddf 6a2e 	vldr	s13, [pc, #184]	; 800b628 <atanf+0x194>
 800b570:	eee7 6a05 	vfma.f32	s13, s14, s10
 800b574:	ee26 7a87 	vmul.f32	s14, s13, s14
 800b578:	ee05 7a86 	vmla.f32	s14, s11, s12
 800b57c:	d121      	bne.n	800b5c2 <atanf+0x12e>
 800b57e:	eee7 7ac7 	vfms.f32	s15, s15, s14
 800b582:	e796      	b.n	800b4b2 <atanf+0x1e>
 800b584:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800b588:	ee30 7a67 	vsub.f32	s14, s0, s15
 800b58c:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b590:	2301      	movs	r3, #1
 800b592:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800b596:	e7c0      	b.n	800b51a <atanf+0x86>
 800b598:	4b24      	ldr	r3, [pc, #144]	; (800b62c <atanf+0x198>)
 800b59a:	429c      	cmp	r4, r3
 800b59c:	dc0b      	bgt.n	800b5b6 <atanf+0x122>
 800b59e:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800b5a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b5a6:	eea0 7a27 	vfma.f32	s14, s0, s15
 800b5aa:	2302      	movs	r3, #2
 800b5ac:	ee70 6a67 	vsub.f32	s13, s0, s15
 800b5b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b5b4:	e7b1      	b.n	800b51a <atanf+0x86>
 800b5b6:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800b5ba:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800b5be:	2303      	movs	r3, #3
 800b5c0:	e7ab      	b.n	800b51a <atanf+0x86>
 800b5c2:	4a1b      	ldr	r2, [pc, #108]	; (800b630 <atanf+0x19c>)
 800b5c4:	491b      	ldr	r1, [pc, #108]	; (800b634 <atanf+0x1a0>)
 800b5c6:	009b      	lsls	r3, r3, #2
 800b5c8:	441a      	add	r2, r3
 800b5ca:	440b      	add	r3, r1
 800b5cc:	edd3 6a00 	vldr	s13, [r3]
 800b5d0:	eed7 6a87 	vfnms.f32	s13, s15, s14
 800b5d4:	2d00      	cmp	r5, #0
 800b5d6:	ed92 7a00 	vldr	s14, [r2]
 800b5da:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800b5de:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b5e2:	bfb8      	it	lt
 800b5e4:	eef1 7a67 	vneglt.f32	s15, s15
 800b5e8:	e763      	b.n	800b4b2 <atanf+0x1e>
 800b5ea:	bf00      	nop
 800b5ec:	bfc90fdb 	.word	0xbfc90fdb
 800b5f0:	3fc90fdb 	.word	0x3fc90fdb
 800b5f4:	3edfffff 	.word	0x3edfffff
 800b5f8:	7149f2ca 	.word	0x7149f2ca
 800b5fc:	3f97ffff 	.word	0x3f97ffff
 800b600:	3c8569d7 	.word	0x3c8569d7
 800b604:	3d4bda59 	.word	0x3d4bda59
 800b608:	bd6ef16b 	.word	0xbd6ef16b
 800b60c:	3d886b35 	.word	0x3d886b35
 800b610:	3dba2e6e 	.word	0x3dba2e6e
 800b614:	3e124925 	.word	0x3e124925
 800b618:	3eaaaaab 	.word	0x3eaaaaab
 800b61c:	bd15a221 	.word	0xbd15a221
 800b620:	bd9d8795 	.word	0xbd9d8795
 800b624:	bde38e38 	.word	0xbde38e38
 800b628:	be4ccccd 	.word	0xbe4ccccd
 800b62c:	401bffff 	.word	0x401bffff
 800b630:	0800d064 	.word	0x0800d064
 800b634:	0800d074 	.word	0x0800d074

0800b638 <fabsf>:
 800b638:	ee10 3a10 	vmov	r3, s0
 800b63c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b640:	ee00 3a10 	vmov	s0, r3
 800b644:	4770      	bx	lr
	...

0800b648 <floorf>:
 800b648:	ee10 3a10 	vmov	r3, s0
 800b64c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b650:	0dca      	lsrs	r2, r1, #23
 800b652:	3a7f      	subs	r2, #127	; 0x7f
 800b654:	2a16      	cmp	r2, #22
 800b656:	dc2a      	bgt.n	800b6ae <floorf+0x66>
 800b658:	2a00      	cmp	r2, #0
 800b65a:	da11      	bge.n	800b680 <floorf+0x38>
 800b65c:	eddf 7a18 	vldr	s15, [pc, #96]	; 800b6c0 <floorf+0x78>
 800b660:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b664:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b668:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b66c:	dd05      	ble.n	800b67a <floorf+0x32>
 800b66e:	2b00      	cmp	r3, #0
 800b670:	da23      	bge.n	800b6ba <floorf+0x72>
 800b672:	4a14      	ldr	r2, [pc, #80]	; (800b6c4 <floorf+0x7c>)
 800b674:	2900      	cmp	r1, #0
 800b676:	bf18      	it	ne
 800b678:	4613      	movne	r3, r2
 800b67a:	ee00 3a10 	vmov	s0, r3
 800b67e:	4770      	bx	lr
 800b680:	4911      	ldr	r1, [pc, #68]	; (800b6c8 <floorf+0x80>)
 800b682:	4111      	asrs	r1, r2
 800b684:	420b      	tst	r3, r1
 800b686:	d0fa      	beq.n	800b67e <floorf+0x36>
 800b688:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800b6c0 <floorf+0x78>
 800b68c:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b690:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b694:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b698:	ddef      	ble.n	800b67a <floorf+0x32>
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	bfbe      	ittt	lt
 800b69e:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800b6a2:	fa40 f202 	asrlt.w	r2, r0, r2
 800b6a6:	189b      	addlt	r3, r3, r2
 800b6a8:	ea23 0301 	bic.w	r3, r3, r1
 800b6ac:	e7e5      	b.n	800b67a <floorf+0x32>
 800b6ae:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800b6b2:	d3e4      	bcc.n	800b67e <floorf+0x36>
 800b6b4:	ee30 0a00 	vadd.f32	s0, s0, s0
 800b6b8:	4770      	bx	lr
 800b6ba:	2300      	movs	r3, #0
 800b6bc:	e7dd      	b.n	800b67a <floorf+0x32>
 800b6be:	bf00      	nop
 800b6c0:	7149f2ca 	.word	0x7149f2ca
 800b6c4:	bf800000 	.word	0xbf800000
 800b6c8:	007fffff 	.word	0x007fffff

0800b6cc <scalbnf>:
 800b6cc:	b508      	push	{r3, lr}
 800b6ce:	ee10 2a10 	vmov	r2, s0
 800b6d2:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 800b6d6:	ed2d 8b02 	vpush	{d8}
 800b6da:	eef0 0a40 	vmov.f32	s1, s0
 800b6de:	d004      	beq.n	800b6ea <scalbnf+0x1e>
 800b6e0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800b6e4:	d306      	bcc.n	800b6f4 <scalbnf+0x28>
 800b6e6:	ee70 0a00 	vadd.f32	s1, s0, s0
 800b6ea:	ecbd 8b02 	vpop	{d8}
 800b6ee:	eeb0 0a60 	vmov.f32	s0, s1
 800b6f2:	bd08      	pop	{r3, pc}
 800b6f4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b6f8:	d21c      	bcs.n	800b734 <scalbnf+0x68>
 800b6fa:	4b1f      	ldr	r3, [pc, #124]	; (800b778 <scalbnf+0xac>)
 800b6fc:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800b77c <scalbnf+0xb0>
 800b700:	4298      	cmp	r0, r3
 800b702:	ee60 0a27 	vmul.f32	s1, s0, s15
 800b706:	db10      	blt.n	800b72a <scalbnf+0x5e>
 800b708:	ee10 2a90 	vmov	r2, s1
 800b70c:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 800b710:	3b19      	subs	r3, #25
 800b712:	4403      	add	r3, r0
 800b714:	2bfe      	cmp	r3, #254	; 0xfe
 800b716:	dd0f      	ble.n	800b738 <scalbnf+0x6c>
 800b718:	ed9f 8a19 	vldr	s16, [pc, #100]	; 800b780 <scalbnf+0xb4>
 800b71c:	eeb0 0a48 	vmov.f32	s0, s16
 800b720:	f000 f834 	bl	800b78c <copysignf>
 800b724:	ee60 0a08 	vmul.f32	s1, s0, s16
 800b728:	e7df      	b.n	800b6ea <scalbnf+0x1e>
 800b72a:	eddf 7a16 	vldr	s15, [pc, #88]	; 800b784 <scalbnf+0xb8>
 800b72e:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800b732:	e7da      	b.n	800b6ea <scalbnf+0x1e>
 800b734:	0ddb      	lsrs	r3, r3, #23
 800b736:	e7ec      	b.n	800b712 <scalbnf+0x46>
 800b738:	2b00      	cmp	r3, #0
 800b73a:	dd06      	ble.n	800b74a <scalbnf+0x7e>
 800b73c:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800b740:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800b744:	ee00 3a90 	vmov	s1, r3
 800b748:	e7cf      	b.n	800b6ea <scalbnf+0x1e>
 800b74a:	f113 0f16 	cmn.w	r3, #22
 800b74e:	da06      	bge.n	800b75e <scalbnf+0x92>
 800b750:	f24c 3350 	movw	r3, #50000	; 0xc350
 800b754:	4298      	cmp	r0, r3
 800b756:	dcdf      	bgt.n	800b718 <scalbnf+0x4c>
 800b758:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 800b784 <scalbnf+0xb8>
 800b75c:	e7de      	b.n	800b71c <scalbnf+0x50>
 800b75e:	3319      	adds	r3, #25
 800b760:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800b764:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800b768:	eddf 7a07 	vldr	s15, [pc, #28]	; 800b788 <scalbnf+0xbc>
 800b76c:	ee07 3a10 	vmov	s14, r3
 800b770:	ee67 0a27 	vmul.f32	s1, s14, s15
 800b774:	e7b9      	b.n	800b6ea <scalbnf+0x1e>
 800b776:	bf00      	nop
 800b778:	ffff3cb0 	.word	0xffff3cb0
 800b77c:	4c000000 	.word	0x4c000000
 800b780:	7149f2ca 	.word	0x7149f2ca
 800b784:	0da24260 	.word	0x0da24260
 800b788:	33000000 	.word	0x33000000

0800b78c <copysignf>:
 800b78c:	ee10 3a10 	vmov	r3, s0
 800b790:	ee10 2a90 	vmov	r2, s1
 800b794:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b798:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800b79c:	4313      	orrs	r3, r2
 800b79e:	ee00 3a10 	vmov	s0, r3
 800b7a2:	4770      	bx	lr

0800b7a4 <abort>:
 800b7a4:	b508      	push	{r3, lr}
 800b7a6:	2006      	movs	r0, #6
 800b7a8:	f000 fc24 	bl	800bff4 <raise>
 800b7ac:	2001      	movs	r0, #1
 800b7ae:	f000 fe01 	bl	800c3b4 <_exit>

0800b7b2 <__cxa_atexit>:
 800b7b2:	4613      	mov	r3, r2
 800b7b4:	460a      	mov	r2, r1
 800b7b6:	4601      	mov	r1, r0
 800b7b8:	2002      	movs	r0, #2
 800b7ba:	f000 bc37 	b.w	800c02c <__register_exitproc>
	...

0800b7c0 <__libc_init_array>:
 800b7c0:	b570      	push	{r4, r5, r6, lr}
 800b7c2:	4e0d      	ldr	r6, [pc, #52]	; (800b7f8 <__libc_init_array+0x38>)
 800b7c4:	4c0d      	ldr	r4, [pc, #52]	; (800b7fc <__libc_init_array+0x3c>)
 800b7c6:	1ba4      	subs	r4, r4, r6
 800b7c8:	10a4      	asrs	r4, r4, #2
 800b7ca:	2500      	movs	r5, #0
 800b7cc:	42a5      	cmp	r5, r4
 800b7ce:	d109      	bne.n	800b7e4 <__libc_init_array+0x24>
 800b7d0:	4e0b      	ldr	r6, [pc, #44]	; (800b800 <__libc_init_array+0x40>)
 800b7d2:	4c0c      	ldr	r4, [pc, #48]	; (800b804 <__libc_init_array+0x44>)
 800b7d4:	f000 fdf0 	bl	800c3b8 <_init>
 800b7d8:	1ba4      	subs	r4, r4, r6
 800b7da:	10a4      	asrs	r4, r4, #2
 800b7dc:	2500      	movs	r5, #0
 800b7de:	42a5      	cmp	r5, r4
 800b7e0:	d105      	bne.n	800b7ee <__libc_init_array+0x2e>
 800b7e2:	bd70      	pop	{r4, r5, r6, pc}
 800b7e4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b7e8:	4798      	blx	r3
 800b7ea:	3501      	adds	r5, #1
 800b7ec:	e7ee      	b.n	800b7cc <__libc_init_array+0xc>
 800b7ee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b7f2:	4798      	blx	r3
 800b7f4:	3501      	adds	r5, #1
 800b7f6:	e7f2      	b.n	800b7de <__libc_init_array+0x1e>
 800b7f8:	0800d90c 	.word	0x0800d90c
 800b7fc:	0800d90c 	.word	0x0800d90c
 800b800:	0800d90c 	.word	0x0800d90c
 800b804:	0800d914 	.word	0x0800d914

0800b808 <malloc>:
 800b808:	4b02      	ldr	r3, [pc, #8]	; (800b814 <malloc+0xc>)
 800b80a:	4601      	mov	r1, r0
 800b80c:	6818      	ldr	r0, [r3, #0]
 800b80e:	f000 b80b 	b.w	800b828 <_malloc_r>
 800b812:	bf00      	nop
 800b814:	20000010 	.word	0x20000010

0800b818 <free>:
 800b818:	4b02      	ldr	r3, [pc, #8]	; (800b824 <free+0xc>)
 800b81a:	4601      	mov	r1, r0
 800b81c:	6818      	ldr	r0, [r3, #0]
 800b81e:	f000 bcd1 	b.w	800c1c4 <_free_r>
 800b822:	bf00      	nop
 800b824:	20000010 	.word	0x20000010

0800b828 <_malloc_r>:
 800b828:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b82c:	f101 040b 	add.w	r4, r1, #11
 800b830:	2c16      	cmp	r4, #22
 800b832:	4681      	mov	r9, r0
 800b834:	d907      	bls.n	800b846 <_malloc_r+0x1e>
 800b836:	f034 0407 	bics.w	r4, r4, #7
 800b83a:	d505      	bpl.n	800b848 <_malloc_r+0x20>
 800b83c:	230c      	movs	r3, #12
 800b83e:	f8c9 3000 	str.w	r3, [r9]
 800b842:	2600      	movs	r6, #0
 800b844:	e131      	b.n	800baaa <_malloc_r+0x282>
 800b846:	2410      	movs	r4, #16
 800b848:	428c      	cmp	r4, r1
 800b84a:	d3f7      	bcc.n	800b83c <_malloc_r+0x14>
 800b84c:	4648      	mov	r0, r9
 800b84e:	f000 fa05 	bl	800bc5c <__malloc_lock>
 800b852:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 800b856:	4d9c      	ldr	r5, [pc, #624]	; (800bac8 <_malloc_r+0x2a0>)
 800b858:	d236      	bcs.n	800b8c8 <_malloc_r+0xa0>
 800b85a:	f104 0208 	add.w	r2, r4, #8
 800b85e:	442a      	add	r2, r5
 800b860:	f1a2 0108 	sub.w	r1, r2, #8
 800b864:	6856      	ldr	r6, [r2, #4]
 800b866:	428e      	cmp	r6, r1
 800b868:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 800b86c:	d102      	bne.n	800b874 <_malloc_r+0x4c>
 800b86e:	68d6      	ldr	r6, [r2, #12]
 800b870:	42b2      	cmp	r2, r6
 800b872:	d010      	beq.n	800b896 <_malloc_r+0x6e>
 800b874:	6873      	ldr	r3, [r6, #4]
 800b876:	68f2      	ldr	r2, [r6, #12]
 800b878:	68b1      	ldr	r1, [r6, #8]
 800b87a:	f023 0303 	bic.w	r3, r3, #3
 800b87e:	60ca      	str	r2, [r1, #12]
 800b880:	4433      	add	r3, r6
 800b882:	6091      	str	r1, [r2, #8]
 800b884:	685a      	ldr	r2, [r3, #4]
 800b886:	f042 0201 	orr.w	r2, r2, #1
 800b88a:	605a      	str	r2, [r3, #4]
 800b88c:	4648      	mov	r0, r9
 800b88e:	f000 f9eb 	bl	800bc68 <__malloc_unlock>
 800b892:	3608      	adds	r6, #8
 800b894:	e109      	b.n	800baaa <_malloc_r+0x282>
 800b896:	3302      	adds	r3, #2
 800b898:	4a8c      	ldr	r2, [pc, #560]	; (800bacc <_malloc_r+0x2a4>)
 800b89a:	692e      	ldr	r6, [r5, #16]
 800b89c:	4296      	cmp	r6, r2
 800b89e:	4611      	mov	r1, r2
 800b8a0:	d06d      	beq.n	800b97e <_malloc_r+0x156>
 800b8a2:	6870      	ldr	r0, [r6, #4]
 800b8a4:	f020 0003 	bic.w	r0, r0, #3
 800b8a8:	1b07      	subs	r7, r0, r4
 800b8aa:	2f0f      	cmp	r7, #15
 800b8ac:	dd47      	ble.n	800b93e <_malloc_r+0x116>
 800b8ae:	1933      	adds	r3, r6, r4
 800b8b0:	f044 0401 	orr.w	r4, r4, #1
 800b8b4:	6074      	str	r4, [r6, #4]
 800b8b6:	616b      	str	r3, [r5, #20]
 800b8b8:	612b      	str	r3, [r5, #16]
 800b8ba:	60da      	str	r2, [r3, #12]
 800b8bc:	609a      	str	r2, [r3, #8]
 800b8be:	f047 0201 	orr.w	r2, r7, #1
 800b8c2:	605a      	str	r2, [r3, #4]
 800b8c4:	5037      	str	r7, [r6, r0]
 800b8c6:	e7e1      	b.n	800b88c <_malloc_r+0x64>
 800b8c8:	0a63      	lsrs	r3, r4, #9
 800b8ca:	d02a      	beq.n	800b922 <_malloc_r+0xfa>
 800b8cc:	2b04      	cmp	r3, #4
 800b8ce:	d812      	bhi.n	800b8f6 <_malloc_r+0xce>
 800b8d0:	09a3      	lsrs	r3, r4, #6
 800b8d2:	3338      	adds	r3, #56	; 0x38
 800b8d4:	1c5a      	adds	r2, r3, #1
 800b8d6:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 800b8da:	f1a2 0008 	sub.w	r0, r2, #8
 800b8de:	6856      	ldr	r6, [r2, #4]
 800b8e0:	4286      	cmp	r6, r0
 800b8e2:	d006      	beq.n	800b8f2 <_malloc_r+0xca>
 800b8e4:	6872      	ldr	r2, [r6, #4]
 800b8e6:	f022 0203 	bic.w	r2, r2, #3
 800b8ea:	1b11      	subs	r1, r2, r4
 800b8ec:	290f      	cmp	r1, #15
 800b8ee:	dd1c      	ble.n	800b92a <_malloc_r+0x102>
 800b8f0:	3b01      	subs	r3, #1
 800b8f2:	3301      	adds	r3, #1
 800b8f4:	e7d0      	b.n	800b898 <_malloc_r+0x70>
 800b8f6:	2b14      	cmp	r3, #20
 800b8f8:	d801      	bhi.n	800b8fe <_malloc_r+0xd6>
 800b8fa:	335b      	adds	r3, #91	; 0x5b
 800b8fc:	e7ea      	b.n	800b8d4 <_malloc_r+0xac>
 800b8fe:	2b54      	cmp	r3, #84	; 0x54
 800b900:	d802      	bhi.n	800b908 <_malloc_r+0xe0>
 800b902:	0b23      	lsrs	r3, r4, #12
 800b904:	336e      	adds	r3, #110	; 0x6e
 800b906:	e7e5      	b.n	800b8d4 <_malloc_r+0xac>
 800b908:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 800b90c:	d802      	bhi.n	800b914 <_malloc_r+0xec>
 800b90e:	0be3      	lsrs	r3, r4, #15
 800b910:	3377      	adds	r3, #119	; 0x77
 800b912:	e7df      	b.n	800b8d4 <_malloc_r+0xac>
 800b914:	f240 5254 	movw	r2, #1364	; 0x554
 800b918:	4293      	cmp	r3, r2
 800b91a:	d804      	bhi.n	800b926 <_malloc_r+0xfe>
 800b91c:	0ca3      	lsrs	r3, r4, #18
 800b91e:	337c      	adds	r3, #124	; 0x7c
 800b920:	e7d8      	b.n	800b8d4 <_malloc_r+0xac>
 800b922:	233f      	movs	r3, #63	; 0x3f
 800b924:	e7d6      	b.n	800b8d4 <_malloc_r+0xac>
 800b926:	237e      	movs	r3, #126	; 0x7e
 800b928:	e7d4      	b.n	800b8d4 <_malloc_r+0xac>
 800b92a:	2900      	cmp	r1, #0
 800b92c:	68f1      	ldr	r1, [r6, #12]
 800b92e:	db04      	blt.n	800b93a <_malloc_r+0x112>
 800b930:	68b3      	ldr	r3, [r6, #8]
 800b932:	60d9      	str	r1, [r3, #12]
 800b934:	608b      	str	r3, [r1, #8]
 800b936:	18b3      	adds	r3, r6, r2
 800b938:	e7a4      	b.n	800b884 <_malloc_r+0x5c>
 800b93a:	460e      	mov	r6, r1
 800b93c:	e7d0      	b.n	800b8e0 <_malloc_r+0xb8>
 800b93e:	2f00      	cmp	r7, #0
 800b940:	616a      	str	r2, [r5, #20]
 800b942:	612a      	str	r2, [r5, #16]
 800b944:	db05      	blt.n	800b952 <_malloc_r+0x12a>
 800b946:	4430      	add	r0, r6
 800b948:	6843      	ldr	r3, [r0, #4]
 800b94a:	f043 0301 	orr.w	r3, r3, #1
 800b94e:	6043      	str	r3, [r0, #4]
 800b950:	e79c      	b.n	800b88c <_malloc_r+0x64>
 800b952:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800b956:	d244      	bcs.n	800b9e2 <_malloc_r+0x1ba>
 800b958:	08c0      	lsrs	r0, r0, #3
 800b95a:	1087      	asrs	r7, r0, #2
 800b95c:	2201      	movs	r2, #1
 800b95e:	fa02 f707 	lsl.w	r7, r2, r7
 800b962:	686a      	ldr	r2, [r5, #4]
 800b964:	3001      	adds	r0, #1
 800b966:	433a      	orrs	r2, r7
 800b968:	606a      	str	r2, [r5, #4]
 800b96a:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 800b96e:	f855 7030 	ldr.w	r7, [r5, r0, lsl #3]
 800b972:	60b7      	str	r7, [r6, #8]
 800b974:	3a08      	subs	r2, #8
 800b976:	60f2      	str	r2, [r6, #12]
 800b978:	f845 6030 	str.w	r6, [r5, r0, lsl #3]
 800b97c:	60fe      	str	r6, [r7, #12]
 800b97e:	2001      	movs	r0, #1
 800b980:	109a      	asrs	r2, r3, #2
 800b982:	fa00 f202 	lsl.w	r2, r0, r2
 800b986:	6868      	ldr	r0, [r5, #4]
 800b988:	4282      	cmp	r2, r0
 800b98a:	f200 80a1 	bhi.w	800bad0 <_malloc_r+0x2a8>
 800b98e:	4202      	tst	r2, r0
 800b990:	d106      	bne.n	800b9a0 <_malloc_r+0x178>
 800b992:	f023 0303 	bic.w	r3, r3, #3
 800b996:	0052      	lsls	r2, r2, #1
 800b998:	4202      	tst	r2, r0
 800b99a:	f103 0304 	add.w	r3, r3, #4
 800b99e:	d0fa      	beq.n	800b996 <_malloc_r+0x16e>
 800b9a0:	eb05 0cc3 	add.w	ip, r5, r3, lsl #3
 800b9a4:	46e0      	mov	r8, ip
 800b9a6:	469e      	mov	lr, r3
 800b9a8:	f8d8 600c 	ldr.w	r6, [r8, #12]
 800b9ac:	4546      	cmp	r6, r8
 800b9ae:	d153      	bne.n	800ba58 <_malloc_r+0x230>
 800b9b0:	f10e 0e01 	add.w	lr, lr, #1
 800b9b4:	f01e 0f03 	tst.w	lr, #3
 800b9b8:	f108 0808 	add.w	r8, r8, #8
 800b9bc:	d1f4      	bne.n	800b9a8 <_malloc_r+0x180>
 800b9be:	0798      	lsls	r0, r3, #30
 800b9c0:	d179      	bne.n	800bab6 <_malloc_r+0x28e>
 800b9c2:	686b      	ldr	r3, [r5, #4]
 800b9c4:	ea23 0302 	bic.w	r3, r3, r2
 800b9c8:	606b      	str	r3, [r5, #4]
 800b9ca:	6868      	ldr	r0, [r5, #4]
 800b9cc:	0052      	lsls	r2, r2, #1
 800b9ce:	4282      	cmp	r2, r0
 800b9d0:	d87e      	bhi.n	800bad0 <_malloc_r+0x2a8>
 800b9d2:	2a00      	cmp	r2, #0
 800b9d4:	d07c      	beq.n	800bad0 <_malloc_r+0x2a8>
 800b9d6:	4673      	mov	r3, lr
 800b9d8:	4202      	tst	r2, r0
 800b9da:	d1e1      	bne.n	800b9a0 <_malloc_r+0x178>
 800b9dc:	3304      	adds	r3, #4
 800b9de:	0052      	lsls	r2, r2, #1
 800b9e0:	e7fa      	b.n	800b9d8 <_malloc_r+0x1b0>
 800b9e2:	0a42      	lsrs	r2, r0, #9
 800b9e4:	2a04      	cmp	r2, #4
 800b9e6:	d815      	bhi.n	800ba14 <_malloc_r+0x1ec>
 800b9e8:	0982      	lsrs	r2, r0, #6
 800b9ea:	3238      	adds	r2, #56	; 0x38
 800b9ec:	1c57      	adds	r7, r2, #1
 800b9ee:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 800b9f2:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 800b9f6:	45be      	cmp	lr, r7
 800b9f8:	d126      	bne.n	800ba48 <_malloc_r+0x220>
 800b9fa:	2001      	movs	r0, #1
 800b9fc:	1092      	asrs	r2, r2, #2
 800b9fe:	fa00 f202 	lsl.w	r2, r0, r2
 800ba02:	6868      	ldr	r0, [r5, #4]
 800ba04:	4310      	orrs	r0, r2
 800ba06:	6068      	str	r0, [r5, #4]
 800ba08:	f8c6 e00c 	str.w	lr, [r6, #12]
 800ba0c:	60b7      	str	r7, [r6, #8]
 800ba0e:	f8ce 6008 	str.w	r6, [lr, #8]
 800ba12:	e7b3      	b.n	800b97c <_malloc_r+0x154>
 800ba14:	2a14      	cmp	r2, #20
 800ba16:	d801      	bhi.n	800ba1c <_malloc_r+0x1f4>
 800ba18:	325b      	adds	r2, #91	; 0x5b
 800ba1a:	e7e7      	b.n	800b9ec <_malloc_r+0x1c4>
 800ba1c:	2a54      	cmp	r2, #84	; 0x54
 800ba1e:	d802      	bhi.n	800ba26 <_malloc_r+0x1fe>
 800ba20:	0b02      	lsrs	r2, r0, #12
 800ba22:	326e      	adds	r2, #110	; 0x6e
 800ba24:	e7e2      	b.n	800b9ec <_malloc_r+0x1c4>
 800ba26:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800ba2a:	d802      	bhi.n	800ba32 <_malloc_r+0x20a>
 800ba2c:	0bc2      	lsrs	r2, r0, #15
 800ba2e:	3277      	adds	r2, #119	; 0x77
 800ba30:	e7dc      	b.n	800b9ec <_malloc_r+0x1c4>
 800ba32:	f240 5754 	movw	r7, #1364	; 0x554
 800ba36:	42ba      	cmp	r2, r7
 800ba38:	bf9a      	itte	ls
 800ba3a:	0c82      	lsrls	r2, r0, #18
 800ba3c:	327c      	addls	r2, #124	; 0x7c
 800ba3e:	227e      	movhi	r2, #126	; 0x7e
 800ba40:	e7d4      	b.n	800b9ec <_malloc_r+0x1c4>
 800ba42:	68bf      	ldr	r7, [r7, #8]
 800ba44:	45be      	cmp	lr, r7
 800ba46:	d004      	beq.n	800ba52 <_malloc_r+0x22a>
 800ba48:	687a      	ldr	r2, [r7, #4]
 800ba4a:	f022 0203 	bic.w	r2, r2, #3
 800ba4e:	4290      	cmp	r0, r2
 800ba50:	d3f7      	bcc.n	800ba42 <_malloc_r+0x21a>
 800ba52:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 800ba56:	e7d7      	b.n	800ba08 <_malloc_r+0x1e0>
 800ba58:	6870      	ldr	r0, [r6, #4]
 800ba5a:	68f7      	ldr	r7, [r6, #12]
 800ba5c:	f020 0003 	bic.w	r0, r0, #3
 800ba60:	eba0 0a04 	sub.w	sl, r0, r4
 800ba64:	f1ba 0f0f 	cmp.w	sl, #15
 800ba68:	dd10      	ble.n	800ba8c <_malloc_r+0x264>
 800ba6a:	68b2      	ldr	r2, [r6, #8]
 800ba6c:	1933      	adds	r3, r6, r4
 800ba6e:	f044 0401 	orr.w	r4, r4, #1
 800ba72:	6074      	str	r4, [r6, #4]
 800ba74:	60d7      	str	r7, [r2, #12]
 800ba76:	60ba      	str	r2, [r7, #8]
 800ba78:	f04a 0201 	orr.w	r2, sl, #1
 800ba7c:	616b      	str	r3, [r5, #20]
 800ba7e:	612b      	str	r3, [r5, #16]
 800ba80:	60d9      	str	r1, [r3, #12]
 800ba82:	6099      	str	r1, [r3, #8]
 800ba84:	605a      	str	r2, [r3, #4]
 800ba86:	f846 a000 	str.w	sl, [r6, r0]
 800ba8a:	e6ff      	b.n	800b88c <_malloc_r+0x64>
 800ba8c:	f1ba 0f00 	cmp.w	sl, #0
 800ba90:	db0f      	blt.n	800bab2 <_malloc_r+0x28a>
 800ba92:	4430      	add	r0, r6
 800ba94:	6843      	ldr	r3, [r0, #4]
 800ba96:	f043 0301 	orr.w	r3, r3, #1
 800ba9a:	6043      	str	r3, [r0, #4]
 800ba9c:	f856 3f08 	ldr.w	r3, [r6, #8]!
 800baa0:	4648      	mov	r0, r9
 800baa2:	60df      	str	r7, [r3, #12]
 800baa4:	60bb      	str	r3, [r7, #8]
 800baa6:	f000 f8df 	bl	800bc68 <__malloc_unlock>
 800baaa:	4630      	mov	r0, r6
 800baac:	b003      	add	sp, #12
 800baae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bab2:	463e      	mov	r6, r7
 800bab4:	e77a      	b.n	800b9ac <_malloc_r+0x184>
 800bab6:	f85c 0908 	ldr.w	r0, [ip], #-8
 800baba:	4584      	cmp	ip, r0
 800babc:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800bac0:	f43f af7d 	beq.w	800b9be <_malloc_r+0x196>
 800bac4:	e781      	b.n	800b9ca <_malloc_r+0x1a2>
 800bac6:	bf00      	nop
 800bac8:	20000104 	.word	0x20000104
 800bacc:	2000010c 	.word	0x2000010c
 800bad0:	f8d5 b008 	ldr.w	fp, [r5, #8]
 800bad4:	f8db 6004 	ldr.w	r6, [fp, #4]
 800bad8:	f026 0603 	bic.w	r6, r6, #3
 800badc:	42b4      	cmp	r4, r6
 800bade:	d803      	bhi.n	800bae8 <_malloc_r+0x2c0>
 800bae0:	1b33      	subs	r3, r6, r4
 800bae2:	2b0f      	cmp	r3, #15
 800bae4:	f300 8096 	bgt.w	800bc14 <_malloc_r+0x3ec>
 800bae8:	4a4f      	ldr	r2, [pc, #316]	; (800bc28 <_malloc_r+0x400>)
 800baea:	6817      	ldr	r7, [r2, #0]
 800baec:	4a4f      	ldr	r2, [pc, #316]	; (800bc2c <_malloc_r+0x404>)
 800baee:	6811      	ldr	r1, [r2, #0]
 800baf0:	3710      	adds	r7, #16
 800baf2:	3101      	adds	r1, #1
 800baf4:	eb0b 0306 	add.w	r3, fp, r6
 800baf8:	4427      	add	r7, r4
 800bafa:	d005      	beq.n	800bb08 <_malloc_r+0x2e0>
 800bafc:	494c      	ldr	r1, [pc, #304]	; (800bc30 <_malloc_r+0x408>)
 800bafe:	3901      	subs	r1, #1
 800bb00:	440f      	add	r7, r1
 800bb02:	3101      	adds	r1, #1
 800bb04:	4249      	negs	r1, r1
 800bb06:	400f      	ands	r7, r1
 800bb08:	4639      	mov	r1, r7
 800bb0a:	4648      	mov	r0, r9
 800bb0c:	9201      	str	r2, [sp, #4]
 800bb0e:	9300      	str	r3, [sp, #0]
 800bb10:	f000 fa38 	bl	800bf84 <_sbrk_r>
 800bb14:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800bb18:	4680      	mov	r8, r0
 800bb1a:	d056      	beq.n	800bbca <_malloc_r+0x3a2>
 800bb1c:	9b00      	ldr	r3, [sp, #0]
 800bb1e:	9a01      	ldr	r2, [sp, #4]
 800bb20:	4283      	cmp	r3, r0
 800bb22:	d901      	bls.n	800bb28 <_malloc_r+0x300>
 800bb24:	45ab      	cmp	fp, r5
 800bb26:	d150      	bne.n	800bbca <_malloc_r+0x3a2>
 800bb28:	4842      	ldr	r0, [pc, #264]	; (800bc34 <_malloc_r+0x40c>)
 800bb2a:	6801      	ldr	r1, [r0, #0]
 800bb2c:	4543      	cmp	r3, r8
 800bb2e:	eb07 0e01 	add.w	lr, r7, r1
 800bb32:	f8c0 e000 	str.w	lr, [r0]
 800bb36:	4940      	ldr	r1, [pc, #256]	; (800bc38 <_malloc_r+0x410>)
 800bb38:	4682      	mov	sl, r0
 800bb3a:	d113      	bne.n	800bb64 <_malloc_r+0x33c>
 800bb3c:	420b      	tst	r3, r1
 800bb3e:	d111      	bne.n	800bb64 <_malloc_r+0x33c>
 800bb40:	68ab      	ldr	r3, [r5, #8]
 800bb42:	443e      	add	r6, r7
 800bb44:	f046 0601 	orr.w	r6, r6, #1
 800bb48:	605e      	str	r6, [r3, #4]
 800bb4a:	4a3c      	ldr	r2, [pc, #240]	; (800bc3c <_malloc_r+0x414>)
 800bb4c:	f8da 3000 	ldr.w	r3, [sl]
 800bb50:	6811      	ldr	r1, [r2, #0]
 800bb52:	428b      	cmp	r3, r1
 800bb54:	bf88      	it	hi
 800bb56:	6013      	strhi	r3, [r2, #0]
 800bb58:	4a39      	ldr	r2, [pc, #228]	; (800bc40 <_malloc_r+0x418>)
 800bb5a:	6811      	ldr	r1, [r2, #0]
 800bb5c:	428b      	cmp	r3, r1
 800bb5e:	bf88      	it	hi
 800bb60:	6013      	strhi	r3, [r2, #0]
 800bb62:	e032      	b.n	800bbca <_malloc_r+0x3a2>
 800bb64:	6810      	ldr	r0, [r2, #0]
 800bb66:	3001      	adds	r0, #1
 800bb68:	bf1b      	ittet	ne
 800bb6a:	eba8 0303 	subne.w	r3, r8, r3
 800bb6e:	4473      	addne	r3, lr
 800bb70:	f8c2 8000 	streq.w	r8, [r2]
 800bb74:	f8ca 3000 	strne.w	r3, [sl]
 800bb78:	f018 0007 	ands.w	r0, r8, #7
 800bb7c:	bf1c      	itt	ne
 800bb7e:	f1c0 0008 	rsbne	r0, r0, #8
 800bb82:	4480      	addne	r8, r0
 800bb84:	4b2a      	ldr	r3, [pc, #168]	; (800bc30 <_malloc_r+0x408>)
 800bb86:	4447      	add	r7, r8
 800bb88:	4418      	add	r0, r3
 800bb8a:	400f      	ands	r7, r1
 800bb8c:	1bc7      	subs	r7, r0, r7
 800bb8e:	4639      	mov	r1, r7
 800bb90:	4648      	mov	r0, r9
 800bb92:	f000 f9f7 	bl	800bf84 <_sbrk_r>
 800bb96:	1c43      	adds	r3, r0, #1
 800bb98:	bf08      	it	eq
 800bb9a:	4640      	moveq	r0, r8
 800bb9c:	f8da 3000 	ldr.w	r3, [sl]
 800bba0:	f8c5 8008 	str.w	r8, [r5, #8]
 800bba4:	bf08      	it	eq
 800bba6:	2700      	moveq	r7, #0
 800bba8:	eba0 0008 	sub.w	r0, r0, r8
 800bbac:	443b      	add	r3, r7
 800bbae:	4407      	add	r7, r0
 800bbb0:	f047 0701 	orr.w	r7, r7, #1
 800bbb4:	45ab      	cmp	fp, r5
 800bbb6:	f8ca 3000 	str.w	r3, [sl]
 800bbba:	f8c8 7004 	str.w	r7, [r8, #4]
 800bbbe:	d0c4      	beq.n	800bb4a <_malloc_r+0x322>
 800bbc0:	2e0f      	cmp	r6, #15
 800bbc2:	d810      	bhi.n	800bbe6 <_malloc_r+0x3be>
 800bbc4:	2301      	movs	r3, #1
 800bbc6:	f8c8 3004 	str.w	r3, [r8, #4]
 800bbca:	68ab      	ldr	r3, [r5, #8]
 800bbcc:	685a      	ldr	r2, [r3, #4]
 800bbce:	f022 0203 	bic.w	r2, r2, #3
 800bbd2:	4294      	cmp	r4, r2
 800bbd4:	eba2 0304 	sub.w	r3, r2, r4
 800bbd8:	d801      	bhi.n	800bbde <_malloc_r+0x3b6>
 800bbda:	2b0f      	cmp	r3, #15
 800bbdc:	dc1a      	bgt.n	800bc14 <_malloc_r+0x3ec>
 800bbde:	4648      	mov	r0, r9
 800bbe0:	f000 f842 	bl	800bc68 <__malloc_unlock>
 800bbe4:	e62d      	b.n	800b842 <_malloc_r+0x1a>
 800bbe6:	f8db 3004 	ldr.w	r3, [fp, #4]
 800bbea:	3e0c      	subs	r6, #12
 800bbec:	f026 0607 	bic.w	r6, r6, #7
 800bbf0:	f003 0301 	and.w	r3, r3, #1
 800bbf4:	4333      	orrs	r3, r6
 800bbf6:	f8cb 3004 	str.w	r3, [fp, #4]
 800bbfa:	eb0b 0306 	add.w	r3, fp, r6
 800bbfe:	2205      	movs	r2, #5
 800bc00:	2e0f      	cmp	r6, #15
 800bc02:	605a      	str	r2, [r3, #4]
 800bc04:	609a      	str	r2, [r3, #8]
 800bc06:	d9a0      	bls.n	800bb4a <_malloc_r+0x322>
 800bc08:	f10b 0108 	add.w	r1, fp, #8
 800bc0c:	4648      	mov	r0, r9
 800bc0e:	f000 fad9 	bl	800c1c4 <_free_r>
 800bc12:	e79a      	b.n	800bb4a <_malloc_r+0x322>
 800bc14:	68ae      	ldr	r6, [r5, #8]
 800bc16:	f044 0201 	orr.w	r2, r4, #1
 800bc1a:	4434      	add	r4, r6
 800bc1c:	f043 0301 	orr.w	r3, r3, #1
 800bc20:	6072      	str	r2, [r6, #4]
 800bc22:	60ac      	str	r4, [r5, #8]
 800bc24:	6063      	str	r3, [r4, #4]
 800bc26:	e631      	b.n	800b88c <_malloc_r+0x64>
 800bc28:	20003d50 	.word	0x20003d50
 800bc2c:	2000050c 	.word	0x2000050c
 800bc30:	00001000 	.word	0x00001000
 800bc34:	20003d20 	.word	0x20003d20
 800bc38:	00000fff 	.word	0x00000fff
 800bc3c:	20003d48 	.word	0x20003d48
 800bc40:	20003d4c 	.word	0x20003d4c

0800bc44 <memcpy>:
 800bc44:	b510      	push	{r4, lr}
 800bc46:	1e43      	subs	r3, r0, #1
 800bc48:	440a      	add	r2, r1
 800bc4a:	4291      	cmp	r1, r2
 800bc4c:	d100      	bne.n	800bc50 <memcpy+0xc>
 800bc4e:	bd10      	pop	{r4, pc}
 800bc50:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bc54:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bc58:	e7f7      	b.n	800bc4a <memcpy+0x6>
	...

0800bc5c <__malloc_lock>:
 800bc5c:	4801      	ldr	r0, [pc, #4]	; (800bc64 <__malloc_lock+0x8>)
 800bc5e:	f000 bb6d 	b.w	800c33c <__retarget_lock_acquire_recursive>
 800bc62:	bf00      	nop
 800bc64:	20003e64 	.word	0x20003e64

0800bc68 <__malloc_unlock>:
 800bc68:	4801      	ldr	r0, [pc, #4]	; (800bc70 <__malloc_unlock+0x8>)
 800bc6a:	f000 bb69 	b.w	800c340 <__retarget_lock_release_recursive>
 800bc6e:	bf00      	nop
 800bc70:	20003e64 	.word	0x20003e64

0800bc74 <realloc>:
 800bc74:	4b02      	ldr	r3, [pc, #8]	; (800bc80 <realloc+0xc>)
 800bc76:	460a      	mov	r2, r1
 800bc78:	4601      	mov	r1, r0
 800bc7a:	6818      	ldr	r0, [r3, #0]
 800bc7c:	f000 b802 	b.w	800bc84 <_realloc_r>
 800bc80:	20000010 	.word	0x20000010

0800bc84 <_realloc_r>:
 800bc84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc88:	4682      	mov	sl, r0
 800bc8a:	460c      	mov	r4, r1
 800bc8c:	b929      	cbnz	r1, 800bc9a <_realloc_r+0x16>
 800bc8e:	4611      	mov	r1, r2
 800bc90:	b003      	add	sp, #12
 800bc92:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc96:	f7ff bdc7 	b.w	800b828 <_malloc_r>
 800bc9a:	9201      	str	r2, [sp, #4]
 800bc9c:	f7ff ffde 	bl	800bc5c <__malloc_lock>
 800bca0:	9a01      	ldr	r2, [sp, #4]
 800bca2:	f854 5c04 	ldr.w	r5, [r4, #-4]
 800bca6:	f102 080b 	add.w	r8, r2, #11
 800bcaa:	f1b8 0f16 	cmp.w	r8, #22
 800bcae:	f1a4 0908 	sub.w	r9, r4, #8
 800bcb2:	f025 0603 	bic.w	r6, r5, #3
 800bcb6:	d90a      	bls.n	800bcce <_realloc_r+0x4a>
 800bcb8:	f038 0807 	bics.w	r8, r8, #7
 800bcbc:	d509      	bpl.n	800bcd2 <_realloc_r+0x4e>
 800bcbe:	230c      	movs	r3, #12
 800bcc0:	f8ca 3000 	str.w	r3, [sl]
 800bcc4:	2700      	movs	r7, #0
 800bcc6:	4638      	mov	r0, r7
 800bcc8:	b003      	add	sp, #12
 800bcca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcce:	f04f 0810 	mov.w	r8, #16
 800bcd2:	4590      	cmp	r8, r2
 800bcd4:	d3f3      	bcc.n	800bcbe <_realloc_r+0x3a>
 800bcd6:	45b0      	cmp	r8, r6
 800bcd8:	f340 8145 	ble.w	800bf66 <_realloc_r+0x2e2>
 800bcdc:	4ba8      	ldr	r3, [pc, #672]	; (800bf80 <_realloc_r+0x2fc>)
 800bcde:	f8d3 e008 	ldr.w	lr, [r3, #8]
 800bce2:	eb09 0106 	add.w	r1, r9, r6
 800bce6:	4571      	cmp	r1, lr
 800bce8:	469b      	mov	fp, r3
 800bcea:	684b      	ldr	r3, [r1, #4]
 800bcec:	d005      	beq.n	800bcfa <_realloc_r+0x76>
 800bcee:	f023 0001 	bic.w	r0, r3, #1
 800bcf2:	4408      	add	r0, r1
 800bcf4:	6840      	ldr	r0, [r0, #4]
 800bcf6:	07c7      	lsls	r7, r0, #31
 800bcf8:	d447      	bmi.n	800bd8a <_realloc_r+0x106>
 800bcfa:	f023 0303 	bic.w	r3, r3, #3
 800bcfe:	4571      	cmp	r1, lr
 800bd00:	eb06 0703 	add.w	r7, r6, r3
 800bd04:	d119      	bne.n	800bd3a <_realloc_r+0xb6>
 800bd06:	f108 0010 	add.w	r0, r8, #16
 800bd0a:	4287      	cmp	r7, r0
 800bd0c:	db3f      	blt.n	800bd8e <_realloc_r+0x10a>
 800bd0e:	eb09 0308 	add.w	r3, r9, r8
 800bd12:	eba7 0708 	sub.w	r7, r7, r8
 800bd16:	f047 0701 	orr.w	r7, r7, #1
 800bd1a:	f8cb 3008 	str.w	r3, [fp, #8]
 800bd1e:	605f      	str	r7, [r3, #4]
 800bd20:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800bd24:	f003 0301 	and.w	r3, r3, #1
 800bd28:	ea43 0308 	orr.w	r3, r3, r8
 800bd2c:	f844 3c04 	str.w	r3, [r4, #-4]
 800bd30:	4650      	mov	r0, sl
 800bd32:	f7ff ff99 	bl	800bc68 <__malloc_unlock>
 800bd36:	4627      	mov	r7, r4
 800bd38:	e7c5      	b.n	800bcc6 <_realloc_r+0x42>
 800bd3a:	45b8      	cmp	r8, r7
 800bd3c:	dc27      	bgt.n	800bd8e <_realloc_r+0x10a>
 800bd3e:	68cb      	ldr	r3, [r1, #12]
 800bd40:	688a      	ldr	r2, [r1, #8]
 800bd42:	60d3      	str	r3, [r2, #12]
 800bd44:	609a      	str	r2, [r3, #8]
 800bd46:	eba7 0008 	sub.w	r0, r7, r8
 800bd4a:	280f      	cmp	r0, #15
 800bd4c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800bd50:	eb09 0207 	add.w	r2, r9, r7
 800bd54:	f240 8109 	bls.w	800bf6a <_realloc_r+0x2e6>
 800bd58:	eb09 0108 	add.w	r1, r9, r8
 800bd5c:	f003 0301 	and.w	r3, r3, #1
 800bd60:	ea43 0308 	orr.w	r3, r3, r8
 800bd64:	f040 0001 	orr.w	r0, r0, #1
 800bd68:	f8c9 3004 	str.w	r3, [r9, #4]
 800bd6c:	6048      	str	r0, [r1, #4]
 800bd6e:	6853      	ldr	r3, [r2, #4]
 800bd70:	f043 0301 	orr.w	r3, r3, #1
 800bd74:	6053      	str	r3, [r2, #4]
 800bd76:	3108      	adds	r1, #8
 800bd78:	4650      	mov	r0, sl
 800bd7a:	f000 fa23 	bl	800c1c4 <_free_r>
 800bd7e:	4650      	mov	r0, sl
 800bd80:	f7ff ff72 	bl	800bc68 <__malloc_unlock>
 800bd84:	f109 0708 	add.w	r7, r9, #8
 800bd88:	e79d      	b.n	800bcc6 <_realloc_r+0x42>
 800bd8a:	2300      	movs	r3, #0
 800bd8c:	4619      	mov	r1, r3
 800bd8e:	07e8      	lsls	r0, r5, #31
 800bd90:	f100 8084 	bmi.w	800be9c <_realloc_r+0x218>
 800bd94:	f854 5c08 	ldr.w	r5, [r4, #-8]
 800bd98:	eba9 0505 	sub.w	r5, r9, r5
 800bd9c:	6868      	ldr	r0, [r5, #4]
 800bd9e:	f020 0003 	bic.w	r0, r0, #3
 800bda2:	4430      	add	r0, r6
 800bda4:	2900      	cmp	r1, #0
 800bda6:	d076      	beq.n	800be96 <_realloc_r+0x212>
 800bda8:	4571      	cmp	r1, lr
 800bdaa:	d150      	bne.n	800be4e <_realloc_r+0x1ca>
 800bdac:	4403      	add	r3, r0
 800bdae:	f108 0110 	add.w	r1, r8, #16
 800bdb2:	428b      	cmp	r3, r1
 800bdb4:	db6f      	blt.n	800be96 <_realloc_r+0x212>
 800bdb6:	462f      	mov	r7, r5
 800bdb8:	68ea      	ldr	r2, [r5, #12]
 800bdba:	f857 1f08 	ldr.w	r1, [r7, #8]!
 800bdbe:	60ca      	str	r2, [r1, #12]
 800bdc0:	6091      	str	r1, [r2, #8]
 800bdc2:	1f32      	subs	r2, r6, #4
 800bdc4:	2a24      	cmp	r2, #36	; 0x24
 800bdc6:	d83b      	bhi.n	800be40 <_realloc_r+0x1bc>
 800bdc8:	2a13      	cmp	r2, #19
 800bdca:	d936      	bls.n	800be3a <_realloc_r+0x1b6>
 800bdcc:	6821      	ldr	r1, [r4, #0]
 800bdce:	60a9      	str	r1, [r5, #8]
 800bdd0:	6861      	ldr	r1, [r4, #4]
 800bdd2:	60e9      	str	r1, [r5, #12]
 800bdd4:	2a1b      	cmp	r2, #27
 800bdd6:	d81c      	bhi.n	800be12 <_realloc_r+0x18e>
 800bdd8:	f105 0210 	add.w	r2, r5, #16
 800bddc:	f104 0108 	add.w	r1, r4, #8
 800bde0:	6808      	ldr	r0, [r1, #0]
 800bde2:	6010      	str	r0, [r2, #0]
 800bde4:	6848      	ldr	r0, [r1, #4]
 800bde6:	6050      	str	r0, [r2, #4]
 800bde8:	6889      	ldr	r1, [r1, #8]
 800bdea:	6091      	str	r1, [r2, #8]
 800bdec:	eb05 0208 	add.w	r2, r5, r8
 800bdf0:	eba3 0308 	sub.w	r3, r3, r8
 800bdf4:	f043 0301 	orr.w	r3, r3, #1
 800bdf8:	f8cb 2008 	str.w	r2, [fp, #8]
 800bdfc:	6053      	str	r3, [r2, #4]
 800bdfe:	686b      	ldr	r3, [r5, #4]
 800be00:	f003 0301 	and.w	r3, r3, #1
 800be04:	ea43 0308 	orr.w	r3, r3, r8
 800be08:	606b      	str	r3, [r5, #4]
 800be0a:	4650      	mov	r0, sl
 800be0c:	f7ff ff2c 	bl	800bc68 <__malloc_unlock>
 800be10:	e759      	b.n	800bcc6 <_realloc_r+0x42>
 800be12:	68a1      	ldr	r1, [r4, #8]
 800be14:	6129      	str	r1, [r5, #16]
 800be16:	68e1      	ldr	r1, [r4, #12]
 800be18:	6169      	str	r1, [r5, #20]
 800be1a:	2a24      	cmp	r2, #36	; 0x24
 800be1c:	bf01      	itttt	eq
 800be1e:	6922      	ldreq	r2, [r4, #16]
 800be20:	61aa      	streq	r2, [r5, #24]
 800be22:	6960      	ldreq	r0, [r4, #20]
 800be24:	61e8      	streq	r0, [r5, #28]
 800be26:	bf19      	ittee	ne
 800be28:	f105 0218 	addne.w	r2, r5, #24
 800be2c:	f104 0110 	addne.w	r1, r4, #16
 800be30:	f105 0220 	addeq.w	r2, r5, #32
 800be34:	f104 0118 	addeq.w	r1, r4, #24
 800be38:	e7d2      	b.n	800bde0 <_realloc_r+0x15c>
 800be3a:	463a      	mov	r2, r7
 800be3c:	4621      	mov	r1, r4
 800be3e:	e7cf      	b.n	800bde0 <_realloc_r+0x15c>
 800be40:	4621      	mov	r1, r4
 800be42:	4638      	mov	r0, r7
 800be44:	9301      	str	r3, [sp, #4]
 800be46:	f000 fa7c 	bl	800c342 <memmove>
 800be4a:	9b01      	ldr	r3, [sp, #4]
 800be4c:	e7ce      	b.n	800bdec <_realloc_r+0x168>
 800be4e:	18c7      	adds	r7, r0, r3
 800be50:	45b8      	cmp	r8, r7
 800be52:	dc20      	bgt.n	800be96 <_realloc_r+0x212>
 800be54:	68cb      	ldr	r3, [r1, #12]
 800be56:	688a      	ldr	r2, [r1, #8]
 800be58:	60d3      	str	r3, [r2, #12]
 800be5a:	609a      	str	r2, [r3, #8]
 800be5c:	4628      	mov	r0, r5
 800be5e:	68eb      	ldr	r3, [r5, #12]
 800be60:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800be64:	60d3      	str	r3, [r2, #12]
 800be66:	609a      	str	r2, [r3, #8]
 800be68:	1f32      	subs	r2, r6, #4
 800be6a:	2a24      	cmp	r2, #36	; 0x24
 800be6c:	d842      	bhi.n	800bef4 <_realloc_r+0x270>
 800be6e:	2a13      	cmp	r2, #19
 800be70:	d93e      	bls.n	800bef0 <_realloc_r+0x26c>
 800be72:	6823      	ldr	r3, [r4, #0]
 800be74:	60ab      	str	r3, [r5, #8]
 800be76:	6863      	ldr	r3, [r4, #4]
 800be78:	60eb      	str	r3, [r5, #12]
 800be7a:	2a1b      	cmp	r2, #27
 800be7c:	d824      	bhi.n	800bec8 <_realloc_r+0x244>
 800be7e:	f105 0010 	add.w	r0, r5, #16
 800be82:	f104 0308 	add.w	r3, r4, #8
 800be86:	681a      	ldr	r2, [r3, #0]
 800be88:	6002      	str	r2, [r0, #0]
 800be8a:	685a      	ldr	r2, [r3, #4]
 800be8c:	6042      	str	r2, [r0, #4]
 800be8e:	689b      	ldr	r3, [r3, #8]
 800be90:	6083      	str	r3, [r0, #8]
 800be92:	46a9      	mov	r9, r5
 800be94:	e757      	b.n	800bd46 <_realloc_r+0xc2>
 800be96:	4580      	cmp	r8, r0
 800be98:	4607      	mov	r7, r0
 800be9a:	dddf      	ble.n	800be5c <_realloc_r+0x1d8>
 800be9c:	4611      	mov	r1, r2
 800be9e:	4650      	mov	r0, sl
 800bea0:	f7ff fcc2 	bl	800b828 <_malloc_r>
 800bea4:	4607      	mov	r7, r0
 800bea6:	2800      	cmp	r0, #0
 800bea8:	d0af      	beq.n	800be0a <_realloc_r+0x186>
 800beaa:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800beae:	f023 0301 	bic.w	r3, r3, #1
 800beb2:	f1a0 0208 	sub.w	r2, r0, #8
 800beb6:	444b      	add	r3, r9
 800beb8:	429a      	cmp	r2, r3
 800beba:	d11f      	bne.n	800befc <_realloc_r+0x278>
 800bebc:	f850 7c04 	ldr.w	r7, [r0, #-4]
 800bec0:	f027 0703 	bic.w	r7, r7, #3
 800bec4:	4437      	add	r7, r6
 800bec6:	e73e      	b.n	800bd46 <_realloc_r+0xc2>
 800bec8:	68a3      	ldr	r3, [r4, #8]
 800beca:	612b      	str	r3, [r5, #16]
 800becc:	68e3      	ldr	r3, [r4, #12]
 800bece:	616b      	str	r3, [r5, #20]
 800bed0:	2a24      	cmp	r2, #36	; 0x24
 800bed2:	bf01      	itttt	eq
 800bed4:	6923      	ldreq	r3, [r4, #16]
 800bed6:	61ab      	streq	r3, [r5, #24]
 800bed8:	6962      	ldreq	r2, [r4, #20]
 800beda:	61ea      	streq	r2, [r5, #28]
 800bedc:	bf19      	ittee	ne
 800bede:	f105 0018 	addne.w	r0, r5, #24
 800bee2:	f104 0310 	addne.w	r3, r4, #16
 800bee6:	f105 0020 	addeq.w	r0, r5, #32
 800beea:	f104 0318 	addeq.w	r3, r4, #24
 800beee:	e7ca      	b.n	800be86 <_realloc_r+0x202>
 800bef0:	4623      	mov	r3, r4
 800bef2:	e7c8      	b.n	800be86 <_realloc_r+0x202>
 800bef4:	4621      	mov	r1, r4
 800bef6:	f000 fa24 	bl	800c342 <memmove>
 800befa:	e7ca      	b.n	800be92 <_realloc_r+0x20e>
 800befc:	1f32      	subs	r2, r6, #4
 800befe:	2a24      	cmp	r2, #36	; 0x24
 800bf00:	d82d      	bhi.n	800bf5e <_realloc_r+0x2da>
 800bf02:	2a13      	cmp	r2, #19
 800bf04:	d928      	bls.n	800bf58 <_realloc_r+0x2d4>
 800bf06:	6823      	ldr	r3, [r4, #0]
 800bf08:	6003      	str	r3, [r0, #0]
 800bf0a:	6863      	ldr	r3, [r4, #4]
 800bf0c:	6043      	str	r3, [r0, #4]
 800bf0e:	2a1b      	cmp	r2, #27
 800bf10:	d80e      	bhi.n	800bf30 <_realloc_r+0x2ac>
 800bf12:	f100 0308 	add.w	r3, r0, #8
 800bf16:	f104 0208 	add.w	r2, r4, #8
 800bf1a:	6811      	ldr	r1, [r2, #0]
 800bf1c:	6019      	str	r1, [r3, #0]
 800bf1e:	6851      	ldr	r1, [r2, #4]
 800bf20:	6059      	str	r1, [r3, #4]
 800bf22:	6892      	ldr	r2, [r2, #8]
 800bf24:	609a      	str	r2, [r3, #8]
 800bf26:	4621      	mov	r1, r4
 800bf28:	4650      	mov	r0, sl
 800bf2a:	f000 f94b 	bl	800c1c4 <_free_r>
 800bf2e:	e76c      	b.n	800be0a <_realloc_r+0x186>
 800bf30:	68a3      	ldr	r3, [r4, #8]
 800bf32:	6083      	str	r3, [r0, #8]
 800bf34:	68e3      	ldr	r3, [r4, #12]
 800bf36:	60c3      	str	r3, [r0, #12]
 800bf38:	2a24      	cmp	r2, #36	; 0x24
 800bf3a:	bf01      	itttt	eq
 800bf3c:	6923      	ldreq	r3, [r4, #16]
 800bf3e:	6103      	streq	r3, [r0, #16]
 800bf40:	6961      	ldreq	r1, [r4, #20]
 800bf42:	6141      	streq	r1, [r0, #20]
 800bf44:	bf19      	ittee	ne
 800bf46:	f100 0310 	addne.w	r3, r0, #16
 800bf4a:	f104 0210 	addne.w	r2, r4, #16
 800bf4e:	f100 0318 	addeq.w	r3, r0, #24
 800bf52:	f104 0218 	addeq.w	r2, r4, #24
 800bf56:	e7e0      	b.n	800bf1a <_realloc_r+0x296>
 800bf58:	4603      	mov	r3, r0
 800bf5a:	4622      	mov	r2, r4
 800bf5c:	e7dd      	b.n	800bf1a <_realloc_r+0x296>
 800bf5e:	4621      	mov	r1, r4
 800bf60:	f000 f9ef 	bl	800c342 <memmove>
 800bf64:	e7df      	b.n	800bf26 <_realloc_r+0x2a2>
 800bf66:	4637      	mov	r7, r6
 800bf68:	e6ed      	b.n	800bd46 <_realloc_r+0xc2>
 800bf6a:	f003 0301 	and.w	r3, r3, #1
 800bf6e:	431f      	orrs	r7, r3
 800bf70:	f8c9 7004 	str.w	r7, [r9, #4]
 800bf74:	6853      	ldr	r3, [r2, #4]
 800bf76:	f043 0301 	orr.w	r3, r3, #1
 800bf7a:	6053      	str	r3, [r2, #4]
 800bf7c:	e6ff      	b.n	800bd7e <_realloc_r+0xfa>
 800bf7e:	bf00      	nop
 800bf80:	20000104 	.word	0x20000104

0800bf84 <_sbrk_r>:
 800bf84:	b538      	push	{r3, r4, r5, lr}
 800bf86:	4c06      	ldr	r4, [pc, #24]	; (800bfa0 <_sbrk_r+0x1c>)
 800bf88:	2300      	movs	r3, #0
 800bf8a:	4605      	mov	r5, r0
 800bf8c:	4608      	mov	r0, r1
 800bf8e:	6023      	str	r3, [r4, #0]
 800bf90:	f000 fa02 	bl	800c398 <_sbrk>
 800bf94:	1c43      	adds	r3, r0, #1
 800bf96:	d102      	bne.n	800bf9e <_sbrk_r+0x1a>
 800bf98:	6823      	ldr	r3, [r4, #0]
 800bf9a:	b103      	cbz	r3, 800bf9e <_sbrk_r+0x1a>
 800bf9c:	602b      	str	r3, [r5, #0]
 800bf9e:	bd38      	pop	{r3, r4, r5, pc}
 800bfa0:	20003e6c 	.word	0x20003e6c

0800bfa4 <_raise_r>:
 800bfa4:	291f      	cmp	r1, #31
 800bfa6:	b538      	push	{r3, r4, r5, lr}
 800bfa8:	4604      	mov	r4, r0
 800bfaa:	460d      	mov	r5, r1
 800bfac:	d904      	bls.n	800bfb8 <_raise_r+0x14>
 800bfae:	2316      	movs	r3, #22
 800bfb0:	6003      	str	r3, [r0, #0]
 800bfb2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bfb6:	bd38      	pop	{r3, r4, r5, pc}
 800bfb8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bfba:	b112      	cbz	r2, 800bfc2 <_raise_r+0x1e>
 800bfbc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bfc0:	b94b      	cbnz	r3, 800bfd6 <_raise_r+0x32>
 800bfc2:	4620      	mov	r0, r4
 800bfc4:	f000 f830 	bl	800c028 <_getpid_r>
 800bfc8:	462a      	mov	r2, r5
 800bfca:	4601      	mov	r1, r0
 800bfcc:	4620      	mov	r0, r4
 800bfce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bfd2:	f000 b817 	b.w	800c004 <_kill_r>
 800bfd6:	2b01      	cmp	r3, #1
 800bfd8:	d00a      	beq.n	800bff0 <_raise_r+0x4c>
 800bfda:	1c59      	adds	r1, r3, #1
 800bfdc:	d103      	bne.n	800bfe6 <_raise_r+0x42>
 800bfde:	2316      	movs	r3, #22
 800bfe0:	6003      	str	r3, [r0, #0]
 800bfe2:	2001      	movs	r0, #1
 800bfe4:	bd38      	pop	{r3, r4, r5, pc}
 800bfe6:	2400      	movs	r4, #0
 800bfe8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bfec:	4628      	mov	r0, r5
 800bfee:	4798      	blx	r3
 800bff0:	2000      	movs	r0, #0
 800bff2:	bd38      	pop	{r3, r4, r5, pc}

0800bff4 <raise>:
 800bff4:	4b02      	ldr	r3, [pc, #8]	; (800c000 <raise+0xc>)
 800bff6:	4601      	mov	r1, r0
 800bff8:	6818      	ldr	r0, [r3, #0]
 800bffa:	f7ff bfd3 	b.w	800bfa4 <_raise_r>
 800bffe:	bf00      	nop
 800c000:	20000010 	.word	0x20000010

0800c004 <_kill_r>:
 800c004:	b538      	push	{r3, r4, r5, lr}
 800c006:	4c07      	ldr	r4, [pc, #28]	; (800c024 <_kill_r+0x20>)
 800c008:	2300      	movs	r3, #0
 800c00a:	4605      	mov	r5, r0
 800c00c:	4608      	mov	r0, r1
 800c00e:	4611      	mov	r1, r2
 800c010:	6023      	str	r3, [r4, #0]
 800c012:	f000 f9b9 	bl	800c388 <_kill>
 800c016:	1c43      	adds	r3, r0, #1
 800c018:	d102      	bne.n	800c020 <_kill_r+0x1c>
 800c01a:	6823      	ldr	r3, [r4, #0]
 800c01c:	b103      	cbz	r3, 800c020 <_kill_r+0x1c>
 800c01e:	602b      	str	r3, [r5, #0]
 800c020:	bd38      	pop	{r3, r4, r5, pc}
 800c022:	bf00      	nop
 800c024:	20003e6c 	.word	0x20003e6c

0800c028 <_getpid_r>:
 800c028:	f000 b9a6 	b.w	800c378 <_getpid>

0800c02c <__register_exitproc>:
 800c02c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c030:	4d35      	ldr	r5, [pc, #212]	; (800c108 <__register_exitproc+0xdc>)
 800c032:	4680      	mov	r8, r0
 800c034:	6828      	ldr	r0, [r5, #0]
 800c036:	4699      	mov	r9, r3
 800c038:	460f      	mov	r7, r1
 800c03a:	4692      	mov	sl, r2
 800c03c:	f000 f97e 	bl	800c33c <__retarget_lock_acquire_recursive>
 800c040:	4b32      	ldr	r3, [pc, #200]	; (800c10c <__register_exitproc+0xe0>)
 800c042:	681e      	ldr	r6, [r3, #0]
 800c044:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 800c046:	b93c      	cbnz	r4, 800c058 <__register_exitproc+0x2c>
 800c048:	4b31      	ldr	r3, [pc, #196]	; (800c110 <__register_exitproc+0xe4>)
 800c04a:	f106 044c 	add.w	r4, r6, #76	; 0x4c
 800c04e:	64b4      	str	r4, [r6, #72]	; 0x48
 800c050:	b113      	cbz	r3, 800c058 <__register_exitproc+0x2c>
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	f8c6 30d4 	str.w	r3, [r6, #212]	; 0xd4
 800c058:	6863      	ldr	r3, [r4, #4]
 800c05a:	2b1f      	cmp	r3, #31
 800c05c:	dd46      	ble.n	800c0ec <__register_exitproc+0xc0>
 800c05e:	4b2d      	ldr	r3, [pc, #180]	; (800c114 <__register_exitproc+0xe8>)
 800c060:	b933      	cbnz	r3, 800c070 <__register_exitproc+0x44>
 800c062:	6828      	ldr	r0, [r5, #0]
 800c064:	f000 f96c 	bl	800c340 <__retarget_lock_release_recursive>
 800c068:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c06c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c070:	208c      	movs	r0, #140	; 0x8c
 800c072:	f7ff fbc9 	bl	800b808 <malloc>
 800c076:	4604      	mov	r4, r0
 800c078:	2800      	cmp	r0, #0
 800c07a:	d0f2      	beq.n	800c062 <__register_exitproc+0x36>
 800c07c:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 800c07e:	6003      	str	r3, [r0, #0]
 800c080:	2200      	movs	r2, #0
 800c082:	6042      	str	r2, [r0, #4]
 800c084:	64b0      	str	r0, [r6, #72]	; 0x48
 800c086:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
 800c08a:	f1b8 0f00 	cmp.w	r8, #0
 800c08e:	d021      	beq.n	800c0d4 <__register_exitproc+0xa8>
 800c090:	f44f 7084 	mov.w	r0, #264	; 0x108
 800c094:	f7ff fbb8 	bl	800b808 <malloc>
 800c098:	b390      	cbz	r0, 800c100 <__register_exitproc+0xd4>
 800c09a:	2300      	movs	r3, #0
 800c09c:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 800c0a0:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
 800c0a4:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 800c0a8:	6862      	ldr	r2, [r4, #4]
 800c0aa:	f840 a022 	str.w	sl, [r0, r2, lsl #2]
 800c0ae:	2301      	movs	r3, #1
 800c0b0:	4093      	lsls	r3, r2
 800c0b2:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 800c0b6:	f8d0 2100 	ldr.w	r2, [r0, #256]	; 0x100
 800c0ba:	431a      	orrs	r2, r3
 800c0bc:	f1b8 0f02 	cmp.w	r8, #2
 800c0c0:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
 800c0c4:	f8c1 9080 	str.w	r9, [r1, #128]	; 0x80
 800c0c8:	bf02      	ittt	eq
 800c0ca:	f8d0 2104 	ldreq.w	r2, [r0, #260]	; 0x104
 800c0ce:	4313      	orreq	r3, r2
 800c0d0:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 800c0d4:	6863      	ldr	r3, [r4, #4]
 800c0d6:	6828      	ldr	r0, [r5, #0]
 800c0d8:	1c5a      	adds	r2, r3, #1
 800c0da:	3302      	adds	r3, #2
 800c0dc:	6062      	str	r2, [r4, #4]
 800c0de:	f844 7023 	str.w	r7, [r4, r3, lsl #2]
 800c0e2:	f000 f92d 	bl	800c340 <__retarget_lock_release_recursive>
 800c0e6:	2000      	movs	r0, #0
 800c0e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c0ec:	f1b8 0f00 	cmp.w	r8, #0
 800c0f0:	d0f0      	beq.n	800c0d4 <__register_exitproc+0xa8>
 800c0f2:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 800c0f6:	2800      	cmp	r0, #0
 800c0f8:	d1d6      	bne.n	800c0a8 <__register_exitproc+0x7c>
 800c0fa:	4b06      	ldr	r3, [pc, #24]	; (800c114 <__register_exitproc+0xe8>)
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d1c7      	bne.n	800c090 <__register_exitproc+0x64>
 800c100:	6828      	ldr	r0, [r5, #0]
 800c102:	f000 f91c 	bl	800c33e <__retarget_lock_release>
 800c106:	e7af      	b.n	800c068 <__register_exitproc+0x3c>
 800c108:	20000514 	.word	0x20000514
 800c10c:	0800d084 	.word	0x0800d084
 800c110:	0800d088 	.word	0x0800d088
 800c114:	0800b809 	.word	0x0800b809

0800c118 <_malloc_trim_r>:
 800c118:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c11c:	4f25      	ldr	r7, [pc, #148]	; (800c1b4 <_malloc_trim_r+0x9c>)
 800c11e:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 800c1c0 <_malloc_trim_r+0xa8>
 800c122:	4689      	mov	r9, r1
 800c124:	4606      	mov	r6, r0
 800c126:	f7ff fd99 	bl	800bc5c <__malloc_lock>
 800c12a:	68bb      	ldr	r3, [r7, #8]
 800c12c:	685d      	ldr	r5, [r3, #4]
 800c12e:	f1a8 0411 	sub.w	r4, r8, #17
 800c132:	f025 0503 	bic.w	r5, r5, #3
 800c136:	eba4 0409 	sub.w	r4, r4, r9
 800c13a:	442c      	add	r4, r5
 800c13c:	fbb4 f4f8 	udiv	r4, r4, r8
 800c140:	3c01      	subs	r4, #1
 800c142:	fb08 f404 	mul.w	r4, r8, r4
 800c146:	4544      	cmp	r4, r8
 800c148:	da05      	bge.n	800c156 <_malloc_trim_r+0x3e>
 800c14a:	4630      	mov	r0, r6
 800c14c:	f7ff fd8c 	bl	800bc68 <__malloc_unlock>
 800c150:	2000      	movs	r0, #0
 800c152:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c156:	2100      	movs	r1, #0
 800c158:	4630      	mov	r0, r6
 800c15a:	f7ff ff13 	bl	800bf84 <_sbrk_r>
 800c15e:	68bb      	ldr	r3, [r7, #8]
 800c160:	442b      	add	r3, r5
 800c162:	4298      	cmp	r0, r3
 800c164:	d1f1      	bne.n	800c14a <_malloc_trim_r+0x32>
 800c166:	4261      	negs	r1, r4
 800c168:	4630      	mov	r0, r6
 800c16a:	f7ff ff0b 	bl	800bf84 <_sbrk_r>
 800c16e:	3001      	adds	r0, #1
 800c170:	d110      	bne.n	800c194 <_malloc_trim_r+0x7c>
 800c172:	2100      	movs	r1, #0
 800c174:	4630      	mov	r0, r6
 800c176:	f7ff ff05 	bl	800bf84 <_sbrk_r>
 800c17a:	68ba      	ldr	r2, [r7, #8]
 800c17c:	1a83      	subs	r3, r0, r2
 800c17e:	2b0f      	cmp	r3, #15
 800c180:	dde3      	ble.n	800c14a <_malloc_trim_r+0x32>
 800c182:	490d      	ldr	r1, [pc, #52]	; (800c1b8 <_malloc_trim_r+0xa0>)
 800c184:	6809      	ldr	r1, [r1, #0]
 800c186:	1a40      	subs	r0, r0, r1
 800c188:	490c      	ldr	r1, [pc, #48]	; (800c1bc <_malloc_trim_r+0xa4>)
 800c18a:	f043 0301 	orr.w	r3, r3, #1
 800c18e:	6008      	str	r0, [r1, #0]
 800c190:	6053      	str	r3, [r2, #4]
 800c192:	e7da      	b.n	800c14a <_malloc_trim_r+0x32>
 800c194:	68bb      	ldr	r3, [r7, #8]
 800c196:	4a09      	ldr	r2, [pc, #36]	; (800c1bc <_malloc_trim_r+0xa4>)
 800c198:	1b2d      	subs	r5, r5, r4
 800c19a:	f045 0501 	orr.w	r5, r5, #1
 800c19e:	605d      	str	r5, [r3, #4]
 800c1a0:	6813      	ldr	r3, [r2, #0]
 800c1a2:	4630      	mov	r0, r6
 800c1a4:	1b1c      	subs	r4, r3, r4
 800c1a6:	6014      	str	r4, [r2, #0]
 800c1a8:	f7ff fd5e 	bl	800bc68 <__malloc_unlock>
 800c1ac:	2001      	movs	r0, #1
 800c1ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c1b2:	bf00      	nop
 800c1b4:	20000104 	.word	0x20000104
 800c1b8:	2000050c 	.word	0x2000050c
 800c1bc:	20003d20 	.word	0x20003d20
 800c1c0:	00001000 	.word	0x00001000

0800c1c4 <_free_r>:
 800c1c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1c8:	4604      	mov	r4, r0
 800c1ca:	4688      	mov	r8, r1
 800c1cc:	2900      	cmp	r1, #0
 800c1ce:	f000 80ab 	beq.w	800c328 <_free_r+0x164>
 800c1d2:	f7ff fd43 	bl	800bc5c <__malloc_lock>
 800c1d6:	f858 2c04 	ldr.w	r2, [r8, #-4]
 800c1da:	4d54      	ldr	r5, [pc, #336]	; (800c32c <_free_r+0x168>)
 800c1dc:	f022 0001 	bic.w	r0, r2, #1
 800c1e0:	f1a8 0308 	sub.w	r3, r8, #8
 800c1e4:	181f      	adds	r7, r3, r0
 800c1e6:	68a9      	ldr	r1, [r5, #8]
 800c1e8:	687e      	ldr	r6, [r7, #4]
 800c1ea:	428f      	cmp	r7, r1
 800c1ec:	f026 0603 	bic.w	r6, r6, #3
 800c1f0:	f002 0201 	and.w	r2, r2, #1
 800c1f4:	d11b      	bne.n	800c22e <_free_r+0x6a>
 800c1f6:	4430      	add	r0, r6
 800c1f8:	b93a      	cbnz	r2, 800c20a <_free_r+0x46>
 800c1fa:	f858 2c08 	ldr.w	r2, [r8, #-8]
 800c1fe:	1a9b      	subs	r3, r3, r2
 800c200:	4410      	add	r0, r2
 800c202:	6899      	ldr	r1, [r3, #8]
 800c204:	68da      	ldr	r2, [r3, #12]
 800c206:	60ca      	str	r2, [r1, #12]
 800c208:	6091      	str	r1, [r2, #8]
 800c20a:	f040 0201 	orr.w	r2, r0, #1
 800c20e:	605a      	str	r2, [r3, #4]
 800c210:	60ab      	str	r3, [r5, #8]
 800c212:	4b47      	ldr	r3, [pc, #284]	; (800c330 <_free_r+0x16c>)
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	4298      	cmp	r0, r3
 800c218:	d304      	bcc.n	800c224 <_free_r+0x60>
 800c21a:	4b46      	ldr	r3, [pc, #280]	; (800c334 <_free_r+0x170>)
 800c21c:	4620      	mov	r0, r4
 800c21e:	6819      	ldr	r1, [r3, #0]
 800c220:	f7ff ff7a 	bl	800c118 <_malloc_trim_r>
 800c224:	4620      	mov	r0, r4
 800c226:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c22a:	f7ff bd1d 	b.w	800bc68 <__malloc_unlock>
 800c22e:	607e      	str	r6, [r7, #4]
 800c230:	2a00      	cmp	r2, #0
 800c232:	d139      	bne.n	800c2a8 <_free_r+0xe4>
 800c234:	f858 1c08 	ldr.w	r1, [r8, #-8]
 800c238:	1a5b      	subs	r3, r3, r1
 800c23a:	4408      	add	r0, r1
 800c23c:	6899      	ldr	r1, [r3, #8]
 800c23e:	f105 0e08 	add.w	lr, r5, #8
 800c242:	4571      	cmp	r1, lr
 800c244:	d032      	beq.n	800c2ac <_free_r+0xe8>
 800c246:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 800c24a:	f8c1 e00c 	str.w	lr, [r1, #12]
 800c24e:	f8ce 1008 	str.w	r1, [lr, #8]
 800c252:	19b9      	adds	r1, r7, r6
 800c254:	6849      	ldr	r1, [r1, #4]
 800c256:	07c9      	lsls	r1, r1, #31
 800c258:	d40a      	bmi.n	800c270 <_free_r+0xac>
 800c25a:	4430      	add	r0, r6
 800c25c:	68b9      	ldr	r1, [r7, #8]
 800c25e:	bb3a      	cbnz	r2, 800c2b0 <_free_r+0xec>
 800c260:	4e35      	ldr	r6, [pc, #212]	; (800c338 <_free_r+0x174>)
 800c262:	42b1      	cmp	r1, r6
 800c264:	d124      	bne.n	800c2b0 <_free_r+0xec>
 800c266:	616b      	str	r3, [r5, #20]
 800c268:	612b      	str	r3, [r5, #16]
 800c26a:	2201      	movs	r2, #1
 800c26c:	60d9      	str	r1, [r3, #12]
 800c26e:	6099      	str	r1, [r3, #8]
 800c270:	f040 0101 	orr.w	r1, r0, #1
 800c274:	6059      	str	r1, [r3, #4]
 800c276:	5018      	str	r0, [r3, r0]
 800c278:	2a00      	cmp	r2, #0
 800c27a:	d1d3      	bne.n	800c224 <_free_r+0x60>
 800c27c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800c280:	d21a      	bcs.n	800c2b8 <_free_r+0xf4>
 800c282:	08c0      	lsrs	r0, r0, #3
 800c284:	1081      	asrs	r1, r0, #2
 800c286:	2201      	movs	r2, #1
 800c288:	408a      	lsls	r2, r1
 800c28a:	6869      	ldr	r1, [r5, #4]
 800c28c:	3001      	adds	r0, #1
 800c28e:	430a      	orrs	r2, r1
 800c290:	606a      	str	r2, [r5, #4]
 800c292:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 800c296:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 800c29a:	6099      	str	r1, [r3, #8]
 800c29c:	3a08      	subs	r2, #8
 800c29e:	60da      	str	r2, [r3, #12]
 800c2a0:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 800c2a4:	60cb      	str	r3, [r1, #12]
 800c2a6:	e7bd      	b.n	800c224 <_free_r+0x60>
 800c2a8:	2200      	movs	r2, #0
 800c2aa:	e7d2      	b.n	800c252 <_free_r+0x8e>
 800c2ac:	2201      	movs	r2, #1
 800c2ae:	e7d0      	b.n	800c252 <_free_r+0x8e>
 800c2b0:	68fe      	ldr	r6, [r7, #12]
 800c2b2:	60ce      	str	r6, [r1, #12]
 800c2b4:	60b1      	str	r1, [r6, #8]
 800c2b6:	e7db      	b.n	800c270 <_free_r+0xac>
 800c2b8:	0a42      	lsrs	r2, r0, #9
 800c2ba:	2a04      	cmp	r2, #4
 800c2bc:	d813      	bhi.n	800c2e6 <_free_r+0x122>
 800c2be:	0982      	lsrs	r2, r0, #6
 800c2c0:	3238      	adds	r2, #56	; 0x38
 800c2c2:	1c51      	adds	r1, r2, #1
 800c2c4:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 800c2c8:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 800c2cc:	428e      	cmp	r6, r1
 800c2ce:	d124      	bne.n	800c31a <_free_r+0x156>
 800c2d0:	2001      	movs	r0, #1
 800c2d2:	1092      	asrs	r2, r2, #2
 800c2d4:	fa00 f202 	lsl.w	r2, r0, r2
 800c2d8:	6868      	ldr	r0, [r5, #4]
 800c2da:	4302      	orrs	r2, r0
 800c2dc:	606a      	str	r2, [r5, #4]
 800c2de:	60de      	str	r6, [r3, #12]
 800c2e0:	6099      	str	r1, [r3, #8]
 800c2e2:	60b3      	str	r3, [r6, #8]
 800c2e4:	e7de      	b.n	800c2a4 <_free_r+0xe0>
 800c2e6:	2a14      	cmp	r2, #20
 800c2e8:	d801      	bhi.n	800c2ee <_free_r+0x12a>
 800c2ea:	325b      	adds	r2, #91	; 0x5b
 800c2ec:	e7e9      	b.n	800c2c2 <_free_r+0xfe>
 800c2ee:	2a54      	cmp	r2, #84	; 0x54
 800c2f0:	d802      	bhi.n	800c2f8 <_free_r+0x134>
 800c2f2:	0b02      	lsrs	r2, r0, #12
 800c2f4:	326e      	adds	r2, #110	; 0x6e
 800c2f6:	e7e4      	b.n	800c2c2 <_free_r+0xfe>
 800c2f8:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800c2fc:	d802      	bhi.n	800c304 <_free_r+0x140>
 800c2fe:	0bc2      	lsrs	r2, r0, #15
 800c300:	3277      	adds	r2, #119	; 0x77
 800c302:	e7de      	b.n	800c2c2 <_free_r+0xfe>
 800c304:	f240 5154 	movw	r1, #1364	; 0x554
 800c308:	428a      	cmp	r2, r1
 800c30a:	bf9a      	itte	ls
 800c30c:	0c82      	lsrls	r2, r0, #18
 800c30e:	327c      	addls	r2, #124	; 0x7c
 800c310:	227e      	movhi	r2, #126	; 0x7e
 800c312:	e7d6      	b.n	800c2c2 <_free_r+0xfe>
 800c314:	6889      	ldr	r1, [r1, #8]
 800c316:	428e      	cmp	r6, r1
 800c318:	d004      	beq.n	800c324 <_free_r+0x160>
 800c31a:	684a      	ldr	r2, [r1, #4]
 800c31c:	f022 0203 	bic.w	r2, r2, #3
 800c320:	4290      	cmp	r0, r2
 800c322:	d3f7      	bcc.n	800c314 <_free_r+0x150>
 800c324:	68ce      	ldr	r6, [r1, #12]
 800c326:	e7da      	b.n	800c2de <_free_r+0x11a>
 800c328:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c32c:	20000104 	.word	0x20000104
 800c330:	20000510 	.word	0x20000510
 800c334:	20003d50 	.word	0x20003d50
 800c338:	2000010c 	.word	0x2000010c

0800c33c <__retarget_lock_acquire_recursive>:
 800c33c:	4770      	bx	lr

0800c33e <__retarget_lock_release>:
 800c33e:	4770      	bx	lr

0800c340 <__retarget_lock_release_recursive>:
 800c340:	4770      	bx	lr

0800c342 <memmove>:
 800c342:	4288      	cmp	r0, r1
 800c344:	b510      	push	{r4, lr}
 800c346:	eb01 0302 	add.w	r3, r1, r2
 800c34a:	d803      	bhi.n	800c354 <memmove+0x12>
 800c34c:	1e42      	subs	r2, r0, #1
 800c34e:	4299      	cmp	r1, r3
 800c350:	d10c      	bne.n	800c36c <memmove+0x2a>
 800c352:	bd10      	pop	{r4, pc}
 800c354:	4298      	cmp	r0, r3
 800c356:	d2f9      	bcs.n	800c34c <memmove+0xa>
 800c358:	1881      	adds	r1, r0, r2
 800c35a:	1ad2      	subs	r2, r2, r3
 800c35c:	42d3      	cmn	r3, r2
 800c35e:	d100      	bne.n	800c362 <memmove+0x20>
 800c360:	bd10      	pop	{r4, pc}
 800c362:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c366:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800c36a:	e7f7      	b.n	800c35c <memmove+0x1a>
 800c36c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c370:	f802 4f01 	strb.w	r4, [r2, #1]!
 800c374:	e7eb      	b.n	800c34e <memmove+0xc>
	...

0800c378 <_getpid>:
 800c378:	4b02      	ldr	r3, [pc, #8]	; (800c384 <_getpid+0xc>)
 800c37a:	2258      	movs	r2, #88	; 0x58
 800c37c:	601a      	str	r2, [r3, #0]
 800c37e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c382:	4770      	bx	lr
 800c384:	20003e6c 	.word	0x20003e6c

0800c388 <_kill>:
 800c388:	4b02      	ldr	r3, [pc, #8]	; (800c394 <_kill+0xc>)
 800c38a:	2258      	movs	r2, #88	; 0x58
 800c38c:	601a      	str	r2, [r3, #0]
 800c38e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c392:	4770      	bx	lr
 800c394:	20003e6c 	.word	0x20003e6c

0800c398 <_sbrk>:
 800c398:	4b04      	ldr	r3, [pc, #16]	; (800c3ac <_sbrk+0x14>)
 800c39a:	6819      	ldr	r1, [r3, #0]
 800c39c:	4602      	mov	r2, r0
 800c39e:	b909      	cbnz	r1, 800c3a4 <_sbrk+0xc>
 800c3a0:	4903      	ldr	r1, [pc, #12]	; (800c3b0 <_sbrk+0x18>)
 800c3a2:	6019      	str	r1, [r3, #0]
 800c3a4:	6818      	ldr	r0, [r3, #0]
 800c3a6:	4402      	add	r2, r0
 800c3a8:	601a      	str	r2, [r3, #0]
 800c3aa:	4770      	bx	lr
 800c3ac:	20003e5c 	.word	0x20003e5c
 800c3b0:	20003e70 	.word	0x20003e70

0800c3b4 <_exit>:
 800c3b4:	e7fe      	b.n	800c3b4 <_exit>
	...

0800c3b8 <_init>:
 800c3b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3ba:	bf00      	nop
 800c3bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c3be:	bc08      	pop	{r3}
 800c3c0:	469e      	mov	lr, r3
 800c3c2:	4770      	bx	lr

0800c3c4 <_fini>:
 800c3c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3c6:	bf00      	nop
 800c3c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c3ca:	bc08      	pop	{r3}
 800c3cc:	469e      	mov	lr, r3
 800c3ce:	4770      	bx	lr
